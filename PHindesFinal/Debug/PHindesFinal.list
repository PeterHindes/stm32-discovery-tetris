
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ac  08009118  08009118  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c4  0800a3c4  0000c26c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c4  0800a3c4  0000b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3cc  0800a3cc  0000c26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3cc  0800a3cc  0000b3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3d0  0800a3d0  0000b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  0800a3d4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c26c  2**0
                  CONTENTS
 10 .bss          00026024  2000026c  2000026c  0000c26c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026290  20026290  0000c26c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165e1  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2d  00000000  00000000  0002287d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  000262b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  000277b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b4e  00000000  00000000  000287d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b83e  00000000  00000000  00050327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16e6  00000000  00000000  0006bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d24b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d0  00000000  00000000  0014d290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00153660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009100 	.word	0x08009100

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000270 	.word	0x20000270
 80001ec:	08009100 	.word	0x08009100

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
//	initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000594:	f000 fa9c 	bl	8000ad0 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa59 	bl	8000a50 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800059e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fbdc 	bl	8000d60 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a8:	f000 fcdc 	bl	8000f64 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <ApplicationInit+0x2c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b2:	f000 f869 	bl	8000688 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000288 	.word	0x20000288

080005c0 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	085b      	lsrs	r3, r3, #1
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005e6:	883b      	ldrh	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	88fa      	ldrh	r2, [r7, #6]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005f8:	89ba      	ldrh	r2, [r7, #12]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 8000602:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800060a:	429a      	cmp	r2, r3
 800060c:	dd08      	ble.n	8000620 <Determine_Touch_Quadrant+0x60>
 800060e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000612:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000616:	425b      	negs	r3, r3
 8000618:	429a      	cmp	r2, r3
 800061a:	dd01      	ble.n	8000620 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 800061c:	2300      	movs	r3, #0
 800061e:	e02d      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000620:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000628:	429a      	cmp	r2, r3
 800062a:	dc08      	bgt.n	800063e <Determine_Touch_Quadrant+0x7e>
 800062c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000634:	425b      	negs	r3, r3
 8000636:	429a      	cmp	r2, r3
 8000638:	dd01      	ble.n	800063e <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800063a:	2301      	movs	r3, #1
 800063c:	e01e      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 800063e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000646:	429a      	cmp	r2, r3
 8000648:	dc08      	bgt.n	800065c <Determine_Touch_Quadrant+0x9c>
 800064a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800064e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000652:	425b      	negs	r3, r3
 8000654:	429a      	cmp	r2, r3
 8000656:	dc01      	bgt.n	800065c <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 8000658:	2302      	movs	r3, #2
 800065a:	e00f      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000664:	429a      	cmp	r2, r3
 8000666:	dd08      	ble.n	800067a <Determine_Touch_Quadrant+0xba>
 8000668:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800066c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000670:	425b      	negs	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	dc01      	bgt.n	800067a <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 8000676:	2303      	movs	r3, #3
 8000678:	e000      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800067a:	23ff      	movs	r3, #255	@ 0xff
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bc90      	pop	{r4, r7}
 8000684:	4770      	bx	lr
	...

08000688 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800069c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006a6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4807      	ldr	r0, [pc, #28]	@ (80006f0 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006d2:	f003 fcb7 	bl	8004044 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d6:	2028      	movs	r0, #40	@ 0x28
 80006d8:	f003 fc65 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006de:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	20000290 	.word	0x20000290
 80006f8:	0600000f 	.word	0x0600000f

080006fc <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000702:	2028      	movs	r0, #40	@ 0x28
 8000704:	f003 fc5d 	bl	8003fc2 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 800070c:	4b61      	ldr	r3, [pc, #388]	@ (8000894 <EXTI15_10_IRQHandler+0x198>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000712:	e006      	b.n	8000722 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000714:	204c      	movs	r0, #76	@ 0x4c
 8000716:	f002 ff74 	bl	8003602 <STMPE811_Read>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b5d      	ldr	r3, [pc, #372]	@ (8000894 <EXTI15_10_IRQHandler+0x198>)
 8000720:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000722:	4b5c      	ldr	r3, [pc, #368]	@ (8000894 <EXTI15_10_IRQHandler+0x198>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f4      	beq.n	8000714 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fc30 	bl	8000f90 <ReadRegisterFromTouchModule>
 8000730:	4603      	mov	r3, r0
 8000732:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000734:	2100      	movs	r1, #0
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fc38 	bl	8000fac <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800073c:	200b      	movs	r0, #11
 800073e:	f000 fc27 	bl	8000f90 <ReadRegisterFromTouchModule>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b54      	ldr	r3, [pc, #336]	@ (8000898 <EXTI15_10_IRQHandler+0x19c>)
 8000748:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800074a:	4b53      	ldr	r3, [pc, #332]	@ (8000898 <EXTI15_10_IRQHandler+0x19c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000754:	797b      	ldrb	r3, [r7, #5]
 8000756:	4619      	mov	r1, r3
 8000758:	200b      	movs	r0, #11
 800075a:	f000 fc27 	bl	8000fac <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800075e:	2040      	movs	r0, #64	@ 0x40
 8000760:	f000 fc16 	bl	8000f90 <ReadRegisterFromTouchModule>
 8000764:	4603      	mov	r3, r0
 8000766:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000768:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	da01      	bge.n	8000774 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000770:	2301      	movs	r3, #1
 8000772:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d065      	beq.n	8000846 <EXTI15_10_IRQHandler+0x14a>
	{
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 800077a:	4848      	ldr	r0, [pc, #288]	@ (800089c <EXTI15_10_IRQHandler+0x1a0>)
 800077c:	f000 fbfd 	bl	8000f7a <DetermineTouchPosition>
//		printf("\nPressed\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		printf("Tim: %u", __HAL_TIM_GET_COUNTER(&htim2));

		if (activeScreen == 0) {
 8000780:	4b47      	ldr	r3, [pc, #284]	@ (80008a0 <EXTI15_10_IRQHandler+0x1a4>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d130      	bne.n	80007ea <EXTI15_10_IRQHandler+0xee>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000788:	4b44      	ldr	r3, [pc, #272]	@ (800089c <EXTI15_10_IRQHandler+0x1a0>)
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	4b43      	ldr	r3, [pc, #268]	@ (800089c <EXTI15_10_IRQHandler+0x1a0>)
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000794:	b29b      	uxth	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f002 faad 	bl	8002cf8 <startClicked>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d057      	beq.n	8000854 <EXTI15_10_IRQHandler+0x158>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 80007a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007a8:	f000 fafc 	bl	8000da4 <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 80007ac:	483d      	ldr	r0, [pc, #244]	@ (80008a4 <EXTI15_10_IRQHandler+0x1a8>)
 80007ae:	f000 fb09 	bl	8000dc4 <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007b2:	4a3d      	ldr	r2, [pc, #244]	@ (80008a8 <EXTI15_10_IRQHandler+0x1ac>)
 80007b4:	21be      	movs	r1, #190	@ 0xbe
 80007b6:	201e      	movs	r0, #30
 80007b8:	f000 fba4 	bl	8000f04 <LCD_DisplayString>
				printf("Starting...\n");
 80007bc:	483a      	ldr	r0, [pc, #232]	@ (80008a8 <EXTI15_10_IRQHandler+0x1ac>)
 80007be:	f007 fc51 	bl	8008064 <puts>
//				HAL_Delay(200);
				activeScreen = 1;
 80007c2:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <EXTI15_10_IRQHandler+0x1a4>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	801a      	strh	r2, [r3, #0]
				initGame();
 80007c8:	f001 f840 	bl	800184c <initGame>
//				HAL_Delay(2);
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fac6 	bl	8000d60 <LCD_Clear>
				showGameScreen();
 80007d4:	f002 fac8 	bl	8002d68 <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007d8:	20ff      	movs	r0, #255	@ 0xff
 80007da:	f000 fd3d 	bl	8001258 <Draw_Arrows_On_Screen>

//				HAL_TIM_Base_Start_IT(& htim2);
//			    HAL_TIM_Base_Start(& htim5);
			    startTimers();
 80007de:	f002 f953 	bl	8002a88 <startTimers>

			    printf("Started Timers\n");
 80007e2:	4832      	ldr	r0, [pc, #200]	@ (80008ac <EXTI15_10_IRQHandler+0x1b0>)
 80007e4:	f007 fc3e 	bl	8008064 <puts>
 80007e8:	e034      	b.n	8000854 <EXTI15_10_IRQHandler+0x158>
			}
		} else if (activeScreen == 1) {
 80007ea:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <EXTI15_10_IRQHandler+0x1a4>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d130      	bne.n	8000854 <EXTI15_10_IRQHandler+0x158>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fab3 	bl	8000d60 <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <EXTI15_10_IRQHandler+0x1a0>)
 80007fc:	8818      	ldrh	r0, [r3, #0]
 80007fe:	4b27      	ldr	r3, [pc, #156]	@ (800089c <EXTI15_10_IRQHandler+0x1a0>)
 8000800:	885b      	ldrh	r3, [r3, #2]
 8000802:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000806:	b299      	uxth	r1, r3
 8000808:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800080c:	22f0      	movs	r2, #240	@ 0xf0
 800080e:	f7ff fed7 	bl	80005c0 <Determine_Touch_Quadrant>
 8000812:	4603      	mov	r3, r0
 8000814:	70fb      	strb	r3, [r7, #3]
			Draw_Arrows_On_Screen(activeArrow);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fd1d 	bl	8001258 <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			handleInput(& board, & currentPiece, activeArrow);
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	461a      	mov	r2, r3
 8000822:	4923      	ldr	r1, [pc, #140]	@ (80008b0 <EXTI15_10_IRQHandler+0x1b4>)
 8000824:	4823      	ldr	r0, [pc, #140]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 8000826:	f001 f9fb 	bl	8001c20 <handleInput>
			if (activeArrow == 2){
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d103      	bne.n	8000838 <EXTI15_10_IRQHandler+0x13c>
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <EXTI15_10_IRQHandler+0x1bc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
			}

			showGameScreen();
 8000838:	f002 fa96 	bl	8002d68 <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fd0a 	bl	8001258 <Draw_Arrows_On_Screen>
 8000844:	e006      	b.n	8000854 <EXTI15_10_IRQHandler+0x158>
		}
	} else {
		/* Touch not pressed */
		if (activeScreen == 1) {
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <EXTI15_10_IRQHandler+0x1a4>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d102      	bne.n	8000854 <EXTI15_10_IRQHandler+0x158>
			Draw_Arrows_On_Screen(-1);
 800084e:	20ff      	movs	r0, #255	@ 0xff
 8000850:	f000 fd02 	bl	8001258 <Draw_Arrows_On_Screen>
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000854:	2101      	movs	r1, #1
 8000856:	204b      	movs	r0, #75	@ 0x4b
 8000858:	f002 fee4 	bl	8003624 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800085c:	2100      	movs	r1, #0
 800085e:	204b      	movs	r0, #75	@ 0x4b
 8000860:	f002 fee0 	bl	8003624 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	4619      	mov	r1, r3
 8000868:	200a      	movs	r0, #10
 800086a:	f000 fb9f 	bl	8000fac <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800086e:	2103      	movs	r1, #3
 8000870:	4812      	ldr	r0, [pc, #72]	@ (80008bc <EXTI15_10_IRQHandler+0x1c0>)
 8000872:	f003 fbcf 	bl	8004014 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	@ 0x28
 8000878:	f003 fbbd 	bl	8003ff6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	@ 0x28
 800087e:	f003 fb92 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000882:	797b      	ldrb	r3, [r7, #5]
 8000884:	4619      	mov	r1, r3
 8000886:	200b      	movs	r0, #11
 8000888:	f000 fb90 	bl	8000fac <WriteDataToTouchModule>

}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000029c 	.word	0x2000029c
 8000898:	20000298 	.word	0x20000298
 800089c:	20000288 	.word	0x20000288
 80008a0:	20026034 	.word	0x20026034
 80008a4:	20000004 	.word	0x20000004
 80008a8:	0800913c 	.word	0x0800913c
 80008ac:	08009148 	.word	0x08009148
 80008b0:	20025e9c 	.word	0x20025e9c
 80008b4:	20025b7c 	.word	0x20025b7c
 80008b8:	20025f9c 	.word	0x20025f9c
 80008bc:	20000290 	.word	0x20000290

080008c0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a59      	ldr	r2, [pc, #356]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d6:	4b57      	ldr	r3, [pc, #348]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b53      	ldr	r3, [pc, #332]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a52      	ldr	r2, [pc, #328]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b50      	ldr	r3, [pc, #320]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b4c      	ldr	r3, [pc, #304]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a4b      	ldr	r2, [pc, #300]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b49      	ldr	r3, [pc, #292]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b45      	ldr	r3, [pc, #276]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a44      	ldr	r2, [pc, #272]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b42      	ldr	r3, [pc, #264]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b3b      	ldr	r3, [pc, #236]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a36      	ldr	r2, [pc, #216]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 800095c:	f043 0320 	orr.w	r3, r3, #32
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0320 	and.w	r3, r3, #32
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a2f      	ldr	r2, [pc, #188]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <LCD_GPIO_Init+0x174>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800098a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800098e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800099c:	230e      	movs	r3, #14
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <LCD_GPIO_Init+0x178>)
 80009a8:	f003 fb4c 	bl	8004044 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009b0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <LCD_GPIO_Init+0x17c>)
 80009ba:	f003 fb43 	bl	8004044 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481d      	ldr	r0, [pc, #116]	@ (8000a40 <LCD_GPIO_Init+0x180>)
 80009cc:	f003 fb3a 	bl	8004044 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009d0:	2348      	movs	r3, #72	@ 0x48
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <LCD_GPIO_Init+0x184>)
 80009dc:	f003 fb32 	bl	8004044 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <LCD_GPIO_Init+0x188>)
 80009ee:	f003 fb29 	bl	8004044 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009f2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009f6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <LCD_GPIO_Init+0x18c>)
 8000a00:	f003 fb20 	bl	8004044 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <LCD_GPIO_Init+0x17c>)
 8000a14:	f003 fb16 	bl	8004044 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <LCD_GPIO_Init+0x18c>)
 8000a26:	f003 fb0d 	bl	8004044 <HAL_GPIO_Init>
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40021400 	.word	0x40021400
 8000a4c:	40021800 	.word	0x40021800

08000a50 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	@ 0x40
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a5e:	23f0      	movs	r3, #240	@ 0xf0
 8000a60:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a66:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a6a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a70:	23ff      	movs	r3, #255	@ 0xff
 8000a72:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <LTCD_Layer_Init+0x78>)
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a8c:	23f0      	movs	r3, #240	@ 0xf0
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a90:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a94:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4806      	ldr	r0, [pc, #24]	@ (8000acc <LTCD_Layer_Init+0x7c>)
 8000ab2:	f004 febf 	bl	8005834 <HAL_LTDC_ConfigLayer>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000abc:	f000 fa4c 	bl	8000f58 <LCD_Error_Handler>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3740      	adds	r7, #64	@ 0x40
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000037c 	.word	0x2000037c
 8000acc:	200002a0 	.word	0x200002a0

08000ad0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <LTCD__Init+0xb4>)
 8000ad8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <LTCD__Init+0xb0>)
 8000adc:	2209      	movs	r2, #9
 8000ade:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <LTCD__Init+0xb0>)
 8000ae8:	221d      	movs	r2, #29
 8000aea:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <LTCD__Init+0xb0>)
 8000aee:	2203      	movs	r2, #3
 8000af0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <LTCD__Init+0xb0>)
 8000af4:	f240 120d 	movw	r2, #269	@ 0x10d
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <LTCD__Init+0xb0>)
 8000afc:	f240 1243 	movw	r2, #323	@ 0x143
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b04:	f240 1217 	movw	r2, #279	@ 0x117
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b0c:	f240 1247 	movw	r2, #327	@ 0x147
 8000b10:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b32:	22c0      	movs	r2, #192	@ 0xc0
 8000b34:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <LTCD__Init+0xb8>)
 8000b46:	f005 fccf 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b62:	f7ff fead 	bl	80008c0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <LTCD__Init+0xb0>)
 8000b68:	f004 fd94 	bl	8005694 <HAL_LTDC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b72:	f000 f9f1 	bl	8000f58 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b76:	f001 f9b9 	bl	8001eec <ili9341_Init>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002a0 	.word	0x200002a0
 8000b84:	40016800 	.word	0x40016800
 8000b88:	20000348 	.word	0x20000348

08000b8c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	460b      	mov	r3, r1
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	807b      	strh	r3, [r7, #2]
		HAL_Delay(1);
		drawn = 0;
	}
#endif
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2bef      	cmp	r3, #239	@ 0xef
 8000ba2:	d80f      	bhi.n	8000bc4 <LCD_Draw_Pixel+0x38>
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000baa:	d20b      	bcs.n	8000bc4 <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000bac:	88ba      	ldrh	r2, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4904      	ldr	r1, [pc, #16]	@ (8000bd0 <LCD_Draw_Pixel+0x44>)
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	2000037c 	.word	0x2000037c

08000bd4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4623      	mov	r3, r4
 8000be4:	80fb      	strh	r3, [r7, #6]
 8000be6:	4603      	mov	r3, r0
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	807b      	strh	r3, [r7, #2]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	81fb      	strh	r3, [r7, #14]
 8000bfa:	e034      	b.n	8000c66 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	425b      	negs	r3, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	81bb      	strh	r3, [r7, #12]
 8000c04:	e024      	b.n	8000c50 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c0e:	fb03 f202 	mul.w	r2, r3, r2
 8000c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c16:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	441a      	add	r2, r3
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	8879      	ldrh	r1, [r7, #2]
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dc0b      	bgt.n	8000c44 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c2c:	89ba      	ldrh	r2, [r7, #12]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4413      	add	r3, r2
 8000c32:	b298      	uxth	r0, r3
 8000c34:	89fa      	ldrh	r2, [r7, #14]
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	883a      	ldrh	r2, [r7, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f7ff ffa4 	bl	8000b8c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	ddd5      	ble.n	8000c06 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	3301      	adds	r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	81fb      	strh	r3, [r7, #14]
 8000c66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	ddc5      	ble.n	8000bfc <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}

08000c7a <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4604      	mov	r4, r0
 8000c82:	4608      	mov	r0, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	461a      	mov	r2, r3
 8000c88:	4623      	mov	r3, r4
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	80bb      	strh	r3, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	81fb      	strh	r3, [r7, #14]
 8000c9c:	e01c      	b.n	8000cd8 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	81bb      	strh	r3, [r7, #12]
 8000ca2:	e00b      	b.n	8000cbc <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	89f9      	ldrh	r1, [r7, #14]
 8000ca8:	8c3a      	ldrh	r2, [r7, #32]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff6e 	bl	8000b8c <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000cb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	81bb      	strh	r3, [r7, #12]
 8000cbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cc0:	88f9      	ldrh	r1, [r7, #6]
 8000cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cc6:	440b      	add	r3, r1
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbeb      	blt.n	8000ca4 <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000ccc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	81fb      	strh	r3, [r7, #14]
 8000cd8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cdc:	88b9      	ldrh	r1, [r7, #4]
 8000cde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ce2:	440b      	add	r3, r1
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbda      	blt.n	8000c9e <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}

08000cf2 <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000cf2:	b590      	push	{r4, r7, lr}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e01a      	b.n	8000d4c <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	e010      	b.n	8000d3e <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4413      	add	r3, r2
 8000d24:	b298      	uxth	r0, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	88ba      	ldrh	r2, [r7, #4]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	883a      	ldrh	r2, [r7, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff ff2a 	bl	8000b8c <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	ddea      	ble.n	8000d1c <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbe0      	blt.n	8000d16 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd90      	pop	{r4, r7, pc}
	...

08000d60 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10e      	bne.n	8000d94 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	e007      	b.n	8000d8c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d7c:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <LCD_Clear+0x40>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	88ba      	ldrh	r2, [r7, #4]
 8000d82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d92:	d3f3      	bcc.n	8000d7c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	2000037c 	.word	0x2000037c

08000da4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <LCD_SetTextColor+0x1c>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	8013      	strh	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <LCD_SetFont+0x1c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000378 	.word	0x20000378

08000de4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	603a      	str	r2, [r7, #0]
 8000dee:	80fb      	strh	r3, [r7, #6]
 8000df0:	460b      	mov	r3, r1
 8000df2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e04c      	b.n	8000e9c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e03f      	b.n	8000e88 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <LCD_Draw_Char+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	889b      	ldrh	r3, [r3, #4]
 8000e1a:	4a27      	ldr	r2, [pc, #156]	@ (8000eb8 <LCD_Draw_Char+0xd4>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	fa42 f303 	asr.w	r3, r2, r3
 8000e30:	400b      	ands	r3, r1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <LCD_Draw_Char+0x5c>
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <LCD_Draw_Char+0xd0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	889b      	ldrh	r3, [r3, #4]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	d920      	bls.n	8000e82 <LCD_Draw_Char+0x9e>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	fa42 f303 	asr.w	r3, r2, r3
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d104      	bne.n	8000e64 <LCD_Draw_Char+0x80>
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <LCD_Draw_Char+0xd0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	2b0c      	cmp	r3, #12
 8000e62:	d80e      	bhi.n	8000e82 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b298      	uxth	r0, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <LCD_Draw_Char+0xd8>)
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fe85 	bl	8000b8c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <LCD_Draw_Char+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	889b      	ldrh	r3, [r3, #4]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d3b8      	bcc.n	8000e08 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <LCD_Draw_Char+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	88db      	ldrh	r3, [r3, #6]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d3ab      	bcc.n	8000e02 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000378 	.word	0x20000378
 8000eb8:	aaaaaaab 	.word	0xaaaaaaab
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	80bb      	strh	r3, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	3b20      	subs	r3, #32
 8000ed6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <LCD_DisplayChar+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <LCD_DisplayChar+0x40>)
 8000ee2:	6809      	ldr	r1, [r1, #0]
 8000ee4:	88c9      	ldrh	r1, [r1, #6]
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	441a      	add	r2, r3
 8000eee:	88b9      	ldrh	r1, [r7, #4]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff76 	bl	8000de4 <LCD_Draw_Char>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000378 	.word	0x20000378

08000f04 <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000f10:	2310      	movs	r3, #16
 8000f12:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	e011      	b.n	8000f42 <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	b298      	uxth	r0, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	b299      	uxth	r1, r3
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f7ff ffc6 	bl	8000ec0 <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1e7      	bne.n	8000f1e <LCD_DisplayString+0x1a>
    }
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <LCD_Error_Handler+0x8>

08000f64 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f68:	f002 fa84 	bl	8003474 <STMPE811_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d001      	beq.n	8000f76 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f72:	bf00      	nop
 8000f74:	e7fd      	b.n	8000f72 <InitializeLCDTouch+0xe>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f002 fb60 	bl	8003648 <STMPE811_DetermineTouchPosition>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fb30 	bl	8003602 <STMPE811_Read>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fb2e 	bl	8003624 <STMPE811_Write>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4623      	mov	r3, r4
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	807b      	strh	r3, [r7, #2]
 8000fea:	4613      	mov	r3, r2
 8000fec:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00c      	b.n	800100e <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	883a      	ldrh	r2, [r7, #0]
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fdc2 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbee      	blt.n	8000ff4 <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	e01e      	b.n	800105a <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	b29b      	uxth	r3, r3
 8001020:	88fa      	ldrh	r2, [r7, #6]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b298      	uxth	r0, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	b29a      	uxth	r2, r3
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	b29b      	uxth	r3, r3
 8001030:	883a      	ldrh	r2, [r7, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fdaa 	bl	8000b8c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	b29a      	uxth	r2, r3
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4413      	add	r3, r2
 8001040:	b298      	uxth	r0, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	b29a      	uxth	r2, r3
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fd9c 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4293      	cmp	r3, r2
 8001066:	dbd9      	blt.n	800101c <Draw_Arrow_Up+0x4c>
    }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	4604      	mov	r4, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4611      	mov	r1, r2
 800107e:	461a      	mov	r2, r3
 8001080:	4623      	mov	r3, r4
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	4603      	mov	r3, r0
 8001086:	80bb      	strh	r3, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e00c      	b.n	80010b0 <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop - i, color);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	b29b      	uxth	r3, r3
 800109a:	88ba      	ldrh	r2, [r7, #4]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b299      	uxth	r1, r3
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd71 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbee      	blt.n	8001096 <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e01e      	b.n	80010fc <Draw_Arrow_Down+0x8a>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i , color); // Left diagonal
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4413      	add	r3, r2
 80010c6:	b298      	uxth	r0, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	88ba      	ldrh	r2, [r7, #4]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	883a      	ldrh	r2, [r7, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd59 	bl	8000b8c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i, color); // Right diagonal
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	88fa      	ldrh	r2, [r7, #6]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	b298      	uxth	r0, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	88ba      	ldrh	r2, [r7, #4]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	883a      	ldrh	r2, [r7, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd4b 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	085b      	lsrs	r3, r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4293      	cmp	r3, r2
 8001108:	dbd9      	blt.n	80010be <Draw_Arrow_Down+0x4c>
    }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}

08001114 <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4623      	mov	r3, r4
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e00c      	b.n	8001152 <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	b29a      	uxth	r2, r3
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	883a      	ldrh	r2, [r7, #0]
 8001144:	88b9      	ldrh	r1, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd20 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbee      	blt.n	8001138 <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	e01e      	b.n	800119e <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	b29a      	uxth	r2, r3
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4413      	add	r3, r2
 8001168:	b298      	uxth	r0, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	b29b      	uxth	r3, r3
 800116e:	88ba      	ldrh	r2, [r7, #4]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	883a      	ldrh	r2, [r7, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fd08 	bl	8000b8c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	b298      	uxth	r0, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	b29a      	uxth	r2, r3
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	b29b      	uxth	r3, r3
 8001190:	883a      	ldrh	r2, [r7, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fcfa 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3301      	adds	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	dbd9      	blt.n	8001160 <Draw_Arrow_Left+0x4c>
    }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}

080011b6 <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80011b6:	b590      	push	{r4, r7, lr}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4604      	mov	r4, r0
 80011be:	4608      	mov	r0, r1
 80011c0:	4611      	mov	r1, r2
 80011c2:	461a      	mov	r2, r3
 80011c4:	4623      	mov	r3, r4
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4603      	mov	r3, r0
 80011ca:	80bb      	strh	r3, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e00c      	b.n	80011f4 <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	883a      	ldrh	r2, [r7, #0]
 80011e6:	88b9      	ldrh	r1, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fccf 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbee      	blt.n	80011da <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e01e      	b.n	8001240 <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b29b      	uxth	r3, r3
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b298      	uxth	r0, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	b29b      	uxth	r3, r3
 8001210:	88ba      	ldrh	r2, [r7, #4]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	883a      	ldrh	r2, [r7, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fcb7 	bl	8000b8c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	b29b      	uxth	r3, r3
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b298      	uxth	r0, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	b29a      	uxth	r2, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	883a      	ldrh	r2, [r7, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fca9 	bl	8000b8c <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3301      	adds	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4293      	cmp	r3, r2
 800124c:	dbd9      	blt.n	8001202 <Draw_Arrow_Right+0x4c>
    }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <Draw_Arrows_On_Screen+0x16>
 8001268:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800126c:	e001      	b.n	8001272 <Draw_Arrows_On_Screen+0x1a>
 800126e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001272:	2214      	movs	r2, #20
 8001274:	210a      	movs	r1, #10
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f7ff feaa 	bl	8000fd0 <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d102      	bne.n	8001288 <Draw_Arrows_On_Screen+0x30>
 8001282:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001286:	e001      	b.n	800128c <Draw_Arrows_On_Screen+0x34>
 8001288:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128c:	2214      	movs	r2, #20
 800128e:	21a0      	movs	r1, #160	@ 0xa0
 8001290:	20e6      	movs	r0, #230	@ 0xe6
 8001292:	f7ff ff90 	bl	80011b6 <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d102      	bne.n	80012a2 <Draw_Arrows_On_Screen+0x4a>
 800129c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012a0:	e001      	b.n	80012a6 <Draw_Arrows_On_Screen+0x4e>
 80012a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a6:	2214      	movs	r2, #20
 80012a8:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012ac:	2078      	movs	r0, #120	@ 0x78
 80012ae:	f7ff fee0 	bl	8001072 <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d102      	bne.n	80012be <Draw_Arrows_On_Screen+0x66>
 80012b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012bc:	e001      	b.n	80012c2 <Draw_Arrows_On_Screen+0x6a>
 80012be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c2:	2214      	movs	r2, #20
 80012c4:	21a0      	movs	r1, #160	@ 0xa0
 80012c6:	200a      	movs	r0, #10
 80012c8:	f7ff ff24 	bl	8001114 <Draw_Arrow_Left>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	4a33      	ldr	r2, [pc, #204]	@ (80013c4 <Draw_Tetris_Block+0xf0>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 80012fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001302:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001306:	88b9      	ldrh	r1, [r7, #4]
 8001308:	88f8      	ldrh	r0, [r7, #6]
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4623      	mov	r3, r4
 8001310:	f7ff fcb3 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 8001314:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001318:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	8c3b      	ldrh	r3, [r7, #32]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4623      	mov	r3, r4
 8001326:	f7ff fca8 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 800132a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800132e:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001332:	88b9      	ldrh	r1, [r7, #4]
 8001334:	88f8      	ldrh	r0, [r7, #6]
 8001336:	8c3b      	ldrh	r3, [r7, #32]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4623      	mov	r3, r4
 800133c:	f7ff fc9d 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 8001340:	88ba      	ldrh	r2, [r7, #4]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	4413      	add	r3, r2
 8001346:	b29a      	uxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b299      	uxth	r1, r3
 800134e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001352:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001356:	88f8      	ldrh	r0, [r7, #6]
 8001358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4623      	mov	r3, r4
 800135e:	f7ff fc8c 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	4413      	add	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b298      	uxth	r0, r3
 8001370:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001374:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001378:	88b9      	ldrh	r1, [r7, #4]
 800137a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4623      	mov	r3, r4
 8001380:	f7ff fc7b 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 8001384:	88ba      	ldrh	r2, [r7, #4]
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	3b01      	subs	r3, #1
 800138e:	b299      	uxth	r1, r3
 8001390:	8c3b      	ldrh	r3, [r7, #32]
 8001392:	89fa      	ldrh	r2, [r7, #14]
 8001394:	88f8      	ldrh	r0, [r7, #6]
 8001396:	f7ff fcac 	bl	8000cf2 <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 800139a:	88fa      	ldrh	r2, [r7, #6]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4413      	add	r3, r2
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b298      	uxth	r0, r3
 80013a8:	88ba      	ldrh	r2, [r7, #4]
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b299      	uxth	r1, r3
 80013b4:	8c3b      	ldrh	r3, [r7, #32]
 80013b6:	89fa      	ldrh	r2, [r7, #14]
 80013b8:	f7ff fc9b 	bl	8000cf2 <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	aaaaaaab 	.word	0xaaaaaaab

080013c8 <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b08d      	sub	sp, #52	@ 0x34
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013dc:	e047      	b.n	800146e <Fill_Tetris_Board+0xa6>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013e2:	e03e      	b.n	8001462 <Fill_Tetris_Board+0x9a>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 80013e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013e6:	461a      	mov	r2, r3
 80013e8:	0052      	lsls	r2, r2, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4413      	add	r3, r2
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013f8:	4413      	add	r3, r2
 80013fa:	82bb      	strh	r3, [r7, #20]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80013fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013fe:	461a      	mov	r2, r3
 8001400:	0052      	lsls	r2, r2, #1
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	b29a      	uxth	r2, r3
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	b29a      	uxth	r2, r3
 800140e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001410:	4413      	add	r3, r2
 8001412:	827b      	strh	r3, [r7, #18]

            // Get the colors for this position
            int index = board->grid[row][col];
 8001414:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001416:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4403      	add	r3, r0
 8001424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001428:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <Fill_Tetris_Board+0x94>
				uint16_t * colors = piceIndexToColors(index-1);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3b01      	subs	r3, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fbe7 	bl	8002c08 <piceIndexToColors>
 800143a:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	881c      	ldrh	r4, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3302      	adds	r3, #2
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	3204      	adds	r2, #4
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	8a79      	ldrh	r1, [r7, #18]
 800144e:	8ab8      	ldrh	r0, [r7, #20]
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	220c      	movs	r2, #12
 8001458:	f7ff ff3c 	bl	80012d4 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 800145c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800145e:	3301      	adds	r3, #1
 8001460:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001464:	2b09      	cmp	r3, #9
 8001466:	d9bd      	bls.n	80013e4 <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001468:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800146a:	3301      	adds	r3, #1
 800146c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800146e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001470:	2b13      	cmp	r3, #19
 8001472:	d9b4      	bls.n	80013de <Fill_Tetris_Board+0x16>
            }
        }
    }

    // Draw grey squares around the board's borders
    uint16_t greyColor = 0x73AE;
 8001474:	f247 33ae 	movw	r3, #29614	@ 0x73ae
 8001478:	83fb      	strh	r3, [r7, #30]
    uint16_t greyColorHilight = 0x9CD3;
 800147a:	f649 43d3 	movw	r3, #40147	@ 0x9cd3
 800147e:	83bb      	strh	r3, [r7, #28]
    uint16_t greyColorShadow = 0x3186;
 8001480:	f243 1386 	movw	r3, #12678	@ 0x3186
 8001484:	837b      	strh	r3, [r7, #26]
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 8001486:	2300      	movs	r3, #0
 8001488:	847b      	strh	r3, [r7, #34]	@ 0x22
 800148a:	e02b      	b.n	80014e4 <Fill_Tetris_Board+0x11c>
        uint16_t xPos = startX - BLOCK_SIZE + col * BLOCK_SIZE + col - 1;
 800148c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800148e:	461a      	mov	r2, r3
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	b29a      	uxth	r2, r3
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014a0:	4413      	add	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b0d      	subs	r3, #13
 80014a6:	82fb      	strh	r3, [r7, #22]

        // Top border
        Draw_Tetris_Block(xPos, startY - BLOCK_SIZE - 1, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014a8:	883b      	ldrh	r3, [r7, #0]
 80014aa:	3b0d      	subs	r3, #13
 80014ac:	b299      	uxth	r1, r3
 80014ae:	8bfa      	ldrh	r2, [r7, #30]
 80014b0:	8af8      	ldrh	r0, [r7, #22]
 80014b2:	8b7b      	ldrh	r3, [r7, #26]
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	8bbb      	ldrh	r3, [r7, #28]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4613      	mov	r3, r2
 80014bc:	220c      	movs	r2, #12
 80014be:	f7ff ff09 	bl	80012d4 <Draw_Tetris_Block>

        // Bottom border
        Draw_Tetris_Block(xPos, startY + BOARD_HEIGHT * BLOCK_SIZE + BOARD_HEIGHT, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80014c8:	b299      	uxth	r1, r3
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	8af8      	ldrh	r0, [r7, #22]
 80014ce:	8b7b      	ldrh	r3, [r7, #26]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	8bbb      	ldrh	r3, [r7, #28]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	220c      	movs	r2, #12
 80014da:	f7ff fefb 	bl	80012d4 <Draw_Tetris_Block>
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 80014de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014e0:	3301      	adds	r3, #1
 80014e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80014e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014e6:	2b0b      	cmp	r3, #11
 80014e8:	d9d0      	bls.n	800148c <Fill_Tetris_Board+0xc4>
    }
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	843b      	strh	r3, [r7, #32]
 80014ee:	e028      	b.n	8001542 <Fill_Tetris_Board+0x17a>
        uint16_t yPos = startY + row * BLOCK_SIZE + row;
 80014f0:	8c3b      	ldrh	r3, [r7, #32]
 80014f2:	461a      	mov	r2, r3
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	883b      	ldrh	r3, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	b29a      	uxth	r2, r3
 8001502:	8c3b      	ldrh	r3, [r7, #32]
 8001504:	4413      	add	r3, r2
 8001506:	833b      	strh	r3, [r7, #24]

        // Left border
        Draw_Tetris_Block(startX - BLOCK_SIZE - 1, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	3b0d      	subs	r3, #13
 800150c:	b298      	uxth	r0, r3
 800150e:	8bfa      	ldrh	r2, [r7, #30]
 8001510:	8b39      	ldrh	r1, [r7, #24]
 8001512:	8b7b      	ldrh	r3, [r7, #26]
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	8bbb      	ldrh	r3, [r7, #28]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	220c      	movs	r2, #12
 800151e:	f7ff fed9 	bl	80012d4 <Draw_Tetris_Block>

        // Right border
        Draw_Tetris_Block(startX + BOARD_WIDTH * BLOCK_SIZE + BOARD_WIDTH, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	3382      	adds	r3, #130	@ 0x82
 8001526:	b298      	uxth	r0, r3
 8001528:	8bfa      	ldrh	r2, [r7, #30]
 800152a:	8b39      	ldrh	r1, [r7, #24]
 800152c:	8b7b      	ldrh	r3, [r7, #26]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	8bbb      	ldrh	r3, [r7, #28]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	220c      	movs	r2, #12
 8001538:	f7ff fecc 	bl	80012d4 <Draw_Tetris_Block>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 800153c:	8c3b      	ldrh	r3, [r7, #32]
 800153e:	3301      	adds	r3, #1
 8001540:	843b      	strh	r3, [r7, #32]
 8001542:	8c3b      	ldrh	r3, [r7, #32]
 8001544:	2b13      	cmp	r3, #19
 8001546:	d9d3      	bls.n	80014f0 <Fill_Tetris_Board+0x128>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	372c      	adds	r7, #44	@ 0x2c
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
	...

08001554 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001566:	2300      	movs	r3, #0
 8001568:	82fb      	strh	r3, [r7, #22]
 800156a:	e047      	b.n	80015fc <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 800156c:	2300      	movs	r3, #0
 800156e:	82bb      	strh	r3, [r7, #20]
 8001570:	e03e      	b.n	80015f0 <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001572:	8abb      	ldrh	r3, [r7, #20]
 8001574:	461a      	mov	r2, r3
 8001576:	0052      	lsls	r2, r2, #1
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b29a      	uxth	r2, r3
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	b29a      	uxth	r2, r3
 8001584:	8abb      	ldrh	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 800158a:	8afb      	ldrh	r3, [r7, #22]
 800158c:	461a      	mov	r2, r3
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	b29a      	uxth	r2, r3
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	8afb      	ldrh	r3, [r7, #22]
 800159e:	4413      	add	r3, r2
 80015a0:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 80015a2:	79f9      	ldrb	r1, [r7, #7]
 80015a4:	8afa      	ldrh	r2, [r7, #22]
 80015a6:	8abb      	ldrh	r3, [r7, #20]
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <DrawTetrominoByIndex+0xb8>)
 80015aa:	0089      	lsls	r1, r1, #2
 80015ac:	440a      	add	r2, r1
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015b6:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fb20 	bl	8002c08 <piceIndexToColors>
 80015c8:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	881c      	ldrh	r4, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3302      	adds	r3, #2
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	3204      	adds	r2, #4
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	8a39      	ldrh	r1, [r7, #16]
 80015dc:	8a78      	ldrh	r0, [r7, #18]
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4623      	mov	r3, r4
 80015e4:	220c      	movs	r2, #12
 80015e6:	f7ff fe75 	bl	80012d4 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80015ea:	8abb      	ldrh	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	82bb      	strh	r3, [r7, #20]
 80015f0:	8abb      	ldrh	r3, [r7, #20]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d9bd      	bls.n	8001572 <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	3301      	adds	r3, #1
 80015fa:	82fb      	strh	r3, [r7, #22]
 80015fc:	8afb      	ldrh	r3, [r7, #22]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d9b4      	bls.n	800156c <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000010 	.word	0x20000010

08001610 <DrawTetromino>:
void DrawTetromino(Piece * piece, uint16_t startX, uint16_t startY)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001620:	2300      	movs	r3, #0
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e044      	b.n	80016b0 <DrawTetromino+0xa0>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001626:	2300      	movs	r3, #0
 8001628:	82bb      	strh	r3, [r7, #20]
 800162a:	e03b      	b.n	80016a4 <DrawTetromino+0x94>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 800162c:	8abb      	ldrh	r3, [r7, #20]
 800162e:	461a      	mov	r2, r3
 8001630:	0052      	lsls	r2, r2, #1
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	b29a      	uxth	r2, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4413      	add	r3, r2
 800163c:	b29a      	uxth	r2, r3
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	461a      	mov	r2, r3
 8001648:	0052      	lsls	r2, r2, #1
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	b29a      	uxth	r2, r3
 8001650:	883b      	ldrh	r3, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	8afb      	ldrh	r3, [r7, #22]
 8001658:	4413      	add	r3, r2
 800165a:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = piece->matrix[row][col];
 800165c:	8af9      	ldrh	r1, [r7, #22]
 800165e:	8aba      	ldrh	r2, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0089      	lsls	r1, r1, #2
 8001664:	440a      	add	r2, r1
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <DrawTetromino+0x8e>
				uint16_t * colors = piceIndexToColors(index-1);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b01      	subs	r3, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f001 fac6 	bl	8002c08 <piceIndexToColors>
 800167c:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	881c      	ldrh	r4, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3302      	adds	r3, #2
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	3204      	adds	r2, #4
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	8a39      	ldrh	r1, [r7, #16]
 8001690:	8a78      	ldrh	r0, [r7, #18]
 8001692:	9201      	str	r2, [sp, #4]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	220c      	movs	r2, #12
 800169a:	f7ff fe1b 	bl	80012d4 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 800169e:	8abb      	ldrh	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	82bb      	strh	r3, [r7, #20]
 80016a4:	8abb      	ldrh	r3, [r7, #20]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d9c0      	bls.n	800162c <DrawTetromino+0x1c>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	3301      	adds	r3, #1
 80016ae:	82fb      	strh	r3, [r7, #22]
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d9b7      	bls.n	8001626 <DrawTetromino+0x16>
            }
        }
    }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd90      	pop	{r4, r7, pc}

080016c0 <LCD_Draw_Rounded_Rectangle_Fill>:

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4623      	mov	r3, r4
 80016d0:	80fb      	strh	r3, [r7, #6]
 80016d2:	4603      	mov	r3, r0
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	8b3b      	ldrh	r3, [r7, #24]
 80016e2:	4413      	add	r3, r2
 80016e4:	b298      	uxth	r0, r3
 80016e6:	88ba      	ldrh	r2, [r7, #4]
 80016e8:	8b3b      	ldrh	r3, [r7, #24]
 80016ea:	4413      	add	r3, r2
 80016ec:	b299      	uxth	r1, r3
 80016ee:	8b3b      	ldrh	r3, [r7, #24]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	887a      	ldrh	r2, [r7, #2]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b21c      	sxth	r4, r3
 80016fc:	8b3b      	ldrh	r3, [r7, #24]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	883a      	ldrh	r2, [r7, #0]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	b21a      	sxth	r2, r3
 800170a:	8bbb      	ldrh	r3, [r7, #28]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4613      	mov	r3, r2
 8001710:	4622      	mov	r2, r4
 8001712:	f7ff fab2 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	4413      	add	r3, r2
 800171c:	b298      	uxth	r0, r3
 800171e:	8b3b      	ldrh	r3, [r7, #24]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001730:	88b9      	ldrh	r1, [r7, #4]
 8001732:	8bbb      	ldrh	r3, [r7, #28]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4623      	mov	r3, r4
 8001738:	f7ff fa9f 	bl	8000c7a <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	8b3b      	ldrh	r3, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	b298      	uxth	r0, r3
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	883b      	ldrh	r3, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	8b3b      	ldrh	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b299      	uxth	r1, r3
 8001752:	8b3b      	ldrh	r3, [r7, #24]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	887a      	ldrh	r2, [r7, #2]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	b21a      	sxth	r2, r3
 8001760:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001764:	8bbb      	ldrh	r3, [r7, #28]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4623      	mov	r3, r4
 800176a:	f7ff fa86 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 800176e:	88ba      	ldrh	r2, [r7, #4]
 8001770:	8b3b      	ldrh	r3, [r7, #24]
 8001772:	4413      	add	r3, r2
 8001774:	b299      	uxth	r1, r3
 8001776:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800177a:	8b3b      	ldrh	r3, [r7, #24]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	883a      	ldrh	r2, [r7, #0]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	b21a      	sxth	r2, r3
 8001788:	88f8      	ldrh	r0, [r7, #6]
 800178a:	8bbb      	ldrh	r3, [r7, #28]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	4622      	mov	r2, r4
 8001792:	f7ff fa72 	bl	8000c7a <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4413      	add	r3, r2
 800179c:	b29a      	uxth	r2, r3
 800179e:	8b3b      	ldrh	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b298      	uxth	r0, r3
 80017a4:	88ba      	ldrh	r2, [r7, #4]
 80017a6:	8b3b      	ldrh	r3, [r7, #24]
 80017a8:	4413      	add	r3, r2
 80017aa:	b299      	uxth	r1, r3
 80017ac:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80017b0:	8b3b      	ldrh	r3, [r7, #24]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	883a      	ldrh	r2, [r7, #0]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21a      	sxth	r2, r3
 80017be:	8bbb      	ldrh	r3, [r7, #28]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	4622      	mov	r2, r4
 80017c6:	f7ff fa58 	bl	8000c7a <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	8b3b      	ldrh	r3, [r7, #24]
 80017ce:	4413      	add	r3, r2
 80017d0:	b298      	uxth	r0, r3
 80017d2:	88ba      	ldrh	r2, [r7, #4]
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	4413      	add	r3, r2
 80017d8:	b299      	uxth	r1, r3
 80017da:	8bbb      	ldrh	r3, [r7, #28]
 80017dc:	8b3a      	ldrh	r2, [r7, #24]
 80017de:	f7ff f9f9 	bl	8000bd4 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	8b3b      	ldrh	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b298      	uxth	r0, r3
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	8b3b      	ldrh	r3, [r7, #24]
 80017f4:	4413      	add	r3, r2
 80017f6:	b299      	uxth	r1, r3
 80017f8:	8bbb      	ldrh	r3, [r7, #28]
 80017fa:	8b3a      	ldrh	r2, [r7, #24]
 80017fc:	f7ff f9ea 	bl	8000bd4 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	8b3b      	ldrh	r3, [r7, #24]
 8001804:	4413      	add	r3, r2
 8001806:	b298      	uxth	r0, r3
 8001808:	88ba      	ldrh	r2, [r7, #4]
 800180a:	883b      	ldrh	r3, [r7, #0]
 800180c:	4413      	add	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	8b3b      	ldrh	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b299      	uxth	r1, r3
 8001816:	8bbb      	ldrh	r3, [r7, #28]
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	f7ff f9db 	bl	8000bd4 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	4413      	add	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	8b3b      	ldrh	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b298      	uxth	r0, r3
 800182c:	88ba      	ldrh	r2, [r7, #4]
 800182e:	883b      	ldrh	r3, [r7, #0]
 8001830:	4413      	add	r3, r2
 8001832:	b29a      	uxth	r2, r3
 8001834:	8b3b      	ldrh	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b299      	uxth	r1, r3
 800183a:	8bbb      	ldrh	r3, [r7, #28]
 800183c:	8b3a      	ldrh	r2, [r7, #24]
 800183e:	f7ff f9c9 	bl	8000bd4 <LCD_Draw_Circle_Fill>
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
	...

0800184c <initGame>:
Board board;
Piece currentPiece;
Piece nextPiece;
uint32_t pointsScored;

void initGame() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 8001850:	4806      	ldr	r0, [pc, #24]	@ (800186c <initGame+0x20>)
 8001852:	f000 fa63 	bl	8001d1c <initializeBoard>
	initializeRandomPiece(& currentPiece);
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <initGame+0x24>)
 8001858:	f001 f992 	bl	8002b80 <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 800185c:	4805      	ldr	r0, [pc, #20]	@ (8001874 <initGame+0x28>)
 800185e:	f001 f98f 	bl	8002b80 <initializeRandomPiece>
	pointsScored = 0;
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <initGame+0x2c>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20025b7c 	.word	0x20025b7c
 8001870:	20025e9c 	.word	0x20025e9c
 8001874:	20025ee4 	.word	0x20025ee4
 8001878:	20025f2c 	.word	0x20025f2c

0800187c <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
    piece->y++;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f921 	bl	8001ada <collision>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <movePieceDown+0x38>
        piece->y--;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	1e5a      	subs	r2, r3, #1
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	645a      	str	r2, [r3, #68]	@ 0x44
        lockPiece(board, piece);
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f81a 	bl	80018e4 <lockPiece>
        return false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <movePieceDown+0x3a>
    }
    return true;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <dropPiece>:
void dropPiece(Board *board, Piece *piece) {
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 80018c8:	bf00      	nop
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffd5 	bl	800187c <movePieceDown>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f8      	bne.n	80018ca <dropPiece+0xc>
    }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e03b      	b.n	800196c <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	e032      	b.n	8001960 <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	0091      	lsls	r1, r2, #2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	440a      	add	r2, r1
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d026      	beq.n	800195a <lockPiece+0x76>
                int x = piece->x + j;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4413      	add	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db19      	blt.n	800195a <lockPiece+0x76>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b13      	cmp	r3, #19
 800192a:	dc16      	bgt.n	800195a <lockPiece+0x76>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db13      	blt.n	800195a <lockPiece+0x76>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b09      	cmp	r3, #9
 8001936:	dc10      	bgt.n	800195a <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	0091      	lsls	r1, r2, #2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	440a      	add	r2, r1
 8001942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	3301      	adds	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b03      	cmp	r3, #3
 8001964:	ddc9      	ble.n	80018fa <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b03      	cmp	r3, #3
 8001970:	ddc0      	ble.n	80018f4 <lockPiece+0x10>
                }
            }
        }
    }

    if (isGameOver(board)){
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f9b6 	bl	8001ce4 <isGameOver>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <lockPiece+0xa2>
    	showEndScreen();
 800197e:	f001 fa27 	bl	8002dd0 <showEndScreen>
    	Error_Handler();
 8001982:	f001 f8f7 	bl	8002b74 <Error_Handler>
    }


    currentPiece = nextPiece;
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <lockPiece+0x114>)
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <lockPiece+0x118>)
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	2348      	movs	r3, #72	@ 0x48
 8001990:	461a      	mov	r2, r3
 8001992:	f006 fcf6 	bl	8008382 <memcpy>
    initializeRandomPiece( & nextPiece);
 8001996:	4819      	ldr	r0, [pc, #100]	@ (80019fc <lockPiece+0x118>)
 8001998:	f001 f8f2 	bl	8002b80 <initializeRandomPiece>
    switch (clearCompletedRows(board)){
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f831 	bl	8001a04 <clearCompletedRows>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d823      	bhi.n	80019f0 <lockPiece+0x10c>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <lockPiece+0xcc>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019ef 	.word	0x080019ef
 80019b4:	080019e5 	.word	0x080019e5
 80019b8:	080019db 	.word	0x080019db
 80019bc:	080019d1 	.word	0x080019d1
 80019c0:	080019c5 	.word	0x080019c5
		case 4:
			pointsScored+=300;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <lockPiece+0x11c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <lockPiece+0x11c>)
 80019ce:	6013      	str	r3, [r2, #0]
		case 3:
			pointsScored+=200;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <lockPiece+0x11c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	33c8      	adds	r3, #200	@ 0xc8
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <lockPiece+0x11c>)
 80019d8:	6013      	str	r3, [r2, #0]
		case 2:
			pointsScored+=200;
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <lockPiece+0x11c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	33c8      	adds	r3, #200	@ 0xc8
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <lockPiece+0x11c>)
 80019e2:	6013      	str	r3, [r2, #0]
		case 1:
			pointsScored+=100;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <lockPiece+0x11c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3364      	adds	r3, #100	@ 0x64
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <lockPiece+0x11c>)
 80019ec:	6013      	str	r3, [r2, #0]
		case 0:
			break;
 80019ee:	bf00      	nop
    }
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20025e9c 	.word	0x20025e9c
 80019fc:	20025ee4 	.word	0x20025ee4
 8001a00:	20025f2c 	.word	0x20025f2c

08001a04 <clearCompletedRows>:
uint16_t clearCompletedRows(Board *board) {
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	@ 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint16_t clearedRows = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	e057      	b.n	8001ac6 <clearCompletedRows+0xc2>
        int isComplete = 1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e011      	b.n	8001a44 <clearCompletedRows+0x40>
            if (board->grid[i][j] == 0) {
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	6a3a      	ldr	r2, [r7, #32]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <clearCompletedRows+0x3a>
                isComplete = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
                break;
 8001a3c:	e005      	b.n	8001a4a <clearCompletedRows+0x46>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b09      	cmp	r3, #9
 8001a48:	ddea      	ble.n	8001a20 <clearCompletedRows+0x1c>
            }
        }

        if (isComplete) {
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d037      	beq.n	8001ac0 <clearCompletedRows+0xbc>
            clearedRows++;
 8001a50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a52:	3301      	adds	r3, #1
 8001a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
            for (int k = i; k > 0; k--) {
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e020      	b.n	8001a9e <clearCompletedRows+0x9a>
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	e017      	b.n	8001a92 <clearCompletedRows+0x8e>
                    board->grid[k][j] = board->grid[k - 1][j];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4413      	add	r3, r2
 8001a74:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4413      	add	r3, r2
 8001a88:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	dde4      	ble.n	8001a62 <clearCompletedRows+0x5e>
            for (int k = i; k > 0; k--) {
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dcdb      	bgt.n	8001a5c <clearCompletedRows+0x58>
                }
            }

            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e007      	b.n	8001aba <clearCompletedRows+0xb6>
                board->grid[0][j] = 0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	ddf4      	ble.n	8001aaa <clearCompletedRows+0xa6>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	2b13      	cmp	r3, #19
 8001aca:	dda4      	ble.n	8001a16 <clearCompletedRows+0x12>
            }
        }
    }
    return clearedRows;
 8001acc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	372c      	adds	r7, #44	@ 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <collision>:

bool collision(Board *board, Piece *piece) {
 8001ada:	b480      	push	{r7}
 8001adc:	b087      	sub	sp, #28
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e03a      	b.n	8001b60 <collision+0x86>
        for (int j = 0; j < 4; j++) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e031      	b.n	8001b54 <collision+0x7a>
            if (piece->matrix[i][j]) {
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	0091      	lsls	r1, r2, #2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	440a      	add	r2, r1
 8001afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d025      	beq.n	8001b4e <collision+0x74>
                int x = piece->x + j;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db05      	blt.n	8001b28 <collision+0x4e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b09      	cmp	r3, #9
 8001b20:	dc02      	bgt.n	8001b28 <collision+0x4e>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b13      	cmp	r3, #19
 8001b26:	dd01      	ble.n	8001b2c <collision+0x52>
                    return true;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e01d      	b.n	8001b68 <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0d      	blt.n	8001b4e <collision+0x74>
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <collision+0x74>
                    return true;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00c      	b.n	8001b68 <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3301      	adds	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	ddca      	ble.n	8001af0 <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	ddc1      	ble.n	8001aea <collision+0x10>
                }
            }
        }
    }
    return false;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <rotatePiece>:

void rotatePiece(Piece *piece) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	@ 0x58
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	2240      	movs	r2, #64	@ 0x40
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 fb81 	bl	800828c <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b8e:	e01d      	b.n	8001bcc <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b94:	e014      	b.n	8001bc0 <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	f1c3 0303 	rsb	r3, r3, #3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ba0:	0088      	lsls	r0, r1, #2
 8001ba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ba4:	4401      	add	r1, r0
 8001ba6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001baa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001bac:	0089      	lsls	r1, r1, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3358      	adds	r3, #88	@ 0x58
 8001bb4:	443b      	add	r3, r7
 8001bb6:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 8001bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	dde7      	ble.n	8001b96 <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	3301      	adds	r3, #1
 8001bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	ddde      	ble.n	8001b90 <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd6:	e01b      	b.n	8001c10 <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bdc:	e012      	b.n	8001c04 <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 8001bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be0:	009a      	lsls	r2, r3, #2
 8001be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3358      	adds	r3, #88	@ 0x58
 8001bea:	443b      	add	r3, r7
 8001bec:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bf4:	0090      	lsls	r0, r2, #2
 8001bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bf8:	4402      	add	r2, r0
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c00:	3301      	adds	r3, #1
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	dde9      	ble.n	8001bde <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	dde0      	ble.n	8001bd8 <rotatePiece+0x64>
        }
    }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	3758      	adds	r7, #88	@ 0x58
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d83b      	bhi.n	8001cac <handleInput+0x8c>
 8001c34:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <handleInput+0x1c>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c69 	.word	0x08001c69
 8001c40:	08001c5d 	.word	0x08001c5d
 8001c44:	08001c97 	.word	0x08001c97
 8001c48:	08001c51 	.word	0x08001c51
 8001c4c:	08001ca1 	.word	0x08001ca1
        case 3: // Move left
            piece->x--;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c5a:	e027      	b.n	8001cac <handleInput+0x8c>
        case 1: // Move right
            piece->x++;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c66:	e021      	b.n	8001cac <handleInput+0x8c>
        case 0: // Rotate
            rotatePiece(piece);
 8001c68:	68b8      	ldr	r0, [r7, #8]
 8001c6a:	f7ff ff83 	bl	8001b74 <rotatePiece>
            if (collision(board, piece)) {
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff ff32 	bl	8001ada <collision>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <handleInput+0x8a>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e005      	b.n	8001c8e <handleInput+0x6e>
                    rotatePiece(piece);
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f7ff ff76 	bl	8001b74 <rotatePiece>
                for (int i = 0; i < 3; i++) {
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	ddf6      	ble.n	8001c82 <handleInput+0x62>
                }
            }
            break;
 8001c94:	e009      	b.n	8001caa <handleInput+0x8a>
        case 2: // Soft drop
        	movePieceDown(board, piece);
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff fdef 	bl	800187c <movePieceDown>
            break;
 8001c9e:	e005      	b.n	8001cac <handleInput+0x8c>
        case 4: // Hard drop
            dropPiece(board, piece);
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f7ff fe0b 	bl	80018be <dropPiece>
            break;
 8001ca8:	e000      	b.n	8001cac <handleInput+0x8c>
            break;
 8001caa:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff ff13 	bl	8001ada <collision>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <handleInput+0xbc>
        switch (command) {
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d007      	beq.n	8001cd0 <handleInput+0xb0>
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d10b      	bne.n	8001cdc <handleInput+0xbc>
            case 3: piece->x++; break;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cce:	e005      	b.n	8001cdc <handleInput+0xbc>
            case 1: piece->x--; break;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cda:	bf00      	nop
        }
    }
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <isGameOver>:

bool isGameOver(Board *board) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00a      	b.n	8001d08 <isGameOver+0x24>
        if (board->grid[0][i] != 0) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <isGameOver+0x1e>
            return true;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e006      	b.n	8001d10 <isGameOver+0x2c>
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b09      	cmp	r3, #9
 8001d0c:	ddf1      	ble.n	8001cf2 <isGameOver+0xe>
        }
    }
    return false;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e016      	b.n	8001d58 <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	e00d      	b.n	8001d4c <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	4413      	add	r3, r2
 8001d40:	2200      	movs	r2, #0
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	ddee      	ble.n	8001d30 <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b13      	cmp	r3, #19
 8001d5c:	dde5      	ble.n	8001d2a <initializeBoard+0xe>
        }
    }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <boardWithPiece>:

Board boardWithPiece(Board *board, Piece *piece) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d78:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001d7c:	6018      	str	r0, [r3, #0]
 8001d7e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d82:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d8c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d90:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001d98:	e030      	b.n	8001dfc <boardWithPiece+0x90>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001da0:	e023      	b.n	8001dea <boardWithPiece+0x7e>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001da2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001da6:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001daa:	6819      	ldr	r1, [r3, #0]
 8001dac:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001dc2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001dc6:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001dca:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001dda:	4413      	add	r3, r2
 8001ddc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001de0:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001de4:	3301      	adds	r3, #1
 8001de6:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001dea:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001dee:	2b09      	cmp	r3, #9
 8001df0:	ddd7      	ble.n	8001da2 <boardWithPiece+0x36>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001df2:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001df6:	3301      	adds	r3, #1
 8001df8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001dfc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001e00:	2b13      	cmp	r3, #19
 8001e02:	ddca      	ble.n	8001d9a <boardWithPiece+0x2e>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e0a:	e052      	b.n	8001eb2 <boardWithPiece+0x146>
        for (int pj = 0; pj < 4; pj++) {
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e12:	e045      	b.n	8001ea0 <boardWithPiece+0x134>
            int px = piece->x + pj;
 8001e14:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e18:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e24:	4413      	add	r3, r2
 8001e26:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int py = piece->y + pi;
 8001e2a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e2e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001e40:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e44:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e4e:	0091      	lsls	r1, r2, #2
 8001e50:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e54:	440a      	add	r2, r1
 8001e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01b      	beq.n	8001e96 <boardWithPiece+0x12a>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001e5e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e62:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e6c:	0091      	lsls	r1, r2, #2
 8001e6e:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e72:	440a      	add	r2, r1
 8001e74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e78:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e7c:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001e80:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001e90:	4413      	add	r3, r2
 8001e92:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001e96:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001ea0:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	ddb5      	ble.n	8001e14 <boardWithPiece+0xa8>
    for (int pi = 0; pi < 4; pi++) {
 8001ea8:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001eac:	3301      	adds	r3, #1
 8001eae:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001eb2:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	dda8      	ble.n	8001e0c <boardWithPiece+0xa0>
//            }
        }
    }

    return tempBoard;
 8001eba:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ebe:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ec8:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f006 fa54 	bl	8008382 <memcpy>
}
 8001eda:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ede:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001ef0:	f000 f9fe 	bl	80022f0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001ef4:	20ca      	movs	r0, #202	@ 0xca
 8001ef6:	f000 f943 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001efa:	20c3      	movs	r0, #195	@ 0xc3
 8001efc:	f000 f94d 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f00:	2008      	movs	r0, #8
 8001f02:	f000 f94a 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f06:	2050      	movs	r0, #80	@ 0x50
 8001f08:	f000 f947 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f0c:	20cf      	movs	r0, #207	@ 0xcf
 8001f0e:	f000 f937 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f941 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f18:	20c1      	movs	r0, #193	@ 0xc1
 8001f1a:	f000 f93e 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f1e:	2030      	movs	r0, #48	@ 0x30
 8001f20:	f000 f93b 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f24:	20ed      	movs	r0, #237	@ 0xed
 8001f26:	f000 f92b 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f2a:	2064      	movs	r0, #100	@ 0x64
 8001f2c:	f000 f935 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f932 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f36:	2012      	movs	r0, #18
 8001f38:	f000 f92f 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f3c:	2081      	movs	r0, #129	@ 0x81
 8001f3e:	f000 f92c 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f42:	20e8      	movs	r0, #232	@ 0xe8
 8001f44:	f000 f91c 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f48:	2085      	movs	r0, #133	@ 0x85
 8001f4a:	f000 f926 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f923 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f54:	2078      	movs	r0, #120	@ 0x78
 8001f56:	f000 f920 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f5a:	20cb      	movs	r0, #203	@ 0xcb
 8001f5c:	f000 f910 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f60:	2039      	movs	r0, #57	@ 0x39
 8001f62:	f000 f91a 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f66:	202c      	movs	r0, #44	@ 0x2c
 8001f68:	f000 f917 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 f914 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f72:	2034      	movs	r0, #52	@ 0x34
 8001f74:	f000 f911 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f000 f90e 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f7e:	20f7      	movs	r0, #247	@ 0xf7
 8001f80:	f000 f8fe 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f84:	2020      	movs	r0, #32
 8001f86:	f000 f908 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001f8a:	20ea      	movs	r0, #234	@ 0xea
 8001f8c:	f000 f8f8 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f902 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f8ff 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001f9c:	20b1      	movs	r0, #177	@ 0xb1
 8001f9e:	f000 f8ef 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f8f9 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fa8:	201b      	movs	r0, #27
 8001faa:	f000 f8f6 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fae:	20b6      	movs	r0, #182	@ 0xb6
 8001fb0:	f000 f8e6 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fb4:	200a      	movs	r0, #10
 8001fb6:	f000 f8f0 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fba:	20a2      	movs	r0, #162	@ 0xa2
 8001fbc:	f000 f8ed 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fc0:	20c0      	movs	r0, #192	@ 0xc0
 8001fc2:	f000 f8dd 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fc6:	2010      	movs	r0, #16
 8001fc8:	f000 f8e7 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fcc:	20c1      	movs	r0, #193	@ 0xc1
 8001fce:	f000 f8d7 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f000 f8e1 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001fd8:	20c5      	movs	r0, #197	@ 0xc5
 8001fda:	f000 f8d1 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001fde:	2045      	movs	r0, #69	@ 0x45
 8001fe0:	f000 f8db 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001fe4:	2015      	movs	r0, #21
 8001fe6:	f000 f8d8 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001fea:	20c7      	movs	r0, #199	@ 0xc7
 8001fec:	f000 f8c8 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ff0:	2090      	movs	r0, #144	@ 0x90
 8001ff2:	f000 f8d2 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ff6:	2036      	movs	r0, #54	@ 0x36
 8001ff8:	f000 f8c2 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ffc:	20c8      	movs	r0, #200	@ 0xc8
 8001ffe:	f000 f8cc 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002002:	20f2      	movs	r0, #242	@ 0xf2
 8002004:	f000 f8bc 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002008:	2000      	movs	r0, #0
 800200a:	f000 f8c6 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800200e:	20b0      	movs	r0, #176	@ 0xb0
 8002010:	f000 f8b6 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002014:	20c2      	movs	r0, #194	@ 0xc2
 8002016:	f000 f8c0 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800201a:	20b6      	movs	r0, #182	@ 0xb6
 800201c:	f000 f8b0 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002020:	200a      	movs	r0, #10
 8002022:	f000 f8ba 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002026:	20a7      	movs	r0, #167	@ 0xa7
 8002028:	f000 f8b7 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800202c:	2027      	movs	r0, #39	@ 0x27
 800202e:	f000 f8b4 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002032:	2004      	movs	r0, #4
 8002034:	f000 f8b1 	bl	800219a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002038:	202a      	movs	r0, #42	@ 0x2a
 800203a:	f000 f8a1 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f8ab 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f8a8 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f8a5 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002050:	20ef      	movs	r0, #239	@ 0xef
 8002052:	f000 f8a2 	bl	800219a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002056:	202b      	movs	r0, #43	@ 0x2b
 8002058:	f000 f892 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f000 f89c 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f899 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002068:	2001      	movs	r0, #1
 800206a:	f000 f896 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800206e:	203f      	movs	r0, #63	@ 0x3f
 8002070:	f000 f893 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002074:	20f6      	movs	r0, #246	@ 0xf6
 8002076:	f000 f883 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 f88d 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f88a 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002086:	2006      	movs	r0, #6
 8002088:	f000 f887 	bl	800219a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800208c:	202c      	movs	r0, #44	@ 0x2c
 800208e:	f000 f877 	bl	8002180 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002092:	20c8      	movs	r0, #200	@ 0xc8
 8002094:	f000 f9e8 	bl	8002468 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002098:	2026      	movs	r0, #38	@ 0x26
 800209a:	f000 f871 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 f87b 	bl	800219a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020a4:	20e0      	movs	r0, #224	@ 0xe0
 80020a6:	f000 f86b 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 f875 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020b0:	2029      	movs	r0, #41	@ 0x29
 80020b2:	f000 f872 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020b6:	2024      	movs	r0, #36	@ 0x24
 80020b8:	f000 f86f 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020bc:	200c      	movs	r0, #12
 80020be:	f000 f86c 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020c2:	200e      	movs	r0, #14
 80020c4:	f000 f869 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020c8:	2009      	movs	r0, #9
 80020ca:	f000 f866 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020ce:	204e      	movs	r0, #78	@ 0x4e
 80020d0:	f000 f863 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020d4:	2078      	movs	r0, #120	@ 0x78
 80020d6:	f000 f860 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020da:	203c      	movs	r0, #60	@ 0x3c
 80020dc:	f000 f85d 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020e0:	2009      	movs	r0, #9
 80020e2:	f000 f85a 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80020e6:	2013      	movs	r0, #19
 80020e8:	f000 f857 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80020ec:	2005      	movs	r0, #5
 80020ee:	f000 f854 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80020f2:	2017      	movs	r0, #23
 80020f4:	f000 f851 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80020f8:	2011      	movs	r0, #17
 80020fa:	f000 f84e 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 f84b 	bl	800219a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002104:	20e1      	movs	r0, #225	@ 0xe1
 8002106:	f000 f83b 	bl	8002180 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f000 f845 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002110:	2016      	movs	r0, #22
 8002112:	f000 f842 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002116:	201b      	movs	r0, #27
 8002118:	f000 f83f 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800211c:	2004      	movs	r0, #4
 800211e:	f000 f83c 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002122:	2011      	movs	r0, #17
 8002124:	f000 f839 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002128:	2007      	movs	r0, #7
 800212a:	f000 f836 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800212e:	2031      	movs	r0, #49	@ 0x31
 8002130:	f000 f833 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002134:	2033      	movs	r0, #51	@ 0x33
 8002136:	f000 f830 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800213a:	2042      	movs	r0, #66	@ 0x42
 800213c:	f000 f82d 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002140:	2005      	movs	r0, #5
 8002142:	f000 f82a 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002146:	200c      	movs	r0, #12
 8002148:	f000 f827 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800214c:	200a      	movs	r0, #10
 800214e:	f000 f824 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002152:	2028      	movs	r0, #40	@ 0x28
 8002154:	f000 f821 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002158:	202f      	movs	r0, #47	@ 0x2f
 800215a:	f000 f81e 	bl	800219a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800215e:	200f      	movs	r0, #15
 8002160:	f000 f81b 	bl	800219a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002164:	2011      	movs	r0, #17
 8002166:	f000 f80b 	bl	8002180 <ili9341_Write_Reg>
  LCD_Delay(200);
 800216a:	20c8      	movs	r0, #200	@ 0xc8
 800216c:	f000 f97c 	bl	8002468 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002170:	2029      	movs	r0, #41	@ 0x29
 8002172:	f000 f805 	bl	8002180 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002176:	202c      	movs	r0, #44	@ 0x2c
 8002178:	f000 f802 	bl	8002180 <ili9341_Write_Reg>
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f949 	bl	8002424 <LCD_IO_WriteReg>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f91a 	bl	80023e0 <LCD_IO_WriteData>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021b8:	4819      	ldr	r0, [pc, #100]	@ (8002220 <SPI_Init+0x6c>)
 80021ba:	f004 fdca 	bl	8006d52 <HAL_SPI_GetState>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d12b      	bne.n	800221c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <SPI_Init+0x6c>)
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <SPI_Init+0x70>)
 80021c8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <SPI_Init+0x6c>)
 80021cc:	2218      	movs	r2, #24
 80021ce:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <SPI_Init+0x6c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <SPI_Init+0x6c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021dc:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <SPI_Init+0x6c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <SPI_Init+0x6c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <SPI_Init+0x6c>)
 80021ea:	2207      	movs	r2, #7
 80021ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <SPI_Init+0x6c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <SPI_Init+0x6c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <SPI_Init+0x6c>)
 80021fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002200:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <SPI_Init+0x6c>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <SPI_Init+0x6c>)
 800220a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800220e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002210:	4803      	ldr	r0, [pc, #12]	@ (8002220 <SPI_Init+0x6c>)
 8002212:	f000 f833 	bl	800227c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002216:	4802      	ldr	r0, [pc, #8]	@ (8002220 <SPI_Init+0x6c>)
 8002218:	f004 fba6 	bl	8006968 <HAL_SPI_Init>
  }
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20025f30 	.word	0x20025f30
 8002224:	40015000 	.word	0x40015000

08002228 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <SPI_Write+0x34>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1db9      	adds	r1, r7, #6
 800223c:	2201      	movs	r2, #1
 800223e:	4808      	ldr	r0, [pc, #32]	@ (8002260 <SPI_Write+0x38>)
 8002240:	f004 fc43 	bl	8006aca <HAL_SPI_Transmit>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800224e:	f000 f809 	bl	8002264 <SPI_Error>
  }
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c
 8002260:	20025f30 	.word	0x20025f30

08002264 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002268:	4803      	ldr	r0, [pc, #12]	@ (8002278 <SPI_Error+0x14>)
 800226a:	f004 fc06 	bl	8006a7a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800226e:	f7ff ffa1 	bl	80021b4 <SPI_Init>
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20025f30 	.word	0x20025f30

0800227c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <SPI_MspInit+0x6c>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	4a16      	ldr	r2, [pc, #88]	@ (80022e8 <SPI_MspInit+0x6c>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002292:	6453      	str	r3, [r2, #68]	@ 0x44
 8002294:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <SPI_MspInit+0x6c>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <SPI_MspInit+0x6c>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <SPI_MspInit+0x6c>)
 80022aa:	f043 0320 	orr.w	r3, r3, #32
 80022ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b0:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <SPI_MspInit+0x6c>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022bc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022ca:	2301      	movs	r3, #1
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ce:	2305      	movs	r3, #5
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4804      	ldr	r0, [pc, #16]	@ (80022ec <SPI_MspInit+0x70>)
 80022da:	f001 feb3 	bl	8004044 <HAL_GPIO_Init>
}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	@ 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40021400 	.word	0x40021400

080022f0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80022f6:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <LCD_IO_Init+0xe0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d164      	bne.n	80023c8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80022fe:	4b34      	ldr	r3, [pc, #208]	@ (80023d0 <LCD_IO_Init+0xe0>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	4b32      	ldr	r3, [pc, #200]	@ (80023d4 <LCD_IO_Init+0xe4>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	4a31      	ldr	r2, [pc, #196]	@ (80023d4 <LCD_IO_Init+0xe4>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6313      	str	r3, [r2, #48]	@ 0x30
 8002314:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <LCD_IO_Init+0xe4>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002320:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002324:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4619      	mov	r1, r3
 8002338:	4827      	ldr	r0, [pc, #156]	@ (80023d8 <LCD_IO_Init+0xe8>)
 800233a:	f001 fe83 	bl	8004044 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <LCD_IO_Init+0xe4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <LCD_IO_Init+0xe4>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <LCD_IO_Init+0xe4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800235a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002368:	2302      	movs	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4819      	ldr	r0, [pc, #100]	@ (80023d8 <LCD_IO_Init+0xe8>)
 8002374:	f001 fe66 	bl	8004044 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <LCD_IO_Init+0xe4>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <LCD_IO_Init+0xe4>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6313      	str	r3, [r2, #48]	@ 0x30
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <LCD_IO_Init+0xe4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002394:	2304      	movs	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4619      	mov	r1, r3
 80023aa:	480c      	ldr	r0, [pc, #48]	@ (80023dc <LCD_IO_Init+0xec>)
 80023ac:	f001 fe4a 	bl	8004044 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023b0:	2200      	movs	r2, #0
 80023b2:	2104      	movs	r1, #4
 80023b4:	4809      	ldr	r0, [pc, #36]	@ (80023dc <LCD_IO_Init+0xec>)
 80023b6:	f002 f8fd 	bl	80045b4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023ba:	2201      	movs	r2, #1
 80023bc:	2104      	movs	r1, #4
 80023be:	4807      	ldr	r0, [pc, #28]	@ (80023dc <LCD_IO_Init+0xec>)
 80023c0:	f002 f8f8 	bl	80045b4 <HAL_GPIO_WritePin>

    SPI_Init();
 80023c4:	f7ff fef6 	bl	80021b4 <SPI_Init>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20025f88 	.word	0x20025f88
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40020800 	.word	0x40020800

080023e0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023f0:	480a      	ldr	r0, [pc, #40]	@ (800241c <LCD_IO_WriteData+0x3c>)
 80023f2:	f002 f8df 	bl	80045b4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80023f6:	2200      	movs	r2, #0
 80023f8:	2104      	movs	r1, #4
 80023fa:	4809      	ldr	r0, [pc, #36]	@ (8002420 <LCD_IO_WriteData+0x40>)
 80023fc:	f002 f8da 	bl	80045b4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff10 	bl	8002228 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002408:	2201      	movs	r2, #1
 800240a:	2104      	movs	r1, #4
 800240c:	4804      	ldr	r0, [pc, #16]	@ (8002420 <LCD_IO_WriteData+0x40>)
 800240e:	f002 f8d1 	bl	80045b4 <HAL_GPIO_WritePin>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40020800 	.word	0x40020800

08002424 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002434:	480a      	ldr	r0, [pc, #40]	@ (8002460 <LCD_IO_WriteReg+0x3c>)
 8002436:	f002 f8bd 	bl	80045b4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800243a:	2200      	movs	r2, #0
 800243c:	2104      	movs	r1, #4
 800243e:	4809      	ldr	r0, [pc, #36]	@ (8002464 <LCD_IO_WriteReg+0x40>)
 8002440:	f002 f8b8 	bl	80045b4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff feed 	bl	8002228 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800244e:	2201      	movs	r2, #1
 8002450:	2104      	movs	r1, #4
 8002452:	4804      	ldr	r0, [pc, #16]	@ (8002464 <LCD_IO_WriteReg+0x40>)
 8002454:	f002 f8ae 	bl	80045b4 <HAL_GPIO_WritePin>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40020800 	.word	0x40020800

08002468 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f001 fc3b 	bl	8003cec <HAL_Delay>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8002484:	f005 fc46 	bl	8007d14 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002488:	f001 fbbe 	bl	8003c08 <HAL_Init>
  /* USER CODE BEGIN Init */
//#ifdef DONTDEFINE
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248c:	f000 f81e 	bl	80024cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
//#endif
  ApplicationInit(); // Initializes the LCD functionality
 8002490:	f7fe f87e 	bl	8000590 <ApplicationInit>
  showStartScreen();
 8002494:	f000 fbdc 	bl	8002c50 <showStartScreen>
  MX_TIM5_Init();
  MX_TIM2_Init();
  MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 8002498:	f000 f932 	bl	8002700 <MX_GPIO_Init>
  MX_RNG_Init();
 800249c:	f000 f880 	bl	80025a0 <MX_RNG_Init>
  MX_TIM5_Init();
 80024a0:	f000 f8e0 	bl	8002664 <MX_TIM5_Init>
  MX_TIM2_Init();
 80024a4:	f000 f890 	bl	80025c8 <MX_TIM2_Init>

//  HAL_TIM_Base_Start_IT(& htim2);
//  HAL_TIM_Base_Start(& htim5);

  ApplicationInit(); // Initializes the LCD functionality
 80024a8:	f7fe f872 	bl	8000590 <ApplicationInit>

//  printf("Hi!\n");

HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024b0:	4805      	ldr	r0, [pc, #20]	@ (80024c8 <main+0x48>)
 80024b2:	f002 f898 	bl	80045e6 <HAL_GPIO_TogglePin>


  showStartScreen();
 80024b6:	f000 fbcb 	bl	8002c50 <showStartScreen>

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024be:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <main+0x48>)
 80024c0:	f002 f891 	bl	80045e6 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <main+0x44>
 80024c8:	40021800 	.word	0x40021800

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2230      	movs	r2, #48	@ 0x30
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 fed6 	bl	800828c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <SystemClock_Config+0xcc>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <SystemClock_Config+0xcc>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <SystemClock_Config+0xcc>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <SystemClock_Config+0xd0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <SystemClock_Config+0xd0>)
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <SystemClock_Config+0xd0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002528:	2301      	movs	r3, #1
 800252a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800252c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002532:	2302      	movs	r3, #2
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800253c:	2308      	movs	r3, #8
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 335;
 8002540:	f240 134f 	movw	r3, #335	@ 0x14f
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002546:	2302      	movs	r3, #2
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800254a:	2307      	movs	r3, #7
 800254c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fb44 	bl	8005be0 <HAL_RCC_OscConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800255e:	f000 fb09 	bl	8002b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002562:	230f      	movs	r3, #15
 8002564:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002566:	2302      	movs	r3, #2
 8002568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800256e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002578:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	2105      	movs	r1, #5
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fda5 	bl	80060d0 <HAL_RCC_ClockConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800258c:	f000 faf2 	bl	8002b74 <Error_Handler>
  }
}
 8002590:	bf00      	nop
 8002592:	3750      	adds	r7, #80	@ 0x50
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000

080025a0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_RNG_Init+0x20>)
 80025a6:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <MX_RNG_Init+0x24>)
 80025a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_RNG_Init+0x20>)
 80025ac:	f004 f95c 	bl	8006868 <HAL_RNG_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025b6:	f000 fadd 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20025f8c 	.word	0x20025f8c
 80025c4:	50060800 	.word	0x50060800

080025c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <MX_TIM2_Init+0x98>)
 80025e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16750 - 1;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <MX_TIM2_Init+0x98>)
 80025ee:	f244 126d 	movw	r2, #16749	@ 0x416d
 80025f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_TIM2_Init+0x98>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (500) - 1;
 80025fa:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <MX_TIM2_Init+0x98>)
 80025fc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_TIM2_Init+0x98>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_TIM2_Init+0x98>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800260e:	4814      	ldr	r0, [pc, #80]	@ (8002660 <MX_TIM2_Init+0x98>)
 8002610:	f004 fc8a 	bl	8006f28 <HAL_TIM_Base_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800261a:	f000 faab 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4619      	mov	r1, r3
 800262a:	480d      	ldr	r0, [pc, #52]	@ (8002660 <MX_TIM2_Init+0x98>)
 800262c:	f004 fe94 	bl	8007358 <HAL_TIM_ConfigClockSource>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002636:	f000 fa9d 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <MX_TIM2_Init+0x98>)
 8002648:	f005 f8bc 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002652:	f000 fa8f 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20025f9c 	.word	0x20025f9c

08002664 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <MX_TIM5_Init+0x94>)
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <MX_TIM5_Init+0x98>)
 8002684:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16750 - 1;
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <MX_TIM5_Init+0x94>)
 8002688:	f244 126d 	movw	r2, #16749	@ 0x416d
 800268c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <MX_TIM5_Init+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002694:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <MX_TIM5_Init+0x94>)
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <MX_TIM5_Init+0x94>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <MX_TIM5_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a8:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <MX_TIM5_Init+0x94>)
 80026aa:	f004 fc3d 	bl	8006f28 <HAL_TIM_Base_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026b4:	f000 fa5e 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	4619      	mov	r1, r3
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <MX_TIM5_Init+0x94>)
 80026c6:	f004 fe47 	bl	8007358 <HAL_TIM_ConfigClockSource>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026d0:	f000 fa50 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_TIM5_Init+0x94>)
 80026e2:	f005 f86f 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026ec:	f000 fa42 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20025fe4 	.word	0x20025fe4
 80026fc:	40000c00 	.word	0x40000c00

08002700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	@ 0x38
 8002704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	4bb3      	ldr	r3, [pc, #716]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4ab2      	ldr	r2, [pc, #712]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4bb0      	ldr	r3, [pc, #704]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	4bac      	ldr	r3, [pc, #688]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4aab      	ldr	r2, [pc, #684]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4ba9      	ldr	r3, [pc, #676]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	4ba5      	ldr	r3, [pc, #660]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	4aa4      	ldr	r2, [pc, #656]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275c:	6313      	str	r3, [r2, #48]	@ 0x30
 800275e:	4ba2      	ldr	r3, [pc, #648]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	4b9e      	ldr	r3, [pc, #632]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a9d      	ldr	r2, [pc, #628]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b9b      	ldr	r3, [pc, #620]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b97      	ldr	r3, [pc, #604]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a96      	ldr	r2, [pc, #600]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b94      	ldr	r3, [pc, #592]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b90      	ldr	r3, [pc, #576]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a8f      	ldr	r2, [pc, #572]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b8d      	ldr	r3, [pc, #564]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b89      	ldr	r3, [pc, #548]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a88      	ldr	r2, [pc, #544]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b86      	ldr	r3, [pc, #536]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a81      	ldr	r2, [pc, #516]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <MX_GPIO_Init+0x2e8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2116      	movs	r1, #22
 80027fa:	487c      	ldr	r0, [pc, #496]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 80027fc:	f001 feda 	bl	80045b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	487a      	ldr	r0, [pc, #488]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 8002806:	f001 fed5 	bl	80045b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002810:	4878      	ldr	r0, [pc, #480]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 8002812:	f001 fecf 	bl	80045b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800281c:	4876      	ldr	r0, [pc, #472]	@ (80029f8 <MX_GPIO_Init+0x2f8>)
 800281e:	f001 fec9 	bl	80045b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002822:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002834:	230c      	movs	r3, #12
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	486f      	ldr	r0, [pc, #444]	@ (80029fc <MX_GPIO_Init+0x2fc>)
 8002840:	f001 fc00 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002854:	230c      	movs	r3, #12
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	4863      	ldr	r0, [pc, #396]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 8002860:	f001 fbf0 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002864:	2316      	movs	r3, #22
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	485c      	ldr	r0, [pc, #368]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 800287c:	f001 fbe2 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002884:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002892:	4619      	mov	r1, r3
 8002894:	4856      	ldr	r0, [pc, #344]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 8002896:	f001 fbd5 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800289a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ae:	4619      	mov	r1, r3
 80028b0:	484f      	ldr	r0, [pc, #316]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 80028b2:	f001 fbc7 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ca:	4619      	mov	r1, r3
 80028cc:	4848      	ldr	r0, [pc, #288]	@ (80029f0 <MX_GPIO_Init+0x2f0>)
 80028ce:	f001 fbb9 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80028d2:	2320      	movs	r3, #32
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e4:	4619      	mov	r1, r3
 80028e6:	4841      	ldr	r0, [pc, #260]	@ (80029ec <MX_GPIO_Init+0x2ec>)
 80028e8:	f001 fbac 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028ec:	2304      	movs	r3, #4
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	4840      	ldr	r0, [pc, #256]	@ (8002a00 <MX_GPIO_Init+0x300>)
 8002900:	f001 fba0 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002904:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002916:	230c      	movs	r3, #12
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	4619      	mov	r1, r3
 8002920:	4835      	ldr	r0, [pc, #212]	@ (80029f8 <MX_GPIO_Init+0x2f8>)
 8002922:	f001 fb8f 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002926:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002938:	230c      	movs	r3, #12
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800293c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	4830      	ldr	r0, [pc, #192]	@ (8002a04 <MX_GPIO_Init+0x304>)
 8002944:	f001 fb7e 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002948:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800295a:	230c      	movs	r3, #12
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4826      	ldr	r0, [pc, #152]	@ (8002a00 <MX_GPIO_Init+0x300>)
 8002966:	f001 fb6d 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800296a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	4820      	ldr	r0, [pc, #128]	@ (8002a00 <MX_GPIO_Init+0x300>)
 8002980:	f001 fb60 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002984:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002996:	230c      	movs	r3, #12
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4814      	ldr	r0, [pc, #80]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 80029a2:	f001 fb4f 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80029a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	480e      	ldr	r0, [pc, #56]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 80029bc:	f001 fb42 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80029c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d6:	4619      	mov	r1, r3
 80029d8:	4806      	ldr	r0, [pc, #24]	@ (80029f4 <MX_GPIO_Init+0x2f4>)
 80029da:	f001 fb33 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	e010      	b.n	8002a08 <MX_GPIO_Init+0x308>
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021800 	.word	0x40021800
 80029fc:	40021400 	.word	0x40021400
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a14:	2307      	movs	r3, #7
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4817      	ldr	r0, [pc, #92]	@ (8002a7c <MX_GPIO_Init+0x37c>)
 8002a20:	f001 fb10 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002a24:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4810      	ldr	r0, [pc, #64]	@ (8002a80 <MX_GPIO_Init+0x380>)
 8002a3e:	f001 fb01 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002a42:	2360      	movs	r3, #96	@ 0x60
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a52:	230c      	movs	r3, #12
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4809      	ldr	r0, [pc, #36]	@ (8002a84 <MX_GPIO_Init+0x384>)
 8002a5e:	f001 faf1 	bl	8004044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2006      	movs	r0, #6
 8002a68:	f001 fa81 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a6c:	2006      	movs	r0, #6
 8002a6e:	f001 fa9a 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	@ 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40020400 	.word	0x40020400

08002a88 <startTimers>:

/* USER CODE BEGIN 4 */
void startTimers(){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(& htim2);
 8002a8c:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <startTimers+0x14>)
 8002a8e:	f004 fb03 	bl	8007098 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(& htim5);
 8002a92:	4803      	ldr	r0, [pc, #12]	@ (8002aa0 <startTimers+0x18>)
 8002a94:	f004 fa98 	bl	8006fc8 <HAL_TIM_Base_Start>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20025f9c 	.word	0x20025f9c
 8002aa0:	20025fe4 	.word	0x20025fe4

08002aa4 <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t tim2CallCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
//	printf("TIMERCALLED\n");
	if (htim == &htim2) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d123      	bne.n	8002afc <HAL_TIM_PeriodElapsedCallback+0x58>
		tim2CallCounter++;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ac0:	701a      	strb	r2, [r3, #0]
//		printf("Counter: %u\n", tim2CallCounter);
//		printf("1/10 of a second\n");
		if (tim2CallCounter >= 10 * BLOCK_FALL_TIME){
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d917      	bls.n	8002afc <HAL_TIM_PeriodElapsedCallback+0x58>
			printf("1 second\n");
 8002acc:	480f      	ldr	r0, [pc, #60]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002ace:	f005 fac9 	bl	8008064 <puts>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8002ad2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ad6:	480e      	ldr	r0, [pc, #56]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002ad8:	f001 fd85 	bl	80045e6 <HAL_GPIO_TogglePin>
			movePieceDown(& board,& currentPiece);
 8002adc:	490d      	ldr	r1, [pc, #52]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002ade:	480e      	ldr	r0, [pc, #56]	@ (8002b18 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002ae0:	f7fe fecc 	bl	800187c <movePieceDown>
			LCD_Clear(0,LCD_COLOR_BLACK);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe f93a 	bl	8000d60 <LCD_Clear>
			showGameScreen();
 8002aec:	f000 f93c 	bl	8002d68 <showGameScreen>
			Draw_Arrows_On_Screen(-1);
 8002af0:	20ff      	movs	r0, #255	@ 0xff
 8002af2:	f7fe fbb1 	bl	8001258 <Draw_Arrows_On_Screen>
			tim2CallCounter = 0;
 8002af6:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20025f9c 	.word	0x20025f9c
 8002b08:	2002602c 	.word	0x2002602c
 8002b0c:	08009158 	.word	0x08009158
 8002b10:	40021800 	.word	0x40021800
 8002b14:	20025e9c 	.word	0x20025e9c
 8002b18:	20025b7c 	.word	0x20025b7c

08002b1c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
	static volatile uint32_t last;
	uint32_t current = __HAL_TIM_GET_COUNTER(&htim5);
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_GPIO_EXTI_Callback+0x44>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002b2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b32:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <HAL_GPIO_EXTI_Callback+0x48>)
 8002b34:	f001 fd57 	bl	80045e6 <HAL_GPIO_TogglePin>
	printf("Pushed after %u\n", (unsigned int) (current - last)/5000);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <HAL_GPIO_EXTI_Callback+0x50>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0b1b      	lsrs	r3, r3, #12
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4809      	ldr	r0, [pc, #36]	@ (8002b70 <HAL_GPIO_EXTI_Callback+0x54>)
 8002b4c:	f005 fa22 	bl	8007f94 <iprintf>
	last = current;
 8002b50:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6013      	str	r3, [r2, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20025fe4 	.word	0x20025fe4
 8002b64:	40021800 	.word	0x40021800
 8002b68:	20026030 	.word	0x20026030
 8002b6c:	d1b71759 	.word	0xd1b71759
 8002b70:	08009164 	.word	0x08009164

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b78:	b672      	cpsid	i
}
 8002b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <Error_Handler+0x8>

08002b80 <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 8002b88:	f000 f852 	bl	8002c30 <rand>
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <initializeRandomPiece+0x80>)
 8002b90:	fba3 2301 	umull	r2, r3, r3, r1
 8002b94:	1aca      	subs	r2, r1, r3
 8002b96:	0852      	lsrs	r2, r2, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	089a      	lsrs	r2, r3, #2
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	1aca      	subs	r2, r1, r3
 8002ba4:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e01c      	b.n	8002be6 <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e013      	b.n	8002bda <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 8002bb2:	4914      	ldr	r1, [pc, #80]	@ (8002c04 <initializeRandomPiece+0x84>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	4413      	add	r3, r2
 8002bbc:	009a      	lsls	r2, r3, #2
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	0090      	lsls	r0, r2, #2
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4402      	add	r2, r0
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	dde8      	ble.n	8002bb2 <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	dddf      	ble.n	8002bac <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	24924925 	.word	0x24924925
 8002c04:	20000010 	.word	0x20000010

08002c08 <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <piceIndexToColors+0x24>)
 8002c1c:	4413      	add	r3, r2
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200001d0 	.word	0x200001d0

08002c30 <rand>:
 *
 *  Created on: Dec 7, 2024
 *      Author: user
 */
#include "rand.h"
uint32_t rand(){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(& hrng, &rand);
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4804      	ldr	r0, [pc, #16]	@ (8002c4c <rand+0x1c>)
 8002c3c:	f003 fe3e 	bl	80068bc <HAL_RNG_GenerateRandomNumber>
	return rand;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20025f8c 	.word	0x20025f8c

08002c50 <showStartScreen>:
void shadingDemo(){
	LCD_Clear(0, LCD_COLOR_BLACK);

	Draw_Tetris_Block(40,40,80,0xCB20, 0xFC40, 0x9A20);
}
void showStartScreen(){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe f881 	bl	8000d60 <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002c5e:	4823      	ldr	r0, [pc, #140]	@ (8002cec <showStartScreen+0x9c>)
 8002c60:	f7fe f8b0 	bl	8000dc4 <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002c64:	2228      	movs	r2, #40	@ 0x28
 8002c66:	2114      	movs	r1, #20
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fc73 	bl	8001554 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002c6e:	2246      	movs	r2, #70	@ 0x46
 8002c70:	2114      	movs	r1, #20
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7fe fc6e 	bl	8001554 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 8002c78:	2228      	movs	r2, #40	@ 0x28
 8002c7a:	215a      	movs	r1, #90	@ 0x5a
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fe fc69 	bl	8001554 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 8002c82:	2228      	movs	r2, #40	@ 0x28
 8002c84:	218c      	movs	r1, #140	@ 0x8c
 8002c86:	2003      	movs	r0, #3
 8002c88:	f7fe fc64 	bl	8001554 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 8002c8c:	2250      	movs	r2, #80	@ 0x50
 8002c8e:	2141      	movs	r1, #65	@ 0x41
 8002c90:	2004      	movs	r0, #4
 8002c92:	f7fe fc5f 	bl	8001554 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 8002c96:	2250      	movs	r2, #80	@ 0x50
 8002c98:	2164      	movs	r1, #100	@ 0x64
 8002c9a:	2005      	movs	r0, #5
 8002c9c:	f7fe fc5a 	bl	8001554 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 8002ca0:	228c      	movs	r2, #140	@ 0x8c
 8002ca2:	2132      	movs	r1, #50	@ 0x32
 8002ca4:	2006      	movs	r0, #6
 8002ca6:	f7fe fc55 	bl	8001554 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8002caa:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002cae:	f7fe f879 	bl	8000da4 <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf0 <showStartScreen+0xa0>)
 8002cb4:	2198      	movs	r1, #152	@ 0x98
 8002cb6:	2064      	movs	r0, #100	@ 0x64
 8002cb8:	f7fe f924 	bl	8000f04 <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 8002cbc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2330      	movs	r3, #48	@ 0x30
 8002cc8:	22b4      	movs	r2, #180	@ 0xb4
 8002cca:	21f2      	movs	r1, #242	@ 0xf2
 8002ccc:	201e      	movs	r0, #30
 8002cce:	f7fe fcf7 	bl	80016c0 <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe f866 	bl	8000da4 <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 8002cd8:	4a06      	ldr	r2, [pc, #24]	@ (8002cf4 <showStartScreen+0xa4>)
 8002cda:	f240 1101 	movw	r1, #257	@ 0x101
 8002cde:	2054      	movs	r0, #84	@ 0x54
 8002ce0:	f7fe f910 	bl	8000f04 <LCD_DisplayString>
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	08009178 	.word	0x08009178
 8002cf4:	08009180 	.word	0x08009180

08002cf8 <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	460a      	mov	r2, r1
 8002d02:	80fb      	strh	r3, [r7, #6]
 8002d04:	4613      	mov	r3, r2
 8002d06:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b1d      	cmp	r3, #29
 8002d0c:	d90b      	bls.n	8002d26 <startClicked+0x2e>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2bd2      	cmp	r3, #210	@ 0xd2
 8002d12:	d808      	bhi.n	8002d26 <startClicked+0x2e>
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	2bf1      	cmp	r3, #241	@ 0xf1
 8002d18:	d905      	bls.n	8002d26 <startClicked+0x2e>
 8002d1a:	88bb      	ldrh	r3, [r7, #4]
 8002d1c:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002d20:	d801      	bhi.n	8002d26 <startClicked+0x2e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <startClicked+0x30>
 8002d26:	2300      	movs	r3, #0
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <uint32_to_string>:

void uint32_to_string(uint32_t value, char *buffer, size_t buffer_size) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
    // Ensure the buffer is large enough to hold the maximum uint32_t value and a null terminator
    if (buffer_size < 11) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b0a      	cmp	r3, #10
 8002d4c:	d906      	bls.n	8002d5c <uint32_to_string+0x20>
        // Handle error: buffer too small
        return;
    }
    // Format the uint32_t value as a string and store it in the buffer
    snprintf(buffer, buffer_size, "%u", (unsigned int) value);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <uint32_to_string+0x28>)
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68b8      	ldr	r0, [r7, #8]
 8002d56:	f005 f98d 	bl	8008074 <sniprintf>
 8002d5a:	e000      	b.n	8002d5e <uint32_to_string+0x22>
        return;
 8002d5c:	bf00      	nop
}
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	08009188 	.word	0x08009188

08002d68 <showGameScreen>:

void showGameScreen(){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8002d6e:	af00      	add	r7, sp, #0
	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 8002d70:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002d74:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <showGameScreen+0x58>)
 8002d7a:	4912      	ldr	r1, [pc, #72]	@ (8002dc4 <showGameScreen+0x5c>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fff5 	bl	8001d6c <boardWithPiece>
	Fill_Tetris_Board(
 8002d82:	f107 0310 	add.w	r3, r7, #16
 8002d86:	2216      	movs	r2, #22
 8002d88:	2137      	movs	r1, #55	@ 0x37
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fb1c 	bl	80013c8 <Fill_Tetris_Board>
			LCD_PIXEL_WIDTH /2 - BOARD_WIDTH*(BLOCK_SIZE + 1)/2 ,
			BLOCK_SIZE + 10
			);

	// Next Piece
	DrawTetromino(& nextPiece, 190, 10);
 8002d90:	220a      	movs	r2, #10
 8002d92:	21be      	movs	r1, #190	@ 0xbe
 8002d94:	480c      	ldr	r0, [pc, #48]	@ (8002dc8 <showGameScreen+0x60>)
 8002d96:	f7fe fc3b 	bl	8001610 <DrawTetromino>
//	char randNumStr[11];
//	uint32_to_string(rand(),& randNumStr,11);
//	LCD_DisplayString(10,100,randNumStr);

	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <showGameScreen+0x64>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1d39      	adds	r1, r7, #4
 8002da0:	220b      	movs	r2, #11
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffca 	bl	8002d3c <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	461a      	mov	r2, r3
 8002dac:	210a      	movs	r1, #10
 8002dae:	200a      	movs	r0, #10
 8002db0:	f7fe f8a8 	bl	8000f04 <LCD_DisplayString>
}
 8002db4:	bf00      	nop
 8002db6:	f507 774c 	add.w	r7, r7, #816	@ 0x330
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20025e9c 	.word	0x20025e9c
 8002dc4:	20025b7c 	.word	0x20025b7c
 8002dc8:	20025ee4 	.word	0x20025ee4
 8002dcc:	20025f2c 	.word	0x20025f2c

08002dd0 <showEndScreen>:

void showEndScreen(){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
	LCD_Clear(0,0x2800); // DARK RED
 8002dd6:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd ffc0 	bl	8000d60 <LCD_Clear>
	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <showEndScreen+0xd8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1d39      	adds	r1, r7, #4
 8002de6:	220b      	movs	r2, #11
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffa7 	bl	8002d3c <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	461a      	mov	r2, r3
 8002df2:	210a      	movs	r1, #10
 8002df4:	200a      	movs	r0, #10
 8002df6:	f7fe f885 	bl	8000f04 <LCD_DisplayString>

	uint32_t timeLasted = __HAL_TIM_GET_COUNTER(&htim5)/5000;
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002eac <showEndScreen+0xdc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <showEndScreen+0xe0>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0b1b      	lsrs	r3, r3, #12
 8002e08:	61fb      	str	r3, [r7, #28]
	uint32_t timeLastedSec = timeLasted % 60;
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <showEndScreen+0xe4>)
 8002e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e12:	0959      	lsrs	r1, r3, #5
 8002e14:	460b      	mov	r3, r1
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a5b      	subs	r3, r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	61bb      	str	r3, [r7, #24]
	uint32_t timeLastedMin = timeLasted / 60;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <showEndScreen+0xe4>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	617b      	str	r3, [r7, #20]
	uint32_t timeLastedHour = (timeLasted / 60) / 60;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <showEndScreen+0xe8>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	0adb      	lsrs	r3, r3, #11
 8002e36:	613b      	str	r3, [r7, #16]

	uint32_to_string(timeLastedHour, (char *)&scoreStr,11);
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	220b      	movs	r2, #11
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6938      	ldr	r0, [r7, #16]
 8002e40:	f7ff ff7c 	bl	8002d3c <uint32_to_string>
	LCD_DisplayString(25,40,scoreStr);
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	461a      	mov	r2, r3
 8002e48:	2128      	movs	r1, #40	@ 0x28
 8002e4a:	2019      	movs	r0, #25
 8002e4c:	f7fe f85a 	bl	8000f04 <LCD_DisplayString>
	LCD_DisplayChar(40,40,'H');
 8002e50:	2248      	movs	r2, #72	@ 0x48
 8002e52:	2128      	movs	r1, #40	@ 0x28
 8002e54:	2028      	movs	r0, #40	@ 0x28
 8002e56:	f7fe f833 	bl	8000ec0 <LCD_DisplayChar>
	uint32_to_string(timeLastedMin, (char *)&scoreStr,11);
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	220b      	movs	r2, #11
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f7ff ff6b 	bl	8002d3c <uint32_to_string>
	LCD_DisplayString(40,70,scoreStr);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2146      	movs	r1, #70	@ 0x46
 8002e6c:	2028      	movs	r0, #40	@ 0x28
 8002e6e:	f7fe f849 	bl	8000f04 <LCD_DisplayString>
	LCD_DisplayChar(10,70,'M');
 8002e72:	224d      	movs	r2, #77	@ 0x4d
 8002e74:	2146      	movs	r1, #70	@ 0x46
 8002e76:	200a      	movs	r0, #10
 8002e78:	f7fe f822 	bl	8000ec0 <LCD_DisplayChar>
	uint32_to_string(timeLastedSec, (char *)&scoreStr,11);
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	220b      	movs	r2, #11
 8002e80:	4619      	mov	r1, r3
 8002e82:	69b8      	ldr	r0, [r7, #24]
 8002e84:	f7ff ff5a 	bl	8002d3c <uint32_to_string>
	LCD_DisplayString(40,100,scoreStr);
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2164      	movs	r1, #100	@ 0x64
 8002e8e:	2028      	movs	r0, #40	@ 0x28
 8002e90:	f7fe f838 	bl	8000f04 <LCD_DisplayString>
	LCD_DisplayChar(10,100,'S');
 8002e94:	2253      	movs	r2, #83	@ 0x53
 8002e96:	2164      	movs	r1, #100	@ 0x64
 8002e98:	200a      	movs	r0, #10
 8002e9a:	f7fe f811 	bl	8000ec0 <LCD_DisplayChar>
}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20025f2c 	.word	0x20025f2c
 8002eac:	20025fe4 	.word	0x20025fe4
 8002eb0:	d1b71759 	.word	0xd1b71759
 8002eb4:	88888889 	.word	0x88888889
 8002eb8:	91a2b3c5 	.word	0x91a2b3c5

08002ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4a0f      	ldr	r2, [pc, #60]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_MspInit+0x4c>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002efa:	2007      	movs	r0, #7
 8002efc:	f001 f82c 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	@ 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <HAL_I2C_MspInit+0xc4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d14b      	bne.n	8002fc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3e:	4b25      	ldr	r3, [pc, #148]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	4a20      	ldr	r2, [pc, #128]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f6c:	2312      	movs	r3, #18
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f78:	2304      	movs	r3, #4
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	4815      	ldr	r0, [pc, #84]	@ (8002fd8 <HAL_I2C_MspInit+0xcc>)
 8002f84:	f001 f85e 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f8e:	2312      	movs	r3, #18
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480d      	ldr	r0, [pc, #52]	@ (8002fdc <HAL_I2C_MspInit+0xd0>)
 8002fa6:	f001 f84d 	bl	8004044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_I2C_MspInit+0xc8>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3728      	adds	r7, #40	@ 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40005c00 	.word	0x40005c00
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020000 	.word	0x40020000

08002fe0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b09a      	sub	sp, #104	@ 0x68
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ffc:	2230      	movs	r2, #48	@ 0x30
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f005 f943 	bl	800828c <memset>
  if(hltdc->Instance==LTDC)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a81      	ldr	r2, [pc, #516]	@ (8003210 <HAL_LTDC_MspInit+0x230>)
 800300c:	4293      	cmp	r3, r2
 800300e:	f040 80fb 	bne.w	8003208 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003012:	2308      	movs	r3, #8
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003016:	2364      	movs	r3, #100	@ 0x64
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800301a:	2302      	movs	r3, #2
 800301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800301e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003022:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fa5d 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003034:	f7ff fd9e 	bl	8002b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	4b75      	ldr	r3, [pc, #468]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	4a74      	ldr	r2, [pc, #464]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003046:	6453      	str	r3, [r2, #68]	@ 0x44
 8003048:	4b72      	ldr	r3, [pc, #456]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800304a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	4b6e      	ldr	r3, [pc, #440]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4a6d      	ldr	r2, [pc, #436]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	6313      	str	r3, [r2, #48]	@ 0x30
 8003064:	4b6b      	ldr	r3, [pc, #428]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	4b67      	ldr	r3, [pc, #412]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	4a66      	ldr	r2, [pc, #408]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003080:	4b64      	ldr	r3, [pc, #400]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	4b60      	ldr	r3, [pc, #384]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	4a5f      	ldr	r2, [pc, #380]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	6313      	str	r3, [r2, #48]	@ 0x30
 800309c:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	4b59      	ldr	r3, [pc, #356]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	4a58      	ldr	r2, [pc, #352]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b8:	4b56      	ldr	r3, [pc, #344]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	4b52      	ldr	r3, [pc, #328]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	4a51      	ldr	r2, [pc, #324]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030ea:	f043 0308 	orr.w	r3, r3, #8
 80030ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f0:	4b48      	ldr	r3, [pc, #288]	@ (8003214 <HAL_LTDC_MspInit+0x234>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80030fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003100:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800310e:	230e      	movs	r3, #14
 8003110:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003116:	4619      	mov	r1, r3
 8003118:	483f      	ldr	r0, [pc, #252]	@ (8003218 <HAL_LTDC_MspInit+0x238>)
 800311a:	f000 ff93 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800311e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003122:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003130:	230e      	movs	r3, #14
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003138:	4619      	mov	r1, r3
 800313a:	4838      	ldr	r0, [pc, #224]	@ (800321c <HAL_LTDC_MspInit+0x23c>)
 800313c:	f000 ff82 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003140:	2303      	movs	r3, #3
 8003142:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003150:	2309      	movs	r3, #9
 8003152:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003158:	4619      	mov	r1, r3
 800315a:	4831      	ldr	r0, [pc, #196]	@ (8003220 <HAL_LTDC_MspInit+0x240>)
 800315c:	f000 ff72 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003160:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003172:	230e      	movs	r3, #14
 8003174:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003176:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800317a:	4619      	mov	r1, r3
 800317c:	4828      	ldr	r0, [pc, #160]	@ (8003220 <HAL_LTDC_MspInit+0x240>)
 800317e:	f000 ff61 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003182:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003186:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003194:	230e      	movs	r3, #14
 8003196:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003198:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800319c:	4619      	mov	r1, r3
 800319e:	4821      	ldr	r0, [pc, #132]	@ (8003224 <HAL_LTDC_MspInit+0x244>)
 80031a0:	f000 ff50 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80031a4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80031a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031b6:	230e      	movs	r3, #14
 80031b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031be:	4619      	mov	r1, r3
 80031c0:	4819      	ldr	r0, [pc, #100]	@ (8003228 <HAL_LTDC_MspInit+0x248>)
 80031c2:	f000 ff3f 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80031c6:	2348      	movs	r3, #72	@ 0x48
 80031c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031d6:	230e      	movs	r3, #14
 80031d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031de:	4619      	mov	r1, r3
 80031e0:	4812      	ldr	r0, [pc, #72]	@ (800322c <HAL_LTDC_MspInit+0x24c>)
 80031e2:	f000 ff2f 	bl	8004044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80031e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80031ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031f8:	2309      	movs	r3, #9
 80031fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003200:	4619      	mov	r1, r3
 8003202:	4808      	ldr	r0, [pc, #32]	@ (8003224 <HAL_LTDC_MspInit+0x244>)
 8003204:	f000 ff1e 	bl	8004044 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003208:	bf00      	nop
 800320a:	3768      	adds	r7, #104	@ 0x68
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40016800 	.word	0x40016800
 8003214:	40023800 	.word	0x40023800
 8003218:	40021400 	.word	0x40021400
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40021800 	.word	0x40021800
 8003228:	40020800 	.word	0x40020800
 800322c:	40020c00 	.word	0x40020c00

08003230 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0b      	ldr	r2, [pc, #44]	@ (800326c <HAL_RNG_MspInit+0x3c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10d      	bne.n	800325e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <HAL_RNG_MspInit+0x40>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <HAL_RNG_MspInit+0x40>)
 800324c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003250:	6353      	str	r3, [r2, #52]	@ 0x34
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <HAL_RNG_MspInit+0x40>)
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	50060800 	.word	0x50060800
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	@ 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_SPI_MspInit+0x84>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d12c      	bne.n	80032f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 80032a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a10      	ldr	r2, [pc, #64]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <HAL_SPI_MspInit+0x88>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80032ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032e0:	2305      	movs	r3, #5
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4805      	ldr	r0, [pc, #20]	@ (8003300 <HAL_SPI_MspInit+0x8c>)
 80032ec:	f000 feaa 	bl	8004044 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80032f0:	bf00      	nop
 80032f2:	3728      	adds	r7, #40	@ 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40015000 	.word	0x40015000
 80032fc:	40023800 	.word	0x40023800
 8003300:	40021400 	.word	0x40021400

08003304 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <HAL_SPI_MspDeInit+0x30>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10a      	bne.n	800332c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <HAL_SPI_MspDeInit+0x34>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <HAL_SPI_MspDeInit+0x34>)
 800331c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003322:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003326:	4805      	ldr	r0, [pc, #20]	@ (800333c <HAL_SPI_MspDeInit+0x38>)
 8003328:	f001 f838 	bl	800439c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40015000 	.word	0x40015000
 8003338:	40023800 	.word	0x40023800
 800333c:	40021400 	.word	0x40021400

08003340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d116      	bne.n	8003380 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	201c      	movs	r0, #28
 8003374:	f000 fdfb 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003378:	201c      	movs	r0, #28
 800337a:	f000 fe14 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800337e:	e012      	b.n	80033a6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <HAL_TIM_Base_MspInit+0x74>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10d      	bne.n	80033a6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a07      	ldr	r2, [pc, #28]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_TIM_Base_MspInit+0x70>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40000c00 	.word	0x40000c00

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <NMI_Handler+0x4>

080033c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <MemManage_Handler+0x4>

080033d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <UsageFault_Handler+0x4>

080033e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340e:	f000 fc4d 	bl	8003cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}

08003416 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800341a:	2001      	movs	r0, #1
 800341c:	f001 f8fe 	bl	800461c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}

08003424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003428:	4802      	ldr	r0, [pc, #8]	@ (8003434 <TIM2_IRQHandler+0x10>)
 800342a:	f003 fea5 	bl	8007178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20025f9c 	.word	0x20025f9c

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4907      	ldr	r1, [pc, #28]	@ (8003470 <__NVIC_EnableIRQ+0x38>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100

08003474 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800347a:	f000 f9dd 	bl	8003838 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800347e:	f000 f99d 	bl	80037bc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003482:	2202      	movs	r2, #2
 8003484:	2103      	movs	r1, #3
 8003486:	2082      	movs	r0, #130	@ 0x82
 8003488:	f000 fa2a 	bl	80038e0 <I2C3_Write>
    HAL_Delay(5);
 800348c:	2005      	movs	r0, #5
 800348e:	f000 fc2d 	bl	8003cec <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003492:	2200      	movs	r2, #0
 8003494:	2103      	movs	r1, #3
 8003496:	2082      	movs	r0, #130	@ 0x82
 8003498:	f000 fa22 	bl	80038e0 <I2C3_Write>
    HAL_Delay(2);
 800349c:	2002      	movs	r0, #2
 800349e:	f000 fc25 	bl	8003cec <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80034a2:	1cba      	adds	r2, r7, #2
 80034a4:	2302      	movs	r3, #2
 80034a6:	2100      	movs	r1, #0
 80034a8:	2082      	movs	r0, #130	@ 0x82
 80034aa:	f000 fa69 	bl	8003980 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	4313      	orrs	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f640 0211 	movw	r2, #2065	@ 0x811
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d001      	beq.n	80034ce <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e095      	b.n	80035fa <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80034ce:	2202      	movs	r2, #2
 80034d0:	2103      	movs	r1, #3
 80034d2:	2082      	movs	r0, #130	@ 0x82
 80034d4:	f000 fa04 	bl	80038e0 <I2C3_Write>
    HAL_Delay(5);
 80034d8:	2005      	movs	r0, #5
 80034da:	f000 fc07 	bl	8003cec <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80034de:	2200      	movs	r2, #0
 80034e0:	2103      	movs	r1, #3
 80034e2:	2082      	movs	r0, #130	@ 0x82
 80034e4:	f000 f9fc 	bl	80038e0 <I2C3_Write>
    HAL_Delay(2);
 80034e8:	2002      	movs	r0, #2
 80034ea:	f000 fbff 	bl	8003cec <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80034ee:	2004      	movs	r0, #4
 80034f0:	f000 f887 	bl	8003602 <STMPE811_Read>
 80034f4:	4603      	mov	r3, r0
 80034f6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80034f8:	797b      	ldrb	r3, [r7, #5]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003500:	797b      	ldrb	r3, [r7, #5]
 8003502:	461a      	mov	r2, r3
 8003504:	2104      	movs	r1, #4
 8003506:	2082      	movs	r0, #130	@ 0x82
 8003508:	f000 f9ea 	bl	80038e0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800350c:	2004      	movs	r0, #4
 800350e:	f000 f878 	bl	8003602 <STMPE811_Read>
 8003512:	4603      	mov	r3, r0
 8003514:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	f023 0302 	bic.w	r3, r3, #2
 800351c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800351e:	797b      	ldrb	r3, [r7, #5]
 8003520:	461a      	mov	r2, r3
 8003522:	2104      	movs	r1, #4
 8003524:	2082      	movs	r0, #130	@ 0x82
 8003526:	f000 f9db 	bl	80038e0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800352a:	2249      	movs	r2, #73	@ 0x49
 800352c:	2120      	movs	r1, #32
 800352e:	2082      	movs	r0, #130	@ 0x82
 8003530:	f000 f9d6 	bl	80038e0 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003534:	2002      	movs	r0, #2
 8003536:	f000 fbd9 	bl	8003cec <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800353a:	2201      	movs	r2, #1
 800353c:	2121      	movs	r1, #33	@ 0x21
 800353e:	2082      	movs	r0, #130	@ 0x82
 8003540:	f000 f9ce 	bl	80038e0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003544:	2017      	movs	r0, #23
 8003546:	f000 f85c 	bl	8003602 <STMPE811_Read>
 800354a:	4603      	mov	r3, r0
 800354c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800354e:	797b      	ldrb	r3, [r7, #5]
 8003550:	f043 031e 	orr.w	r3, r3, #30
 8003554:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003556:	797b      	ldrb	r3, [r7, #5]
 8003558:	461a      	mov	r2, r3
 800355a:	2117      	movs	r1, #23
 800355c:	2082      	movs	r0, #130	@ 0x82
 800355e:	f000 f9bf 	bl	80038e0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003562:	229a      	movs	r2, #154	@ 0x9a
 8003564:	2141      	movs	r1, #65	@ 0x41
 8003566:	2082      	movs	r0, #130	@ 0x82
 8003568:	f000 f9ba 	bl	80038e0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800356c:	2201      	movs	r2, #1
 800356e:	214a      	movs	r1, #74	@ 0x4a
 8003570:	2082      	movs	r0, #130	@ 0x82
 8003572:	f000 f9b5 	bl	80038e0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003576:	2201      	movs	r2, #1
 8003578:	214b      	movs	r1, #75	@ 0x4b
 800357a:	2082      	movs	r0, #130	@ 0x82
 800357c:	f000 f9b0 	bl	80038e0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003580:	2200      	movs	r2, #0
 8003582:	214b      	movs	r1, #75	@ 0x4b
 8003584:	2082      	movs	r0, #130	@ 0x82
 8003586:	f000 f9ab 	bl	80038e0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800358a:	2201      	movs	r2, #1
 800358c:	2156      	movs	r1, #86	@ 0x56
 800358e:	2082      	movs	r0, #130	@ 0x82
 8003590:	f000 f9a6 	bl	80038e0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003594:	2201      	movs	r2, #1
 8003596:	2158      	movs	r1, #88	@ 0x58
 8003598:	2082      	movs	r0, #130	@ 0x82
 800359a:	f000 f9a1 	bl	80038e0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800359e:	2203      	movs	r2, #3
 80035a0:	2140      	movs	r1, #64	@ 0x40
 80035a2:	2082      	movs	r0, #130	@ 0x82
 80035a4:	f000 f99c 	bl	80038e0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80035a8:	22ff      	movs	r2, #255	@ 0xff
 80035aa:	210b      	movs	r1, #11
 80035ac:	2082      	movs	r0, #130	@ 0x82
 80035ae:	f000 f997 	bl	80038e0 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80035b2:	f000 f8c1 	bl	8003738 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80035b6:	2009      	movs	r0, #9
 80035b8:	f000 f823 	bl	8003602 <STMPE811_Read>
 80035bc:	4603      	mov	r3, r0
 80035be:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80035c0:	797b      	ldrb	r3, [r7, #5]
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80035c8:	797b      	ldrb	r3, [r7, #5]
 80035ca:	461a      	mov	r2, r3
 80035cc:	2109      	movs	r1, #9
 80035ce:	2082      	movs	r0, #130	@ 0x82
 80035d0:	f000 f986 	bl	80038e0 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80035d4:	200a      	movs	r0, #10
 80035d6:	f000 f814 	bl	8003602 <STMPE811_Read>
 80035da:	4603      	mov	r3, r0
 80035dc:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80035e6:	797b      	ldrb	r3, [r7, #5]
 80035e8:	461a      	mov	r2, r3
 80035ea:	210a      	movs	r1, #10
 80035ec:	2082      	movs	r0, #130	@ 0x82
 80035ee:	f000 f977 	bl	80038e0 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80035f2:	20c8      	movs	r0, #200	@ 0xc8
 80035f4:	f000 fb7a 	bl	8003cec <HAL_Delay>

    return STMPE811_State_Ok;
 80035f8:	2302      	movs	r3, #2

}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800360c:	f107 020f 	add.w	r2, r7, #15
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	4619      	mov	r1, r3
 8003614:	2082      	movs	r0, #130	@ 0x82
 8003616:	f000 f98d 	bl	8003934 <I2C3_Read>

    return readData;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	460a      	mov	r2, r1
 800362e:	71fb      	strb	r3, [r7, #7]
 8003630:	4613      	mov	r3, r2
 8003632:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003634:	79ba      	ldrb	r2, [r7, #6]
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	4619      	mov	r1, r3
 800363a:	2082      	movs	r0, #130	@ 0x82
 800363c:	f000 f950 	bl	80038e0 <I2C3_Write>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	799b      	ldrb	r3, [r3, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d117      	bne.n	8003688 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f9b1 	bl	80039c4 <TM_STMPE811_ReadX>
 8003662:	4603      	mov	r3, r0
 8003664:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	885b      	ldrh	r3, [r3, #2]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa04 	bl	8003a80 <TM_STMPE811_ReadY>
 8003678:	4603      	mov	r3, r0
 800367a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800367e:	3301      	adds	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	805a      	strh	r2, [r3, #2]
 8003686:	e048      	b.n	800371a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	799b      	ldrb	r3, [r3, #6]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d112      	bne.n	80036b6 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f995 	bl	80039c4 <TM_STMPE811_ReadX>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	885b      	ldrh	r3, [r3, #2]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f9ea 	bl	8003a80 <TM_STMPE811_ReadY>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	805a      	strh	r2, [r3, #2]
 80036b4:	e031      	b.n	800371a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	799b      	ldrb	r3, [r3, #6]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d115      	bne.n	80036ea <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	885b      	ldrh	r3, [r3, #2]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f97e 	bl	80039c4 <TM_STMPE811_ReadX>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f9d3 	bl	8003a80 <TM_STMPE811_ReadY>
 80036da:	4603      	mov	r3, r0
 80036dc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80036e0:	3301      	adds	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e017      	b.n	800371a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d113      	bne.n	800371a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f964 	bl	80039c4 <TM_STMPE811_ReadX>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f9b7 	bl	8003a80 <TM_STMPE811_ReadY>
 8003712:	4603      	mov	r3, r0
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800371a:	2201      	movs	r2, #1
 800371c:	214b      	movs	r1, #75	@ 0x4b
 800371e:	2082      	movs	r0, #130	@ 0x82
 8003720:	f000 f8de 	bl	80038e0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003724:	2200      	movs	r2, #0
 8003726:	214b      	movs	r1, #75	@ 0x4b
 8003728:	2082      	movs	r0, #130	@ 0x82
 800372a:	f000 f8d9 	bl	80038e0 <I2C3_Write>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4b14      	ldr	r3, [pc, #80]	@ (8003794 <enableInterruptSupportForTouch+0x5c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <enableInterruptSupportForTouch+0x5c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <enableInterruptSupportForTouch+0x5c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800376c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800376e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003772:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003778:	2302      	movs	r3, #2
 800377a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	4619      	mov	r1, r3
 8003780:	4805      	ldr	r0, [pc, #20]	@ (8003798 <enableInterruptSupportForTouch+0x60>)
 8003782:	f000 fc5f 	bl	8004044 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003786:	2028      	movs	r0, #40	@ 0x28
 8003788:	f7ff fe56 	bl	8003438 <__NVIC_EnableIRQ>

}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000

0800379c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	2002608c 	.word	0x2002608c

080037bc <I2C3_Init>:

static void I2C3_Init()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <I2C3_Init+0x6c>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <I2C3_Init+0x6c>)
 80037cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d2:	4b15      	ldr	r3, [pc, #84]	@ (8003828 <I2C3_Init+0x6c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80037de:	4b13      	ldr	r3, [pc, #76]	@ (800382c <I2C3_Init+0x70>)
 80037e0:	4a13      	ldr	r2, [pc, #76]	@ (8003830 <I2C3_Init+0x74>)
 80037e2:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <I2C3_Init+0x70>)
 80037e6:	4a13      	ldr	r2, [pc, #76]	@ (8003834 <I2C3_Init+0x78>)
 80037e8:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037ea:	4b10      	ldr	r3, [pc, #64]	@ (800382c <I2C3_Init+0x70>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80037f0:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <I2C3_Init+0x70>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <I2C3_Init+0x70>)
 80037f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037fc:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <I2C3_Init+0x70>)
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003804:	4b09      	ldr	r3, [pc, #36]	@ (800382c <I2C3_Init+0x70>)
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800380a:	4808      	ldr	r0, [pc, #32]	@ (800382c <I2C3_Init+0x70>)
 800380c:	f000 ff1e 	bl	800464c <HAL_I2C_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800381a:	bf00      	nop
 800381c:	e7fd      	b.n	800381a <I2C3_Init+0x5e>
    }
    return;
 800381e:	bf00      	nop
}
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	20026038 	.word	0x20026038
 8003830:	40005c00 	.word	0x40005c00
 8003834:	000186a0 	.word	0x000186a0

08003838 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <I2C3_MspInit+0x9c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <I2C3_MspInit+0x9c>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6313      	str	r3, [r2, #48]	@ 0x30
 800385e:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <I2C3_MspInit+0x9c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <I2C3_MspInit+0x9c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4a18      	ldr	r2, [pc, #96]	@ (80038d4 <I2C3_MspInit+0x9c>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6313      	str	r3, [r2, #48]	@ 0x30
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <I2C3_MspInit+0x9c>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800388a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003898:	2304      	movs	r3, #4
 800389a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4619      	mov	r1, r3
 80038a2:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <I2C3_MspInit+0xa0>)
 80038a4:	f000 fbce 	bl	8004044 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ae:	2312      	movs	r3, #18
 80038b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038ba:	2304      	movs	r3, #4
 80038bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	@ (80038dc <I2C3_MspInit+0xa4>)
 80038c6:	f000 fbbd 	bl	8004044 <HAL_GPIO_Init>
    
}
 80038ca:	bf00      	nop
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020000 	.word	0x40020000

080038e0 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
 80038ea:	460b      	mov	r3, r1
 80038ec:	717b      	strb	r3, [r7, #5]
 80038ee:	4613      	mov	r3, r2
 80038f0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80038f2:	793b      	ldrb	r3, [r7, #4]
 80038f4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80038f6:	797b      	ldrb	r3, [r7, #5]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	88f9      	ldrh	r1, [r7, #6]
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <I2C3_Write+0x48>)
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	2301      	movs	r3, #1
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	f107 030f 	add.w	r3, r7, #15
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2301      	movs	r3, #1
 800390c:	4807      	ldr	r0, [pc, #28]	@ (800392c <I2C3_Write+0x4c>)
 800390e:	f000 ffe1 	bl	80048d4 <HAL_I2C_Mem_Write>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <I2C3_Write+0x50>)
 8003918:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800391a:	f7ff ff3f 	bl	800379c <verifyHAL_I2C_IS_OKAY>
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	0003d090 	.word	0x0003d090
 800392c:	20026038 	.word	0x20026038
 8003930:	2002608c 	.word	0x2002608c

08003934 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af04      	add	r7, sp, #16
 800393a:	4603      	mov	r3, r0
 800393c:	603a      	str	r2, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	460b      	mov	r3, r1
 8003942:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	b299      	uxth	r1, r3
 8003948:	79bb      	ldrb	r3, [r7, #6]
 800394a:	b29a      	uxth	r2, r3
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <I2C3_Read+0x40>)
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	2301      	movs	r3, #1
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2301      	movs	r3, #1
 800395a:	4807      	ldr	r0, [pc, #28]	@ (8003978 <I2C3_Read+0x44>)
 800395c:	f001 f8b4 	bl	8004ac8 <HAL_I2C_Mem_Read>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <I2C3_Read+0x48>)
 8003966:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003968:	f7ff ff18 	bl	800379c <verifyHAL_I2C_IS_OKAY>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	0003d090 	.word	0x0003d090
 8003978:	20026038 	.word	0x20026038
 800397c:	2002608c 	.word	0x2002608c

08003980 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af04      	add	r7, sp, #16
 8003986:	603a      	str	r2, [r7, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
 800398e:	460b      	mov	r3, r1
 8003990:	71bb      	strb	r3, [r7, #6]
 8003992:	4613      	mov	r3, r2
 8003994:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	b299      	uxth	r1, r3
 800399a:	79bb      	ldrb	r3, [r7, #6]
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <I2C3_MulitByteRead+0x3c>)
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	88bb      	ldrh	r3, [r7, #4]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2301      	movs	r3, #1
 80039ac:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <I2C3_MulitByteRead+0x40>)
 80039ae:	f001 f88b 	bl	8004ac8 <HAL_I2C_Mem_Read>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	0003d090 	.word	0x0003d090
 80039c0:	20026038 	.word	0x20026038

080039c4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80039ce:	204d      	movs	r0, #77	@ 0x4d
 80039d0:	f7ff fe17 	bl	8003602 <STMPE811_Read>
 80039d4:	4603      	mov	r3, r0
 80039d6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80039d8:	204e      	movs	r0, #78	@ 0x4e
 80039da:	f7ff fe12 	bl	8003602 <STMPE811_Read>
 80039de:	4603      	mov	r3, r0
 80039e0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80039e2:	7a7b      	ldrb	r3, [r7, #9]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	b21a      	sxth	r2, r3
 80039e8:	7a3b      	ldrb	r3, [r7, #8]
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80039f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039f4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80039f8:	4293      	cmp	r3, r2
 80039fa:	dc06      	bgt.n	8003a0a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80039fc:	89fb      	ldrh	r3, [r7, #14]
 80039fe:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003a02:	330c      	adds	r3, #12
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	81fb      	strh	r3, [r7, #14]
 8003a08:	e005      	b.n	8003a16 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003a10:	3308      	adds	r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <TM_STMPE811_ReadX+0xb8>)
 8003a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a20:	441a      	add	r2, r3
 8003a22:	10d2      	asrs	r2, r2, #3
 8003a24:	17db      	asrs	r3, r3, #31
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a2e:	2bef      	cmp	r3, #239	@ 0xef
 8003a30:	dd02      	ble.n	8003a38 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003a32:	23ef      	movs	r3, #239	@ 0xef
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	e005      	b.n	8003a44 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da01      	bge.n	8003a44 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003a44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dd05      	ble.n	8003a5a <TM_STMPE811_ReadX+0x96>
 8003a4e:	89fa      	ldrh	r2, [r7, #14]
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	e004      	b.n	8003a64 <TM_STMPE811_ReadX+0xa0>
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b21b      	sxth	r3, r3
 8003a64:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003a66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	dd01      	ble.n	8003a72 <TM_STMPE811_ReadX+0xae>
        return val;
 8003a6e:	89fb      	ldrh	r3, [r7, #14]
 8003a70:	e000      	b.n	8003a74 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003a72:	88fb      	ldrh	r3, [r7, #6]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	88888889 	.word	0x88888889

08003a80 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003a8a:	204f      	movs	r0, #79	@ 0x4f
 8003a8c:	f7ff fdb9 	bl	8003602 <STMPE811_Read>
 8003a90:	4603      	mov	r3, r0
 8003a92:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003a94:	2050      	movs	r0, #80	@ 0x50
 8003a96:	f7ff fdb4 	bl	8003602 <STMPE811_Read>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003a9e:	7a7b      	ldrb	r3, [r7, #9]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	b21a      	sxth	r2, r3
 8003aa4:	7a3b      	ldrb	r3, [r7, #8]
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003aac:	89fb      	ldrh	r3, [r7, #14]
 8003aae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003ab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aba:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <TM_STMPE811_ReadY+0xa0>)
 8003abc:	fb82 1203 	smull	r1, r2, r2, r3
 8003ac0:	1052      	asrs	r2, r2, #1
 8003ac2:	17db      	asrs	r3, r3, #31
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003ac8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dc02      	bgt.n	8003ad6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	81fb      	strh	r3, [r7, #14]
 8003ad4:	e007      	b.n	8003ae6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ada:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003ade:	db02      	blt.n	8003ae6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003ae0:	f240 133f 	movw	r3, #319	@ 0x13f
 8003ae4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003ae6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dd05      	ble.n	8003afc <TM_STMPE811_ReadY+0x7c>
 8003af0:	89fa      	ldrh	r2, [r7, #14]
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	e004      	b.n	8003b06 <TM_STMPE811_ReadY+0x86>
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	b21b      	sxth	r3, r3
 8003b06:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	dd01      	ble.n	8003b14 <TM_STMPE811_ReadY+0x94>
        return val;
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	e000      	b.n	8003b16 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003b14:	88fb      	ldrh	r3, [r7, #6]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2e8ba2e9 	.word	0x2e8ba2e9

08003b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b2c:	4a14      	ldr	r2, [pc, #80]	@ (8003b80 <_sbrk+0x5c>)
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <_sbrk+0x60>)
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <_sbrk+0x64>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <_sbrk+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b46:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d207      	bcs.n	8003b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b54:	f004 fbe8 	bl	8008328 <__errno>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e009      	b.n	8003b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <_sbrk+0x64>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b6a:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <_sbrk+0x64>)
 8003b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20030000 	.word	0x20030000
 8003b84:	00000400 	.word	0x00000400
 8003b88:	20026090 	.word	0x20026090
 8003b8c:	20026290 	.word	0x20026290

08003b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <SystemInit+0x20>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <SystemInit+0x20>)
 8003b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bb8:	f7ff ffea 	bl	8003b90 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bbc:	480c      	ldr	r0, [pc, #48]	@ (8003bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bbe:	490d      	ldr	r1, [pc, #52]	@ (8003bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc4:	e002      	b.n	8003bcc <LoopCopyDataInit>

08003bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bca:	3304      	adds	r3, #4

08003bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd0:	d3f9      	bcc.n	8003bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd8:	e001      	b.n	8003bde <LoopFillZerobss>

08003bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bdc:	3204      	adds	r2, #4

08003bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be0:	d3fb      	bcc.n	8003bda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003be2:	f004 fba7 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003be6:	f7fe fc4b 	bl	8002480 <main>
  bx  lr    
 8003bea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003bec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bf4:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8003bf8:	0800a3d4 	.word	0x0800a3d4
  ldr r2, =_sbss
 8003bfc:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8003c00:	20026290 	.word	0x20026290

08003c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <ADC_IRQHandler>
	...

08003c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <HAL_Init+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <HAL_Init+0x40>)
 8003c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_Init+0x40>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <HAL_Init+0x40>)
 8003c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c24:	4b08      	ldr	r3, [pc, #32]	@ (8003c48 <HAL_Init+0x40>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <HAL_Init+0x40>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c30:	2003      	movs	r0, #3
 8003c32:	f000 f991 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c36:	2000      	movs	r0, #0
 8003c38:	f000 f808 	bl	8003c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c3c:	f7ff f93e 	bl	8002ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00

08003c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c54:	4b12      	ldr	r3, [pc, #72]	@ (8003ca0 <HAL_InitTick+0x54>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <HAL_InitTick+0x58>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f9b7 	bl	8003fde <HAL_SYSTICK_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00e      	b.n	8003c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d80a      	bhi.n	8003c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c80:	2200      	movs	r2, #0
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f000 f971 	bl	8003f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c8c:	4a06      	ldr	r2, [pc, #24]	@ (8003ca8 <HAL_InitTick+0x5c>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200001fc 	.word	0x200001fc
 8003ca4:	20000204 	.word	0x20000204
 8003ca8:	20000200 	.word	0x20000200

08003cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <HAL_IncTick+0x20>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_IncTick+0x24>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <HAL_IncTick+0x24>)
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000204 	.word	0x20000204
 8003cd0:	20026094 	.word	0x20026094

08003cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_GetTick+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20026094 	.word	0x20026094

08003cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7ff ffee 	bl	8003cd4 <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d005      	beq.n	8003d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_Delay+0x44>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d12:	bf00      	nop
 8003d14:	f7ff ffde 	bl	8003cd4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d8f7      	bhi.n	8003d14 <HAL_Delay+0x28>
  {
  }
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000204 	.word	0x20000204

08003d34 <__NVIC_SetPriorityGrouping>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d50:	4013      	ands	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d66:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_GetPriorityGrouping>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d80:	4b04      	ldr	r3, [pc, #16]	@ (8003d94 <__NVIC_GetPriorityGrouping+0x18>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0307 	and.w	r3, r3, #7
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_EnableIRQ>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0b      	blt.n	8003dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4907      	ldr	r1, [pc, #28]	@ (8003dd0 <__NVIC_EnableIRQ+0x38>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db12      	blt.n	8003e0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	490a      	ldr	r1, [pc, #40]	@ (8003e18 <__NVIC_DisableIRQ+0x44>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	3320      	adds	r3, #32
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e00:	f3bf 8f4f 	dsb	sy
}
 8003e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e06:	f3bf 8f6f 	isb	sy
}
 8003e0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0c      	blt.n	8003e48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <__NVIC_ClearPendingIRQ+0x38>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	3360      	adds	r3, #96	@ 0x60
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	@ (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	@ (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	@ 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f24:	d301      	bcc.n	8003f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00f      	b.n	8003f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <SysTick_Config+0x40>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f32:	210f      	movs	r1, #15
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	f7ff ff8e 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <SysTick_Config+0x40>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f42:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <SysTick_Config+0x40>)
 8003f44:	2207      	movs	r2, #7
 8003f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e010 	.word	0xe000e010

08003f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fee7 	bl	8003d34 <__NVIC_SetPriorityGrouping>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f80:	f7ff fefc 	bl	8003d7c <__NVIC_GetPriorityGrouping>
 8003f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ff8e 	bl	8003eac <NVIC_EncodePriority>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff5d 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff feef 	bl	8003d98 <__NVIC_EnableIRQ>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff feff 	bl	8003dd4 <__NVIC_DisableIRQ>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff94 	bl	8003f14 <SysTick_Config>
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff09 	bl	8003e1c <__NVIC_ClearPendingIRQ>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2201      	movs	r2, #1
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800402e:	4a04      	ldr	r2, [pc, #16]	@ (8004040 <HAL_EXTI_ClearPending+0x2c>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6153      	str	r3, [r2, #20]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e177      	b.n	8004350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	f040 8166 	bne.w	800434a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d005      	beq.n	8004096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	2b02      	cmp	r3, #2
 8004094:	d130      	bne.n	80040f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 0201 	and.w	r2, r3, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d017      	beq.n	8004134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d123      	bne.n	8004188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	08da      	lsrs	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3208      	adds	r2, #8
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	08da      	lsrs	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3208      	adds	r2, #8
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0203 	and.w	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80c0 	beq.w	800434a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b66      	ldr	r3, [pc, #408]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	4a65      	ldr	r2, [pc, #404]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041da:	4b63      	ldr	r3, [pc, #396]	@ (8004368 <HAL_GPIO_Init+0x324>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e6:	4a61      	ldr	r2, [pc, #388]	@ (800436c <HAL_GPIO_Init+0x328>)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_GPIO_Init+0x32c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d037      	beq.n	8004282 <HAL_GPIO_Init+0x23e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a57      	ldr	r2, [pc, #348]	@ (8004374 <HAL_GPIO_Init+0x330>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d031      	beq.n	800427e <HAL_GPIO_Init+0x23a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a56      	ldr	r2, [pc, #344]	@ (8004378 <HAL_GPIO_Init+0x334>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02b      	beq.n	800427a <HAL_GPIO_Init+0x236>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a55      	ldr	r2, [pc, #340]	@ (800437c <HAL_GPIO_Init+0x338>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d025      	beq.n	8004276 <HAL_GPIO_Init+0x232>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a54      	ldr	r2, [pc, #336]	@ (8004380 <HAL_GPIO_Init+0x33c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <HAL_GPIO_Init+0x22e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a53      	ldr	r2, [pc, #332]	@ (8004384 <HAL_GPIO_Init+0x340>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d019      	beq.n	800426e <HAL_GPIO_Init+0x22a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a52      	ldr	r2, [pc, #328]	@ (8004388 <HAL_GPIO_Init+0x344>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0x226>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a51      	ldr	r2, [pc, #324]	@ (800438c <HAL_GPIO_Init+0x348>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_Init+0x222>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a50      	ldr	r2, [pc, #320]	@ (8004390 <HAL_GPIO_Init+0x34c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_Init+0x21e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4f      	ldr	r2, [pc, #316]	@ (8004394 <HAL_GPIO_Init+0x350>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_Init+0x21a>
 800425a:	2309      	movs	r3, #9
 800425c:	e012      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800425e:	230a      	movs	r3, #10
 8004260:	e010      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004262:	2308      	movs	r3, #8
 8004264:	e00e      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004266:	2307      	movs	r3, #7
 8004268:	e00c      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800426a:	2306      	movs	r3, #6
 800426c:	e00a      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800426e:	2305      	movs	r3, #5
 8004270:	e008      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004272:	2304      	movs	r3, #4
 8004274:	e006      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004276:	2303      	movs	r3, #3
 8004278:	e004      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800427a:	2302      	movs	r3, #2
 800427c:	e002      	b.n	8004284 <HAL_GPIO_Init+0x240>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_GPIO_Init+0x240>
 8004282:	2300      	movs	r3, #0
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f002 0203 	and.w	r2, r2, #3
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	4093      	lsls	r3, r2
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004294:	4935      	ldr	r1, [pc, #212]	@ (800436c <HAL_GPIO_Init+0x328>)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3302      	adds	r3, #2
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c6:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042cc:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f0:	4a29      	ldr	r2, [pc, #164]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f6:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_GPIO_Init+0x354>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800431a:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <HAL_GPIO_Init+0x354>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <HAL_GPIO_Init+0x354>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <HAL_GPIO_Init+0x354>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b0f      	cmp	r3, #15
 8004354:	f67f ae84 	bls.w	8004060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3724      	adds	r7, #36	@ 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	40013800 	.word	0x40013800
 8004370:	40020000 	.word	0x40020000
 8004374:	40020400 	.word	0x40020400
 8004378:	40020800 	.word	0x40020800
 800437c:	40020c00 	.word	0x40020c00
 8004380:	40021000 	.word	0x40021000
 8004384:	40021400 	.word	0x40021400
 8004388:	40021800 	.word	0x40021800
 800438c:	40021c00 	.word	0x40021c00
 8004390:	40022000 	.word	0x40022000
 8004394:	40022400 	.word	0x40022400
 8004398:	40013c00 	.word	0x40013c00

0800439c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e0d9      	b.n	800456c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b8:	2201      	movs	r2, #1
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	f040 80c9 	bne.w	8004566 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80043d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004584 <HAL_GPIO_DeInit+0x1e8>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	3302      	adds	r3, #2
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a63      	ldr	r2, [pc, #396]	@ (8004588 <HAL_GPIO_DeInit+0x1ec>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d037      	beq.n	800446e <HAL_GPIO_DeInit+0xd2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a62      	ldr	r2, [pc, #392]	@ (800458c <HAL_GPIO_DeInit+0x1f0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d031      	beq.n	800446a <HAL_GPIO_DeInit+0xce>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a61      	ldr	r2, [pc, #388]	@ (8004590 <HAL_GPIO_DeInit+0x1f4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02b      	beq.n	8004466 <HAL_GPIO_DeInit+0xca>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a60      	ldr	r2, [pc, #384]	@ (8004594 <HAL_GPIO_DeInit+0x1f8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d025      	beq.n	8004462 <HAL_GPIO_DeInit+0xc6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a5f      	ldr	r2, [pc, #380]	@ (8004598 <HAL_GPIO_DeInit+0x1fc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <HAL_GPIO_DeInit+0xc2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a5e      	ldr	r2, [pc, #376]	@ (800459c <HAL_GPIO_DeInit+0x200>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d019      	beq.n	800445a <HAL_GPIO_DeInit+0xbe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a5d      	ldr	r2, [pc, #372]	@ (80045a0 <HAL_GPIO_DeInit+0x204>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_GPIO_DeInit+0xba>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a5c      	ldr	r2, [pc, #368]	@ (80045a4 <HAL_GPIO_DeInit+0x208>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00d      	beq.n	8004452 <HAL_GPIO_DeInit+0xb6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a5b      	ldr	r2, [pc, #364]	@ (80045a8 <HAL_GPIO_DeInit+0x20c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <HAL_GPIO_DeInit+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a5a      	ldr	r2, [pc, #360]	@ (80045ac <HAL_GPIO_DeInit+0x210>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_GPIO_DeInit+0xae>
 8004446:	2309      	movs	r3, #9
 8004448:	e012      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800444a:	230a      	movs	r3, #10
 800444c:	e010      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800444e:	2308      	movs	r3, #8
 8004450:	e00e      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 8004452:	2307      	movs	r3, #7
 8004454:	e00c      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 8004456:	2306      	movs	r3, #6
 8004458:	e00a      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800445a:	2305      	movs	r3, #5
 800445c:	e008      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800445e:	2304      	movs	r3, #4
 8004460:	e006      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 8004462:	2303      	movs	r3, #3
 8004464:	e004      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 8004466:	2302      	movs	r3, #2
 8004468:	e002      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_GPIO_DeInit+0xd4>
 800446e:	2300      	movs	r3, #0
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	f002 0203 	and.w	r2, r2, #3
 8004476:	0092      	lsls	r2, r2, #2
 8004478:	4093      	lsls	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d132      	bne.n	80044e6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004480:	4b4b      	ldr	r3, [pc, #300]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	4949      	ldr	r1, [pc, #292]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 800448a:	4013      	ands	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800448e:	4b48      	ldr	r3, [pc, #288]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	43db      	mvns	r3, r3
 8004496:	4946      	ldr	r1, [pc, #280]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 8004498:	4013      	ands	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800449c:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	4942      	ldr	r1, [pc, #264]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	493f      	ldr	r1, [pc, #252]	@ (80045b0 <HAL_GPIO_DeInit+0x214>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80044c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004584 <HAL_GPIO_DeInit+0x1e8>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	43da      	mvns	r2, r3
 80044d8:	482a      	ldr	r0, [pc, #168]	@ (8004584 <HAL_GPIO_DeInit+0x1e8>)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	400a      	ands	r2, r1
 80044e0:	3302      	adds	r3, #2
 80044e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2103      	movs	r1, #3
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	401a      	ands	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	08d2      	lsrs	r2, r2, #3
 800451c:	4019      	ands	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2103      	movs	r1, #3
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	2101      	movs	r1, #1
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	2103      	movs	r1, #3
 800455a:	fa01 f303 	lsl.w	r3, r1, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	401a      	ands	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	3301      	adds	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	f67f af22 	bls.w	80043b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40013800 	.word	0x40013800
 8004588:	40020000 	.word	0x40020000
 800458c:	40020400 	.word	0x40020400
 8004590:	40020800 	.word	0x40020800
 8004594:	40020c00 	.word	0x40020c00
 8004598:	40021000 	.word	0x40021000
 800459c:	40021400 	.word	0x40021400
 80045a0:	40021800 	.word	0x40021800
 80045a4:	40021c00 	.word	0x40021c00
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40022400 	.word	0x40022400
 80045b0:	40013c00 	.word	0x40013c00

080045b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	807b      	strh	r3, [r7, #2]
 80045c0:	4613      	mov	r3, r2
 80045c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c4:	787b      	ldrb	r3, [r7, #1]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045d0:	e003      	b.n	80045da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	041a      	lsls	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	619a      	str	r2, [r3, #24]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4013      	ands	r3, r2
 80045fe:	041a      	lsls	r2, r3, #16
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	43d9      	mvns	r1, r3
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	400b      	ands	r3, r1
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	619a      	str	r2, [r3, #24]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004626:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004632:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fa6e 	bl	8002b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40013c00 	.word	0x40013c00

0800464c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e12b      	b.n	80048b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe fc4a 	bl	8002f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	@ 0x24
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800469e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046b0:	f001 ff06 	bl	80064c0 <HAL_RCC_GetPCLK1Freq>
 80046b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a81      	ldr	r2, [pc, #516]	@ (80048c0 <HAL_I2C_Init+0x274>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d807      	bhi.n	80046d0 <HAL_I2C_Init+0x84>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a80      	ldr	r2, [pc, #512]	@ (80048c4 <HAL_I2C_Init+0x278>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	bf94      	ite	ls
 80046c8:	2301      	movls	r3, #1
 80046ca:	2300      	movhi	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e006      	b.n	80046de <HAL_I2C_Init+0x92>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a7d      	ldr	r2, [pc, #500]	@ (80048c8 <HAL_I2C_Init+0x27c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf94      	ite	ls
 80046d8:	2301      	movls	r3, #1
 80046da:	2300      	movhi	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0e7      	b.n	80048b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a78      	ldr	r2, [pc, #480]	@ (80048cc <HAL_I2C_Init+0x280>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	0c9b      	lsrs	r3, r3, #18
 80046f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4a6a      	ldr	r2, [pc, #424]	@ (80048c0 <HAL_I2C_Init+0x274>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d802      	bhi.n	8004720 <HAL_I2C_Init+0xd4>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	e009      	b.n	8004734 <HAL_I2C_Init+0xe8>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	4a69      	ldr	r2, [pc, #420]	@ (80048d0 <HAL_I2C_Init+0x284>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	3301      	adds	r3, #1
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004746:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	495c      	ldr	r1, [pc, #368]	@ (80048c0 <HAL_I2C_Init+0x274>)
 8004750:	428b      	cmp	r3, r1
 8004752:	d819      	bhi.n	8004788 <HAL_I2C_Init+0x13c>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e59      	subs	r1, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004768:	400b      	ands	r3, r1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_I2C_Init+0x138>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1e59      	subs	r1, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fbb1 f3f3 	udiv	r3, r1, r3
 800477c:	3301      	adds	r3, #1
 800477e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004782:	e051      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004784:	2304      	movs	r3, #4
 8004786:	e04f      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <HAL_I2C_Init+0x168>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e012      	b.n	80047da <HAL_I2C_Init+0x18e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e58      	subs	r0, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	0099      	lsls	r1, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Init+0x196>
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_I2C_Init+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1e58      	subs	r0, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	0099      	lsls	r1, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	6809      	ldr	r1, [r1, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004856:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6911      	ldr	r1, [r2, #16]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	000186a0 	.word	0x000186a0
 80048c4:	001e847f 	.word	0x001e847f
 80048c8:	003d08ff 	.word	0x003d08ff
 80048cc:	431bde83 	.word	0x431bde83
 80048d0:	10624dd3 	.word	0x10624dd3

080048d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	817b      	strh	r3, [r7, #10]
 80048e6:	460b      	mov	r3, r1
 80048e8:	813b      	strh	r3, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ee:	f7ff f9f1 	bl	8003cd4 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	f040 80d9 	bne.w	8004ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2319      	movs	r3, #25
 8004908:	2201      	movs	r2, #1
 800490a:	496d      	ldr	r1, [pc, #436]	@ (8004ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fc8b 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
 800491a:	e0cc      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_I2C_Mem_Write+0x56>
 8004926:	2302      	movs	r3, #2
 8004928:	e0c5      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d007      	beq.n	8004950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800495e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2221      	movs	r2, #33	@ 0x21
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a4d      	ldr	r2, [pc, #308]	@ (8004ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8004990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004992:	88f8      	ldrh	r0, [r7, #6]
 8004994:	893a      	ldrh	r2, [r7, #8]
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4603      	mov	r3, r0
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fac2 	bl	8004f2c <I2C_RequestMemoryWrite>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d052      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e081      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fd50 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d107      	bne.n	80049da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e06b      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	781a      	ldrb	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d11b      	bne.n	8004a54 <HAL_I2C_Mem_Write+0x180>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d017      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1aa      	bne.n	80049b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fd43 	bl	80054ec <I2C_WaitOnBTFFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e016      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
  }
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	00100002 	.word	0x00100002
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	@ 0x30
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	460b      	mov	r3, r1
 8004adc:	813b      	strh	r3, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae2:	f7ff f8f7 	bl	8003cd4 <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	f040 8214 	bne.w	8004f1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	2319      	movs	r3, #25
 8004afc:	2201      	movs	r2, #1
 8004afe:	497b      	ldr	r1, [pc, #492]	@ (8004cec <HAL_I2C_Mem_Read+0x224>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fb91 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e207      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2C_Mem_Read+0x56>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e200      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d007      	beq.n	8004b44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2222      	movs	r2, #34	@ 0x22
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2240      	movs	r2, #64	@ 0x40
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf0 <HAL_I2C_Mem_Read+0x228>)
 8004b84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b86:	88f8      	ldrh	r0, [r7, #6]
 8004b88:	893a      	ldrh	r2, [r7, #8]
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4603      	mov	r3, r0
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fa5e 	bl	8005058 <I2C_RequestMemoryRead>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1bc      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d113      	bne.n	8004bd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e190      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d11b      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e170      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d11b      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	e150      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c6c:	e144      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	f200 80f1 	bhi.w	8004e5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d123      	bne.n	8004cc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fc79 	bl	800557c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e145      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cc6:	e117      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d14e      	bne.n	8004d6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4906      	ldr	r1, [pc, #24]	@ (8004cf4 <HAL_I2C_Mem_Read+0x22c>)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 faa4 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e11a      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
 8004cea:	bf00      	nop
 8004cec:	00100002 	.word	0x00100002
 8004cf0:	ffff0000 	.word	0xffff0000
 8004cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d6c:	e0c4      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	2200      	movs	r2, #0
 8004d76:	496c      	ldr	r1, [pc, #432]	@ (8004f28 <HAL_I2C_Mem_Read+0x460>)
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fa55 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0cb      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4955      	ldr	r1, [pc, #340]	@ (8004f28 <HAL_I2C_Mem_Read+0x460>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fa27 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e09d      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e58:	e04e      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fb8c 	bl	800557c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e058      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d124      	bne.n	8004ef8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d107      	bne.n	8004ec6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f47f aeb6 	bne.w	8004c6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	00010004 	.word	0x00010004

08004f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	817b      	strh	r3, [r7, #10]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	813b      	strh	r3, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f960 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7c:	d103      	bne.n	8004f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e05f      	b.n	800504a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f8a:	897b      	ldrh	r3, [r7, #10]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	492d      	ldr	r1, [pc, #180]	@ (8005054 <I2C_RequestMemoryWrite+0x128>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f9bb 	bl	800531c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04c      	b.n	800504a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa46 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d107      	bne.n	8004fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02b      	b.n	800504a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff8:	893b      	ldrh	r3, [r7, #8]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	e021      	b.n	8005048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29b      	uxth	r3, r3
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005014:	6a39      	ldr	r1, [r7, #32]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fa20 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	2b04      	cmp	r3, #4
 8005028:	d107      	bne.n	800503a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e005      	b.n	800504a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800503e:	893b      	ldrh	r3, [r7, #8]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	00010002 	.word	0x00010002

08005058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4603      	mov	r3, r0
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	460b      	mov	r3, r1
 800506c:	813b      	strh	r3, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	2200      	movs	r2, #0
 800509a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f8c2 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b8:	d103      	bne.n	80050c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0aa      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	4952      	ldr	r1, [pc, #328]	@ (8005224 <I2C_RequestMemoryRead+0x1cc>)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f91d 	bl	800531c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e097      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005104:	6a39      	ldr	r1, [r7, #32]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f9a8 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2b04      	cmp	r3, #4
 8005118:	d107      	bne.n	800512a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e076      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	611a      	str	r2, [r3, #16]
 800513e:	e021      	b.n	8005184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b29b      	uxth	r3, r3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f982 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e050      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800517a:	893b      	ldrh	r3, [r7, #8]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005186:	6a39      	ldr	r1, [r7, #32]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f967 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	2b04      	cmp	r3, #4
 800519a:	d107      	bne.n	80051ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e035      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f82b 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00d      	beq.n	80051f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e6:	d103      	bne.n	80051f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e013      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051f4:	897b      	ldrh	r3, [r7, #10]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	6a3a      	ldr	r2, [r7, #32]
 8005208:	4906      	ldr	r1, [pc, #24]	@ (8005224 <I2C_RequestMemoryRead+0x1cc>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f886 	bl	800531c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	00010002 	.word	0x00010002

08005228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005238:	e048      	b.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d044      	beq.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fe fd47 	bl	8003cd4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d139      	bne.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10d      	bne.n	800527e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	43da      	mvns	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	e00c      	b.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x70>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	43da      	mvns	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	429a      	cmp	r2, r3
 800529c:	d116      	bne.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e023      	b.n	8005314 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10d      	bne.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	43da      	mvns	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	e00c      	b.n	800530c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	43da      	mvns	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	429a      	cmp	r2, r3
 8005310:	d093      	beq.n	800523a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800532a:	e071      	b.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533a:	d123      	bne.n	8005384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800534a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	f043 0204 	orr.w	r2, r3, #4
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e067      	b.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d041      	beq.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538c:	f7fe fca2 	bl	8003cd4 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d136      	bne.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10c      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e00b      	b.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	43da      	mvns	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e021      	b.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	0c1b      	lsrs	r3, r3, #16
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10c      	bne.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	43da      	mvns	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e00b      	b.n	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	f47f af6d 	bne.w	800532c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005468:	e034      	b.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f8e3 	bl	8005636 <I2C_IsAcknowledgeFailed>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e034      	b.n	80054e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d028      	beq.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fc27 	bl	8003cd4 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11d      	bne.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a2:	2b80      	cmp	r3, #128	@ 0x80
 80054a4:	d016      	beq.n	80054d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e007      	b.n	80054e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d1c3      	bne.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f8:	e034      	b.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f89b 	bl	8005636 <I2C_IsAcknowledgeFailed>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e034      	b.n	8005574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d028      	beq.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe fbdf 	bl	8003cd4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11d      	bne.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b04      	cmp	r3, #4
 8005534:	d016      	beq.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e007      	b.n	8005574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d1c3      	bne.n	80054fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005588:	e049      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d119      	bne.n	80055cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e030      	b.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fe fb82 	bl	8003cd4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d11d      	bne.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d016      	beq.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e007      	b.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d1ae      	bne.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800564c:	d11b      	bne.n	8005686 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005656:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0bf      	b.n	8005826 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd fc90 	bl	8002fe0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80056d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <HAL_LTDC_Init+0x19c>)
 8005708:	400b      	ands	r3, r1
 800570a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68d9      	ldr	r1, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b3e      	ldr	r3, [pc, #248]	@ (8005830 <HAL_LTDC_Init+0x19c>)
 8005736:	400b      	ands	r3, r1
 8005738:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6919      	ldr	r1, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b33      	ldr	r3, [pc, #204]	@ (8005830 <HAL_LTDC_Init+0x19c>)
 8005764:	400b      	ands	r3, r1
 8005766:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6919      	ldr	r1, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6959      	ldr	r1, [r3, #20]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <HAL_LTDC_Init+0x19c>)
 8005792:	400b      	ands	r3, r1
 8005794:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0206 	orr.w	r2, r2, #6
 8005802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	f000f800 	.word	0xf000f800

08005834 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005834:	b5b0      	push	{r4, r5, r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_LTDC_ConfigLayer+0x1a>
 800584a:	2302      	movs	r3, #2
 800584c:	e02c      	b.n	80058a8 <HAL_LTDC_ConfigLayer+0x74>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2134      	movs	r1, #52	@ 0x34
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4614      	mov	r4, r2
 8005872:	461d      	mov	r5, r3
 8005874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800587c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f811 	bl	80058b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bdb0      	pop	{r4, r5, r7, pc}

080058b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	@ 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058cc:	4413      	add	r3, r2
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	@ 0x84
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	01d2      	lsls	r2, r2, #7
 80058ec:	440a      	add	r2, r1
 80058ee:	3284      	adds	r2, #132	@ 0x84
 80058f0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80058f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005906:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005908:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	01db      	lsls	r3, r3, #7
 8005914:	440b      	add	r3, r1
 8005916:	3384      	adds	r3, #132	@ 0x84
 8005918:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800591e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592e:	4413      	add	r3, r2
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	01db      	lsls	r3, r3, #7
 800593e:	4413      	add	r3, r2
 8005940:	3384      	adds	r3, #132	@ 0x84
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	4611      	mov	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	01d2      	lsls	r2, r2, #7
 800594e:	440a      	add	r2, r1
 8005950:	3284      	adds	r2, #132	@ 0x84
 8005952:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005956:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005966:	4413      	add	r3, r2
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	01db      	lsls	r3, r3, #7
 8005974:	440b      	add	r3, r1
 8005976:	3384      	adds	r3, #132	@ 0x84
 8005978:	4619      	mov	r1, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	01db      	lsls	r3, r3, #7
 800598a:	4413      	add	r3, r2
 800598c:	3384      	adds	r3, #132	@ 0x84
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	4611      	mov	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	01d2      	lsls	r2, r2, #7
 800599a:	440a      	add	r2, r1
 800599c:	3284      	adds	r2, #132	@ 0x84
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	01db      	lsls	r3, r3, #7
 80059ae:	4413      	add	r3, r2
 80059b0:	3384      	adds	r3, #132	@ 0x84
 80059b2:	461a      	mov	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	01db      	lsls	r3, r3, #7
 80059e0:	4413      	add	r3, r2
 80059e2:	3384      	adds	r3, #132	@ 0x84
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	4413      	add	r3, r2
 80059f2:	3384      	adds	r3, #132	@ 0x84
 80059f4:	461a      	mov	r2, r3
 80059f6:	2300      	movs	r3, #0
 80059f8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a00:	461a      	mov	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	431a      	orrs	r2, r3
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	01db      	lsls	r3, r3, #7
 8005a14:	440b      	add	r3, r1
 8005a16:	3384      	adds	r3, #132	@ 0x84
 8005a18:	4619      	mov	r1, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	01db      	lsls	r3, r3, #7
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3384      	adds	r3, #132	@ 0x84
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	4611      	mov	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	01d2      	lsls	r2, r2, #7
 8005a3a:	440a      	add	r2, r1
 8005a3c:	3284      	adds	r2, #132	@ 0x84
 8005a3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a42:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	01db      	lsls	r3, r3, #7
 8005a4e:	4413      	add	r3, r2
 8005a50:	3384      	adds	r3, #132	@ 0x84
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	01db      	lsls	r3, r3, #7
 8005a64:	4413      	add	r3, r2
 8005a66:	3384      	adds	r3, #132	@ 0x84
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	01d2      	lsls	r2, r2, #7
 8005a74:	440a      	add	r2, r1
 8005a76:	3284      	adds	r2, #132	@ 0x84
 8005a78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	6809      	ldr	r1, [r1, #0]
 8005a8e:	4608      	mov	r0, r1
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	01c9      	lsls	r1, r1, #7
 8005a94:	4401      	add	r1, r0
 8005a96:	3184      	adds	r1, #132	@ 0x84
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3384      	adds	r3, #132	@ 0x84
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	01db      	lsls	r3, r3, #7
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3384      	adds	r3, #132	@ 0x84
 8005aba:	461a      	mov	r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	01db      	lsls	r3, r3, #7
 8005aca:	4413      	add	r3, r2
 8005acc:	3384      	adds	r3, #132	@ 0x84
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	e01b      	b.n	8005b1c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d102      	bne.n	8005af2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005aec:	2303      	movs	r3, #3
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e014      	b.n	8005b1c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d00b      	beq.n	8005b12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d007      	beq.n	8005b12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d003      	beq.n	8005b12 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	d102      	bne.n	8005b18 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005b12:	2302      	movs	r3, #2
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e001      	b.n	8005b1c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	01db      	lsls	r3, r3, #7
 8005b26:	4413      	add	r3, r2
 8005b28:	3384      	adds	r3, #132	@ 0x84
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	4611      	mov	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	01d2      	lsls	r2, r2, #7
 8005b36:	440a      	add	r2, r1
 8005b38:	3284      	adds	r2, #132	@ 0x84
 8005b3a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	1acb      	subs	r3, r1, r3
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	6809      	ldr	r1, [r1, #0]
 8005b62:	4608      	mov	r0, r1
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	01c9      	lsls	r1, r1, #7
 8005b68:	4401      	add	r1, r0
 8005b6a:	3184      	adds	r1, #132	@ 0x84
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	01db      	lsls	r3, r3, #7
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3384      	adds	r3, #132	@ 0x84
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	4611      	mov	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	01d2      	lsls	r2, r2, #7
 8005b8a:	440a      	add	r2, r1
 8005b8c:	3284      	adds	r2, #132	@ 0x84
 8005b8e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3384      	adds	r3, #132	@ 0x84
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	01db      	lsls	r3, r3, #7
 8005bb8:	4413      	add	r3, r2
 8005bba:	3384      	adds	r3, #132	@ 0x84
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	01d2      	lsls	r2, r2, #7
 8005bc8:	440a      	add	r2, r1
 8005bca:	3284      	adds	r2, #132	@ 0x84
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6013      	str	r3, [r2, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3724      	adds	r7, #36	@ 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e267      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d075      	beq.n	8005cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bfe:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d00c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c0a:	4b85      	ldr	r3, [pc, #532]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d112      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c22:	d10b      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c24:	4b7e      	ldr	r3, [pc, #504]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05b      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x108>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d157      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e242      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d106      	bne.n	8005c54 <HAL_RCC_OscConfig+0x74>
 8005c46:	4b76      	ldr	r3, [pc, #472]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a75      	ldr	r2, [pc, #468]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e01d      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCC_OscConfig+0x98>
 8005c5e:	4b70      	ldr	r3, [pc, #448]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6f      	ldr	r2, [pc, #444]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00b      	b.n	8005c90 <HAL_RCC_OscConfig+0xb0>
 8005c78:	4b69      	ldr	r3, [pc, #420]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a68      	ldr	r2, [pc, #416]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b66      	ldr	r3, [pc, #408]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a65      	ldr	r2, [pc, #404]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fe f81c 	bl	8003cd4 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fe f818 	bl	8003cd4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e207      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xc0>
 8005cbe:	e014      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc0:	f7fe f808 	bl	8003cd4 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc8:	f7fe f804 	bl	8003cd4 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b64      	cmp	r3, #100	@ 0x64
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e1f3      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0xe8>
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d063      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d02:	4b47      	ldr	r3, [pc, #284]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0e:	4b44      	ldr	r3, [pc, #272]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	4b41      	ldr	r3, [pc, #260]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1c7      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d32:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4937      	ldr	r1, [pc, #220]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	e03a      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d020      	beq.n	8005d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d50:	4b34      	ldr	r3, [pc, #208]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d56:	f7fd ffbd 	bl	8003cd4 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5e:	f7fd ffb9 	bl	8003cd4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e1a8      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d70:	4b2b      	ldr	r3, [pc, #172]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4925      	ldr	r1, [pc, #148]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	e015      	b.n	8005dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d92:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <HAL_RCC_OscConfig+0x244>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fd ff9c 	bl	8003cd4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da0:	f7fd ff98 	bl	8003cd4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e187      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d036      	beq.n	8005e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd2:	4b15      	ldr	r3, [pc, #84]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fd ff7c 	bl	8003cd4 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de0:	f7fd ff78 	bl	8003cd4 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e167      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <HAL_RCC_OscConfig+0x240>)
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x200>
 8005dfe:	e01b      	b.n	8005e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e00:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <HAL_RCC_OscConfig+0x248>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e06:	f7fd ff65 	bl	8003cd4 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e0c:	e00e      	b.n	8005e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7fd ff61 	bl	8003cd4 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d907      	bls.n	8005e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e150      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	42470000 	.word	0x42470000
 8005e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e2c:	4b88      	ldr	r3, [pc, #544]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ea      	bne.n	8005e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8097 	beq.w	8005f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e4a:	4b81      	ldr	r3, [pc, #516]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e66:	4b7a      	ldr	r3, [pc, #488]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e76:	4b77      	ldr	r3, [pc, #476]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d118      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e82:	4b74      	ldr	r3, [pc, #464]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a73      	ldr	r2, [pc, #460]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8e:	f7fd ff21 	bl	8003cd4 <HAL_GetTick>
 8005e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fd ff1d 	bl	8003cd4 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e10c      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8006054 <HAL_RCC_OscConfig+0x474>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <HAL_RCC_OscConfig+0x2ea>
 8005ebc:	4b64      	ldr	r3, [pc, #400]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	4a63      	ldr	r2, [pc, #396]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec8:	e01c      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0x30c>
 8005ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ede:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0x324>
 8005eec:	4b58      	ldr	r3, [pc, #352]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef0:	4a57      	ldr	r2, [pc, #348]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef8:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efc:	4a54      	ldr	r2, [pc, #336]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005efe:	f023 0304 	bic.w	r3, r3, #4
 8005f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d015      	beq.n	8005f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fd fee2 	bl	8003cd4 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f14:	f7fd fede 	bl	8003cd4 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0cb      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	4b49      	ldr	r3, [pc, #292]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ee      	beq.n	8005f14 <HAL_RCC_OscConfig+0x334>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fd fecc 	bl	8003cd4 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f40:	f7fd fec8 	bl	8003cd4 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0b5      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f56:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ee      	bne.n	8005f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	4a38      	ldr	r2, [pc, #224]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80a1 	beq.w	80060c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d05c      	beq.n	8006044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d141      	bne.n	8006016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f92:	4b31      	ldr	r3, [pc, #196]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fd fe9c 	bl	8003cd4 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fd fe98 	bl	8003cd4 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e087      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb2:	4b27      	ldr	r3, [pc, #156]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	019b      	lsls	r3, r3, #6
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	491b      	ldr	r1, [pc, #108]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fee:	f7fd fe71 	bl	8003cd4 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff6:	f7fd fe6d 	bl	8003cd4 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e05c      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006008:	4b11      	ldr	r3, [pc, #68]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x416>
 8006014:	e054      	b.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RCC_OscConfig+0x478>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fd fe5a 	bl	8003cd4 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd fe56 	bl	8003cd4 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e045      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_OscConfig+0x470>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x444>
 8006042:	e03d      	b.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d107      	bne.n	800605c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e038      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
 8006050:	40023800 	.word	0x40023800
 8006054:	40007000 	.word	0x40007000
 8006058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <HAL_RCC_OscConfig+0x4ec>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d028      	beq.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d121      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d11a      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800608c:	4013      	ands	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006094:	4293      	cmp	r3, r2
 8006096:	d111      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	3b01      	subs	r3, #1
 80060a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800

080060d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0cc      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060e4:	4b68      	ldr	r3, [pc, #416]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d90c      	bls.n	800610c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b65      	ldr	r3, [pc, #404]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b63      	ldr	r3, [pc, #396]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0b8      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006124:	4b59      	ldr	r3, [pc, #356]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a58      	ldr	r2, [pc, #352]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800612e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800613c:	4b53      	ldr	r3, [pc, #332]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a52      	ldr	r2, [pc, #328]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b50      	ldr	r3, [pc, #320]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	494d      	ldr	r1, [pc, #308]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d044      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d119      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e07f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d003      	beq.n	800618e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800618a:	2b03      	cmp	r3, #3
 800618c:	d107      	bne.n	800619e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618e:	4b3f      	ldr	r3, [pc, #252]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e06f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619e:	4b3b      	ldr	r3, [pc, #236]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e067      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ae:	4b37      	ldr	r3, [pc, #220]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f023 0203 	bic.w	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4934      	ldr	r1, [pc, #208]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061c0:	f7fd fd88 	bl	8003cd4 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	e00a      	b.n	80061de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c8:	f7fd fd84 	bl	8003cd4 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e04f      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061de:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 020c 	and.w	r2, r3, #12
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d1eb      	bne.n	80061c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061f0:	4b25      	ldr	r3, [pc, #148]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d20c      	bcs.n	8006218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fe:	4b22      	ldr	r3, [pc, #136]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006206:	4b20      	ldr	r3, [pc, #128]	@ (8006288 <HAL_RCC_ClockConfig+0x1b8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e032      	b.n	800627e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006224:	4b19      	ldr	r3, [pc, #100]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4916      	ldr	r1, [pc, #88]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006242:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	490e      	ldr	r1, [pc, #56]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006256:	f000 f821 	bl	800629c <HAL_RCC_GetSysClockFreq>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	490a      	ldr	r1, [pc, #40]	@ (8006290 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	5ccb      	ldrb	r3, [r1, r3]
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <HAL_RCC_ClockConfig+0x1c8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fce8 	bl	8003c4c <HAL_InitTick>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023c00 	.word	0x40023c00
 800628c:	40023800 	.word	0x40023800
 8006290:	0800a35c 	.word	0x0800a35c
 8006294:	200001fc 	.word	0x200001fc
 8006298:	20000200 	.word	0x20000200

0800629c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b094      	sub	sp, #80	@ 0x50
 80062a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062b4:	4b79      	ldr	r3, [pc, #484]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d00d      	beq.n	80062dc <HAL_RCC_GetSysClockFreq+0x40>
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	f200 80e1 	bhi.w	8006488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_RCC_GetSysClockFreq+0x34>
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d003      	beq.n	80062d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ce:	e0db      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d0:	4b73      	ldr	r3, [pc, #460]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80062d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062d4:	e0db      	b.n	800648e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062d6:	4b73      	ldr	r3, [pc, #460]	@ (80064a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062da:	e0d8      	b.n	800648e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062dc:	4b6f      	ldr	r3, [pc, #444]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062e6:	4b6d      	ldr	r3, [pc, #436]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d063      	beq.n	80063ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062f2:	4b6a      	ldr	r3, [pc, #424]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	2200      	movs	r2, #0
 80062fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	633b      	str	r3, [r7, #48]	@ 0x30
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
 800630a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	0159      	lsls	r1, r3, #5
 800631c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006320:	0150      	lsls	r0, r2, #5
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4621      	mov	r1, r4
 8006328:	1a51      	subs	r1, r2, r1
 800632a:	6139      	str	r1, [r7, #16]
 800632c:	4629      	mov	r1, r5
 800632e:	eb63 0301 	sbc.w	r3, r3, r1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006340:	4659      	mov	r1, fp
 8006342:	018b      	lsls	r3, r1, #6
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800634a:	4651      	mov	r1, sl
 800634c:	018a      	lsls	r2, r1, #6
 800634e:	4651      	mov	r1, sl
 8006350:	ebb2 0801 	subs.w	r8, r2, r1
 8006354:	4659      	mov	r1, fp
 8006356:	eb63 0901 	sbc.w	r9, r3, r1
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800636a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800636e:	4690      	mov	r8, r2
 8006370:	4699      	mov	r9, r3
 8006372:	4623      	mov	r3, r4
 8006374:	eb18 0303 	adds.w	r3, r8, r3
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	462b      	mov	r3, r5
 800637c:	eb49 0303 	adc.w	r3, r9, r3
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800638e:	4629      	mov	r1, r5
 8006390:	024b      	lsls	r3, r1, #9
 8006392:	4621      	mov	r1, r4
 8006394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006398:	4621      	mov	r1, r4
 800639a:	024a      	lsls	r2, r1, #9
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a2:	2200      	movs	r2, #0
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ac:	f7f9 ff78 	bl	80002a0 <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b8:	e058      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ba:	4b38      	ldr	r3, [pc, #224]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	099b      	lsrs	r3, r3, #6
 80063c0:	2200      	movs	r2, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	4611      	mov	r1, r2
 80063c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	2300      	movs	r3, #0
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	f04f 0000 	mov.w	r0, #0
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	0159      	lsls	r1, r3, #5
 80063e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063e6:	0150      	lsls	r0, r2, #5
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4641      	mov	r1, r8
 80063ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80063f2:	4649      	mov	r1, r9
 80063f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800640c:	ebb2 040a 	subs.w	r4, r2, sl
 8006410:	eb63 050b 	sbc.w	r5, r3, fp
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	00eb      	lsls	r3, r5, #3
 800641e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006422:	00e2      	lsls	r2, r4, #3
 8006424:	4614      	mov	r4, r2
 8006426:	461d      	mov	r5, r3
 8006428:	4643      	mov	r3, r8
 800642a:	18e3      	adds	r3, r4, r3
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	464b      	mov	r3, r9
 8006430:	eb45 0303 	adc.w	r3, r5, r3
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006442:	4629      	mov	r1, r5
 8006444:	028b      	lsls	r3, r1, #10
 8006446:	4621      	mov	r1, r4
 8006448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800644c:	4621      	mov	r1, r4
 800644e:	028a      	lsls	r2, r1, #10
 8006450:	4610      	mov	r0, r2
 8006452:	4619      	mov	r1, r3
 8006454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006456:	2200      	movs	r2, #0
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	61fa      	str	r2, [r7, #28]
 800645c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006460:	f7f9 ff1e 	bl	80002a0 <__aeabi_uldivmod>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4613      	mov	r3, r2
 800646a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <HAL_RCC_GetSysClockFreq+0x200>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	3301      	adds	r3, #1
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800647c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800647e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006486:	e002      	b.n	800648e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006488:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800648a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800648c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800648e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006490:	4618      	mov	r0, r3
 8006492:	3750      	adds	r7, #80	@ 0x50
 8006494:	46bd      	mov	sp, r7
 8006496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649a:	bf00      	nop
 800649c:	40023800 	.word	0x40023800
 80064a0:	00f42400 	.word	0x00f42400
 80064a4:	007a1200 	.word	0x007a1200

080064a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064ac:	4b03      	ldr	r3, [pc, #12]	@ (80064bc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ae:	681b      	ldr	r3, [r3, #0]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	200001fc 	.word	0x200001fc

080064c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c4:	f7ff fff0 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	0a9b      	lsrs	r3, r3, #10
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	4903      	ldr	r1, [pc, #12]	@ (80064e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d6:	5ccb      	ldrb	r3, [r1, r3]
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40023800 	.word	0x40023800
 80064e4:	0800a36c 	.word	0x0800a36c

080064e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006518:	2b00      	cmp	r3, #0
 800651a:	d075      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800651c:	4b91      	ldr	r3, [pc, #580]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006522:	f7fd fbd7 	bl	8003cd4 <HAL_GetTick>
 8006526:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006528:	e008      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800652a:	f7fd fbd3 	bl	8003cd4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e189      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800653c:	4b8a      	ldr	r3, [pc, #552]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	019a      	lsls	r2, r3, #6
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	071b      	lsls	r3, r3, #28
 8006560:	4981      	ldr	r1, [pc, #516]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01f      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006574:	4b7c      	ldr	r3, [pc, #496]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800657a:	0f1b      	lsrs	r3, r3, #28
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	019a      	lsls	r2, r3, #6
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	431a      	orrs	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	071b      	lsls	r3, r3, #28
 8006594:	4974      	ldr	r1, [pc, #464]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800659c:	4b72      	ldr	r3, [pc, #456]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a2:	f023 021f 	bic.w	r2, r3, #31
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	496e      	ldr	r1, [pc, #440]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	019a      	lsls	r2, r3, #6
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	071b      	lsls	r3, r3, #28
 80065d4:	4964      	ldr	r1, [pc, #400]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065dc:	4b61      	ldr	r3, [pc, #388]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065e2:	f7fd fb77 	bl	8003cd4 <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ea:	f7fd fb73 	bl	8003cd4 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e129      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d079      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006620:	4b52      	ldr	r3, [pc, #328]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006626:	f7fd fb55 	bl	8003cd4 <HAL_GetTick>
 800662a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800662e:	f7fd fb51 	bl	8003cd4 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e107      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006640:	4b49      	ldr	r3, [pc, #292]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d0ef      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d020      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800665a:	4b43      	ldr	r3, [pc, #268]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006660:	0f1b      	lsrs	r3, r3, #28
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	019a      	lsls	r2, r3, #6
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	061b      	lsls	r3, r3, #24
 8006674:	431a      	orrs	r2, r3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	071b      	lsls	r3, r3, #28
 800667a:	493b      	ldr	r1, [pc, #236]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006682:	4b39      	ldr	r3, [pc, #228]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006688:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	3b01      	subs	r3, #1
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	4934      	ldr	r1, [pc, #208]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01e      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ae:	0e1b      	lsrs	r3, r3, #24
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	019a      	lsls	r2, r3, #6
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	071b      	lsls	r3, r3, #28
 80066c8:	4927      	ldr	r1, [pc, #156]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066d0:	4b25      	ldr	r3, [pc, #148]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	4922      	ldr	r1, [pc, #136]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066e6:	4b21      	ldr	r3, [pc, #132]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ec:	f7fd faf2 	bl	8003cd4 <HAL_GetTick>
 80066f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066f4:	f7fd faee 	bl	8003cd4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e0a4      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006706:	4b18      	ldr	r3, [pc, #96]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006712:	d1ef      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 808b 	beq.w	8006838 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b10      	ldr	r3, [pc, #64]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672a:	4a0f      	ldr	r2, [pc, #60]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006730:	6413      	str	r3, [r2, #64]	@ 0x40
 8006732:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800673e:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a0b      	ldr	r2, [pc, #44]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800674a:	f7fd fac3 	bl	8003cd4 <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006750:	e010      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006752:	f7fd fabf 	bl	8003cd4 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d909      	bls.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e075      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006764:	42470068 	.word	0x42470068
 8006768:	40023800 	.word	0x40023800
 800676c:	42470070 	.word	0x42470070
 8006770:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006774:	4b38      	ldr	r3, [pc, #224]	@ (8006858 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0e8      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006780:	4b36      	ldr	r3, [pc, #216]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006788:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02f      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	429a      	cmp	r2, r3
 800679c:	d028      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800679e:	4b2f      	ldr	r3, [pc, #188]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067b4:	4a29      	ldr	r2, [pc, #164]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067ba:	4b28      	ldr	r3, [pc, #160]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d114      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067c6:	f7fd fa85 	bl	8003cd4 <HAL_GetTick>
 80067ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067cc:	e00a      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ce:	f7fd fa81 	bl	8003cd4 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e035      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e4:	4b1d      	ldr	r3, [pc, #116]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0ee      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067fc:	d10d      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067fe:	4b17      	ldr	r3, [pc, #92]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	4912      	ldr	r1, [pc, #72]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006814:	4313      	orrs	r3, r2
 8006816:	608b      	str	r3, [r1, #8]
 8006818:	e005      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800681a:	4b10      	ldr	r3, [pc, #64]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	4a0f      	ldr	r2, [pc, #60]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006820:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006824:	6093      	str	r3, [r2, #8]
 8006826:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006828:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006832:	490a      	ldr	r1, [pc, #40]	@ (800685c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006834:	4313      	orrs	r3, r2
 8006836:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800684a:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800684c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40007000 	.word	0x40007000
 800685c:	40023800 	.word	0x40023800
 8006860:	42470e40 	.word	0x42470e40
 8006864:	424711e0 	.word	0x424711e0

08006868 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e01c      	b.n	80068b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	795b      	ldrb	r3, [r3, #5]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fc fcd0 	bl	8003230 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0204 	orr.w	r2, r2, #4
 80068a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e044      	b.n	8006960 <HAL_RNG_GenerateRandomNumber+0xa4>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	795b      	ldrb	r3, [r3, #5]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d133      	bne.n	800694e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068ec:	f7fd f9f2 	bl	8003cd4 <HAL_GetTick>
 80068f0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068f2:	e018      	b.n	8006926 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80068f4:	f7fd f9ee 	bl	8003cd4 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d911      	bls.n	8006926 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d00a      	beq.n	8006926 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e01c      	b.n	8006960 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d1df      	bne.n	80068f4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	715a      	strb	r2, [r3, #5]
 800694c:	e004      	b.n	8006958 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	711a      	strb	r2, [r3, #4]

  return status;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07b      	b.n	8006a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d108      	bne.n	8006994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800698a:	d009      	beq.n	80069a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	61da      	str	r2, [r3, #28]
 8006992:	e005      	b.n	80069a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fc fc5a 	bl	8003274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a24:	ea42 0103 	orr.w	r1, r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	f003 0104 	and.w	r1, r3, #4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	f003 0210 	and.w	r2, r3, #16
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e01a      	b.n	8006ac2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fc fc2d 	bl	8003304 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b088      	sub	sp, #32
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ada:	f7fd f8fb 	bl	8003cd4 <HAL_GetTick>
 8006ade:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d001      	beq.n	8006af4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
 8006af2:	e12a      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_SPI_Transmit+0x36>
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e122      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_SPI_Transmit+0x48>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e11b      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2203      	movs	r2, #3
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b60:	d10f      	bne.n	8006b82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	d007      	beq.n	8006ba0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d152      	bne.n	8006c50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_SPI_Transmit+0xee>
 8006bb2:	8b7b      	ldrh	r3, [r7, #26]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d145      	bne.n	8006c44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	1c9a      	adds	r2, r3, #2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bdc:	e032      	b.n	8006c44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d112      	bne.n	8006c12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	1c9a      	adds	r2, r3, #2
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c10:	e018      	b.n	8006c44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c12:	f7fd f85f 	bl	8003cd4 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d803      	bhi.n	8006c2a <HAL_SPI_Transmit+0x160>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d102      	bne.n	8006c30 <HAL_SPI_Transmit+0x166>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e082      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1c7      	bne.n	8006bde <HAL_SPI_Transmit+0x114>
 8006c4e:	e053      	b.n	8006cf8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_SPI_Transmit+0x194>
 8006c58:	8b7b      	ldrh	r3, [r7, #26]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d147      	bne.n	8006cee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	7812      	ldrb	r2, [r2, #0]
 8006c6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c84:	e033      	b.n	8006cee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d113      	bne.n	8006cbc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006cba:	e018      	b.n	8006cee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cbc:	f7fd f80a 	bl	8003cd4 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d803      	bhi.n	8006cd4 <HAL_SPI_Transmit+0x20a>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d102      	bne.n	8006cda <HAL_SPI_Transmit+0x210>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e02d      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1c6      	bne.n	8006c86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f8bf 	bl	8006e80 <SPI_EndRxTxTransaction>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3720      	adds	r7, #32
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d60:	b2db      	uxtb	r3, r3
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d80:	f7fc ffa8 	bl	8003cd4 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d90:	f7fc ffa0 	bl	8003cd4 <HAL_GetTick>
 8006d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d96:	4b39      	ldr	r3, [pc, #228]	@ (8006e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	015b      	lsls	r3, r3, #5
 8006d9c:	0d1b      	lsrs	r3, r3, #20
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006da6:	e054      	b.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d050      	beq.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db0:	f7fc ff90 	bl	8003cd4 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d902      	bls.n	8006dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d13d      	bne.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dde:	d111      	bne.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de8:	d004      	beq.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df2:	d107      	bne.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0c:	d10f      	bne.n	8006e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e017      	b.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	bf0c      	ite	eq
 8006e62:	2301      	moveq	r3, #1
 8006e64:	2300      	movne	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d19b      	bne.n	8006da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200001fc 	.word	0x200001fc

08006e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2201      	movs	r2, #1
 8006e94:	2102      	movs	r1, #2
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff ff6a 	bl	8006d70 <SPI_WaitFlagStateUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea6:	f043 0220 	orr.w	r2, r3, #32
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e032      	b.n	8006f18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <SPI_EndRxTxTransaction+0xa0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f24 <SPI_EndRxTxTransaction+0xa4>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	0d5b      	lsrs	r3, r3, #21
 8006ebe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ed0:	d112      	bne.n	8006ef8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	@ 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff ff47 	bl	8006d70 <SPI_WaitFlagStateUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d016      	beq.n	8006f16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eec:	f043 0220 	orr.w	r2, r3, #32
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e00f      	b.n	8006f18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0e:	2b80      	cmp	r3, #128	@ 0x80
 8006f10:	d0f2      	beq.n	8006ef8 <SPI_EndRxTxTransaction+0x78>
 8006f12:	e000      	b.n	8006f16 <SPI_EndRxTxTransaction+0x96>
        break;
 8006f14:	bf00      	nop
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200001fc 	.word	0x200001fc
 8006f24:	165e9f81 	.word	0x165e9f81

08006f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e041      	b.n	8006fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fc f9f6 	bl	8003340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f000 fae6 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d001      	beq.n	8006fe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e046      	b.n	800706e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a23      	ldr	r2, [pc, #140]	@ (800707c <HAL_TIM_Base_Start+0xb4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d01d      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1f      	ldr	r2, [pc, #124]	@ (8007080 <HAL_TIM_Base_Start+0xb8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1e      	ldr	r2, [pc, #120]	@ (8007084 <HAL_TIM_Base_Start+0xbc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1c      	ldr	r2, [pc, #112]	@ (8007088 <HAL_TIM_Base_Start+0xc0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1b      	ldr	r2, [pc, #108]	@ (800708c <HAL_TIM_Base_Start+0xc4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <HAL_TIM_Base_Start+0xc8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_TIM_Base_Start+0x70>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <HAL_TIM_Base_Start+0xcc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d111      	bne.n	800705c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b06      	cmp	r3, #6
 8007048:	d010      	beq.n	800706c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705a:	e007      	b.n	800706c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40010400 	.word	0x40010400
 8007090:	40014000 	.word	0x40014000
 8007094:	40001800 	.word	0x40001800

08007098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d001      	beq.n	80070b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e04e      	b.n	800714e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a23      	ldr	r2, [pc, #140]	@ (800715c <HAL_TIM_Base_Start_IT+0xc4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d022      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070da:	d01d      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007160 <HAL_TIM_Base_Start_IT+0xc8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007164 <HAL_TIM_Base_Start_IT+0xcc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007168 <HAL_TIM_Base_Start_IT+0xd0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <HAL_TIM_Base_Start_IT+0xd4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a19      	ldr	r2, [pc, #100]	@ (8007170 <HAL_TIM_Base_Start_IT+0xd8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x80>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <HAL_TIM_Base_Start_IT+0xdc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d111      	bne.n	800713c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b06      	cmp	r3, #6
 8007128:	d010      	beq.n	800714c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0201 	orr.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713a:	e007      	b.n	800714c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40010000 	.word	0x40010000
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40010400 	.word	0x40010400
 8007170:	40014000 	.word	0x40014000
 8007174:	40001800 	.word	0x40001800

08007178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0202 	mvn.w	r2, #2
 80071ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f999 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f98b 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f99c 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d020      	beq.n	8007228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0204 	mvn.w	r2, #4
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f973 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f965 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f976 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d020      	beq.n	8007274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01b      	beq.n	8007274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0208 	mvn.w	r2, #8
 8007244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2204      	movs	r2, #4
 800724a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f94d 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 8007260:	e005      	b.n	800726e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f93f 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f950 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b00      	cmp	r3, #0
 800727c:	d020      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0210 	mvn.w	r2, #16
 8007290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2208      	movs	r2, #8
 8007296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f927 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 80072ac:	e005      	b.n	80072ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f919 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f92a 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00c      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0201 	mvn.w	r2, #1
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb fbe0 	bl	8002aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fae4 	bl	80078d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f8fb 	bl	8007522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00c      	beq.n	8007350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0220 	mvn.w	r2, #32
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fab6 	bl	80078bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_TIM_ConfigClockSource+0x1c>
 8007370:	2302      	movs	r3, #2
 8007372:	e0b4      	b.n	80074de <HAL_TIM_ConfigClockSource+0x186>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800739a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ac:	d03e      	beq.n	800742c <HAL_TIM_ConfigClockSource+0xd4>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b2:	f200 8087 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ba:	f000 8086 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x172>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c2:	d87f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073c4:	2b70      	cmp	r3, #112	@ 0x70
 80073c6:	d01a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0xa6>
 80073c8:	2b70      	cmp	r3, #112	@ 0x70
 80073ca:	d87b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073cc:	2b60      	cmp	r3, #96	@ 0x60
 80073ce:	d050      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x11a>
 80073d0:	2b60      	cmp	r3, #96	@ 0x60
 80073d2:	d877      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b50      	cmp	r3, #80	@ 0x50
 80073d6:	d03c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0xfa>
 80073d8:	2b50      	cmp	r3, #80	@ 0x50
 80073da:	d873      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b40      	cmp	r3, #64	@ 0x40
 80073de:	d058      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x13a>
 80073e0:	2b40      	cmp	r3, #64	@ 0x40
 80073e2:	d86f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b30      	cmp	r3, #48	@ 0x30
 80073e6:	d064      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	2b30      	cmp	r3, #48	@ 0x30
 80073ea:	d86b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d060      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d867      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d05a      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	e062      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	f000 f9b9 	bl	8007784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e04f      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	f000 f9a2 	bl	8007784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800744e:	609a      	str	r2, [r3, #8]
      break;
 8007450:	e03c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	461a      	mov	r2, r3
 8007460:	f000 f916 	bl	8007690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2150      	movs	r1, #80	@ 0x50
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f96f 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8007470:	e02c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	461a      	mov	r2, r3
 8007480:	f000 f935 	bl	80076ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2160      	movs	r1, #96	@ 0x60
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f95f 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 8007490:	e01c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 f8f6 	bl	8007690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2140      	movs	r1, #64	@ 0x40
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f94f 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f000 f946 	bl	800774e <TIM_ITRx_SetConfig>
      break;
 80074c2:	e003      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a46      	ldr	r2, [pc, #280]	@ (8007664 <TIM_Base_SetConfig+0x12c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d013      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007556:	d00f      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a43      	ldr	r2, [pc, #268]	@ (8007668 <TIM_Base_SetConfig+0x130>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00b      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a42      	ldr	r2, [pc, #264]	@ (800766c <TIM_Base_SetConfig+0x134>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d007      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a41      	ldr	r2, [pc, #260]	@ (8007670 <TIM_Base_SetConfig+0x138>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a40      	ldr	r2, [pc, #256]	@ (8007674 <TIM_Base_SetConfig+0x13c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d108      	bne.n	800758a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a35      	ldr	r2, [pc, #212]	@ (8007664 <TIM_Base_SetConfig+0x12c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d02b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007598:	d027      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a32      	ldr	r2, [pc, #200]	@ (8007668 <TIM_Base_SetConfig+0x130>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d023      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a31      	ldr	r2, [pc, #196]	@ (800766c <TIM_Base_SetConfig+0x134>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01f      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a30      	ldr	r2, [pc, #192]	@ (8007670 <TIM_Base_SetConfig+0x138>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2f      	ldr	r2, [pc, #188]	@ (8007674 <TIM_Base_SetConfig+0x13c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d017      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007678 <TIM_Base_SetConfig+0x140>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2d      	ldr	r2, [pc, #180]	@ (800767c <TIM_Base_SetConfig+0x144>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00f      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2c      	ldr	r2, [pc, #176]	@ (8007680 <TIM_Base_SetConfig+0x148>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007684 <TIM_Base_SetConfig+0x14c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007688 <TIM_Base_SetConfig+0x150>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <TIM_Base_SetConfig+0x154>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a10      	ldr	r2, [pc, #64]	@ (8007664 <TIM_Base_SetConfig+0x12c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a12      	ldr	r2, [pc, #72]	@ (8007674 <TIM_Base_SetConfig+0x13c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d103      	bne.n	8007638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f023 0201 	bic.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	611a      	str	r2, [r3, #16]
  }
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40010000 	.word	0x40010000
 8007668:	40000400 	.word	0x40000400
 800766c:	40000800 	.word	0x40000800
 8007670:	40000c00 	.word	0x40000c00
 8007674:	40010400 	.word	0x40010400
 8007678:	40014000 	.word	0x40014000
 800767c:	40014400 	.word	0x40014400
 8007680:	40014800 	.word	0x40014800
 8007684:	40001800 	.word	0x40001800
 8007688:	40001c00 	.word	0x40001c00
 800768c:	40002000 	.word	0x40002000

08007690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 030a 	bic.w	r3, r3, #10
 80076cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f023 0210 	bic.w	r2, r3, #16
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	031b      	lsls	r3, r3, #12
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800772a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	f043 0307 	orr.w	r3, r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800779e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	021a      	lsls	r2, r3, #8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	609a      	str	r2, [r3, #8]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d8:	2302      	movs	r3, #2
 80077da:	e05a      	b.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d022      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007828:	d01d      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1d      	ldr	r2, [pc, #116]	@ (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d018      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1b      	ldr	r2, [pc, #108]	@ (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d013      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1a      	ldr	r2, [pc, #104]	@ (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00e      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a18      	ldr	r2, [pc, #96]	@ (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d009      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a17      	ldr	r2, [pc, #92]	@ (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a15      	ldr	r2, [pc, #84]	@ (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d10c      	bne.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800786c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40010400 	.word	0x40010400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40001800 	.word	0x40001800

080078bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <findslot>:
 80078e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <findslot+0x2c>)
 80078e6:	b510      	push	{r4, lr}
 80078e8:	4604      	mov	r4, r0
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	b118      	cbz	r0, 80078f6 <findslot+0x12>
 80078ee:	6a03      	ldr	r3, [r0, #32]
 80078f0:	b90b      	cbnz	r3, 80078f6 <findslot+0x12>
 80078f2:	f000 fb19 	bl	8007f28 <__sinit>
 80078f6:	2c13      	cmp	r4, #19
 80078f8:	d807      	bhi.n	800790a <findslot+0x26>
 80078fa:	4806      	ldr	r0, [pc, #24]	@ (8007914 <findslot+0x30>)
 80078fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007900:	3201      	adds	r2, #1
 8007902:	d002      	beq.n	800790a <findslot+0x26>
 8007904:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007908:	bd10      	pop	{r4, pc}
 800790a:	2000      	movs	r0, #0
 800790c:	e7fc      	b.n	8007908 <findslot+0x24>
 800790e:	bf00      	nop
 8007910:	2000021c 	.word	0x2000021c
 8007914:	200260a4 	.word	0x200260a4

08007918 <error>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	4604      	mov	r4, r0
 800791c:	f000 fd04 	bl	8008328 <__errno>
 8007920:	2613      	movs	r6, #19
 8007922:	4605      	mov	r5, r0
 8007924:	2700      	movs	r7, #0
 8007926:	4630      	mov	r0, r6
 8007928:	4639      	mov	r1, r7
 800792a:	beab      	bkpt	0x00ab
 800792c:	4606      	mov	r6, r0
 800792e:	602e      	str	r6, [r5, #0]
 8007930:	4620      	mov	r0, r4
 8007932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007934 <checkerror>:
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d101      	bne.n	800793c <checkerror+0x8>
 8007938:	f7ff bfee 	b.w	8007918 <error>
 800793c:	4770      	bx	lr

0800793e <_swiread>:
 800793e:	b530      	push	{r4, r5, lr}
 8007940:	b085      	sub	sp, #20
 8007942:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007946:	9203      	str	r2, [sp, #12]
 8007948:	2406      	movs	r4, #6
 800794a:	ad01      	add	r5, sp, #4
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	beab      	bkpt	0x00ab
 8007952:	4604      	mov	r4, r0
 8007954:	4620      	mov	r0, r4
 8007956:	f7ff ffed 	bl	8007934 <checkerror>
 800795a:	b005      	add	sp, #20
 800795c:	bd30      	pop	{r4, r5, pc}

0800795e <_read>:
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	460e      	mov	r6, r1
 8007962:	4614      	mov	r4, r2
 8007964:	f7ff ffbe 	bl	80078e4 <findslot>
 8007968:	4605      	mov	r5, r0
 800796a:	b930      	cbnz	r0, 800797a <_read+0x1c>
 800796c:	f000 fcdc 	bl	8008328 <__errno>
 8007970:	2309      	movs	r3, #9
 8007972:	6003      	str	r3, [r0, #0]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	4622      	mov	r2, r4
 800797e:	4631      	mov	r1, r6
 8007980:	f7ff ffdd 	bl	800793e <_swiread>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d0f5      	beq.n	8007974 <_read+0x16>
 8007988:	686b      	ldr	r3, [r5, #4]
 800798a:	1a20      	subs	r0, r4, r0
 800798c:	4403      	add	r3, r0
 800798e:	606b      	str	r3, [r5, #4]
 8007990:	e7f2      	b.n	8007978 <_read+0x1a>

08007992 <_swilseek>:
 8007992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	4616      	mov	r6, r2
 8007998:	f7ff ffa4 	bl	80078e4 <findslot>
 800799c:	4605      	mov	r5, r0
 800799e:	b940      	cbnz	r0, 80079b2 <_swilseek+0x20>
 80079a0:	f000 fcc2 	bl	8008328 <__errno>
 80079a4:	2309      	movs	r3, #9
 80079a6:	6003      	str	r3, [r0, #0]
 80079a8:	f04f 34ff 	mov.w	r4, #4294967295
 80079ac:	4620      	mov	r0, r4
 80079ae:	b003      	add	sp, #12
 80079b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b2:	2e02      	cmp	r6, #2
 80079b4:	d903      	bls.n	80079be <_swilseek+0x2c>
 80079b6:	f000 fcb7 	bl	8008328 <__errno>
 80079ba:	2316      	movs	r3, #22
 80079bc:	e7f3      	b.n	80079a6 <_swilseek+0x14>
 80079be:	2e01      	cmp	r6, #1
 80079c0:	d112      	bne.n	80079e8 <_swilseek+0x56>
 80079c2:	6843      	ldr	r3, [r0, #4]
 80079c4:	18e4      	adds	r4, r4, r3
 80079c6:	d4f6      	bmi.n	80079b6 <_swilseek+0x24>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	260a      	movs	r6, #10
 80079cc:	e9cd 3400 	strd	r3, r4, [sp]
 80079d0:	466f      	mov	r7, sp
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	beab      	bkpt	0x00ab
 80079d8:	4606      	mov	r6, r0
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffaa 	bl	8007934 <checkerror>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	dbe1      	blt.n	80079a8 <_swilseek+0x16>
 80079e4:	606c      	str	r4, [r5, #4]
 80079e6:	e7e1      	b.n	80079ac <_swilseek+0x1a>
 80079e8:	2e02      	cmp	r6, #2
 80079ea:	6803      	ldr	r3, [r0, #0]
 80079ec:	d1ec      	bne.n	80079c8 <_swilseek+0x36>
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	260c      	movs	r6, #12
 80079f2:	466f      	mov	r7, sp
 80079f4:	4630      	mov	r0, r6
 80079f6:	4639      	mov	r1, r7
 80079f8:	beab      	bkpt	0x00ab
 80079fa:	4606      	mov	r6, r0
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff ff99 	bl	8007934 <checkerror>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d0d0      	beq.n	80079a8 <_swilseek+0x16>
 8007a06:	4404      	add	r4, r0
 8007a08:	e7de      	b.n	80079c8 <_swilseek+0x36>

08007a0a <_lseek>:
 8007a0a:	f7ff bfc2 	b.w	8007992 <_swilseek>

08007a0e <_swiwrite>:
 8007a0e:	b530      	push	{r4, r5, lr}
 8007a10:	b085      	sub	sp, #20
 8007a12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007a16:	9203      	str	r2, [sp, #12]
 8007a18:	2405      	movs	r4, #5
 8007a1a:	ad01      	add	r5, sp, #4
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	beab      	bkpt	0x00ab
 8007a22:	4604      	mov	r4, r0
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff ff85 	bl	8007934 <checkerror>
 8007a2a:	b005      	add	sp, #20
 8007a2c:	bd30      	pop	{r4, r5, pc}

08007a2e <_write>:
 8007a2e:	b570      	push	{r4, r5, r6, lr}
 8007a30:	460e      	mov	r6, r1
 8007a32:	4615      	mov	r5, r2
 8007a34:	f7ff ff56 	bl	80078e4 <findslot>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	b930      	cbnz	r0, 8007a4a <_write+0x1c>
 8007a3c:	f000 fc74 	bl	8008328 <__errno>
 8007a40:	2309      	movs	r3, #9
 8007a42:	6003      	str	r3, [r0, #0]
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4631      	mov	r1, r6
 8007a50:	f7ff ffdd 	bl	8007a0e <_swiwrite>
 8007a54:	1e03      	subs	r3, r0, #0
 8007a56:	dbf5      	blt.n	8007a44 <_write+0x16>
 8007a58:	6862      	ldr	r2, [r4, #4]
 8007a5a:	1ae8      	subs	r0, r5, r3
 8007a5c:	4402      	add	r2, r0
 8007a5e:	42ab      	cmp	r3, r5
 8007a60:	6062      	str	r2, [r4, #4]
 8007a62:	d1f1      	bne.n	8007a48 <_write+0x1a>
 8007a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7ff bf55 	b.w	8007918 <error>

08007a6e <_swiclose>:
 8007a6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a70:	2402      	movs	r4, #2
 8007a72:	9001      	str	r0, [sp, #4]
 8007a74:	ad01      	add	r5, sp, #4
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	beab      	bkpt	0x00ab
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff ff58 	bl	8007934 <checkerror>
 8007a84:	b003      	add	sp, #12
 8007a86:	bd30      	pop	{r4, r5, pc}

08007a88 <_close>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	f7ff ff2a 	bl	80078e4 <findslot>
 8007a90:	4604      	mov	r4, r0
 8007a92:	b930      	cbnz	r0, 8007aa2 <_close+0x1a>
 8007a94:	f000 fc48 	bl	8008328 <__errno>
 8007a98:	2309      	movs	r3, #9
 8007a9a:	6003      	str	r3, [r0, #0]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	bd38      	pop	{r3, r4, r5, pc}
 8007aa2:	3d01      	subs	r5, #1
 8007aa4:	2d01      	cmp	r5, #1
 8007aa6:	d809      	bhi.n	8007abc <_close+0x34>
 8007aa8:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <_close+0x40>)
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d104      	bne.n	8007abc <_close+0x34>
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7f1      	b.n	8007aa0 <_close+0x18>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	f7ff ffd6 	bl	8007a6e <_swiclose>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d0f5      	beq.n	8007ab2 <_close+0x2a>
 8007ac6:	e7eb      	b.n	8007aa0 <_close+0x18>
 8007ac8:	200260a4 	.word	0x200260a4

08007acc <_swistat>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f7ff ff08 	bl	80078e4 <findslot>
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b930      	cbnz	r0, 8007ae6 <_swistat+0x1a>
 8007ad8:	f000 fc26 	bl	8008328 <__errno>
 8007adc:	2309      	movs	r3, #9
 8007ade:	6003      	str	r3, [r0, #0]
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007aec:	6063      	str	r3, [r4, #4]
 8007aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007af2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007af4:	260c      	movs	r6, #12
 8007af6:	4630      	mov	r0, r6
 8007af8:	4629      	mov	r1, r5
 8007afa:	beab      	bkpt	0x00ab
 8007afc:	4605      	mov	r5, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff ff18 	bl	8007934 <checkerror>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d0eb      	beq.n	8007ae0 <_swistat+0x14>
 8007b08:	6120      	str	r0, [r4, #16]
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e7ea      	b.n	8007ae4 <_swistat+0x18>

08007b0e <_fstat>:
 8007b0e:	460b      	mov	r3, r1
 8007b10:	b510      	push	{r4, lr}
 8007b12:	2100      	movs	r1, #0
 8007b14:	4604      	mov	r4, r0
 8007b16:	2258      	movs	r2, #88	@ 0x58
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fbb7 	bl	800828c <memset>
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4620      	mov	r0, r4
 8007b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b26:	f7ff bfd1 	b.w	8007acc <_swistat>

08007b2a <_stat>:
 8007b2a:	b538      	push	{r3, r4, r5, lr}
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2258      	movs	r2, #88	@ 0x58
 8007b32:	2100      	movs	r1, #0
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 fba9 	bl	800828c <memset>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	f000 f811 	bl	8007b64 <_swiopen>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	4604      	mov	r4, r0
 8007b46:	d00b      	beq.n	8007b60 <_stat+0x36>
 8007b48:	686b      	ldr	r3, [r5, #4]
 8007b4a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b4e:	606b      	str	r3, [r5, #4]
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7ff ffbb 	bl	8007acc <_swistat>
 8007b56:	4605      	mov	r5, r0
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff ff95 	bl	8007a88 <_close>
 8007b5e:	462c      	mov	r4, r5
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd38      	pop	{r3, r4, r5, pc}

08007b64 <_swiopen>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	4f29      	ldr	r7, [pc, #164]	@ (8007c10 <_swiopen+0xac>)
 8007b6a:	b096      	sub	sp, #88	@ 0x58
 8007b6c:	4682      	mov	sl, r0
 8007b6e:	460e      	mov	r6, r1
 8007b70:	2400      	movs	r4, #0
 8007b72:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007b76:	3301      	adds	r3, #1
 8007b78:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007b7c:	d00c      	beq.n	8007b98 <_swiopen+0x34>
 8007b7e:	3401      	adds	r4, #1
 8007b80:	2c14      	cmp	r4, #20
 8007b82:	d1f6      	bne.n	8007b72 <_swiopen+0xe>
 8007b84:	f000 fbd0 	bl	8008328 <__errno>
 8007b88:	2318      	movs	r3, #24
 8007b8a:	6003      	str	r3, [r0, #0]
 8007b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b90:	4620      	mov	r0, r4
 8007b92:	b016      	add	sp, #88	@ 0x58
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007b9c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ba0:	46e9      	mov	r9, sp
 8007ba2:	d109      	bne.n	8007bb8 <_swiopen+0x54>
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7ff ffbf 	bl	8007b2a <_stat>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d003      	beq.n	8007bb8 <_swiopen+0x54>
 8007bb0:	f000 fbba 	bl	8008328 <__errno>
 8007bb4:	2311      	movs	r3, #17
 8007bb6:	e7e8      	b.n	8007b8a <_swiopen+0x26>
 8007bb8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007bbc:	f240 6301 	movw	r3, #1537	@ 0x601
 8007bc0:	07b2      	lsls	r2, r6, #30
 8007bc2:	bf48      	it	mi
 8007bc4:	f045 0502 	orrmi.w	r5, r5, #2
 8007bc8:	421e      	tst	r6, r3
 8007bca:	bf18      	it	ne
 8007bcc:	f045 0504 	orrne.w	r5, r5, #4
 8007bd0:	0733      	lsls	r3, r6, #28
 8007bd2:	bf48      	it	mi
 8007bd4:	f025 0504 	bicmi.w	r5, r5, #4
 8007bd8:	4650      	mov	r0, sl
 8007bda:	bf48      	it	mi
 8007bdc:	f045 0508 	orrmi.w	r5, r5, #8
 8007be0:	f8cd a000 	str.w	sl, [sp]
 8007be4:	f7f8 fb04 	bl	80001f0 <strlen>
 8007be8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007bec:	2501      	movs	r5, #1
 8007bee:	4628      	mov	r0, r5
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	beab      	bkpt	0x00ab
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	db05      	blt.n	8007c06 <_swiopen+0xa2>
 8007bfa:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007bfe:	4447      	add	r7, r8
 8007c00:	2300      	movs	r3, #0
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	e7c4      	b.n	8007b90 <_swiopen+0x2c>
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fe86 	bl	8007918 <error>
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	e7bf      	b.n	8007b90 <_swiopen+0x2c>
 8007c10:	200260a4 	.word	0x200260a4

08007c14 <_get_semihosting_exts>:
 8007c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4606      	mov	r6, r0
 8007c1a:	460f      	mov	r7, r1
 8007c1c:	4829      	ldr	r0, [pc, #164]	@ (8007cc4 <_get_semihosting_exts+0xb0>)
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4615      	mov	r5, r2
 8007c22:	f7ff ff9f 	bl	8007b64 <_swiopen>
 8007c26:	462a      	mov	r2, r5
 8007c28:	4604      	mov	r4, r0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 fb2d 	bl	800828c <memset>
 8007c32:	1c63      	adds	r3, r4, #1
 8007c34:	d014      	beq.n	8007c60 <_get_semihosting_exts+0x4c>
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff fe54 	bl	80078e4 <findslot>
 8007c3c:	f04f 080c 	mov.w	r8, #12
 8007c40:	4681      	mov	r9, r0
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	beab      	bkpt	0x00ab
 8007c48:	4680      	mov	r8, r0
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7ff fe72 	bl	8007934 <checkerror>
 8007c50:	2803      	cmp	r0, #3
 8007c52:	dd02      	ble.n	8007c5a <_get_semihosting_exts+0x46>
 8007c54:	1ec3      	subs	r3, r0, #3
 8007c56:	42ab      	cmp	r3, r5
 8007c58:	dc07      	bgt.n	8007c6a <_get_semihosting_exts+0x56>
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff ff14 	bl	8007a88 <_close>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b003      	add	sp, #12
 8007c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	eb0d 0102 	add.w	r1, sp, r2
 8007c70:	4620      	mov	r0, r4
 8007c72:	f7ff fe74 	bl	800795e <_read>
 8007c76:	2803      	cmp	r0, #3
 8007c78:	ddef      	ble.n	8007c5a <_get_semihosting_exts+0x46>
 8007c7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c7e:	2b53      	cmp	r3, #83	@ 0x53
 8007c80:	d1eb      	bne.n	8007c5a <_get_semihosting_exts+0x46>
 8007c82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c86:	2b48      	cmp	r3, #72	@ 0x48
 8007c88:	d1e7      	bne.n	8007c5a <_get_semihosting_exts+0x46>
 8007c8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007c8e:	2b46      	cmp	r3, #70	@ 0x46
 8007c90:	d1e3      	bne.n	8007c5a <_get_semihosting_exts+0x46>
 8007c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c96:	2b42      	cmp	r3, #66	@ 0x42
 8007c98:	d1df      	bne.n	8007c5a <_get_semihosting_exts+0x46>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff fe77 	bl	8007992 <_swilseek>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dbd8      	blt.n	8007c5a <_get_semihosting_exts+0x46>
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4631      	mov	r1, r6
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7ff fe56 	bl	800795e <_read>
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7ff fee7 	bl	8007a88 <_close>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7ff fe3a 	bl	8007934 <checkerror>
 8007cc0:	e7d0      	b.n	8007c64 <_get_semihosting_exts+0x50>
 8007cc2:	bf00      	nop
 8007cc4:	0800a374 	.word	0x0800a374

08007cc8 <initialise_semihosting_exts>:
 8007cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cca:	4d0a      	ldr	r5, [pc, #40]	@ (8007cf4 <initialise_semihosting_exts+0x2c>)
 8007ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8007cf8 <initialise_semihosting_exts+0x30>)
 8007cce:	2100      	movs	r1, #0
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	a801      	add	r0, sp, #4
 8007cd4:	6029      	str	r1, [r5, #0]
 8007cd6:	6022      	str	r2, [r4, #0]
 8007cd8:	f7ff ff9c 	bl	8007c14 <_get_semihosting_exts>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	dd07      	ble.n	8007cf0 <initialise_semihosting_exts+0x28>
 8007ce0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007ce4:	f003 0201 	and.w	r2, r3, #1
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	b003      	add	sp, #12
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	2000020c 	.word	0x2000020c
 8007cf8:	20000208 	.word	0x20000208

08007cfc <_has_ext_stdout_stderr>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4c04      	ldr	r4, [pc, #16]	@ (8007d10 <_has_ext_stdout_stderr+0x14>)
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da01      	bge.n	8007d0a <_has_ext_stdout_stderr+0xe>
 8007d06:	f7ff ffdf 	bl	8007cc8 <initialise_semihosting_exts>
 8007d0a:	6820      	ldr	r0, [r4, #0]
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000208 	.word	0x20000208

08007d14 <initialise_monitor_handles>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007dcc <initialise_monitor_handles+0xb8>
 8007d1e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d22:	2303      	movs	r3, #3
 8007d24:	2400      	movs	r4, #0
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	af01      	add	r7, sp, #4
 8007d2a:	9402      	str	r4, [sp, #8]
 8007d2c:	2501      	movs	r5, #1
 8007d2e:	4628      	mov	r0, r5
 8007d30:	4639      	mov	r1, r7
 8007d32:	beab      	bkpt	0x00ab
 8007d34:	4605      	mov	r5, r0
 8007d36:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007dd0 <initialise_monitor_handles+0xbc>
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	4c20      	ldr	r4, [pc, #128]	@ (8007dc0 <initialise_monitor_handles+0xac>)
 8007d3e:	f8c8 5000 	str.w	r5, [r8]
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	2b14      	cmp	r3, #20
 8007d4e:	d1fa      	bne.n	8007d46 <initialise_monitor_handles+0x32>
 8007d50:	f7ff ffd4 	bl	8007cfc <_has_ext_stdout_stderr>
 8007d54:	4d1b      	ldr	r5, [pc, #108]	@ (8007dc4 <initialise_monitor_handles+0xb0>)
 8007d56:	b1d0      	cbz	r0, 8007d8e <initialise_monitor_handles+0x7a>
 8007d58:	f04f 0a03 	mov.w	sl, #3
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d62:	2601      	movs	r6, #1
 8007d64:	f8cd a00c 	str.w	sl, [sp, #12]
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	beab      	bkpt	0x00ab
 8007d70:	4683      	mov	fp, r0
 8007d72:	4b15      	ldr	r3, [pc, #84]	@ (8007dc8 <initialise_monitor_handles+0xb4>)
 8007d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d78:	f8c3 b000 	str.w	fp, [r3]
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f8cd a00c 	str.w	sl, [sp, #12]
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	beab      	bkpt	0x00ab
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	602e      	str	r6, [r5, #0]
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	3301      	adds	r3, #1
 8007d92:	bf02      	ittt	eq
 8007d94:	4b0c      	ldreq	r3, [pc, #48]	@ (8007dc8 <initialise_monitor_handles+0xb4>)
 8007d96:	681b      	ldreq	r3, [r3, #0]
 8007d98:	602b      	streq	r3, [r5, #0]
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	6066      	str	r6, [r4, #4]
 8007da4:	f7ff ffaa 	bl	8007cfc <_has_ext_stdout_stderr>
 8007da8:	b130      	cbz	r0, 8007db8 <initialise_monitor_handles+0xa4>
 8007daa:	4b07      	ldr	r3, [pc, #28]	@ (8007dc8 <initialise_monitor_handles+0xb4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007db8:	b005      	add	sp, #20
 8007dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200260a4 	.word	0x200260a4
 8007dc4:	20026098 	.word	0x20026098
 8007dc8:	2002609c 	.word	0x2002609c
 8007dcc:	0800a38a 	.word	0x0800a38a
 8007dd0:	200260a0 	.word	0x200260a0

08007dd4 <_isatty>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	f7ff fd85 	bl	80078e4 <findslot>
 8007dda:	2409      	movs	r4, #9
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b920      	cbnz	r0, 8007dea <_isatty+0x16>
 8007de0:	f000 faa2 	bl	8008328 <__errno>
 8007de4:	6004      	str	r4, [r0, #0]
 8007de6:	2000      	movs	r0, #0
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	4620      	mov	r0, r4
 8007dec:	4629      	mov	r1, r5
 8007dee:	beab      	bkpt	0x00ab
 8007df0:	4604      	mov	r4, r0
 8007df2:	2c01      	cmp	r4, #1
 8007df4:	4620      	mov	r0, r4
 8007df6:	d0f7      	beq.n	8007de8 <_isatty+0x14>
 8007df8:	f000 fa96 	bl	8008328 <__errno>
 8007dfc:	2513      	movs	r5, #19
 8007dfe:	4604      	mov	r4, r0
 8007e00:	2600      	movs	r6, #0
 8007e02:	4628      	mov	r0, r5
 8007e04:	4631      	mov	r1, r6
 8007e06:	beab      	bkpt	0x00ab
 8007e08:	4605      	mov	r5, r0
 8007e0a:	6025      	str	r5, [r4, #0]
 8007e0c:	e7eb      	b.n	8007de6 <_isatty+0x12>
	...

08007e10 <std>:
 8007e10:	2300      	movs	r3, #0
 8007e12:	b510      	push	{r4, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	e9c0 3300 	strd	r3, r3, [r0]
 8007e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1e:	6083      	str	r3, [r0, #8]
 8007e20:	8181      	strh	r1, [r0, #12]
 8007e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e24:	81c2      	strh	r2, [r0, #14]
 8007e26:	6183      	str	r3, [r0, #24]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	305c      	adds	r0, #92	@ 0x5c
 8007e2e:	f000 fa2d 	bl	800828c <memset>
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x58>)
 8007e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x5c>)
 8007e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <std+0x60>)
 8007e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <std+0x64>)
 8007e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <std+0x68>)
 8007e44:	6224      	str	r4, [r4, #32]
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d006      	beq.n	8007e58 <std+0x48>
 8007e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e4e:	4294      	cmp	r4, r2
 8007e50:	d002      	beq.n	8007e58 <std+0x48>
 8007e52:	33d0      	adds	r3, #208	@ 0xd0
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d105      	bne.n	8007e64 <std+0x54>
 8007e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e60:	f000 ba8c 	b.w	800837c <__retarget_lock_init_recursive>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	080080dd 	.word	0x080080dd
 8007e6c:	080080ff 	.word	0x080080ff
 8007e70:	08008137 	.word	0x08008137
 8007e74:	0800815b 	.word	0x0800815b
 8007e78:	20026144 	.word	0x20026144

08007e7c <stdio_exit_handler>:
 8007e7c:	4a02      	ldr	r2, [pc, #8]	@ (8007e88 <stdio_exit_handler+0xc>)
 8007e7e:	4903      	ldr	r1, [pc, #12]	@ (8007e8c <stdio_exit_handler+0x10>)
 8007e80:	4803      	ldr	r0, [pc, #12]	@ (8007e90 <stdio_exit_handler+0x14>)
 8007e82:	f000 b869 	b.w	8007f58 <_fwalk_sglue>
 8007e86:	bf00      	nop
 8007e88:	20000210 	.word	0x20000210
 8007e8c:	08008ee9 	.word	0x08008ee9
 8007e90:	20000220 	.word	0x20000220

08007e94 <cleanup_stdio>:
 8007e94:	6841      	ldr	r1, [r0, #4]
 8007e96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec8 <cleanup_stdio+0x34>)
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	d001      	beq.n	8007ea4 <cleanup_stdio+0x10>
 8007ea0:	f001 f822 	bl	8008ee8 <_fflush_r>
 8007ea4:	68a1      	ldr	r1, [r4, #8]
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <cleanup_stdio+0x38>)
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	d002      	beq.n	8007eb2 <cleanup_stdio+0x1e>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 f81b 	bl	8008ee8 <_fflush_r>
 8007eb2:	68e1      	ldr	r1, [r4, #12]
 8007eb4:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <cleanup_stdio+0x3c>)
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	d004      	beq.n	8007ec4 <cleanup_stdio+0x30>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec0:	f001 b812 	b.w	8008ee8 <_fflush_r>
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20026144 	.word	0x20026144
 8007ecc:	200261ac 	.word	0x200261ac
 8007ed0:	20026214 	.word	0x20026214

08007ed4 <global_stdio_init.part.0>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <global_stdio_init.part.0+0x30>)
 8007ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8007f08 <global_stdio_init.part.0+0x34>)
 8007eda:	4a0c      	ldr	r2, [pc, #48]	@ (8007f0c <global_stdio_init.part.0+0x38>)
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2104      	movs	r1, #4
 8007ee4:	f7ff ff94 	bl	8007e10 <std>
 8007ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007eec:	2201      	movs	r2, #1
 8007eee:	2109      	movs	r1, #9
 8007ef0:	f7ff ff8e 	bl	8007e10 <std>
 8007ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ef8:	2202      	movs	r2, #2
 8007efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efe:	2112      	movs	r1, #18
 8007f00:	f7ff bf86 	b.w	8007e10 <std>
 8007f04:	2002627c 	.word	0x2002627c
 8007f08:	20026144 	.word	0x20026144
 8007f0c:	08007e7d 	.word	0x08007e7d

08007f10 <__sfp_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__sfp_lock_acquire+0x8>)
 8007f12:	f000 ba34 	b.w	800837e <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20026285 	.word	0x20026285

08007f1c <__sfp_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	@ (8007f24 <__sfp_lock_release+0x8>)
 8007f1e:	f000 ba2f 	b.w	8008380 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20026285 	.word	0x20026285

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sfp_lock_acquire>
 8007f30:	6a23      	ldr	r3, [r4, #32]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sfp_lock_release>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__sinit+0x28>)
 8007f3e:	6223      	str	r3, [r4, #32]
 8007f40:	4b04      	ldr	r3, [pc, #16]	@ (8007f54 <__sinit+0x2c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f5      	bne.n	8007f34 <__sinit+0xc>
 8007f48:	f7ff ffc4 	bl	8007ed4 <global_stdio_init.part.0>
 8007f4c:	e7f2      	b.n	8007f34 <__sinit+0xc>
 8007f4e:	bf00      	nop
 8007f50:	08007e95 	.word	0x08007e95
 8007f54:	2002627c 	.word	0x2002627c

08007f58 <_fwalk_sglue>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	2600      	movs	r6, #0
 8007f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f68:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6c:	d505      	bpl.n	8007f7a <_fwalk_sglue+0x22>
 8007f6e:	6824      	ldr	r4, [r4, #0]
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d1f7      	bne.n	8007f64 <_fwalk_sglue+0xc>
 8007f74:	4630      	mov	r0, r6
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d907      	bls.n	8007f90 <_fwalk_sglue+0x38>
 8007f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f84:	3301      	adds	r3, #1
 8007f86:	d003      	beq.n	8007f90 <_fwalk_sglue+0x38>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c0      	blx	r8
 8007f8e:	4306      	orrs	r6, r0
 8007f90:	3568      	adds	r5, #104	@ 0x68
 8007f92:	e7e9      	b.n	8007f68 <_fwalk_sglue+0x10>

08007f94 <iprintf>:
 8007f94:	b40f      	push	{r0, r1, r2, r3}
 8007f96:	b507      	push	{r0, r1, r2, lr}
 8007f98:	4906      	ldr	r1, [pc, #24]	@ (8007fb4 <iprintf+0x20>)
 8007f9a:	ab04      	add	r3, sp, #16
 8007f9c:	6808      	ldr	r0, [r1, #0]
 8007f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa2:	6881      	ldr	r1, [r0, #8]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	f000 fc75 	bl	8008894 <_vfiprintf_r>
 8007faa:	b003      	add	sp, #12
 8007fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb0:	b004      	add	sp, #16
 8007fb2:	4770      	bx	lr
 8007fb4:	2000021c 	.word	0x2000021c

08007fb8 <_puts_r>:
 8007fb8:	6a03      	ldr	r3, [r0, #32]
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	6884      	ldr	r4, [r0, #8]
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <_puts_r+0x10>
 8007fc4:	f7ff ffb0 	bl	8007f28 <__sinit>
 8007fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d405      	bmi.n	8007fda <_puts_r+0x22>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	0598      	lsls	r0, r3, #22
 8007fd2:	d402      	bmi.n	8007fda <_puts_r+0x22>
 8007fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fd6:	f000 f9d2 	bl	800837e <__retarget_lock_acquire_recursive>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0719      	lsls	r1, r3, #28
 8007fde:	d502      	bpl.n	8007fe6 <_puts_r+0x2e>
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d135      	bne.n	8008052 <_puts_r+0x9a>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 f8f9 	bl	80081e0 <__swsetup_r>
 8007fee:	b380      	cbz	r0, 8008052 <_puts_r+0x9a>
 8007ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ff6:	07da      	lsls	r2, r3, #31
 8007ff8:	d405      	bmi.n	8008006 <_puts_r+0x4e>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	059b      	lsls	r3, r3, #22
 8007ffe:	d402      	bmi.n	8008006 <_puts_r+0x4e>
 8008000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008002:	f000 f9bd 	bl	8008380 <__retarget_lock_release_recursive>
 8008006:	4628      	mov	r0, r5
 8008008:	bd70      	pop	{r4, r5, r6, pc}
 800800a:	2b00      	cmp	r3, #0
 800800c:	da04      	bge.n	8008018 <_puts_r+0x60>
 800800e:	69a2      	ldr	r2, [r4, #24]
 8008010:	429a      	cmp	r2, r3
 8008012:	dc17      	bgt.n	8008044 <_puts_r+0x8c>
 8008014:	290a      	cmp	r1, #10
 8008016:	d015      	beq.n	8008044 <_puts_r+0x8c>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	7019      	strb	r1, [r3, #0]
 8008020:	68a3      	ldr	r3, [r4, #8]
 8008022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008026:	3b01      	subs	r3, #1
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	2900      	cmp	r1, #0
 800802c:	d1ed      	bne.n	800800a <_puts_r+0x52>
 800802e:	2b00      	cmp	r3, #0
 8008030:	da11      	bge.n	8008056 <_puts_r+0x9e>
 8008032:	4622      	mov	r2, r4
 8008034:	210a      	movs	r1, #10
 8008036:	4628      	mov	r0, r5
 8008038:	f000 f893 	bl	8008162 <__swbuf_r>
 800803c:	3001      	adds	r0, #1
 800803e:	d0d7      	beq.n	8007ff0 <_puts_r+0x38>
 8008040:	250a      	movs	r5, #10
 8008042:	e7d7      	b.n	8007ff4 <_puts_r+0x3c>
 8008044:	4622      	mov	r2, r4
 8008046:	4628      	mov	r0, r5
 8008048:	f000 f88b 	bl	8008162 <__swbuf_r>
 800804c:	3001      	adds	r0, #1
 800804e:	d1e7      	bne.n	8008020 <_puts_r+0x68>
 8008050:	e7ce      	b.n	8007ff0 <_puts_r+0x38>
 8008052:	3e01      	subs	r6, #1
 8008054:	e7e4      	b.n	8008020 <_puts_r+0x68>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	6022      	str	r2, [r4, #0]
 800805c:	220a      	movs	r2, #10
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	e7ee      	b.n	8008040 <_puts_r+0x88>
	...

08008064 <puts>:
 8008064:	4b02      	ldr	r3, [pc, #8]	@ (8008070 <puts+0xc>)
 8008066:	4601      	mov	r1, r0
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f7ff bfa5 	b.w	8007fb8 <_puts_r>
 800806e:	bf00      	nop
 8008070:	2000021c 	.word	0x2000021c

08008074 <sniprintf>:
 8008074:	b40c      	push	{r2, r3}
 8008076:	b530      	push	{r4, r5, lr}
 8008078:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <sniprintf+0x64>)
 800807a:	1e0c      	subs	r4, r1, #0
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	b09d      	sub	sp, #116	@ 0x74
 8008080:	da08      	bge.n	8008094 <sniprintf+0x20>
 8008082:	238b      	movs	r3, #139	@ 0x8b
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	b01d      	add	sp, #116	@ 0x74
 800808c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008090:	b002      	add	sp, #8
 8008092:	4770      	bx	lr
 8008094:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008098:	f8ad 3014 	strh.w	r3, [sp, #20]
 800809c:	bf14      	ite	ne
 800809e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080a2:	4623      	moveq	r3, r4
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080ac:	9002      	str	r0, [sp, #8]
 80080ae:	9006      	str	r0, [sp, #24]
 80080b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080b6:	ab21      	add	r3, sp, #132	@ 0x84
 80080b8:	a902      	add	r1, sp, #8
 80080ba:	4628      	mov	r0, r5
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	f000 fac3 	bl	8008648 <_svfiprintf_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	bfbc      	itt	lt
 80080c6:	238b      	movlt	r3, #139	@ 0x8b
 80080c8:	602b      	strlt	r3, [r5, #0]
 80080ca:	2c00      	cmp	r4, #0
 80080cc:	d0dd      	beq.n	800808a <sniprintf+0x16>
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
 80080d4:	e7d9      	b.n	800808a <sniprintf+0x16>
 80080d6:	bf00      	nop
 80080d8:	2000021c 	.word	0x2000021c

080080dc <__sread>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	f000 f8fc 	bl	80082e0 <_read_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	bfab      	itete	ge
 80080ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080ee:	89a3      	ldrhlt	r3, [r4, #12]
 80080f0:	181b      	addge	r3, r3, r0
 80080f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080f6:	bfac      	ite	ge
 80080f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080fa:	81a3      	strhlt	r3, [r4, #12]
 80080fc:	bd10      	pop	{r4, pc}

080080fe <__swrite>:
 80080fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008102:	461f      	mov	r7, r3
 8008104:	898b      	ldrh	r3, [r1, #12]
 8008106:	05db      	lsls	r3, r3, #23
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	4616      	mov	r6, r2
 800810e:	d505      	bpl.n	800811c <__swrite+0x1e>
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	2302      	movs	r3, #2
 8008116:	2200      	movs	r2, #0
 8008118:	f000 f8d0 	bl	80082bc <_lseek_r>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	4628      	mov	r0, r5
 800812e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	f000 b8e7 	b.w	8008304 <_write_r>

08008136 <__sseek>:
 8008136:	b510      	push	{r4, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813e:	f000 f8bd 	bl	80082bc <_lseek_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	bf15      	itete	ne
 8008148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800814a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800814e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008152:	81a3      	strheq	r3, [r4, #12]
 8008154:	bf18      	it	ne
 8008156:	81a3      	strhne	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__sclose>:
 800815a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815e:	f000 b89d 	b.w	800829c <_close_r>

08008162 <__swbuf_r>:
 8008162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008164:	460e      	mov	r6, r1
 8008166:	4614      	mov	r4, r2
 8008168:	4605      	mov	r5, r0
 800816a:	b118      	cbz	r0, 8008174 <__swbuf_r+0x12>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <__swbuf_r+0x12>
 8008170:	f7ff feda 	bl	8007f28 <__sinit>
 8008174:	69a3      	ldr	r3, [r4, #24]
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	071a      	lsls	r2, r3, #28
 800817c:	d501      	bpl.n	8008182 <__swbuf_r+0x20>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b943      	cbnz	r3, 8008194 <__swbuf_r+0x32>
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f82b 	bl	80081e0 <__swsetup_r>
 800818a:	b118      	cbz	r0, 8008194 <__swbuf_r+0x32>
 800818c:	f04f 37ff 	mov.w	r7, #4294967295
 8008190:	4638      	mov	r0, r7
 8008192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	6922      	ldr	r2, [r4, #16]
 8008198:	1a98      	subs	r0, r3, r2
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	b2f6      	uxtb	r6, r6
 800819e:	4283      	cmp	r3, r0
 80081a0:	4637      	mov	r7, r6
 80081a2:	dc05      	bgt.n	80081b0 <__swbuf_r+0x4e>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 fe9e 	bl	8008ee8 <_fflush_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1ed      	bne.n	800818c <__swbuf_r+0x2a>
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	6022      	str	r2, [r4, #0]
 80081bc:	701e      	strb	r6, [r3, #0]
 80081be:	6962      	ldr	r2, [r4, #20]
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d004      	beq.n	80081d0 <__swbuf_r+0x6e>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	07db      	lsls	r3, r3, #31
 80081ca:	d5e1      	bpl.n	8008190 <__swbuf_r+0x2e>
 80081cc:	2e0a      	cmp	r6, #10
 80081ce:	d1df      	bne.n	8008190 <__swbuf_r+0x2e>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 fe88 	bl	8008ee8 <_fflush_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0d9      	beq.n	8008190 <__swbuf_r+0x2e>
 80081dc:	e7d6      	b.n	800818c <__swbuf_r+0x2a>
	...

080081e0 <__swsetup_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4b29      	ldr	r3, [pc, #164]	@ (8008288 <__swsetup_r+0xa8>)
 80081e4:	4605      	mov	r5, r0
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	460c      	mov	r4, r1
 80081ea:	b118      	cbz	r0, 80081f4 <__swsetup_r+0x14>
 80081ec:	6a03      	ldr	r3, [r0, #32]
 80081ee:	b90b      	cbnz	r3, 80081f4 <__swsetup_r+0x14>
 80081f0:	f7ff fe9a 	bl	8007f28 <__sinit>
 80081f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f8:	0719      	lsls	r1, r3, #28
 80081fa:	d422      	bmi.n	8008242 <__swsetup_r+0x62>
 80081fc:	06da      	lsls	r2, r3, #27
 80081fe:	d407      	bmi.n	8008210 <__swsetup_r+0x30>
 8008200:	2209      	movs	r2, #9
 8008202:	602a      	str	r2, [r5, #0]
 8008204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	e033      	b.n	8008278 <__swsetup_r+0x98>
 8008210:	0758      	lsls	r0, r3, #29
 8008212:	d512      	bpl.n	800823a <__swsetup_r+0x5a>
 8008214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008216:	b141      	cbz	r1, 800822a <__swsetup_r+0x4a>
 8008218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <__swsetup_r+0x46>
 8008220:	4628      	mov	r0, r5
 8008222:	f000 f8bd 	bl	80083a0 <_free_r>
 8008226:	2300      	movs	r3, #0
 8008228:	6363      	str	r3, [r4, #52]	@ 0x34
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	2300      	movs	r3, #0
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0308 	orr.w	r3, r3, #8
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	b94b      	cbnz	r3, 800825a <__swsetup_r+0x7a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d003      	beq.n	800825a <__swsetup_r+0x7a>
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 fe95 	bl	8008f84 <__smakebuf_r>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	f013 0201 	ands.w	r2, r3, #1
 8008262:	d00a      	beq.n	800827a <__swsetup_r+0x9a>
 8008264:	2200      	movs	r2, #0
 8008266:	60a2      	str	r2, [r4, #8]
 8008268:	6962      	ldr	r2, [r4, #20]
 800826a:	4252      	negs	r2, r2
 800826c:	61a2      	str	r2, [r4, #24]
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	b942      	cbnz	r2, 8008284 <__swsetup_r+0xa4>
 8008272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008276:	d1c5      	bne.n	8008204 <__swsetup_r+0x24>
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	0799      	lsls	r1, r3, #30
 800827c:	bf58      	it	pl
 800827e:	6962      	ldrpl	r2, [r4, #20]
 8008280:	60a2      	str	r2, [r4, #8]
 8008282:	e7f4      	b.n	800826e <__swsetup_r+0x8e>
 8008284:	2000      	movs	r0, #0
 8008286:	e7f7      	b.n	8008278 <__swsetup_r+0x98>
 8008288:	2000021c 	.word	0x2000021c

0800828c <memset>:
 800828c:	4402      	add	r2, r0
 800828e:	4603      	mov	r3, r0
 8008290:	4293      	cmp	r3, r2
 8008292:	d100      	bne.n	8008296 <memset+0xa>
 8008294:	4770      	bx	lr
 8008296:	f803 1b01 	strb.w	r1, [r3], #1
 800829a:	e7f9      	b.n	8008290 <memset+0x4>

0800829c <_close_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d06      	ldr	r5, [pc, #24]	@ (80082b8 <_close_r+0x1c>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	f7ff fbee 	bl	8007a88 <_close>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_close_r+0x1a>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_close_r+0x1a>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20026280 	.word	0x20026280

080082bc <_lseek_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	@ (80082dc <_lseek_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7ff fb9d 	bl	8007a0a <_lseek>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_lseek_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_lseek_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20026280 	.word	0x20026280

080082e0 <_read_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	@ (8008300 <_read_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7ff fb35 	bl	800795e <_read>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_read_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_read_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20026280 	.word	0x20026280

08008304 <_write_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4d07      	ldr	r5, [pc, #28]	@ (8008324 <_write_r+0x20>)
 8008308:	4604      	mov	r4, r0
 800830a:	4608      	mov	r0, r1
 800830c:	4611      	mov	r1, r2
 800830e:	2200      	movs	r2, #0
 8008310:	602a      	str	r2, [r5, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	f7ff fb8b 	bl	8007a2e <_write>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_write_r+0x1e>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_write_r+0x1e>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	20026280 	.word	0x20026280

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	@ (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	2000021c 	.word	0x2000021c

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	@ (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	@ (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	@ (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	@ (8008378 <__libc_init_array+0x44>)
 8008348:	f000 feda 	bl	8009100 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800a3cc 	.word	0x0800a3cc
 8008370:	0800a3cc 	.word	0x0800a3cc
 8008374:	0800a3cc 	.word	0x0800a3cc
 8008378:	0800a3d0 	.word	0x0800a3d0

0800837c <__retarget_lock_init_recursive>:
 800837c:	4770      	bx	lr

0800837e <__retarget_lock_acquire_recursive>:
 800837e:	4770      	bx	lr

08008380 <__retarget_lock_release_recursive>:
 8008380:	4770      	bx	lr

08008382 <memcpy>:
 8008382:	440a      	add	r2, r1
 8008384:	4291      	cmp	r1, r2
 8008386:	f100 33ff 	add.w	r3, r0, #4294967295
 800838a:	d100      	bne.n	800838e <memcpy+0xc>
 800838c:	4770      	bx	lr
 800838e:	b510      	push	{r4, lr}
 8008390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008398:	4291      	cmp	r1, r2
 800839a:	d1f9      	bne.n	8008390 <memcpy+0xe>
 800839c:	bd10      	pop	{r4, pc}
	...

080083a0 <_free_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4605      	mov	r5, r0
 80083a4:	2900      	cmp	r1, #0
 80083a6:	d041      	beq.n	800842c <_free_r+0x8c>
 80083a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ac:	1f0c      	subs	r4, r1, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfb8      	it	lt
 80083b2:	18e4      	addlt	r4, r4, r3
 80083b4:	f000 f8e0 	bl	8008578 <__malloc_lock>
 80083b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <_free_r+0x90>)
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	b933      	cbnz	r3, 80083cc <_free_r+0x2c>
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	4628      	mov	r0, r5
 80083c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c8:	f000 b8dc 	b.w	8008584 <__malloc_unlock>
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d908      	bls.n	80083e2 <_free_r+0x42>
 80083d0:	6820      	ldr	r0, [r4, #0]
 80083d2:	1821      	adds	r1, r4, r0
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf01      	itttt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	1809      	addeq	r1, r1, r0
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	e7ed      	b.n	80083be <_free_r+0x1e>
 80083e2:	461a      	mov	r2, r3
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b10b      	cbz	r3, 80083ec <_free_r+0x4c>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d9fa      	bls.n	80083e2 <_free_r+0x42>
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	1850      	adds	r0, r2, r1
 80083f0:	42a0      	cmp	r0, r4
 80083f2:	d10b      	bne.n	800840c <_free_r+0x6c>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	4401      	add	r1, r0
 80083f8:	1850      	adds	r0, r2, r1
 80083fa:	4283      	cmp	r3, r0
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	d1e0      	bne.n	80083c2 <_free_r+0x22>
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	4408      	add	r0, r1
 8008408:	6010      	str	r0, [r2, #0]
 800840a:	e7da      	b.n	80083c2 <_free_r+0x22>
 800840c:	d902      	bls.n	8008414 <_free_r+0x74>
 800840e:	230c      	movs	r3, #12
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	e7d6      	b.n	80083c2 <_free_r+0x22>
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	1821      	adds	r1, r4, r0
 8008418:	428b      	cmp	r3, r1
 800841a:	bf04      	itt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	bf04      	itt	eq
 8008424:	1809      	addeq	r1, r1, r0
 8008426:	6021      	streq	r1, [r4, #0]
 8008428:	6054      	str	r4, [r2, #4]
 800842a:	e7ca      	b.n	80083c2 <_free_r+0x22>
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	2002628c 	.word	0x2002628c

08008434 <sbrk_aligned>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4e0f      	ldr	r6, [pc, #60]	@ (8008474 <sbrk_aligned+0x40>)
 8008438:	460c      	mov	r4, r1
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	4605      	mov	r5, r0
 800843e:	b911      	cbnz	r1, 8008446 <sbrk_aligned+0x12>
 8008440:	f000 fe18 	bl	8009074 <_sbrk_r>
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 fe13 	bl	8009074 <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d103      	bne.n	800845a <sbrk_aligned+0x26>
 8008452:	f04f 34ff 	mov.w	r4, #4294967295
 8008456:	4620      	mov	r0, r4
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	1cc4      	adds	r4, r0, #3
 800845c:	f024 0403 	bic.w	r4, r4, #3
 8008460:	42a0      	cmp	r0, r4
 8008462:	d0f8      	beq.n	8008456 <sbrk_aligned+0x22>
 8008464:	1a21      	subs	r1, r4, r0
 8008466:	4628      	mov	r0, r5
 8008468:	f000 fe04 	bl	8009074 <_sbrk_r>
 800846c:	3001      	adds	r0, #1
 800846e:	d1f2      	bne.n	8008456 <sbrk_aligned+0x22>
 8008470:	e7ef      	b.n	8008452 <sbrk_aligned+0x1e>
 8008472:	bf00      	nop
 8008474:	20026288 	.word	0x20026288

08008478 <_malloc_r>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	1ccd      	adds	r5, r1, #3
 800847e:	f025 0503 	bic.w	r5, r5, #3
 8008482:	3508      	adds	r5, #8
 8008484:	2d0c      	cmp	r5, #12
 8008486:	bf38      	it	cc
 8008488:	250c      	movcc	r5, #12
 800848a:	2d00      	cmp	r5, #0
 800848c:	4606      	mov	r6, r0
 800848e:	db01      	blt.n	8008494 <_malloc_r+0x1c>
 8008490:	42a9      	cmp	r1, r5
 8008492:	d904      	bls.n	800849e <_malloc_r+0x26>
 8008494:	230c      	movs	r3, #12
 8008496:	6033      	str	r3, [r6, #0]
 8008498:	2000      	movs	r0, #0
 800849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008574 <_malloc_r+0xfc>
 80084a2:	f000 f869 	bl	8008578 <__malloc_lock>
 80084a6:	f8d8 3000 	ldr.w	r3, [r8]
 80084aa:	461c      	mov	r4, r3
 80084ac:	bb44      	cbnz	r4, 8008500 <_malloc_r+0x88>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff ffbf 	bl	8008434 <sbrk_aligned>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	4604      	mov	r4, r0
 80084ba:	d158      	bne.n	800856e <_malloc_r+0xf6>
 80084bc:	f8d8 4000 	ldr.w	r4, [r8]
 80084c0:	4627      	mov	r7, r4
 80084c2:	2f00      	cmp	r7, #0
 80084c4:	d143      	bne.n	800854e <_malloc_r+0xd6>
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d04b      	beq.n	8008562 <_malloc_r+0xea>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	4639      	mov	r1, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	eb04 0903 	add.w	r9, r4, r3
 80084d4:	f000 fdce 	bl	8009074 <_sbrk_r>
 80084d8:	4581      	cmp	r9, r0
 80084da:	d142      	bne.n	8008562 <_malloc_r+0xea>
 80084dc:	6821      	ldr	r1, [r4, #0]
 80084de:	1a6d      	subs	r5, r5, r1
 80084e0:	4629      	mov	r1, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ffa6 	bl	8008434 <sbrk_aligned>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d03a      	beq.n	8008562 <_malloc_r+0xea>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	442b      	add	r3, r5
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	f8d8 3000 	ldr.w	r3, [r8]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	bb62      	cbnz	r2, 8008554 <_malloc_r+0xdc>
 80084fa:	f8c8 7000 	str.w	r7, [r8]
 80084fe:	e00f      	b.n	8008520 <_malloc_r+0xa8>
 8008500:	6822      	ldr	r2, [r4, #0]
 8008502:	1b52      	subs	r2, r2, r5
 8008504:	d420      	bmi.n	8008548 <_malloc_r+0xd0>
 8008506:	2a0b      	cmp	r2, #11
 8008508:	d917      	bls.n	800853a <_malloc_r+0xc2>
 800850a:	1961      	adds	r1, r4, r5
 800850c:	42a3      	cmp	r3, r4
 800850e:	6025      	str	r5, [r4, #0]
 8008510:	bf18      	it	ne
 8008512:	6059      	strne	r1, [r3, #4]
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	bf08      	it	eq
 8008518:	f8c8 1000 	streq.w	r1, [r8]
 800851c:	5162      	str	r2, [r4, r5]
 800851e:	604b      	str	r3, [r1, #4]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f82f 	bl	8008584 <__malloc_unlock>
 8008526:	f104 000b 	add.w	r0, r4, #11
 800852a:	1d23      	adds	r3, r4, #4
 800852c:	f020 0007 	bic.w	r0, r0, #7
 8008530:	1ac2      	subs	r2, r0, r3
 8008532:	bf1c      	itt	ne
 8008534:	1a1b      	subne	r3, r3, r0
 8008536:	50a3      	strne	r3, [r4, r2]
 8008538:	e7af      	b.n	800849a <_malloc_r+0x22>
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	42a3      	cmp	r3, r4
 800853e:	bf0c      	ite	eq
 8008540:	f8c8 2000 	streq.w	r2, [r8]
 8008544:	605a      	strne	r2, [r3, #4]
 8008546:	e7eb      	b.n	8008520 <_malloc_r+0xa8>
 8008548:	4623      	mov	r3, r4
 800854a:	6864      	ldr	r4, [r4, #4]
 800854c:	e7ae      	b.n	80084ac <_malloc_r+0x34>
 800854e:	463c      	mov	r4, r7
 8008550:	687f      	ldr	r7, [r7, #4]
 8008552:	e7b6      	b.n	80084c2 <_malloc_r+0x4a>
 8008554:	461a      	mov	r2, r3
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	42a3      	cmp	r3, r4
 800855a:	d1fb      	bne.n	8008554 <_malloc_r+0xdc>
 800855c:	2300      	movs	r3, #0
 800855e:	6053      	str	r3, [r2, #4]
 8008560:	e7de      	b.n	8008520 <_malloc_r+0xa8>
 8008562:	230c      	movs	r3, #12
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	4630      	mov	r0, r6
 8008568:	f000 f80c 	bl	8008584 <__malloc_unlock>
 800856c:	e794      	b.n	8008498 <_malloc_r+0x20>
 800856e:	6005      	str	r5, [r0, #0]
 8008570:	e7d6      	b.n	8008520 <_malloc_r+0xa8>
 8008572:	bf00      	nop
 8008574:	2002628c 	.word	0x2002628c

08008578 <__malloc_lock>:
 8008578:	4801      	ldr	r0, [pc, #4]	@ (8008580 <__malloc_lock+0x8>)
 800857a:	f7ff bf00 	b.w	800837e <__retarget_lock_acquire_recursive>
 800857e:	bf00      	nop
 8008580:	20026284 	.word	0x20026284

08008584 <__malloc_unlock>:
 8008584:	4801      	ldr	r0, [pc, #4]	@ (800858c <__malloc_unlock+0x8>)
 8008586:	f7ff befb 	b.w	8008380 <__retarget_lock_release_recursive>
 800858a:	bf00      	nop
 800858c:	20026284 	.word	0x20026284

08008590 <__ssputs_r>:
 8008590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	688e      	ldr	r6, [r1, #8]
 8008596:	461f      	mov	r7, r3
 8008598:	42be      	cmp	r6, r7
 800859a:	680b      	ldr	r3, [r1, #0]
 800859c:	4682      	mov	sl, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4690      	mov	r8, r2
 80085a2:	d82d      	bhi.n	8008600 <__ssputs_r+0x70>
 80085a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085ac:	d026      	beq.n	80085fc <__ssputs_r+0x6c>
 80085ae:	6965      	ldr	r5, [r4, #20]
 80085b0:	6909      	ldr	r1, [r1, #16]
 80085b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085b6:	eba3 0901 	sub.w	r9, r3, r1
 80085ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085be:	1c7b      	adds	r3, r7, #1
 80085c0:	444b      	add	r3, r9
 80085c2:	106d      	asrs	r5, r5, #1
 80085c4:	429d      	cmp	r5, r3
 80085c6:	bf38      	it	cc
 80085c8:	461d      	movcc	r5, r3
 80085ca:	0553      	lsls	r3, r2, #21
 80085cc:	d527      	bpl.n	800861e <__ssputs_r+0x8e>
 80085ce:	4629      	mov	r1, r5
 80085d0:	f7ff ff52 	bl	8008478 <_malloc_r>
 80085d4:	4606      	mov	r6, r0
 80085d6:	b360      	cbz	r0, 8008632 <__ssputs_r+0xa2>
 80085d8:	6921      	ldr	r1, [r4, #16]
 80085da:	464a      	mov	r2, r9
 80085dc:	f7ff fed1 	bl	8008382 <memcpy>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	6126      	str	r6, [r4, #16]
 80085ee:	6165      	str	r5, [r4, #20]
 80085f0:	444e      	add	r6, r9
 80085f2:	eba5 0509 	sub.w	r5, r5, r9
 80085f6:	6026      	str	r6, [r4, #0]
 80085f8:	60a5      	str	r5, [r4, #8]
 80085fa:	463e      	mov	r6, r7
 80085fc:	42be      	cmp	r6, r7
 80085fe:	d900      	bls.n	8008602 <__ssputs_r+0x72>
 8008600:	463e      	mov	r6, r7
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	4632      	mov	r2, r6
 8008606:	4641      	mov	r1, r8
 8008608:	f000 fcf8 	bl	8008ffc <memmove>
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	1b9b      	subs	r3, r3, r6
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	4433      	add	r3, r6
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	2000      	movs	r0, #0
 800861a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861e:	462a      	mov	r2, r5
 8008620:	f000 fd38 	bl	8009094 <_realloc_r>
 8008624:	4606      	mov	r6, r0
 8008626:	2800      	cmp	r0, #0
 8008628:	d1e0      	bne.n	80085ec <__ssputs_r+0x5c>
 800862a:	6921      	ldr	r1, [r4, #16]
 800862c:	4650      	mov	r0, sl
 800862e:	f7ff feb7 	bl	80083a0 <_free_r>
 8008632:	230c      	movs	r3, #12
 8008634:	f8ca 3000 	str.w	r3, [sl]
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	e7e9      	b.n	800861a <__ssputs_r+0x8a>
	...

08008648 <_svfiprintf_r>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4698      	mov	r8, r3
 800864e:	898b      	ldrh	r3, [r1, #12]
 8008650:	061b      	lsls	r3, r3, #24
 8008652:	b09d      	sub	sp, #116	@ 0x74
 8008654:	4607      	mov	r7, r0
 8008656:	460d      	mov	r5, r1
 8008658:	4614      	mov	r4, r2
 800865a:	d510      	bpl.n	800867e <_svfiprintf_r+0x36>
 800865c:	690b      	ldr	r3, [r1, #16]
 800865e:	b973      	cbnz	r3, 800867e <_svfiprintf_r+0x36>
 8008660:	2140      	movs	r1, #64	@ 0x40
 8008662:	f7ff ff09 	bl	8008478 <_malloc_r>
 8008666:	6028      	str	r0, [r5, #0]
 8008668:	6128      	str	r0, [r5, #16]
 800866a:	b930      	cbnz	r0, 800867a <_svfiprintf_r+0x32>
 800866c:	230c      	movs	r3, #12
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	b01d      	add	sp, #116	@ 0x74
 8008676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867a:	2340      	movs	r3, #64	@ 0x40
 800867c:	616b      	str	r3, [r5, #20]
 800867e:	2300      	movs	r3, #0
 8008680:	9309      	str	r3, [sp, #36]	@ 0x24
 8008682:	2320      	movs	r3, #32
 8008684:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008688:	f8cd 800c 	str.w	r8, [sp, #12]
 800868c:	2330      	movs	r3, #48	@ 0x30
 800868e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800882c <_svfiprintf_r+0x1e4>
 8008692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008696:	f04f 0901 	mov.w	r9, #1
 800869a:	4623      	mov	r3, r4
 800869c:	469a      	mov	sl, r3
 800869e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086a2:	b10a      	cbz	r2, 80086a8 <_svfiprintf_r+0x60>
 80086a4:	2a25      	cmp	r2, #37	@ 0x25
 80086a6:	d1f9      	bne.n	800869c <_svfiprintf_r+0x54>
 80086a8:	ebba 0b04 	subs.w	fp, sl, r4
 80086ac:	d00b      	beq.n	80086c6 <_svfiprintf_r+0x7e>
 80086ae:	465b      	mov	r3, fp
 80086b0:	4622      	mov	r2, r4
 80086b2:	4629      	mov	r1, r5
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff ff6b 	bl	8008590 <__ssputs_r>
 80086ba:	3001      	adds	r0, #1
 80086bc:	f000 80a7 	beq.w	800880e <_svfiprintf_r+0x1c6>
 80086c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086c2:	445a      	add	r2, fp
 80086c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80086c6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 809f 	beq.w	800880e <_svfiprintf_r+0x1c6>
 80086d0:	2300      	movs	r3, #0
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086da:	f10a 0a01 	add.w	sl, sl, #1
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80086e8:	4654      	mov	r4, sl
 80086ea:	2205      	movs	r2, #5
 80086ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f0:	484e      	ldr	r0, [pc, #312]	@ (800882c <_svfiprintf_r+0x1e4>)
 80086f2:	f7f7 fd85 	bl	8000200 <memchr>
 80086f6:	9a04      	ldr	r2, [sp, #16]
 80086f8:	b9d8      	cbnz	r0, 8008732 <_svfiprintf_r+0xea>
 80086fa:	06d0      	lsls	r0, r2, #27
 80086fc:	bf44      	itt	mi
 80086fe:	2320      	movmi	r3, #32
 8008700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008704:	0711      	lsls	r1, r2, #28
 8008706:	bf44      	itt	mi
 8008708:	232b      	movmi	r3, #43	@ 0x2b
 800870a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800870e:	f89a 3000 	ldrb.w	r3, [sl]
 8008712:	2b2a      	cmp	r3, #42	@ 0x2a
 8008714:	d015      	beq.n	8008742 <_svfiprintf_r+0xfa>
 8008716:	9a07      	ldr	r2, [sp, #28]
 8008718:	4654      	mov	r4, sl
 800871a:	2000      	movs	r0, #0
 800871c:	f04f 0c0a 	mov.w	ip, #10
 8008720:	4621      	mov	r1, r4
 8008722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008726:	3b30      	subs	r3, #48	@ 0x30
 8008728:	2b09      	cmp	r3, #9
 800872a:	d94b      	bls.n	80087c4 <_svfiprintf_r+0x17c>
 800872c:	b1b0      	cbz	r0, 800875c <_svfiprintf_r+0x114>
 800872e:	9207      	str	r2, [sp, #28]
 8008730:	e014      	b.n	800875c <_svfiprintf_r+0x114>
 8008732:	eba0 0308 	sub.w	r3, r0, r8
 8008736:	fa09 f303 	lsl.w	r3, r9, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	46a2      	mov	sl, r4
 8008740:	e7d2      	b.n	80086e8 <_svfiprintf_r+0xa0>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	1d19      	adds	r1, r3, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	9103      	str	r1, [sp, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	bfbb      	ittet	lt
 800874e:	425b      	neglt	r3, r3
 8008750:	f042 0202 	orrlt.w	r2, r2, #2
 8008754:	9307      	strge	r3, [sp, #28]
 8008756:	9307      	strlt	r3, [sp, #28]
 8008758:	bfb8      	it	lt
 800875a:	9204      	strlt	r2, [sp, #16]
 800875c:	7823      	ldrb	r3, [r4, #0]
 800875e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008760:	d10a      	bne.n	8008778 <_svfiprintf_r+0x130>
 8008762:	7863      	ldrb	r3, [r4, #1]
 8008764:	2b2a      	cmp	r3, #42	@ 0x2a
 8008766:	d132      	bne.n	80087ce <_svfiprintf_r+0x186>
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	9203      	str	r2, [sp, #12]
 8008770:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008774:	3402      	adds	r4, #2
 8008776:	9305      	str	r3, [sp, #20]
 8008778:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800883c <_svfiprintf_r+0x1f4>
 800877c:	7821      	ldrb	r1, [r4, #0]
 800877e:	2203      	movs	r2, #3
 8008780:	4650      	mov	r0, sl
 8008782:	f7f7 fd3d 	bl	8000200 <memchr>
 8008786:	b138      	cbz	r0, 8008798 <_svfiprintf_r+0x150>
 8008788:	9b04      	ldr	r3, [sp, #16]
 800878a:	eba0 000a 	sub.w	r0, r0, sl
 800878e:	2240      	movs	r2, #64	@ 0x40
 8008790:	4082      	lsls	r2, r0
 8008792:	4313      	orrs	r3, r2
 8008794:	3401      	adds	r4, #1
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879c:	4824      	ldr	r0, [pc, #144]	@ (8008830 <_svfiprintf_r+0x1e8>)
 800879e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087a2:	2206      	movs	r2, #6
 80087a4:	f7f7 fd2c 	bl	8000200 <memchr>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d036      	beq.n	800881a <_svfiprintf_r+0x1d2>
 80087ac:	4b21      	ldr	r3, [pc, #132]	@ (8008834 <_svfiprintf_r+0x1ec>)
 80087ae:	bb1b      	cbnz	r3, 80087f8 <_svfiprintf_r+0x1b0>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	3307      	adds	r3, #7
 80087b4:	f023 0307 	bic.w	r3, r3, #7
 80087b8:	3308      	adds	r3, #8
 80087ba:	9303      	str	r3, [sp, #12]
 80087bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087be:	4433      	add	r3, r6
 80087c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c2:	e76a      	b.n	800869a <_svfiprintf_r+0x52>
 80087c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c8:	460c      	mov	r4, r1
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7a8      	b.n	8008720 <_svfiprintf_r+0xd8>
 80087ce:	2300      	movs	r3, #0
 80087d0:	3401      	adds	r4, #1
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	4619      	mov	r1, r3
 80087d6:	f04f 0c0a 	mov.w	ip, #10
 80087da:	4620      	mov	r0, r4
 80087dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e0:	3a30      	subs	r2, #48	@ 0x30
 80087e2:	2a09      	cmp	r2, #9
 80087e4:	d903      	bls.n	80087ee <_svfiprintf_r+0x1a6>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c6      	beq.n	8008778 <_svfiprintf_r+0x130>
 80087ea:	9105      	str	r1, [sp, #20]
 80087ec:	e7c4      	b.n	8008778 <_svfiprintf_r+0x130>
 80087ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f2:	4604      	mov	r4, r0
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7f0      	b.n	80087da <_svfiprintf_r+0x192>
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	462a      	mov	r2, r5
 80087fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <_svfiprintf_r+0x1f0>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4638      	mov	r0, r7
 8008804:	f3af 8000 	nop.w
 8008808:	1c42      	adds	r2, r0, #1
 800880a:	4606      	mov	r6, r0
 800880c:	d1d6      	bne.n	80087bc <_svfiprintf_r+0x174>
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	065b      	lsls	r3, r3, #25
 8008812:	f53f af2d 	bmi.w	8008670 <_svfiprintf_r+0x28>
 8008816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008818:	e72c      	b.n	8008674 <_svfiprintf_r+0x2c>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <_svfiprintf_r+0x1f0>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4638      	mov	r0, r7
 8008826:	f000 f9bb 	bl	8008ba0 <_printf_i>
 800882a:	e7ed      	b.n	8008808 <_svfiprintf_r+0x1c0>
 800882c:	0800a38e 	.word	0x0800a38e
 8008830:	0800a398 	.word	0x0800a398
 8008834:	00000000 	.word	0x00000000
 8008838:	08008591 	.word	0x08008591
 800883c:	0800a394 	.word	0x0800a394

08008840 <__sfputc_r>:
 8008840:	6893      	ldr	r3, [r2, #8]
 8008842:	3b01      	subs	r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	b410      	push	{r4}
 8008848:	6093      	str	r3, [r2, #8]
 800884a:	da08      	bge.n	800885e <__sfputc_r+0x1e>
 800884c:	6994      	ldr	r4, [r2, #24]
 800884e:	42a3      	cmp	r3, r4
 8008850:	db01      	blt.n	8008856 <__sfputc_r+0x16>
 8008852:	290a      	cmp	r1, #10
 8008854:	d103      	bne.n	800885e <__sfputc_r+0x1e>
 8008856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800885a:	f7ff bc82 	b.w	8008162 <__swbuf_r>
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	1c58      	adds	r0, r3, #1
 8008862:	6010      	str	r0, [r2, #0]
 8008864:	7019      	strb	r1, [r3, #0]
 8008866:	4608      	mov	r0, r1
 8008868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886c:	4770      	bx	lr

0800886e <__sfputs_r>:
 800886e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008870:	4606      	mov	r6, r0
 8008872:	460f      	mov	r7, r1
 8008874:	4614      	mov	r4, r2
 8008876:	18d5      	adds	r5, r2, r3
 8008878:	42ac      	cmp	r4, r5
 800887a:	d101      	bne.n	8008880 <__sfputs_r+0x12>
 800887c:	2000      	movs	r0, #0
 800887e:	e007      	b.n	8008890 <__sfputs_r+0x22>
 8008880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008884:	463a      	mov	r2, r7
 8008886:	4630      	mov	r0, r6
 8008888:	f7ff ffda 	bl	8008840 <__sfputc_r>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d1f3      	bne.n	8008878 <__sfputs_r+0xa>
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008894 <_vfiprintf_r>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	460d      	mov	r5, r1
 800889a:	b09d      	sub	sp, #116	@ 0x74
 800889c:	4614      	mov	r4, r2
 800889e:	4698      	mov	r8, r3
 80088a0:	4606      	mov	r6, r0
 80088a2:	b118      	cbz	r0, 80088ac <_vfiprintf_r+0x18>
 80088a4:	6a03      	ldr	r3, [r0, #32]
 80088a6:	b90b      	cbnz	r3, 80088ac <_vfiprintf_r+0x18>
 80088a8:	f7ff fb3e 	bl	8007f28 <__sinit>
 80088ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ae:	07d9      	lsls	r1, r3, #31
 80088b0:	d405      	bmi.n	80088be <_vfiprintf_r+0x2a>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	059a      	lsls	r2, r3, #22
 80088b6:	d402      	bmi.n	80088be <_vfiprintf_r+0x2a>
 80088b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ba:	f7ff fd60 	bl	800837e <__retarget_lock_acquire_recursive>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	071b      	lsls	r3, r3, #28
 80088c2:	d501      	bpl.n	80088c8 <_vfiprintf_r+0x34>
 80088c4:	692b      	ldr	r3, [r5, #16]
 80088c6:	b99b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x5c>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff fc88 	bl	80081e0 <__swsetup_r>
 80088d0:	b170      	cbz	r0, 80088f0 <_vfiprintf_r+0x5c>
 80088d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d4:	07dc      	lsls	r4, r3, #31
 80088d6:	d504      	bpl.n	80088e2 <_vfiprintf_r+0x4e>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b01d      	add	sp, #116	@ 0x74
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	0598      	lsls	r0, r3, #22
 80088e6:	d4f7      	bmi.n	80088d8 <_vfiprintf_r+0x44>
 80088e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ea:	f7ff fd49 	bl	8008380 <__retarget_lock_release_recursive>
 80088ee:	e7f3      	b.n	80088d8 <_vfiprintf_r+0x44>
 80088f0:	2300      	movs	r3, #0
 80088f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f4:	2320      	movs	r3, #32
 80088f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fe:	2330      	movs	r3, #48	@ 0x30
 8008900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ab0 <_vfiprintf_r+0x21c>
 8008904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008908:	f04f 0901 	mov.w	r9, #1
 800890c:	4623      	mov	r3, r4
 800890e:	469a      	mov	sl, r3
 8008910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008914:	b10a      	cbz	r2, 800891a <_vfiprintf_r+0x86>
 8008916:	2a25      	cmp	r2, #37	@ 0x25
 8008918:	d1f9      	bne.n	800890e <_vfiprintf_r+0x7a>
 800891a:	ebba 0b04 	subs.w	fp, sl, r4
 800891e:	d00b      	beq.n	8008938 <_vfiprintf_r+0xa4>
 8008920:	465b      	mov	r3, fp
 8008922:	4622      	mov	r2, r4
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ffa1 	bl	800886e <__sfputs_r>
 800892c:	3001      	adds	r0, #1
 800892e:	f000 80a7 	beq.w	8008a80 <_vfiprintf_r+0x1ec>
 8008932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008934:	445a      	add	r2, fp
 8008936:	9209      	str	r2, [sp, #36]	@ 0x24
 8008938:	f89a 3000 	ldrb.w	r3, [sl]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 809f 	beq.w	8008a80 <_vfiprintf_r+0x1ec>
 8008942:	2300      	movs	r3, #0
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800894c:	f10a 0a01 	add.w	sl, sl, #1
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008958:	931a      	str	r3, [sp, #104]	@ 0x68
 800895a:	4654      	mov	r4, sl
 800895c:	2205      	movs	r2, #5
 800895e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008962:	4853      	ldr	r0, [pc, #332]	@ (8008ab0 <_vfiprintf_r+0x21c>)
 8008964:	f7f7 fc4c 	bl	8000200 <memchr>
 8008968:	9a04      	ldr	r2, [sp, #16]
 800896a:	b9d8      	cbnz	r0, 80089a4 <_vfiprintf_r+0x110>
 800896c:	06d1      	lsls	r1, r2, #27
 800896e:	bf44      	itt	mi
 8008970:	2320      	movmi	r3, #32
 8008972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008976:	0713      	lsls	r3, r2, #28
 8008978:	bf44      	itt	mi
 800897a:	232b      	movmi	r3, #43	@ 0x2b
 800897c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008980:	f89a 3000 	ldrb.w	r3, [sl]
 8008984:	2b2a      	cmp	r3, #42	@ 0x2a
 8008986:	d015      	beq.n	80089b4 <_vfiprintf_r+0x120>
 8008988:	9a07      	ldr	r2, [sp, #28]
 800898a:	4654      	mov	r4, sl
 800898c:	2000      	movs	r0, #0
 800898e:	f04f 0c0a 	mov.w	ip, #10
 8008992:	4621      	mov	r1, r4
 8008994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008998:	3b30      	subs	r3, #48	@ 0x30
 800899a:	2b09      	cmp	r3, #9
 800899c:	d94b      	bls.n	8008a36 <_vfiprintf_r+0x1a2>
 800899e:	b1b0      	cbz	r0, 80089ce <_vfiprintf_r+0x13a>
 80089a0:	9207      	str	r2, [sp, #28]
 80089a2:	e014      	b.n	80089ce <_vfiprintf_r+0x13a>
 80089a4:	eba0 0308 	sub.w	r3, r0, r8
 80089a8:	fa09 f303 	lsl.w	r3, r9, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	46a2      	mov	sl, r4
 80089b2:	e7d2      	b.n	800895a <_vfiprintf_r+0xc6>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	1d19      	adds	r1, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	9103      	str	r1, [sp, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfbb      	ittet	lt
 80089c0:	425b      	neglt	r3, r3
 80089c2:	f042 0202 	orrlt.w	r2, r2, #2
 80089c6:	9307      	strge	r3, [sp, #28]
 80089c8:	9307      	strlt	r3, [sp, #28]
 80089ca:	bfb8      	it	lt
 80089cc:	9204      	strlt	r2, [sp, #16]
 80089ce:	7823      	ldrb	r3, [r4, #0]
 80089d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80089d2:	d10a      	bne.n	80089ea <_vfiprintf_r+0x156>
 80089d4:	7863      	ldrb	r3, [r4, #1]
 80089d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d8:	d132      	bne.n	8008a40 <_vfiprintf_r+0x1ac>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	1d1a      	adds	r2, r3, #4
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	9203      	str	r2, [sp, #12]
 80089e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089e6:	3402      	adds	r4, #2
 80089e8:	9305      	str	r3, [sp, #20]
 80089ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ac0 <_vfiprintf_r+0x22c>
 80089ee:	7821      	ldrb	r1, [r4, #0]
 80089f0:	2203      	movs	r2, #3
 80089f2:	4650      	mov	r0, sl
 80089f4:	f7f7 fc04 	bl	8000200 <memchr>
 80089f8:	b138      	cbz	r0, 8008a0a <_vfiprintf_r+0x176>
 80089fa:	9b04      	ldr	r3, [sp, #16]
 80089fc:	eba0 000a 	sub.w	r0, r0, sl
 8008a00:	2240      	movs	r2, #64	@ 0x40
 8008a02:	4082      	lsls	r2, r0
 8008a04:	4313      	orrs	r3, r2
 8008a06:	3401      	adds	r4, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0e:	4829      	ldr	r0, [pc, #164]	@ (8008ab4 <_vfiprintf_r+0x220>)
 8008a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a14:	2206      	movs	r2, #6
 8008a16:	f7f7 fbf3 	bl	8000200 <memchr>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d03f      	beq.n	8008a9e <_vfiprintf_r+0x20a>
 8008a1e:	4b26      	ldr	r3, [pc, #152]	@ (8008ab8 <_vfiprintf_r+0x224>)
 8008a20:	bb1b      	cbnz	r3, 8008a6a <_vfiprintf_r+0x1d6>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	3307      	adds	r3, #7
 8008a26:	f023 0307 	bic.w	r3, r3, #7
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	443b      	add	r3, r7
 8008a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a34:	e76a      	b.n	800890c <_vfiprintf_r+0x78>
 8008a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	e7a8      	b.n	8008992 <_vfiprintf_r+0xfe>
 8008a40:	2300      	movs	r3, #0
 8008a42:	3401      	adds	r4, #1
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	4619      	mov	r1, r3
 8008a48:	f04f 0c0a 	mov.w	ip, #10
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a52:	3a30      	subs	r2, #48	@ 0x30
 8008a54:	2a09      	cmp	r2, #9
 8008a56:	d903      	bls.n	8008a60 <_vfiprintf_r+0x1cc>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0c6      	beq.n	80089ea <_vfiprintf_r+0x156>
 8008a5c:	9105      	str	r1, [sp, #20]
 8008a5e:	e7c4      	b.n	80089ea <_vfiprintf_r+0x156>
 8008a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a64:	4604      	mov	r4, r0
 8008a66:	2301      	movs	r3, #1
 8008a68:	e7f0      	b.n	8008a4c <_vfiprintf_r+0x1b8>
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <_vfiprintf_r+0x228>)
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	4630      	mov	r0, r6
 8008a76:	f3af 8000 	nop.w
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	1c78      	adds	r0, r7, #1
 8008a7e:	d1d6      	bne.n	8008a2e <_vfiprintf_r+0x19a>
 8008a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	d405      	bmi.n	8008a92 <_vfiprintf_r+0x1fe>
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	059a      	lsls	r2, r3, #22
 8008a8a:	d402      	bmi.n	8008a92 <_vfiprintf_r+0x1fe>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a8e:	f7ff fc77 	bl	8008380 <__retarget_lock_release_recursive>
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	065b      	lsls	r3, r3, #25
 8008a96:	f53f af1f 	bmi.w	80088d8 <_vfiprintf_r+0x44>
 8008a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a9c:	e71e      	b.n	80088dc <_vfiprintf_r+0x48>
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4b05      	ldr	r3, [pc, #20]	@ (8008abc <_vfiprintf_r+0x228>)
 8008aa6:	a904      	add	r1, sp, #16
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f879 	bl	8008ba0 <_printf_i>
 8008aae:	e7e4      	b.n	8008a7a <_vfiprintf_r+0x1e6>
 8008ab0:	0800a38e 	.word	0x0800a38e
 8008ab4:	0800a398 	.word	0x0800a398
 8008ab8:	00000000 	.word	0x00000000
 8008abc:	0800886f 	.word	0x0800886f
 8008ac0:	0800a394 	.word	0x0800a394

08008ac4 <_printf_common>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	4616      	mov	r6, r2
 8008aca:	4698      	mov	r8, r3
 8008acc:	688a      	ldr	r2, [r1, #8]
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bfb8      	it	lt
 8008ad8:	4613      	movlt	r3, r2
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b10a      	cbz	r2, 8008aea <_printf_common+0x26>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	0699      	lsls	r1, r3, #26
 8008aee:	bf42      	ittt	mi
 8008af0:	6833      	ldrmi	r3, [r6, #0]
 8008af2:	3302      	addmi	r3, #2
 8008af4:	6033      	strmi	r3, [r6, #0]
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	f015 0506 	ands.w	r5, r5, #6
 8008afc:	d106      	bne.n	8008b0c <_printf_common+0x48>
 8008afe:	f104 0a19 	add.w	sl, r4, #25
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	6832      	ldr	r2, [r6, #0]
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dc26      	bgt.n	8008b5a <_printf_common+0x96>
 8008b0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	3b00      	subs	r3, #0
 8008b14:	bf18      	it	ne
 8008b16:	2301      	movne	r3, #1
 8008b18:	0692      	lsls	r2, r2, #26
 8008b1a:	d42b      	bmi.n	8008b74 <_printf_common+0xb0>
 8008b1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b20:	4641      	mov	r1, r8
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c8      	blx	r9
 8008b26:	3001      	adds	r0, #1
 8008b28:	d01e      	beq.n	8008b68 <_printf_common+0xa4>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6922      	ldr	r2, [r4, #16]
 8008b2e:	f003 0306 	and.w	r3, r3, #6
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	bf02      	ittt	eq
 8008b36:	68e5      	ldreq	r5, [r4, #12]
 8008b38:	6833      	ldreq	r3, [r6, #0]
 8008b3a:	1aed      	subeq	r5, r5, r3
 8008b3c:	68a3      	ldr	r3, [r4, #8]
 8008b3e:	bf0c      	ite	eq
 8008b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b44:	2500      	movne	r5, #0
 8008b46:	4293      	cmp	r3, r2
 8008b48:	bfc4      	itt	gt
 8008b4a:	1a9b      	subgt	r3, r3, r2
 8008b4c:	18ed      	addgt	r5, r5, r3
 8008b4e:	2600      	movs	r6, #0
 8008b50:	341a      	adds	r4, #26
 8008b52:	42b5      	cmp	r5, r6
 8008b54:	d11a      	bne.n	8008b8c <_printf_common+0xc8>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e008      	b.n	8008b6c <_printf_common+0xa8>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4641      	mov	r1, r8
 8008b60:	4638      	mov	r0, r7
 8008b62:	47c8      	blx	r9
 8008b64:	3001      	adds	r0, #1
 8008b66:	d103      	bne.n	8008b70 <_printf_common+0xac>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	3501      	adds	r5, #1
 8008b72:	e7c6      	b.n	8008b02 <_printf_common+0x3e>
 8008b74:	18e1      	adds	r1, r4, r3
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	2030      	movs	r0, #48	@ 0x30
 8008b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b7e:	4422      	add	r2, r4
 8008b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b88:	3302      	adds	r3, #2
 8008b8a:	e7c7      	b.n	8008b1c <_printf_common+0x58>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4641      	mov	r1, r8
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c8      	blx	r9
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0e6      	beq.n	8008b68 <_printf_common+0xa4>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7d9      	b.n	8008b52 <_printf_common+0x8e>
	...

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ba8:	2f78      	cmp	r7, #120	@ 0x78
 8008baa:	4691      	mov	r9, r2
 8008bac:	4680      	mov	r8, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	@ 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d2 	beq.w	8008d66 <_printf_i+0x1c6>
 8008bc2:	2f58      	cmp	r7, #88	@ 0x58
 8008bc4:	f000 80b9 	beq.w	8008d3a <_printf_i+0x19a>
 8008bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	@ (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d4d 	.word	0x08008d4d
 8008c10:	08008c77 	.word	0x08008c77
 8008c14:	08008d07 	.word	0x08008d07
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d6f 	.word	0x08008d6f
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c77 	.word	0x08008c77
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d0f 	.word	0x08008d0f
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6032      	str	r2, [r6, #0]
 8008c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e09d      	b.n	8008d88 <_printf_i+0x1e8>
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	6820      	ldr	r0, [r4, #0]
 8008c50:	1d19      	adds	r1, r3, #4
 8008c52:	6031      	str	r1, [r6, #0]
 8008c54:	0606      	lsls	r6, r0, #24
 8008c56:	d501      	bpl.n	8008c5c <_printf_i+0xbc>
 8008c58:	681d      	ldr	r5, [r3, #0]
 8008c5a:	e003      	b.n	8008c64 <_printf_i+0xc4>
 8008c5c:	0645      	lsls	r5, r0, #25
 8008c5e:	d5fb      	bpl.n	8008c58 <_printf_i+0xb8>
 8008c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	da03      	bge.n	8008c70 <_printf_i+0xd0>
 8008c68:	232d      	movs	r3, #45	@ 0x2d
 8008c6a:	426d      	negs	r5, r5
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c70:	4859      	ldr	r0, [pc, #356]	@ (8008dd8 <_printf_i+0x238>)
 8008c72:	230a      	movs	r3, #10
 8008c74:	e011      	b.n	8008c9a <_printf_i+0xfa>
 8008c76:	6821      	ldr	r1, [r4, #0]
 8008c78:	6833      	ldr	r3, [r6, #0]
 8008c7a:	0608      	lsls	r0, r1, #24
 8008c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c80:	d402      	bmi.n	8008c88 <_printf_i+0xe8>
 8008c82:	0649      	lsls	r1, r1, #25
 8008c84:	bf48      	it	mi
 8008c86:	b2ad      	uxthmi	r5, r5
 8008c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c8a:	4853      	ldr	r0, [pc, #332]	@ (8008dd8 <_printf_i+0x238>)
 8008c8c:	6033      	str	r3, [r6, #0]
 8008c8e:	bf14      	ite	ne
 8008c90:	230a      	movne	r3, #10
 8008c92:	2308      	moveq	r3, #8
 8008c94:	2100      	movs	r1, #0
 8008c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c9a:	6866      	ldr	r6, [r4, #4]
 8008c9c:	60a6      	str	r6, [r4, #8]
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	bfa2      	ittt	ge
 8008ca2:	6821      	ldrge	r1, [r4, #0]
 8008ca4:	f021 0104 	bicge.w	r1, r1, #4
 8008ca8:	6021      	strge	r1, [r4, #0]
 8008caa:	b90d      	cbnz	r5, 8008cb0 <_printf_i+0x110>
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	d04b      	beq.n	8008d48 <_printf_i+0x1a8>
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8008cba:	5dc7      	ldrb	r7, [r0, r7]
 8008cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cc0:	462f      	mov	r7, r5
 8008cc2:	42bb      	cmp	r3, r7
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	d9f4      	bls.n	8008cb2 <_printf_i+0x112>
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d10b      	bne.n	8008ce4 <_printf_i+0x144>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	07df      	lsls	r7, r3, #31
 8008cd0:	d508      	bpl.n	8008ce4 <_printf_i+0x144>
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	6861      	ldr	r1, [r4, #4]
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	bfde      	ittt	le
 8008cda:	2330      	movle	r3, #48	@ 0x30
 8008cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ce4:	1b92      	subs	r2, r2, r6
 8008ce6:	6122      	str	r2, [r4, #16]
 8008ce8:	f8cd a000 	str.w	sl, [sp]
 8008cec:	464b      	mov	r3, r9
 8008cee:	aa03      	add	r2, sp, #12
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	f7ff fee6 	bl	8008ac4 <_printf_common>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d14a      	bne.n	8008d92 <_printf_i+0x1f2>
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	b004      	add	sp, #16
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f043 0320 	orr.w	r3, r3, #32
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	4833      	ldr	r0, [pc, #204]	@ (8008ddc <_printf_i+0x23c>)
 8008d10:	2778      	movs	r7, #120	@ 0x78
 8008d12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	6831      	ldr	r1, [r6, #0]
 8008d1a:	061f      	lsls	r7, r3, #24
 8008d1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d20:	d402      	bmi.n	8008d28 <_printf_i+0x188>
 8008d22:	065f      	lsls	r7, r3, #25
 8008d24:	bf48      	it	mi
 8008d26:	b2ad      	uxthmi	r5, r5
 8008d28:	6031      	str	r1, [r6, #0]
 8008d2a:	07d9      	lsls	r1, r3, #31
 8008d2c:	bf44      	itt	mi
 8008d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d32:	6023      	strmi	r3, [r4, #0]
 8008d34:	b11d      	cbz	r5, 8008d3e <_printf_i+0x19e>
 8008d36:	2310      	movs	r3, #16
 8008d38:	e7ac      	b.n	8008c94 <_printf_i+0xf4>
 8008d3a:	4827      	ldr	r0, [pc, #156]	@ (8008dd8 <_printf_i+0x238>)
 8008d3c:	e7e9      	b.n	8008d12 <_printf_i+0x172>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f023 0320 	bic.w	r3, r3, #32
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	e7f6      	b.n	8008d36 <_printf_i+0x196>
 8008d48:	4616      	mov	r6, r2
 8008d4a:	e7bd      	b.n	8008cc8 <_printf_i+0x128>
 8008d4c:	6833      	ldr	r3, [r6, #0]
 8008d4e:	6825      	ldr	r5, [r4, #0]
 8008d50:	6961      	ldr	r1, [r4, #20]
 8008d52:	1d18      	adds	r0, r3, #4
 8008d54:	6030      	str	r0, [r6, #0]
 8008d56:	062e      	lsls	r6, r5, #24
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0x1c0>
 8008d5c:	6019      	str	r1, [r3, #0]
 8008d5e:	e002      	b.n	8008d66 <_printf_i+0x1c6>
 8008d60:	0668      	lsls	r0, r5, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0x1bc>
 8008d64:	8019      	strh	r1, [r3, #0]
 8008d66:	2300      	movs	r3, #0
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	4616      	mov	r6, r2
 8008d6c:	e7bc      	b.n	8008ce8 <_printf_i+0x148>
 8008d6e:	6833      	ldr	r3, [r6, #0]
 8008d70:	1d1a      	adds	r2, r3, #4
 8008d72:	6032      	str	r2, [r6, #0]
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	6862      	ldr	r2, [r4, #4]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7f7 fa40 	bl	8000200 <memchr>
 8008d80:	b108      	cbz	r0, 8008d86 <_printf_i+0x1e6>
 8008d82:	1b80      	subs	r0, r0, r6
 8008d84:	6060      	str	r0, [r4, #4]
 8008d86:	6863      	ldr	r3, [r4, #4]
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d90:	e7aa      	b.n	8008ce8 <_printf_i+0x148>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	4632      	mov	r2, r6
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	47d0      	blx	sl
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d0ad      	beq.n	8008cfc <_printf_i+0x15c>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	079b      	lsls	r3, r3, #30
 8008da4:	d413      	bmi.n	8008dce <_printf_i+0x22e>
 8008da6:	68e0      	ldr	r0, [r4, #12]
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	4298      	cmp	r0, r3
 8008dac:	bfb8      	it	lt
 8008dae:	4618      	movlt	r0, r3
 8008db0:	e7a6      	b.n	8008d00 <_printf_i+0x160>
 8008db2:	2301      	movs	r3, #1
 8008db4:	4632      	mov	r2, r6
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	47d0      	blx	sl
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d09d      	beq.n	8008cfc <_printf_i+0x15c>
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	68e3      	ldr	r3, [r4, #12]
 8008dc4:	9903      	ldr	r1, [sp, #12]
 8008dc6:	1a5b      	subs	r3, r3, r1
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	dcf2      	bgt.n	8008db2 <_printf_i+0x212>
 8008dcc:	e7eb      	b.n	8008da6 <_printf_i+0x206>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	f104 0619 	add.w	r6, r4, #25
 8008dd4:	e7f5      	b.n	8008dc2 <_printf_i+0x222>
 8008dd6:	bf00      	nop
 8008dd8:	0800a39f 	.word	0x0800a39f
 8008ddc:	0800a3b0 	.word	0x0800a3b0

08008de0 <__sflush_r>:
 8008de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	0716      	lsls	r6, r2, #28
 8008dea:	4605      	mov	r5, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	d454      	bmi.n	8008e9a <__sflush_r+0xba>
 8008df0:	684b      	ldr	r3, [r1, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dc02      	bgt.n	8008dfc <__sflush_r+0x1c>
 8008df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd48      	ble.n	8008e8e <__sflush_r+0xae>
 8008dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dfe:	2e00      	cmp	r6, #0
 8008e00:	d045      	beq.n	8008e8e <__sflush_r+0xae>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e08:	682f      	ldr	r7, [r5, #0]
 8008e0a:	6a21      	ldr	r1, [r4, #32]
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	d030      	beq.n	8008e72 <__sflush_r+0x92>
 8008e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	0759      	lsls	r1, r3, #29
 8008e16:	d505      	bpl.n	8008e24 <__sflush_r+0x44>
 8008e18:	6863      	ldr	r3, [r4, #4]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e1e:	b10b      	cbz	r3, 8008e24 <__sflush_r+0x44>
 8008e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e28:	6a21      	ldr	r1, [r4, #32]
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b0      	blx	r6
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	d106      	bne.n	8008e42 <__sflush_r+0x62>
 8008e34:	6829      	ldr	r1, [r5, #0]
 8008e36:	291d      	cmp	r1, #29
 8008e38:	d82b      	bhi.n	8008e92 <__sflush_r+0xb2>
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <__sflush_r+0x104>)
 8008e3c:	410a      	asrs	r2, r1
 8008e3e:	07d6      	lsls	r6, r2, #31
 8008e40:	d427      	bmi.n	8008e92 <__sflush_r+0xb2>
 8008e42:	2200      	movs	r2, #0
 8008e44:	6062      	str	r2, [r4, #4]
 8008e46:	04d9      	lsls	r1, r3, #19
 8008e48:	6922      	ldr	r2, [r4, #16]
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	d504      	bpl.n	8008e58 <__sflush_r+0x78>
 8008e4e:	1c42      	adds	r2, r0, #1
 8008e50:	d101      	bne.n	8008e56 <__sflush_r+0x76>
 8008e52:	682b      	ldr	r3, [r5, #0]
 8008e54:	b903      	cbnz	r3, 8008e58 <__sflush_r+0x78>
 8008e56:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e5a:	602f      	str	r7, [r5, #0]
 8008e5c:	b1b9      	cbz	r1, 8008e8e <__sflush_r+0xae>
 8008e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e62:	4299      	cmp	r1, r3
 8008e64:	d002      	beq.n	8008e6c <__sflush_r+0x8c>
 8008e66:	4628      	mov	r0, r5
 8008e68:	f7ff fa9a 	bl	80083a0 <_free_r>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e70:	e00d      	b.n	8008e8e <__sflush_r+0xae>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b0      	blx	r6
 8008e78:	4602      	mov	r2, r0
 8008e7a:	1c50      	adds	r0, r2, #1
 8008e7c:	d1c9      	bne.n	8008e12 <__sflush_r+0x32>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0c6      	beq.n	8008e12 <__sflush_r+0x32>
 8008e84:	2b1d      	cmp	r3, #29
 8008e86:	d001      	beq.n	8008e8c <__sflush_r+0xac>
 8008e88:	2b16      	cmp	r3, #22
 8008e8a:	d11e      	bne.n	8008eca <__sflush_r+0xea>
 8008e8c:	602f      	str	r7, [r5, #0]
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e022      	b.n	8008ed8 <__sflush_r+0xf8>
 8008e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	e01b      	b.n	8008ed2 <__sflush_r+0xf2>
 8008e9a:	690f      	ldr	r7, [r1, #16]
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	d0f6      	beq.n	8008e8e <__sflush_r+0xae>
 8008ea0:	0793      	lsls	r3, r2, #30
 8008ea2:	680e      	ldr	r6, [r1, #0]
 8008ea4:	bf08      	it	eq
 8008ea6:	694b      	ldreq	r3, [r1, #20]
 8008ea8:	600f      	str	r7, [r1, #0]
 8008eaa:	bf18      	it	ne
 8008eac:	2300      	movne	r3, #0
 8008eae:	eba6 0807 	sub.w	r8, r6, r7
 8008eb2:	608b      	str	r3, [r1, #8]
 8008eb4:	f1b8 0f00 	cmp.w	r8, #0
 8008eb8:	dde9      	ble.n	8008e8e <__sflush_r+0xae>
 8008eba:	6a21      	ldr	r1, [r4, #32]
 8008ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ebe:	4643      	mov	r3, r8
 8008ec0:	463a      	mov	r2, r7
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	47b0      	blx	r6
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	dc08      	bgt.n	8008edc <__sflush_r+0xfc>
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008edc:	4407      	add	r7, r0
 8008ede:	eba8 0800 	sub.w	r8, r8, r0
 8008ee2:	e7e7      	b.n	8008eb4 <__sflush_r+0xd4>
 8008ee4:	dfbffffe 	.word	0xdfbffffe

08008ee8 <_fflush_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	690b      	ldr	r3, [r1, #16]
 8008eec:	4605      	mov	r5, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	b913      	cbnz	r3, 8008ef8 <_fflush_r+0x10>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	b118      	cbz	r0, 8008f02 <_fflush_r+0x1a>
 8008efa:	6a03      	ldr	r3, [r0, #32]
 8008efc:	b90b      	cbnz	r3, 8008f02 <_fflush_r+0x1a>
 8008efe:	f7ff f813 	bl	8007f28 <__sinit>
 8008f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0f3      	beq.n	8008ef2 <_fflush_r+0xa>
 8008f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f0c:	07d0      	lsls	r0, r2, #31
 8008f0e:	d404      	bmi.n	8008f1a <_fflush_r+0x32>
 8008f10:	0599      	lsls	r1, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_fflush_r+0x32>
 8008f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f16:	f7ff fa32 	bl	800837e <__retarget_lock_acquire_recursive>
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	f7ff ff5f 	bl	8008de0 <__sflush_r>
 8008f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f24:	07da      	lsls	r2, r3, #31
 8008f26:	4605      	mov	r5, r0
 8008f28:	d4e4      	bmi.n	8008ef4 <_fflush_r+0xc>
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	059b      	lsls	r3, r3, #22
 8008f2e:	d4e1      	bmi.n	8008ef4 <_fflush_r+0xc>
 8008f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f32:	f7ff fa25 	bl	8008380 <__retarget_lock_release_recursive>
 8008f36:	e7dd      	b.n	8008ef4 <_fflush_r+0xc>

08008f38 <__swhatbuf_r>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	b096      	sub	sp, #88	@ 0x58
 8008f44:	4615      	mov	r5, r2
 8008f46:	461e      	mov	r6, r3
 8008f48:	da0d      	bge.n	8008f66 <__swhatbuf_r+0x2e>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f50:	f04f 0100 	mov.w	r1, #0
 8008f54:	bf14      	ite	ne
 8008f56:	2340      	movne	r3, #64	@ 0x40
 8008f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	b016      	add	sp, #88	@ 0x58
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
 8008f66:	466a      	mov	r2, sp
 8008f68:	f000 f862 	bl	8009030 <_fstat_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	dbec      	blt.n	8008f4a <__swhatbuf_r+0x12>
 8008f70:	9901      	ldr	r1, [sp, #4]
 8008f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f7a:	4259      	negs	r1, r3
 8008f7c:	4159      	adcs	r1, r3
 8008f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f82:	e7eb      	b.n	8008f5c <__swhatbuf_r+0x24>

08008f84 <__smakebuf_r>:
 8008f84:	898b      	ldrh	r3, [r1, #12]
 8008f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f88:	079d      	lsls	r5, r3, #30
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	d507      	bpl.n	8008fa0 <__smakebuf_r+0x1c>
 8008f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	6163      	str	r3, [r4, #20]
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa0:	ab01      	add	r3, sp, #4
 8008fa2:	466a      	mov	r2, sp
 8008fa4:	f7ff ffc8 	bl	8008f38 <__swhatbuf_r>
 8008fa8:	9f00      	ldr	r7, [sp, #0]
 8008faa:	4605      	mov	r5, r0
 8008fac:	4639      	mov	r1, r7
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7ff fa62 	bl	8008478 <_malloc_r>
 8008fb4:	b948      	cbnz	r0, 8008fca <__smakebuf_r+0x46>
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	059a      	lsls	r2, r3, #22
 8008fbc:	d4ee      	bmi.n	8008f9c <__smakebuf_r+0x18>
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	f043 0302 	orr.w	r3, r3, #2
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	e7e2      	b.n	8008f90 <__smakebuf_r+0xc>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	6020      	str	r0, [r4, #0]
 8008fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x70>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f837 	bl	8009054 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x70>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	431d      	orrs	r5, r3
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cf      	b.n	8008f9c <__smakebuf_r+0x18>

08008ffc <memmove>:
 8008ffc:	4288      	cmp	r0, r1
 8008ffe:	b510      	push	{r4, lr}
 8009000:	eb01 0402 	add.w	r4, r1, r2
 8009004:	d902      	bls.n	800900c <memmove+0x10>
 8009006:	4284      	cmp	r4, r0
 8009008:	4623      	mov	r3, r4
 800900a:	d807      	bhi.n	800901c <memmove+0x20>
 800900c:	1e43      	subs	r3, r0, #1
 800900e:	42a1      	cmp	r1, r4
 8009010:	d008      	beq.n	8009024 <memmove+0x28>
 8009012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800901a:	e7f8      	b.n	800900e <memmove+0x12>
 800901c:	4402      	add	r2, r0
 800901e:	4601      	mov	r1, r0
 8009020:	428a      	cmp	r2, r1
 8009022:	d100      	bne.n	8009026 <memmove+0x2a>
 8009024:	bd10      	pop	{r4, pc}
 8009026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800902a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800902e:	e7f7      	b.n	8009020 <memmove+0x24>

08009030 <_fstat_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	@ (8009050 <_fstat_r+0x20>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	f7fe fd66 	bl	8007b0e <_fstat>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d102      	bne.n	800904c <_fstat_r+0x1c>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	b103      	cbz	r3, 800904c <_fstat_r+0x1c>
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	20026280 	.word	0x20026280

08009054 <_isatty_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	@ (8009070 <_isatty_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7fe feb8 	bl	8007dd4 <_isatty>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_isatty_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_isatty_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20026280 	.word	0x20026280

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d06      	ldr	r5, [pc, #24]	@ (8009090 <_sbrk_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7fa fd50 	bl	8003b24 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20026280 	.word	0x20026280

08009094 <_realloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	4680      	mov	r8, r0
 800909a:	4615      	mov	r5, r2
 800909c:	460c      	mov	r4, r1
 800909e:	b921      	cbnz	r1, 80090aa <_realloc_r+0x16>
 80090a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	4611      	mov	r1, r2
 80090a6:	f7ff b9e7 	b.w	8008478 <_malloc_r>
 80090aa:	b92a      	cbnz	r2, 80090b8 <_realloc_r+0x24>
 80090ac:	f7ff f978 	bl	80083a0 <_free_r>
 80090b0:	2400      	movs	r4, #0
 80090b2:	4620      	mov	r0, r4
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	f000 f81a 	bl	80090f0 <_malloc_usable_size_r>
 80090bc:	4285      	cmp	r5, r0
 80090be:	4606      	mov	r6, r0
 80090c0:	d802      	bhi.n	80090c8 <_realloc_r+0x34>
 80090c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090c6:	d8f4      	bhi.n	80090b2 <_realloc_r+0x1e>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7ff f9d4 	bl	8008478 <_malloc_r>
 80090d0:	4607      	mov	r7, r0
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d0ec      	beq.n	80090b0 <_realloc_r+0x1c>
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	462a      	mov	r2, r5
 80090da:	4621      	mov	r1, r4
 80090dc:	bf28      	it	cs
 80090de:	4632      	movcs	r2, r6
 80090e0:	f7ff f94f 	bl	8008382 <memcpy>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7ff f95a 	bl	80083a0 <_free_r>
 80090ec:	463c      	mov	r4, r7
 80090ee:	e7e0      	b.n	80090b2 <_realloc_r+0x1e>

080090f0 <_malloc_usable_size_r>:
 80090f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f4:	1f18      	subs	r0, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfbc      	itt	lt
 80090fa:	580b      	ldrlt	r3, [r1, r0]
 80090fc:	18c0      	addlt	r0, r0, r3
 80090fe:	4770      	bx	lr

08009100 <_init>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr

0800910c <_fini>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr
