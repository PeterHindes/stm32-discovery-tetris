
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007010  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  080071c0  080071c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800843c  0800843c  0000a264  2**0
                  CONTENTS
  4 .ARM          00000008  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008444  08008444  0000a264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008444  08008444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008448  08008448  00009448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800844c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a264  2**0
                  CONTENTS
 10 .bss          00025d38  20000264  20000264  0000a264  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025f9c  20025f9c  0000a264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f847  00000000  00000000  0000a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003068  00000000  00000000  00019adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bad  00000000  00000000  0001dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271d6  00000000  00000000  0001e675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fec  00000000  00000000  0004584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ce2  00000000  00000000  0005a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c519  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004548  00000000  00000000  0013c55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00140aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080071a8 	.word	0x080071a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	080071a8 	.word	0x080071a8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fd0e 	bl	8002fa4 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa96 	bl	8000ab8 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa53 	bl	8000a38 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fbd6 	bl	8000d48 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fcd6 	bl	8000f4c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f869 	bl	800067c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000280 	.word	0x20000280

080005b4 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005b4:	b490      	push	{r4, r7}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	085b      	lsrs	r3, r3, #1
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	085b      	lsrs	r3, r3, #1
 80005de:	b29b      	uxth	r3, r3
 80005e0:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005ec:	89ba      	ldrh	r2, [r7, #12]
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 80005f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dd08      	ble.n	8000614 <Determine_Touch_Quadrant+0x60>
 8000602:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800060a:	425b      	negs	r3, r3
 800060c:	429a      	cmp	r2, r3
 800060e:	dd01      	ble.n	8000614 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 8000610:	2300      	movs	r3, #0
 8000612:	e02d      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000614:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000618:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800061c:	429a      	cmp	r2, r3
 800061e:	dc08      	bgt.n	8000632 <Determine_Touch_Quadrant+0x7e>
 8000620:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000628:	425b      	negs	r3, r3
 800062a:	429a      	cmp	r2, r3
 800062c:	dd01      	ble.n	8000632 <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800062e:	2301      	movs	r3, #1
 8000630:	e01e      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 8000632:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000636:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800063a:	429a      	cmp	r2, r3
 800063c:	dc08      	bgt.n	8000650 <Determine_Touch_Quadrant+0x9c>
 800063e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000646:	425b      	negs	r3, r3
 8000648:	429a      	cmp	r2, r3
 800064a:	dc01      	bgt.n	8000650 <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 800064c:	2302      	movs	r3, #2
 800064e:	e00f      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 8000650:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000654:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000658:	429a      	cmp	r2, r3
 800065a:	dd08      	ble.n	800066e <Determine_Touch_Quadrant+0xba>
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000664:	425b      	negs	r3, r3
 8000666:	429a      	cmp	r2, r3
 8000668:	dc01      	bgt.n	800066e <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 800066a:	2303      	movs	r3, #3
 800066c:	e000      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800066e:	23ff      	movs	r3, #255	@ 0xff
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bc90      	pop	{r4, r7}
 8000678:	4770      	bx	lr
	...

0800067c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000694:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000696:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800069a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006c6:	f002 ff71 	bl	80035ac <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ca:	2028      	movs	r0, #40	@ 0x28
 80006cc:	f002 ff1f 	bl	800350e <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006d2:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	20000288 	.word	0x20000288
 80006ec:	0600000f 	.word	0x0600000f

080006f0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006f6:	2028      	movs	r0, #40	@ 0x28
 80006f8:	f002 ff17 	bl	800352a <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000706:	e006      	b.n	8000716 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000708:	204c      	movs	r0, #76	@ 0x4c
 800070a:	f002 f9ba 	bl	8002a82 <STMPE811_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b5a      	ldr	r3, [pc, #360]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000714:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f4      	beq.n	8000708 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 fc2a 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000724:	4603      	mov	r3, r0
 8000726:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000728:	2100      	movs	r1, #0
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fc32 	bl	8000f94 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000730:	200b      	movs	r0, #11
 8000732:	f000 fc21 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b51      	ldr	r3, [pc, #324]	@ (8000880 <EXTI15_10_IRQHandler+0x190>)
 800073c:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800073e:	4b50      	ldr	r3, [pc, #320]	@ (8000880 <EXTI15_10_IRQHandler+0x190>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000748:	797b      	ldrb	r3, [r7, #5]
 800074a:	4619      	mov	r1, r3
 800074c:	200b      	movs	r0, #11
 800074e:	f000 fc21 	bl	8000f94 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000752:	2040      	movs	r0, #64	@ 0x40
 8000754:	f000 fc10 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000758:	4603      	mov	r3, r0
 800075a:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 800075c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da01      	bge.n	8000768 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000764:	2301      	movs	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d062      	beq.n	8000834 <EXTI15_10_IRQHandler+0x144>
	{
		printf("\nPressed");
 800076e:	4845      	ldr	r0, [pc, #276]	@ (8000884 <EXTI15_10_IRQHandler+0x194>)
 8000770:	f005 fe9e 	bl	80064b0 <iprintf>
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 8000774:	4844      	ldr	r0, [pc, #272]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000776:	f000 fbf4 	bl	8000f62 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 800077a:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000782:	885b      	ldrh	r3, [r3, #2]
 8000784:	461a      	mov	r2, r3
 8000786:	4841      	ldr	r0, [pc, #260]	@ (800088c <EXTI15_10_IRQHandler+0x19c>)
 8000788:	f005 fe92 	bl	80064b0 <iprintf>

		if (activeScreen == 0){
 800078c:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d128      	bne.n	80007e6 <EXTI15_10_IRQHandler+0xf6>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f001 fdf9 	bl	800239c <startClicked>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d044      	beq.n	800083a <EXTI15_10_IRQHandler+0x14a>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 80007b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007b4:	f000 faea 	bl	8000d8c <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 80007b8:	4836      	ldr	r0, [pc, #216]	@ (8000894 <EXTI15_10_IRQHandler+0x1a4>)
 80007ba:	f000 faf7 	bl	8000dac <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007be:	4a36      	ldr	r2, [pc, #216]	@ (8000898 <EXTI15_10_IRQHandler+0x1a8>)
 80007c0:	21be      	movs	r1, #190	@ 0xbe
 80007c2:	201e      	movs	r0, #30
 80007c4:	f000 fb92 	bl	8000eec <LCD_DisplayString>
//				HAL_Delay(200);
				activeScreen = 1;
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	801a      	strh	r2, [r3, #0]
				initGame();
 80007ce:	f000 ff73 	bl	80016b8 <initGame>
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fab7 	bl	8000d48 <LCD_Clear>
				showGameScreen();
 80007da:	f001 fe01 	bl	80023e0 <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007de:	20ff      	movs	r0, #255	@ 0xff
 80007e0:	f000 fd34 	bl	800124c <Draw_Arrows_On_Screen>
 80007e4:	e029      	b.n	800083a <EXTI15_10_IRQHandler+0x14a>
			}
		} else if (activeScreen == 1){
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d125      	bne.n	800083a <EXTI15_10_IRQHandler+0x14a>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 faa9 	bl	8000d48 <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 80007f8:	8818      	ldrh	r0, [r3, #0]
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000802:	b299      	uxth	r1, r3
 8000804:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000808:	22f0      	movs	r2, #240	@ 0xf0
 800080a:	f7ff fed3 	bl	80005b4 <Determine_Touch_Quadrant>
 800080e:	4603      	mov	r3, r0
 8000810:	70fb      	strb	r3, [r7, #3]
			Draw_Arrows_On_Screen(activeArrow);
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd19 	bl	800124c <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			handleInput(& board, & currentPiece, activeArrow);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	461a      	mov	r2, r3
 800081e:	491f      	ldr	r1, [pc, #124]	@ (800089c <EXTI15_10_IRQHandler+0x1ac>)
 8000820:	481f      	ldr	r0, [pc, #124]	@ (80008a0 <EXTI15_10_IRQHandler+0x1b0>)
 8000822:	f001 f895 	bl	8001950 <handleInput>

			showGameScreen();
 8000826:	f001 fddb 	bl	80023e0 <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fd0d 	bl	800124c <Draw_Arrows_On_Screen>
 8000832:	e002      	b.n	800083a <EXTI15_10_IRQHandler+0x14a>
		}
	}else{
		/* Touch not pressed */
		Draw_Arrows_On_Screen(-1);
 8000834:	20ff      	movs	r0, #255	@ 0xff
 8000836:	f000 fd09 	bl	800124c <Draw_Arrows_On_Screen>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800083a:	2101      	movs	r1, #1
 800083c:	204b      	movs	r0, #75	@ 0x4b
 800083e:	f002 f931 	bl	8002aa4 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000842:	2100      	movs	r1, #0
 8000844:	204b      	movs	r0, #75	@ 0x4b
 8000846:	f002 f92d 	bl	8002aa4 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4619      	mov	r1, r3
 800084e:	200a      	movs	r0, #10
 8000850:	f000 fba0 	bl	8000f94 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000854:	2103      	movs	r1, #3
 8000856:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <EXTI15_10_IRQHandler+0x1b4>)
 8000858:	f002 fe90 	bl	800357c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800085c:	2028      	movs	r0, #40	@ 0x28
 800085e:	f002 fe7e 	bl	800355e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000862:	2028      	movs	r0, #40	@ 0x28
 8000864:	f002 fe53 	bl	800350e <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	4619      	mov	r1, r3
 800086c:	200b      	movs	r0, #11
 800086e:	f000 fb91 	bl	8000f94 <WriteDataToTouchModule>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000294 	.word	0x20000294
 8000880:	20000290 	.word	0x20000290
 8000884:	080071e4 	.word	0x080071e4
 8000888:	20000280 	.word	0x20000280
 800088c:	080071f0 	.word	0x080071f0
 8000890:	20025dee 	.word	0x20025dee
 8000894:	20000004 	.word	0x20000004
 8000898:	08007204 	.word	0x08007204
 800089c:	20025d04 	.word	0x20025d04
 80008a0:	20025b74 	.word	0x20025b74
 80008a4:	20000288 	.word	0x20000288

080008a8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a59      	ldr	r2, [pc, #356]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a52      	ldr	r2, [pc, #328]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a4b      	ldr	r2, [pc, #300]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b42      	ldr	r3, [pc, #264]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a3d      	ldr	r2, [pc, #244]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b37      	ldr	r3, [pc, #220]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a36      	ldr	r2, [pc, #216]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000972:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000976:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000984:	230e      	movs	r3, #14
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4824      	ldr	r0, [pc, #144]	@ (8000a20 <LCD_GPIO_Init+0x178>)
 8000990:	f002 fe0c 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000994:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000998:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4820      	ldr	r0, [pc, #128]	@ (8000a24 <LCD_GPIO_Init+0x17c>)
 80009a2:	f002 fe03 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009a6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <LCD_GPIO_Init+0x180>)
 80009b4:	f002 fdfa 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009b8:	2348      	movs	r3, #72	@ 0x48
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <LCD_GPIO_Init+0x184>)
 80009c4:	f002 fdf2 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <LCD_GPIO_Init+0x188>)
 80009d6:	f002 fde9 	bl	80035ac <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009de:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <LCD_GPIO_Init+0x18c>)
 80009e8:	f002 fde0 	bl	80035ac <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009f0:	2309      	movs	r3, #9
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480a      	ldr	r0, [pc, #40]	@ (8000a24 <LCD_GPIO_Init+0x17c>)
 80009fc:	f002 fdd6 	bl	80035ac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <LCD_GPIO_Init+0x18c>)
 8000a0e:	f002 fdcd 	bl	80035ac <HAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40021800 	.word	0x40021800

08000a38 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b090      	sub	sp, #64	@ 0x40
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a46:	23f0      	movs	r3, #240	@ 0xf0
 8000a48:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a4e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a52:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a58:	23ff      	movs	r3, #255	@ 0xff
 8000a5a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a66:	2305      	movs	r3, #5
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <LTCD_Layer_Init+0x78>)
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a74:	23f0      	movs	r3, #240	@ 0xf0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a78:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a90:	79fa      	ldrb	r2, [r7, #7]
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <LTCD_Layer_Init+0x7c>)
 8000a9a:	f004 f94d 	bl	8004d38 <HAL_LTDC_ConfigLayer>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000aa4:	f000 fa4c 	bl	8000f40 <LCD_Error_Handler>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	@ 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000374 	.word	0x20000374
 8000ab4:	20000298 	.word	0x20000298

08000ab8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <LTCD__Init+0xb0>)
 8000abe:	4a2b      	ldr	r2, [pc, #172]	@ (8000b6c <LTCD__Init+0xb4>)
 8000ac0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <LTCD__Init+0xb0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ad0:	221d      	movs	r2, #29
 8000ad2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ada:	4b23      	ldr	r3, [pc, #140]	@ (8000b68 <LTCD__Init+0xb0>)
 8000adc:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ae4:	f240 1243 	movw	r2, #323	@ 0x143
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <LTCD__Init+0xb0>)
 8000aec:	f240 1217 	movw	r2, #279	@ 0x117
 8000af0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <LTCD__Init+0xb0>)
 8000af4:	f240 1247 	movw	r2, #327	@ 0x147
 8000af8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <LTCD__Init+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b14:	2208      	movs	r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b1a:	22c0      	movs	r2, #192	@ 0xc0
 8000b1c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b2c:	4810      	ldr	r0, [pc, #64]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b2e:	f004 ff5d 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b4a:	f7ff fead 	bl	80008a8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b50:	f004 f822 	bl	8004b98 <HAL_LTDC_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b5a:	f000 f9f1 	bl	8000f40 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b5e:	f001 f84c 	bl	8001bfa <ili9341_Init>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000298 	.word	0x20000298
 8000b6c:	40016800 	.word	0x40016800
 8000b70:	20000340 	.word	0x20000340

08000b74 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	807b      	strh	r3, [r7, #2]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2bef      	cmp	r3, #239	@ 0xef
 8000b8a:	d80f      	bhi.n	8000bac <LCD_Draw_Pixel+0x38>
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b92:	d20b      	bcs.n	8000bac <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000b94:	88ba      	ldrh	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4904      	ldr	r1, [pc, #16]	@ (8000bb8 <LCD_Draw_Pixel+0x44>)
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000374 	.word	0x20000374

08000bbc <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4623      	mov	r3, r4
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	425b      	negs	r3, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	e034      	b.n	8000c4e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	425b      	negs	r3, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	81bb      	strh	r3, [r7, #12]
 8000bec:	e024      	b.n	8000c38 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000bee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bf2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bf6:	fb03 f202 	mul.w	r2, r3, r2
 8000bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	441a      	add	r2, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	8879      	ldrh	r1, [r7, #2]
 8000c0c:	fb01 f303 	mul.w	r3, r1, r3
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dc0b      	bgt.n	8000c2c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c14:	89ba      	ldrh	r2, [r7, #12]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	883a      	ldrh	r2, [r7, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff ffa4 	bl	8000b74 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
 8000c38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	ddd5      	ble.n	8000bee <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	81fb      	strh	r3, [r7, #14]
 8000c4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	ddc5      	ble.n	8000be4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}

08000c62 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4604      	mov	r4, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4623      	mov	r3, r4
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4603      	mov	r3, r0
 8000c76:	80bb      	strh	r3, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	e01c      	b.n	8000cc0 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	81bb      	strh	r3, [r7, #12]
 8000c8a:	e00b      	b.n	8000ca4 <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000c8c:	89bb      	ldrh	r3, [r7, #12]
 8000c8e:	89f9      	ldrh	r1, [r7, #14]
 8000c90:	8c3a      	ldrh	r2, [r7, #32]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff6e 	bl	8000b74 <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	81bb      	strh	r3, [r7, #12]
 8000ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ca8:	88f9      	ldrh	r1, [r7, #6]
 8000caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cae:	440b      	add	r3, r1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbeb      	blt.n	8000c8c <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	81fb      	strh	r3, [r7, #14]
 8000cc0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc4:	88b9      	ldrh	r1, [r7, #4]
 8000cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cca:	440b      	add	r3, r1
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbda      	blt.n	8000c86 <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}

08000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4623      	mov	r3, r4
 8000cea:	80fb      	strh	r3, [r7, #6]
 8000cec:	4603      	mov	r3, r0
 8000cee:	80bb      	strh	r3, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e01a      	b.n	8000d34 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	e010      	b.n	8000d26 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	88ba      	ldrh	r2, [r7, #4]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	883a      	ldrh	r2, [r7, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff ff2a 	bl	8000b74 <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	ddea      	ble.n	8000d04 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbe0      	blt.n	8000cfe <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10e      	bne.n	8000d7c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e007      	b.n	8000d74 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d64:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <LCD_Clear+0x40>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d7a:	d3f3      	bcc.n	8000d64 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000374 	.word	0x20000374

08000d8c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <LCD_SetTextColor+0x1c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	8013      	strh	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000000 	.word	0x20000000

08000dac <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <LCD_SetFont+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000370 	.word	0x20000370

08000dcc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e04c      	b.n	8000e84 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	e03f      	b.n	8000e70 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	4a27      	ldr	r2, [pc, #156]	@ (8000ea0 <LCD_Draw_Char+0xd4>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	fa42 f303 	asr.w	r3, r2, r3
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <LCD_Draw_Char+0x5c>
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	889b      	ldrh	r3, [r3, #4]
 8000e24:	2b0c      	cmp	r3, #12
 8000e26:	d920      	bls.n	8000e6a <LCD_Draw_Char+0x9e>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	fa42 f303 	asr.w	r3, r2, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d104      	bne.n	8000e4c <LCD_Draw_Char+0x80>
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d80e      	bhi.n	8000e6a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <LCD_Draw_Char+0xd8>)
 8000e62:	8812      	ldrh	r2, [r2, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fe85 	bl	8000b74 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3b8      	bcc.n	8000df0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	88db      	ldrh	r3, [r3, #6]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d3ab      	bcc.n	8000dea <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000370 	.word	0x20000370
 8000ea0:	aaaaaaab 	.word	0xaaaaaaab
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	3b20      	subs	r3, #32
 8000ebe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	88c9      	ldrh	r1, [r1, #6]
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	441a      	add	r2, r3
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff76 	bl	8000dcc <LCD_Draw_Char>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000370 	.word	0x20000370

08000eec <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000ef8:	2310      	movs	r3, #16
 8000efa:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	e011      	b.n	8000f2a <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	b298      	uxth	r0, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff ffc6 	bl	8000ea8 <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4413      	add	r3, r2
 8000f22:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1e7      	bne.n	8000f06 <LCD_DisplayString+0x1a>
    }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <LCD_Error_Handler+0x8>

08000f4c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f50:	f001 fcd0 	bl	80028f4 <STMPE811_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d001      	beq.n	8000f5e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <InitializeLCDTouch+0xe>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 fdac 	bl	8002ac8 <STMPE811_DetermineTouchPosition>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fd7c 	bl	8002a82 <STMPE811_Read>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fd7a 	bl	8002aa4 <STMPE811_Write>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e00c      	b.n	8000ff6 <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	883a      	ldrh	r2, [r7, #0]
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fdc2 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbee      	blt.n	8000fdc <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e01e      	b.n	8001042 <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	b29b      	uxth	r3, r3
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b298      	uxth	r0, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	883a      	ldrh	r2, [r7, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fdaa 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	b29a      	uxth	r2, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4413      	add	r3, r2
 8001028:	b298      	uxth	r0, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b29a      	uxth	r2, r3
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	883a      	ldrh	r2, [r7, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd9c 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3301      	adds	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4293      	cmp	r3, r2
 800104e:	dbd9      	blt.n	8001004 <Draw_Arrow_Up+0x4c>
    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	4604      	mov	r4, r0
 8001062:	4608      	mov	r0, r1
 8001064:	4611      	mov	r1, r2
 8001066:	461a      	mov	r2, r3
 8001068:	4623      	mov	r3, r4
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4603      	mov	r3, r0
 800106e:	80bb      	strh	r3, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e00c      	b.n	8001098 <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	b29a      	uxth	r2, r3
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	b299      	uxth	r1, r3
 8001088:	883a      	ldrh	r2, [r7, #0]
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd71 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbee      	blt.n	800107e <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e024      	b.n	80010f0 <Draw_Arrow_Down+0x96>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i + size, color); // Left diagonal
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4413      	add	r3, r2
 80010ae:	b298      	uxth	r0, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	88ba      	ldrh	r2, [r7, #4]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	883a      	ldrh	r2, [r7, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd56 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i + size, color); // Right diagonal
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b298      	uxth	r0, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	88ba      	ldrh	r2, [r7, #4]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b29a      	uxth	r2, r3
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	883a      	ldrh	r2, [r7, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd45 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dbd3      	blt.n	80010a6 <Draw_Arrow_Down+0x4c>
    }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}

08001108 <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e00c      	b.n	8001146 <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	b29a      	uxth	r2, r3
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4413      	add	r3, r2
 8001134:	b29b      	uxth	r3, r3
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	88b9      	ldrh	r1, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd1a 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbee      	blt.n	800112c <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	e01e      	b.n	8001192 <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b29a      	uxth	r2, r3
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4413      	add	r3, r2
 800115c:	b298      	uxth	r0, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	b29b      	uxth	r3, r3
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	883a      	ldrh	r2, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd02 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	b29a      	uxth	r2, r3
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4413      	add	r3, r2
 8001178:	b298      	uxth	r0, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	b29a      	uxth	r2, r3
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	883a      	ldrh	r2, [r7, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fcf4 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4293      	cmp	r3, r2
 800119e:	dbd9      	blt.n	8001154 <Draw_Arrow_Left+0x4c>
    }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4604      	mov	r4, r0
 80011b2:	4608      	mov	r0, r1
 80011b4:	4611      	mov	r1, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	4623      	mov	r3, r4
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	4603      	mov	r3, r0
 80011be:	80bb      	strh	r3, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e00c      	b.n	80011e8 <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	883a      	ldrh	r2, [r7, #0]
 80011da:	88b9      	ldrh	r1, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fcc9 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbee      	blt.n	80011ce <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	e01e      	b.n	8001234 <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	88fa      	ldrh	r2, [r7, #6]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	b298      	uxth	r0, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	b29b      	uxth	r3, r3
 8001204:	88ba      	ldrh	r2, [r7, #4]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	883a      	ldrh	r2, [r7, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcb1 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	b29b      	uxth	r3, r3
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b298      	uxth	r0, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	b29a      	uxth	r2, r3
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	883a      	ldrh	r2, [r7, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fca3 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3301      	adds	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	b29b      	uxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4293      	cmp	r3, r2
 8001240:	dbd9      	blt.n	80011f6 <Draw_Arrow_Right+0x4c>
    }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}

0800124c <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <Draw_Arrows_On_Screen+0x16>
 800125c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001260:	e001      	b.n	8001266 <Draw_Arrows_On_Screen+0x1a>
 8001262:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001266:	2214      	movs	r2, #20
 8001268:	210a      	movs	r1, #10
 800126a:	2078      	movs	r0, #120	@ 0x78
 800126c:	f7ff fea4 	bl	8000fb8 <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <Draw_Arrows_On_Screen+0x30>
 8001276:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800127a:	e001      	b.n	8001280 <Draw_Arrows_On_Screen+0x34>
 800127c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001280:	2214      	movs	r2, #20
 8001282:	21a0      	movs	r1, #160	@ 0xa0
 8001284:	20e6      	movs	r0, #230	@ 0xe6
 8001286:	f7ff ff90 	bl	80011aa <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - arrowSize - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d102      	bne.n	8001296 <Draw_Arrows_On_Screen+0x4a>
 8001290:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001294:	e001      	b.n	800129a <Draw_Arrows_On_Screen+0x4e>
 8001296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129a:	2214      	movs	r2, #20
 800129c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80012a0:	2078      	movs	r0, #120	@ 0x78
 80012a2:	f7ff feda 	bl	800105a <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d102      	bne.n	80012b2 <Draw_Arrows_On_Screen+0x66>
 80012ac:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012b0:	e001      	b.n	80012b6 <Draw_Arrows_On_Screen+0x6a>
 80012b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012b6:	2214      	movs	r2, #20
 80012b8:	21a0      	movs	r1, #160	@ 0xa0
 80012ba:	200a      	movs	r0, #10
 80012bc:	f7ff ff24 	bl	8001108 <Draw_Arrow_Left>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	4603      	mov	r3, r0
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	4a33      	ldr	r2, [pc, #204]	@ (80013b8 <Draw_Tetris_Block+0xf0>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 80012f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012f6:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 80012fa:	88b9      	ldrh	r1, [r7, #4]
 80012fc:	88f8      	ldrh	r0, [r7, #6]
 80012fe:	883b      	ldrh	r3, [r7, #0]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4623      	mov	r3, r4
 8001304:	f7ff fcad 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 8001308:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800130c:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	88f8      	ldrh	r0, [r7, #6]
 8001314:	8c3b      	ldrh	r3, [r7, #32]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4623      	mov	r3, r4
 800131a:	f7ff fca2 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 800131e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001322:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001326:	88b9      	ldrh	r1, [r7, #4]
 8001328:	88f8      	ldrh	r0, [r7, #6]
 800132a:	8c3b      	ldrh	r3, [r7, #32]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4623      	mov	r3, r4
 8001330:	f7ff fc97 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 8001334:	88ba      	ldrh	r2, [r7, #4]
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	4413      	add	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b299      	uxth	r1, r3
 8001342:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001346:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800134a:	88f8      	ldrh	r0, [r7, #6]
 800134c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4623      	mov	r3, r4
 8001352:	f7ff fc86 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4413      	add	r3, r2
 800135c:	b29a      	uxth	r2, r3
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b298      	uxth	r0, r3
 8001364:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001368:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800136c:	88b9      	ldrh	r1, [r7, #4]
 800136e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4623      	mov	r3, r4
 8001374:	f7ff fc75 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b299      	uxth	r1, r3
 8001384:	8c3b      	ldrh	r3, [r7, #32]
 8001386:	89fa      	ldrh	r2, [r7, #14]
 8001388:	88f8      	ldrh	r0, [r7, #6]
 800138a:	f7ff fca6 	bl	8000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 800138e:	88fa      	ldrh	r2, [r7, #6]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4413      	add	r3, r2
 8001394:	b29a      	uxth	r2, r3
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b298      	uxth	r0, r3
 800139c:	88ba      	ldrh	r2, [r7, #4]
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b299      	uxth	r1, r3
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	89fa      	ldrh	r2, [r7, #14]
 80013ac:	f7ff fc95 	bl	8000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	aaaaaaab 	.word	0xaaaaaaab

080013bc <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	82fb      	strh	r3, [r7, #22]
 80013d0:	e045      	b.n	800145e <Fill_Tetris_Board+0xa2>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	82bb      	strh	r3, [r7, #20]
 80013d6:	e03c      	b.n	8001452 <Fill_Tetris_Board+0x96>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 80013d8:	8abb      	ldrh	r3, [r7, #20]
 80013da:	461a      	mov	r2, r3
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4413      	add	r3, r2
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8abb      	ldrh	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80013f0:	8afb      	ldrh	r3, [r7, #22]
 80013f2:	461a      	mov	r2, r3
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	883b      	ldrh	r3, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	8afb      	ldrh	r3, [r7, #22]
 8001404:	4413      	add	r3, r2
 8001406:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = board->grid[row][col];
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	8ab8      	ldrh	r0, [r7, #20]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <Fill_Tetris_Board+0x90>
				uint16_t * colors = piceIndexToColors(index);
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 ff49 	bl	80022bc <piceIndexToColors>
 800142a:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	881c      	ldrh	r4, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3302      	adds	r3, #2
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	3204      	adds	r2, #4
 800143a:	8812      	ldrh	r2, [r2, #0]
 800143c:	8a39      	ldrh	r1, [r7, #16]
 800143e:	8a78      	ldrh	r0, [r7, #18]
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4623      	mov	r3, r4
 8001446:	220e      	movs	r2, #14
 8001448:	f7ff ff3e 	bl	80012c8 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 800144c:	8abb      	ldrh	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	82bb      	strh	r3, [r7, #20]
 8001452:	8abb      	ldrh	r3, [r7, #20]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d9bf      	bls.n	80013d8 <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001458:	8afb      	ldrh	r3, [r7, #22]
 800145a:	3301      	adds	r3, #1
 800145c:	82fb      	strh	r3, [r7, #22]
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d9b6      	bls.n	80013d2 <Fill_Tetris_Board+0x16>
            }
        }
    }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
	...

08001470 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af02      	add	r7, sp, #8
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001482:	2300      	movs	r3, #0
 8001484:	82fb      	strh	r3, [r7, #22]
 8001486:	e047      	b.n	8001518 <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001488:	2300      	movs	r3, #0
 800148a:	82bb      	strh	r3, [r7, #20]
 800148c:	e03e      	b.n	800150c <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 800148e:	8abb      	ldrh	r3, [r7, #20]
 8001490:	461a      	mov	r2, r3
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	8abb      	ldrh	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80014a6:	8afb      	ldrh	r3, [r7, #22]
 80014a8:	461a      	mov	r2, r3
 80014aa:	00d2      	lsls	r2, r2, #3
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4413      	add	r3, r2
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	8afb      	ldrh	r3, [r7, #22]
 80014ba:	4413      	add	r3, r2
 80014bc:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 80014be:	79f9      	ldrb	r1, [r7, #7]
 80014c0:	8afa      	ldrh	r2, [r7, #22]
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	4818      	ldr	r0, [pc, #96]	@ (8001528 <DrawTetrominoByIndex+0xb8>)
 80014c6:	0089      	lsls	r1, r1, #2
 80014c8:	440a      	add	r2, r1
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014d2:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d015      	beq.n	8001506 <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 feec 	bl	80022bc <piceIndexToColors>
 80014e4:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	881c      	ldrh	r4, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3302      	adds	r3, #2
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	3204      	adds	r2, #4
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	8a39      	ldrh	r1, [r7, #16]
 80014f8:	8a78      	ldrh	r0, [r7, #18]
 80014fa:	9201      	str	r2, [sp, #4]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4623      	mov	r3, r4
 8001500:	220e      	movs	r2, #14
 8001502:	f7ff fee1 	bl	80012c8 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	82bb      	strh	r3, [r7, #20]
 800150c:	8abb      	ldrh	r3, [r7, #20]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d9bd      	bls.n	800148e <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001512:	8afb      	ldrh	r3, [r7, #22]
 8001514:	3301      	adds	r3, #1
 8001516:	82fb      	strh	r3, [r7, #22]
 8001518:	8afb      	ldrh	r3, [r7, #22]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d9b4      	bls.n	8001488 <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	20000010 	.word	0x20000010

0800152c <LCD_Draw_Rounded_Rectangle_Fill>:
            }
        }
    }
}

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af02      	add	r7, sp, #8
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	8b3b      	ldrh	r3, [r7, #24]
 800154e:	4413      	add	r3, r2
 8001550:	b298      	uxth	r0, r3
 8001552:	88ba      	ldrh	r2, [r7, #4]
 8001554:	8b3b      	ldrh	r3, [r7, #24]
 8001556:	4413      	add	r3, r2
 8001558:	b299      	uxth	r1, r3
 800155a:	8b3b      	ldrh	r3, [r7, #24]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29b      	uxth	r3, r3
 8001560:	887a      	ldrh	r2, [r7, #2]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	b21c      	sxth	r4, r3
 8001568:	8b3b      	ldrh	r3, [r7, #24]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	883a      	ldrh	r2, [r7, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	8bbb      	ldrh	r3, [r7, #28]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	4622      	mov	r2, r4
 800157e:	f7ff fb70 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	8b3b      	ldrh	r3, [r7, #24]
 8001586:	4413      	add	r3, r2
 8001588:	b298      	uxth	r0, r3
 800158a:	8b3b      	ldrh	r3, [r7, #24]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	887a      	ldrh	r2, [r7, #2]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800159c:	88b9      	ldrh	r1, [r7, #4]
 800159e:	8bbb      	ldrh	r3, [r7, #28]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4623      	mov	r3, r4
 80015a4:	f7ff fb5d 	bl	8000c62 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	8b3b      	ldrh	r3, [r7, #24]
 80015ac:	4413      	add	r3, r2
 80015ae:	b298      	uxth	r0, r3
 80015b0:	88ba      	ldrh	r2, [r7, #4]
 80015b2:	883b      	ldrh	r3, [r7, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	8b3b      	ldrh	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b299      	uxth	r1, r3
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80015d0:	8bbb      	ldrh	r3, [r7, #28]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7ff fb44 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 80015da:	88ba      	ldrh	r2, [r7, #4]
 80015dc:	8b3b      	ldrh	r3, [r7, #24]
 80015de:	4413      	add	r3, r2
 80015e0:	b299      	uxth	r1, r3
 80015e2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	883a      	ldrh	r2, [r7, #0]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	88f8      	ldrh	r0, [r7, #6]
 80015f6:	8bbb      	ldrh	r3, [r7, #28]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4613      	mov	r3, r2
 80015fc:	4622      	mov	r2, r4
 80015fe:	f7ff fb30 	bl	8000c62 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	4413      	add	r3, r2
 8001608:	b29a      	uxth	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b298      	uxth	r0, r3
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	8b3b      	ldrh	r3, [r7, #24]
 8001614:	4413      	add	r3, r2
 8001616:	b299      	uxth	r1, r3
 8001618:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800161c:	8b3b      	ldrh	r3, [r7, #24]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 8001622:	883a      	ldrh	r2, [r7, #0]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	b21a      	sxth	r2, r3
 800162a:	8bbb      	ldrh	r3, [r7, #28]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	4622      	mov	r2, r4
 8001632:	f7ff fb16 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 8001636:	88fa      	ldrh	r2, [r7, #6]
 8001638:	8b3b      	ldrh	r3, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	b298      	uxth	r0, r3
 800163e:	88ba      	ldrh	r2, [r7, #4]
 8001640:	8b3b      	ldrh	r3, [r7, #24]
 8001642:	4413      	add	r3, r2
 8001644:	b299      	uxth	r1, r3
 8001646:	8bbb      	ldrh	r3, [r7, #28]
 8001648:	8b3a      	ldrh	r2, [r7, #24]
 800164a:	f7ff fab7 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	4413      	add	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	8b3b      	ldrh	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b298      	uxth	r0, r3
 800165c:	88ba      	ldrh	r2, [r7, #4]
 800165e:	8b3b      	ldrh	r3, [r7, #24]
 8001660:	4413      	add	r3, r2
 8001662:	b299      	uxth	r1, r3
 8001664:	8bbb      	ldrh	r3, [r7, #28]
 8001666:	8b3a      	ldrh	r2, [r7, #24]
 8001668:	f7ff faa8 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	4413      	add	r3, r2
 8001672:	b298      	uxth	r0, r3
 8001674:	88ba      	ldrh	r2, [r7, #4]
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	b29a      	uxth	r2, r3
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b299      	uxth	r1, r3
 8001682:	8bbb      	ldrh	r3, [r7, #28]
 8001684:	8b3a      	ldrh	r2, [r7, #24]
 8001686:	f7ff fa99 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4413      	add	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	8b3b      	ldrh	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b298      	uxth	r0, r3
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	4413      	add	r3, r2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	8b3b      	ldrh	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	b299      	uxth	r1, r3
 80016a6:	8bbb      	ldrh	r3, [r7, #28]
 80016a8:	8b3a      	ldrh	r2, [r7, #24]
 80016aa:	f7ff fa87 	bl	8000bbc <LCD_Draw_Circle_Fill>
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
	...

080016b8 <initGame>:

Board board;
Piece currentPiece;
Piece nextPiece;

void initGame() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <initGame+0x2c>)
 80016be:	f000 f9b5 	bl	8001a2c <initializeBoard>
	initializeRandomPiece(& currentPiece);
 80016c2:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <initGame+0x30>)
 80016c4:	f000 fdb6 	bl	8002234 <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <initGame+0x34>)
 80016ca:	f000 fdb3 	bl	8002234 <initializeRandomPiece>
	board.grid[0][0] = 6;
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <initGame+0x2c>)
 80016d0:	2206      	movs	r2, #6
 80016d2:	601a      	str	r2, [r3, #0]
	board.grid[0][1] = 2;
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <initGame+0x2c>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	605a      	str	r2, [r3, #4]
	board.grid[1][0] = 5;
 80016da:	4b02      	ldr	r3, [pc, #8]	@ (80016e4 <initGame+0x2c>)
 80016dc:	2205      	movs	r2, #5
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20025b74 	.word	0x20025b74
 80016e8:	20025d04 	.word	0x20025d04
 80016ec:	20025d4c 	.word	0x20025d4c

080016f0 <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    piece->y++;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f86a 	bl	80017e0 <collision>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <movePieceDown+0x30>
        piece->y--;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44
        return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <movePieceDown+0x32>
    }
    return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e03b      	b.n	80017b4 <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	e032      	b.n	80017a8 <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	0091      	lsls	r1, r2, #2
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	440a      	add	r2, r1
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d026      	beq.n	80017a2 <lockPiece+0x76>
                int x = piece->x + j;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db19      	blt.n	80017a2 <lockPiece+0x76>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b09      	cmp	r3, #9
 8001772:	dc16      	bgt.n	80017a2 <lockPiece+0x76>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db13      	blt.n	80017a2 <lockPiece+0x76>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b09      	cmp	r3, #9
 800177e:	dc10      	bgt.n	80017a2 <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	0091      	lsls	r1, r2, #2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	440a      	add	r2, r1
 800178a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	ddc9      	ble.n	8001742 <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	ddc0      	ble.n	800173c <lockPiece+0x10>
                }
            }
        }
    }
    currentPiece = nextPiece;
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <lockPiece+0xac>)
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <lockPiece+0xb0>)
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	2348      	movs	r3, #72	@ 0x48
 80017c4:	461a      	mov	r2, r3
 80017c6:	f004 ffd8 	bl	800677a <memcpy>
    initializeRandomPiece( & nextPiece);
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <lockPiece+0xb0>)
 80017cc:	f000 fd32 	bl	8002234 <initializeRandomPiece>
}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20025d04 	.word	0x20025d04
 80017dc:	20025d4c 	.word	0x20025d4c

080017e0 <collision>:

bool collision(Board *board, Piece *piece) {
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e03a      	b.n	8001866 <collision+0x86>
        for (int j = 0; j < 4; j++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e031      	b.n	800185a <collision+0x7a>
            if (piece->matrix[i][j]) {
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	0091      	lsls	r1, r2, #2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	440a      	add	r2, r1
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d025      	beq.n	8001854 <collision+0x74>
                int x = piece->x + j;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4413      	add	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db05      	blt.n	800182e <collision+0x4e>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b09      	cmp	r3, #9
 8001826:	dc02      	bgt.n	800182e <collision+0x4e>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b09      	cmp	r3, #9
 800182c:	dd01      	ble.n	8001832 <collision+0x52>
                    return true;
 800182e:	2301      	movs	r3, #1
 8001830:	e01d      	b.n	800186e <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0d      	blt.n	8001854 <collision+0x74>
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <collision+0x74>
                    return true;
 8001850:	2301      	movs	r3, #1
 8001852:	e00c      	b.n	800186e <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b03      	cmp	r3, #3
 800185e:	ddca      	ble.n	80017f6 <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b03      	cmp	r3, #3
 800186a:	ddc1      	ble.n	80017f0 <collision+0x10>
                }
            }
        }
    }
    return false;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <rotatePiece>:

void rotatePiece(Piece *piece) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b096      	sub	sp, #88	@ 0x58
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fefa 	bl	8006684 <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001890:	2300      	movs	r3, #0
 8001892:	657b      	str	r3, [r7, #84]	@ 0x54
 8001894:	e01d      	b.n	80018d2 <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 8001896:	2300      	movs	r3, #0
 8001898:	653b      	str	r3, [r7, #80]	@ 0x50
 800189a:	e014      	b.n	80018c6 <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 800189c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189e:	f1c3 0303 	rsb	r3, r3, #3
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80018a6:	0088      	lsls	r0, r1, #2
 80018a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80018aa:	4401      	add	r1, r0
 80018ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80018b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80018b2:	0089      	lsls	r1, r1, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	3358      	adds	r3, #88	@ 0x58
 80018ba:	443b      	add	r3, r7
 80018bc:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 80018c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c2:	3301      	adds	r3, #1
 80018c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80018c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	dde7      	ble.n	800189c <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 80018cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ce:	3301      	adds	r3, #1
 80018d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80018d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	ddde      	ble.n	8001896 <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018dc:	e01b      	b.n	8001916 <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018e2:	e012      	b.n	800190a <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 80018e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018e6:	009a      	lsls	r2, r3, #2
 80018e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	3358      	adds	r3, #88	@ 0x58
 80018f0:	443b      	add	r3, r7
 80018f2:	f853 1c50 	ldr.w	r1, [r3, #-80]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018fa:	0090      	lsls	r0, r2, #2
 80018fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018fe:	4402      	add	r2, r0
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001906:	3301      	adds	r3, #1
 8001908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190c:	2b03      	cmp	r3, #3
 800190e:	dde9      	ble.n	80018e4 <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001912:	3301      	adds	r3, #1
 8001914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001918:	2b03      	cmp	r3, #3
 800191a:	dde0      	ble.n	80018de <rotatePiece+0x64>
        }
    }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3758      	adds	r7, #88	@ 0x58
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <dropPiece>:

void dropPiece(Board *board, Piece *piece) {
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 8001930:	bf00      	nop
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fedb 	bl	80016f0 <movePieceDown>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f8      	bne.n	8001932 <dropPiece+0xc>
    }
    lockPiece(board, piece);
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fef2 	bl	800172c <lockPiece>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d847      	bhi.n	80019f4 <handleInput+0xa4>
 8001964:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <handleInput+0x1c>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	08001999 	.word	0x08001999
 8001970:	0800198d 	.word	0x0800198d
 8001974:	080019c7 	.word	0x080019c7
 8001978:	08001981 	.word	0x08001981
 800197c:	080019e5 	.word	0x080019e5
        case 3: // Move left
            piece->x--;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 800198a:	e033      	b.n	80019f4 <handleInput+0xa4>
        case 1: // Move right
            piece->x++;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001996:	e02d      	b.n	80019f4 <handleInput+0xa4>
        case 0: // Rotate
            rotatePiece(piece);
 8001998:	68b8      	ldr	r0, [r7, #8]
 800199a:	f7ff ff6e 	bl	800187a <rotatePiece>
            if (collision(board, piece)) {
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff ff1d 	bl	80017e0 <collision>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <handleInput+0x9e>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e005      	b.n	80019be <handleInput+0x6e>
                    rotatePiece(piece);
 80019b2:	68b8      	ldr	r0, [r7, #8]
 80019b4:	f7ff ff61 	bl	800187a <rotatePiece>
                for (int i = 0; i < 3; i++) {
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	ddf6      	ble.n	80019b2 <handleInput+0x62>
                }
            }
            break;
 80019c4:	e013      	b.n	80019ee <handleInput+0x9e>
        case 2: // Soft drop
            if (!movePieceDown(board, piece)){
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fe91 	bl	80016f0 <movePieceDown>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f083 0301 	eor.w	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <handleInput+0xa2>
            	lockPiece(board, piece);
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff fea5 	bl	800172c <lockPiece>
            }
            break;
 80019e2:	e006      	b.n	80019f2 <handleInput+0xa2>
        case 4: // Hard drop
            dropPiece(board, piece);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff9d 	bl	8001926 <dropPiece>
            break;
 80019ec:	e002      	b.n	80019f4 <handleInput+0xa4>
            break;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <handleInput+0xa4>
            break;
 80019f2:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fef2 	bl	80017e0 <collision>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <handleInput+0xd4>
        switch (command) {
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <handleInput+0xc8>
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d10b      	bne.n	8001a24 <handleInput+0xd4>
            case 3: piece->x++; break;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a16:	e005      	b.n	8001a24 <handleInput+0xd4>
            case 1: piece->x--; break;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a22:	bf00      	nop
        }
    }
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e016      	b.n	8001a68 <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	e00d      	b.n	8001a5c <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	4413      	add	r3, r2
 8001a50:	2200      	movs	r2, #0
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b09      	cmp	r3, #9
 8001a60:	ddee      	ble.n	8001a40 <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	dde5      	ble.n	8001a3a <initializeBoard+0xe>
        }
    }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <boardWithPiece>:
            }
        }
    }
}

Board boardWithPiece(Board *board, Piece *piece) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0ee      	sub	sp, #440	@ 0x1b8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001a86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a8a:	6018      	str	r0, [r3, #0]
 8001a8c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001a90:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a94:	6019      	str	r1, [r3, #0]
 8001a96:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001a9a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a9e:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001aa6:	e030      	b.n	8001b0a <boardWithPiece+0x8e>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001aae:	e023      	b.n	8001af8 <boardWithPiece+0x7c>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001ab0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001ab4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001aca:	4413      	add	r3, r2
 8001acc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001ad0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001ad4:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8001ad8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001ae8:	4413      	add	r3, r2
 8001aea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001af2:	3301      	adds	r3, #1
 8001af4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001af8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	ddd7      	ble.n	8001ab0 <boardWithPiece+0x34>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001b00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001b0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	ddca      	ble.n	8001aa8 <boardWithPiece+0x2c>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001b18:	e052      	b.n	8001bc0 <boardWithPiece+0x144>
        for (int pj = 0; pj < 4; pj++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001b20:	e045      	b.n	8001bae <boardWithPiece+0x132>
            int px = piece->x + pj;
 8001b22:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001b26:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001b32:	4413      	add	r3, r2
 8001b34:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            int py = piece->y + pi;
 8001b38:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001b3c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b44:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001b48:	4413      	add	r3, r2
 8001b4a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001b4e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001b52:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001b5c:	0091      	lsls	r1, r2, #2
 8001b5e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001b62:	440a      	add	r2, r1
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01b      	beq.n	8001ba4 <boardWithPiece+0x128>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001b6c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001b70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001b7a:	0091      	lsls	r1, r2, #2
 8001b7c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001b80:	440a      	add	r2, r1
 8001b82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b86:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001b8a:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8001b8e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001ba4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001bae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	ddb5      	ble.n	8001b22 <boardWithPiece+0xa6>
    for (int pi = 0; pi < 4; pi++) {
 8001bb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001bc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	dda8      	ble.n	8001b1a <boardWithPiece+0x9e>
//            }
        }
    }

    return tempBoard;
 8001bc8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001bcc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001bd6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001be2:	461a      	mov	r2, r3
 8001be4:	f004 fdc9 	bl	800677a <memcpy>
}
 8001be8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001bec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bfe:	f000 f9ff 	bl	8002000 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001c02:	20ca      	movs	r0, #202	@ 0xca
 8001c04:	f000 f943 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001c08:	20c3      	movs	r0, #195	@ 0xc3
 8001c0a:	f000 f94d 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001c0e:	2008      	movs	r0, #8
 8001c10:	f000 f94a 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001c14:	2050      	movs	r0, #80	@ 0x50
 8001c16:	f000 f947 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001c1a:	20cf      	movs	r0, #207	@ 0xcf
 8001c1c:	f000 f937 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f941 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001c26:	20c1      	movs	r0, #193	@ 0xc1
 8001c28:	f000 f93e 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001c2c:	2030      	movs	r0, #48	@ 0x30
 8001c2e:	f000 f93b 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001c32:	20ed      	movs	r0, #237	@ 0xed
 8001c34:	f000 f92b 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001c38:	2064      	movs	r0, #100	@ 0x64
 8001c3a:	f000 f935 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f000 f932 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001c44:	2012      	movs	r0, #18
 8001c46:	f000 f92f 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001c4a:	2081      	movs	r0, #129	@ 0x81
 8001c4c:	f000 f92c 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001c50:	20e8      	movs	r0, #232	@ 0xe8
 8001c52:	f000 f91c 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001c56:	2085      	movs	r0, #133	@ 0x85
 8001c58:	f000 f926 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 f923 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c62:	2078      	movs	r0, #120	@ 0x78
 8001c64:	f000 f920 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001c68:	20cb      	movs	r0, #203	@ 0xcb
 8001c6a:	f000 f910 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001c6e:	2039      	movs	r0, #57	@ 0x39
 8001c70:	f000 f91a 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001c74:	202c      	movs	r0, #44	@ 0x2c
 8001c76:	f000 f917 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f914 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001c80:	2034      	movs	r0, #52	@ 0x34
 8001c82:	f000 f911 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001c86:	2002      	movs	r0, #2
 8001c88:	f000 f90e 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001c8c:	20f7      	movs	r0, #247	@ 0xf7
 8001c8e:	f000 f8fe 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001c92:	2020      	movs	r0, #32
 8001c94:	f000 f908 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c98:	20ea      	movs	r0, #234	@ 0xea
 8001c9a:	f000 f8f8 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f902 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f8ff 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001caa:	20b1      	movs	r0, #177	@ 0xb1
 8001cac:	f000 f8ef 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 f8f9 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001cb6:	201b      	movs	r0, #27
 8001cb8:	f000 f8f6 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001cbc:	20b6      	movs	r0, #182	@ 0xb6
 8001cbe:	f000 f8e6 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f000 f8f0 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001cc8:	20a2      	movs	r0, #162	@ 0xa2
 8001cca:	f000 f8ed 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001cce:	20c0      	movs	r0, #192	@ 0xc0
 8001cd0:	f000 f8dd 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cd4:	2010      	movs	r0, #16
 8001cd6:	f000 f8e7 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001cda:	20c1      	movs	r0, #193	@ 0xc1
 8001cdc:	f000 f8d7 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f000 f8e1 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ce6:	20c5      	movs	r0, #197	@ 0xc5
 8001ce8:	f000 f8d1 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001cec:	2045      	movs	r0, #69	@ 0x45
 8001cee:	f000 f8db 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001cf2:	2015      	movs	r0, #21
 8001cf4:	f000 f8d8 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001cf8:	20c7      	movs	r0, #199	@ 0xc7
 8001cfa:	f000 f8c8 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001cfe:	2090      	movs	r0, #144	@ 0x90
 8001d00:	f000 f8d2 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001d04:	2036      	movs	r0, #54	@ 0x36
 8001d06:	f000 f8c2 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001d0a:	20c8      	movs	r0, #200	@ 0xc8
 8001d0c:	f000 f8cc 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001d10:	20f2      	movs	r0, #242	@ 0xf2
 8001d12:	f000 f8bc 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f000 f8c6 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001d1c:	20b0      	movs	r0, #176	@ 0xb0
 8001d1e:	f000 f8b6 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001d22:	20c2      	movs	r0, #194	@ 0xc2
 8001d24:	f000 f8c0 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d28:	20b6      	movs	r0, #182	@ 0xb6
 8001d2a:	f000 f8b0 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d2e:	200a      	movs	r0, #10
 8001d30:	f000 f8ba 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001d34:	20a7      	movs	r0, #167	@ 0xa7
 8001d36:	f000 f8b7 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001d3a:	2027      	movs	r0, #39	@ 0x27
 8001d3c:	f000 f8b4 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d40:	2004      	movs	r0, #4
 8001d42:	f000 f8b1 	bl	8001ea8 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001d46:	202a      	movs	r0, #42	@ 0x2a
 8001d48:	f000 f8a1 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f8ab 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f8a8 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 f8a5 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001d5e:	20ef      	movs	r0, #239	@ 0xef
 8001d60:	f000 f8a2 	bl	8001ea8 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001d64:	202b      	movs	r0, #43	@ 0x2b
 8001d66:	f000 f892 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f89c 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 f899 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 f896 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001d7c:	203f      	movs	r0, #63	@ 0x3f
 8001d7e:	f000 f893 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001d82:	20f6      	movs	r0, #246	@ 0xf6
 8001d84:	f000 f883 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f000 f88d 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 f88a 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001d94:	2006      	movs	r0, #6
 8001d96:	f000 f887 	bl	8001ea8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d9a:	202c      	movs	r0, #44	@ 0x2c
 8001d9c:	f000 f877 	bl	8001e8e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001da0:	20c8      	movs	r0, #200	@ 0xc8
 8001da2:	f000 f9e9 	bl	8002178 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001da6:	2026      	movs	r0, #38	@ 0x26
 8001da8:	f000 f871 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f000 f87b 	bl	8001ea8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001db2:	20e0      	movs	r0, #224	@ 0xe0
 8001db4:	f000 f86b 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001db8:	200f      	movs	r0, #15
 8001dba:	f000 f875 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001dbe:	2029      	movs	r0, #41	@ 0x29
 8001dc0:	f000 f872 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001dc4:	2024      	movs	r0, #36	@ 0x24
 8001dc6:	f000 f86f 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001dca:	200c      	movs	r0, #12
 8001dcc:	f000 f86c 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001dd0:	200e      	movs	r0, #14
 8001dd2:	f000 f869 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dd6:	2009      	movs	r0, #9
 8001dd8:	f000 f866 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001ddc:	204e      	movs	r0, #78	@ 0x4e
 8001dde:	f000 f863 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001de2:	2078      	movs	r0, #120	@ 0x78
 8001de4:	f000 f860 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001de8:	203c      	movs	r0, #60	@ 0x3c
 8001dea:	f000 f85d 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dee:	2009      	movs	r0, #9
 8001df0:	f000 f85a 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001df4:	2013      	movs	r0, #19
 8001df6:	f000 f857 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f000 f854 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001e00:	2017      	movs	r0, #23
 8001e02:	f000 f851 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e06:	2011      	movs	r0, #17
 8001e08:	f000 f84e 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f000 f84b 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001e12:	20e1      	movs	r0, #225	@ 0xe1
 8001e14:	f000 f83b 	bl	8001e8e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 f845 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001e1e:	2016      	movs	r0, #22
 8001e20:	f000 f842 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e24:	201b      	movs	r0, #27
 8001e26:	f000 f83f 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f000 f83c 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e30:	2011      	movs	r0, #17
 8001e32:	f000 f839 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001e36:	2007      	movs	r0, #7
 8001e38:	f000 f836 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001e3c:	2031      	movs	r0, #49	@ 0x31
 8001e3e:	f000 f833 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001e42:	2033      	movs	r0, #51	@ 0x33
 8001e44:	f000 f830 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001e48:	2042      	movs	r0, #66	@ 0x42
 8001e4a:	f000 f82d 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f000 f82a 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e54:	200c      	movs	r0, #12
 8001e56:	f000 f827 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001e5a:	200a      	movs	r0, #10
 8001e5c:	f000 f824 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001e60:	2028      	movs	r0, #40	@ 0x28
 8001e62:	f000 f821 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001e66:	202f      	movs	r0, #47	@ 0x2f
 8001e68:	f000 f81e 	bl	8001ea8 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f000 f81b 	bl	8001ea8 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001e72:	2011      	movs	r0, #17
 8001e74:	f000 f80b 	bl	8001e8e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e78:	20c8      	movs	r0, #200	@ 0xc8
 8001e7a:	f000 f97d 	bl	8002178 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001e7e:	2029      	movs	r0, #41	@ 0x29
 8001e80:	f000 f805 	bl	8001e8e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001e84:	202c      	movs	r0, #44	@ 0x2c
 8001e86:	f000 f802 	bl	8001e8e <ili9341_Write_Reg>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f94a 	bl	8002134 <LCD_IO_WriteReg>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f91b 	bl	80020f0 <LCD_IO_WriteData>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ec8:	4819      	ldr	r0, [pc, #100]	@ (8001f30 <SPI_Init+0x6c>)
 8001eca:	f004 f944 	bl	8006156 <HAL_SPI_GetState>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12b      	bne.n	8001f2c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <SPI_Init+0x6c>)
 8001ed6:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <SPI_Init+0x70>)
 8001ed8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <SPI_Init+0x6c>)
 8001edc:	2218      	movs	r2, #24
 8001ede:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <SPI_Init+0x6c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <SPI_Init+0x6c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <SPI_Init+0x6c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <SPI_Init+0x6c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <SPI_Init+0x6c>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <SPI_Init+0x6c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <SPI_Init+0x6c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <SPI_Init+0x6c>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f10:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <SPI_Init+0x6c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SPI_Init+0x6c>)
 8001f1a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f1e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <SPI_Init+0x6c>)
 8001f22:	f000 f833 	bl	8001f8c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f26:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <SPI_Init+0x6c>)
 8001f28:	f003 ff20 	bl	8005d6c <HAL_SPI_Init>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20025d94 	.word	0x20025d94
 8001f34:	40015000 	.word	0x40015000

08001f38 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <SPI_Write+0x34>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1db9      	adds	r1, r7, #6
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <SPI_Write+0x38>)
 8001f50:	f003 ffbd 	bl	8005ece <HAL_SPI_Transmit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001f5e:	f000 f809 	bl	8001f74 <SPI_Error>
  }
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	20025d94 	.word	0x20025d94

08001f74 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f78:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <SPI_Error+0x14>)
 8001f7a:	f003 ff80 	bl	8005e7e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001f7e:	f7ff ffa1 	bl	8001ec4 <SPI_Init>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20025d94 	.word	0x20025d94

08001f8c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <SPI_MspInit+0x6c>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001fcc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <SPI_MspInit+0x70>)
 8001fea:	f001 fadf 	bl	80035ac <HAL_GPIO_Init>
}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	@ 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40021400 	.word	0x40021400

08002000 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002006:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <LCD_IO_Init+0xe0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d164      	bne.n	80020d8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800200e:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <LCD_IO_Init+0xe0>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	4b32      	ldr	r3, [pc, #200]	@ (80020e4 <LCD_IO_Init+0xe4>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a31      	ldr	r2, [pc, #196]	@ (80020e4 <LCD_IO_Init+0xe4>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b2f      	ldr	r3, [pc, #188]	@ (80020e4 <LCD_IO_Init+0xe4>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002034:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	4827      	ldr	r0, [pc, #156]	@ (80020e8 <LCD_IO_Init+0xe8>)
 800204a:	f001 faaf 	bl	80035ac <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <LCD_IO_Init+0xe4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a23      	ldr	r2, [pc, #140]	@ (80020e4 <LCD_IO_Init+0xe4>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <LCD_IO_Init+0xe4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800206a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	4819      	ldr	r0, [pc, #100]	@ (80020e8 <LCD_IO_Init+0xe8>)
 8002084:	f001 fa92 	bl	80035ac <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <LCD_IO_Init+0xe4>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <LCD_IO_Init+0xe4>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6313      	str	r3, [r2, #48]	@ 0x30
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <LCD_IO_Init+0xe4>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80020a4:	2304      	movs	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	480c      	ldr	r0, [pc, #48]	@ (80020ec <LCD_IO_Init+0xec>)
 80020bc:	f001 fa76 	bl	80035ac <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020c0:	2200      	movs	r2, #0
 80020c2:	2104      	movs	r1, #4
 80020c4:	4809      	ldr	r0, [pc, #36]	@ (80020ec <LCD_IO_Init+0xec>)
 80020c6:	f001 fd29 	bl	8003b1c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020ca:	2201      	movs	r2, #1
 80020cc:	2104      	movs	r1, #4
 80020ce:	4807      	ldr	r0, [pc, #28]	@ (80020ec <LCD_IO_Init+0xec>)
 80020d0:	f001 fd24 	bl	8003b1c <HAL_GPIO_WritePin>

    SPI_Init();
 80020d4:	f7ff fef6 	bl	8001ec4 <SPI_Init>
  }
}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20025dec 	.word	0x20025dec
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40020800 	.word	0x40020800

080020f0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002100:	480a      	ldr	r0, [pc, #40]	@ (800212c <LCD_IO_WriteData+0x3c>)
 8002102:	f001 fd0b 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002106:	2200      	movs	r2, #0
 8002108:	2104      	movs	r1, #4
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <LCD_IO_WriteData+0x40>)
 800210c:	f001 fd06 	bl	8003b1c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff10 	bl	8001f38 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002118:	2201      	movs	r2, #1
 800211a:	2104      	movs	r1, #4
 800211c:	4804      	ldr	r0, [pc, #16]	@ (8002130 <LCD_IO_WriteData+0x40>)
 800211e:	f001 fcfd 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40020800 	.word	0x40020800

08002134 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002144:	480a      	ldr	r0, [pc, #40]	@ (8002170 <LCD_IO_WriteReg+0x3c>)
 8002146:	f001 fce9 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800214a:	2200      	movs	r2, #0
 800214c:	2104      	movs	r1, #4
 800214e:	4809      	ldr	r0, [pc, #36]	@ (8002174 <LCD_IO_WriteReg+0x40>)
 8002150:	f001 fce4 	bl	8003b1c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feed 	bl	8001f38 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800215e:	2201      	movs	r2, #1
 8002160:	2104      	movs	r1, #4
 8002162:	4804      	ldr	r0, [pc, #16]	@ (8002174 <LCD_IO_WriteReg+0x40>)
 8002164:	f001 fcda 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40020800 	.word	0x40020800

08002178 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f001 f867 	bl	8003254 <HAL_Delay>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002192:	f000 ffed 	bl	8003170 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8002196:	f000 f807 	bl	80021a8 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800219a:	f7fe f9f1 	bl	8000580 <ApplicationInit>

  showStartScreen();
 800219e:	f000 f8a9 	bl	80022f4 <showStartScreen>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 80021a2:	bf00      	nop
 80021a4:	e7fd      	b.n	80021a2 <main+0x14>
	...

080021a8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b092      	sub	sp, #72	@ 0x48
 80021ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <SystemClockOverride+0x7c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <SystemClockOverride+0x7c>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <SystemClockOverride+0x7c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021d2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021de:	2308      	movs	r3, #8
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021e2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021ec:	2307      	movs	r3, #7
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 ff76 	bl	80050e4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021f8:	230f      	movs	r3, #15
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fc:	2302      	movs	r3, #2
 80021fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002204:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002208:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800220a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002210:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002214:	2105      	movs	r1, #5
 8002216:	4618      	mov	r0, r3
 8002218:	f003 f9dc 	bl	80055d4 <HAL_RCC_ClockConfig>
}
 800221c:	bf00      	nop
 800221e:	3748      	adds	r7, #72	@ 0x48
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <Error_Handler+0x8>

08002234 <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 800223c:	f000 f852 	bl	80022e4 <rand>
 8002240:	4601      	mov	r1, r0
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <initializeRandomPiece+0x80>)
 8002244:	fba3 2301 	umull	r2, r3, r3, r1
 8002248:	1aca      	subs	r2, r1, r3
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	4413      	add	r3, r2
 800224e:	089a      	lsrs	r2, r3, #2
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	1aca      	subs	r2, r1, r3
 8002258:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e01c      	b.n	800229a <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e013      	b.n	800228e <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 8002266:	4914      	ldr	r1, [pc, #80]	@ (80022b8 <initializeRandomPiece+0x84>)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4413      	add	r3, r2
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	0090      	lsls	r0, r2, #2
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4402      	add	r2, r0
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	3301      	adds	r3, #1
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b03      	cmp	r3, #3
 8002292:	dde8      	ble.n	8002266 <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3301      	adds	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b03      	cmp	r3, #3
 800229e:	dddf      	ble.n	8002260 <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2204      	movs	r2, #4
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80022ac:	bf00      	nop
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	24924925 	.word	0x24924925
 80022b8:	20000010 	.word	0x20000010

080022bc <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <piceIndexToColors+0x24>)
 80022d0:	4413      	add	r3, r2
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200001d0 	.word	0x200001d0

080022e4 <rand>:
 *  Created on: Dec 7, 2024
 *      Author: user
 */
#include "rand.h"

uint32_t rand(){
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	return 3;
 80022e8:	2303      	movs	r3, #3
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <showStartScreen>:
#define START_AREA_X_LEN (LCD_PIXEL_WIDTH - BORDER_GAP *2)
#define START_AREA_Y_LEN (24*2)
#define START_AREA_X BORDER_GAP
#define START_AREA_Y (LCD_PIXEL_HEIGHT - START_AREA_Y_LEN - BORDER_GAP)

void showStartScreen(){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 80022fa:	2100      	movs	r1, #0
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fd23 	bl	8000d48 <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002302:	4823      	ldr	r0, [pc, #140]	@ (8002390 <showStartScreen+0x9c>)
 8002304:	f7fe fd52 	bl	8000dac <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002308:	2228      	movs	r2, #40	@ 0x28
 800230a:	2114      	movs	r1, #20
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f8af 	bl	8001470 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002312:	2246      	movs	r2, #70	@ 0x46
 8002314:	2114      	movs	r1, #20
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff f8aa 	bl	8001470 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 800231c:	2228      	movs	r2, #40	@ 0x28
 800231e:	215a      	movs	r1, #90	@ 0x5a
 8002320:	2002      	movs	r0, #2
 8002322:	f7ff f8a5 	bl	8001470 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 8002326:	2228      	movs	r2, #40	@ 0x28
 8002328:	218c      	movs	r1, #140	@ 0x8c
 800232a:	2003      	movs	r0, #3
 800232c:	f7ff f8a0 	bl	8001470 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 8002330:	2250      	movs	r2, #80	@ 0x50
 8002332:	2141      	movs	r1, #65	@ 0x41
 8002334:	2004      	movs	r0, #4
 8002336:	f7ff f89b 	bl	8001470 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 800233a:	2250      	movs	r2, #80	@ 0x50
 800233c:	2164      	movs	r1, #100	@ 0x64
 800233e:	2005      	movs	r0, #5
 8002340:	f7ff f896 	bl	8001470 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 8002344:	228c      	movs	r2, #140	@ 0x8c
 8002346:	2132      	movs	r1, #50	@ 0x32
 8002348:	2006      	movs	r0, #6
 800234a:	f7ff f891 	bl	8001470 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 800234e:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002352:	f7fe fd1b 	bl	8000d8c <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 8002356:	4a0f      	ldr	r2, [pc, #60]	@ (8002394 <showStartScreen+0xa0>)
 8002358:	2198      	movs	r1, #152	@ 0x98
 800235a:	2064      	movs	r0, #100	@ 0x64
 800235c:	f7fe fdc6 	bl	8000eec <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 8002360:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	230f      	movs	r3, #15
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2330      	movs	r3, #48	@ 0x30
 800236c:	22b4      	movs	r2, #180	@ 0xb4
 800236e:	21f2      	movs	r1, #242	@ 0xf2
 8002370:	201e      	movs	r0, #30
 8002372:	f7ff f8db 	bl	800152c <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fd08 	bl	8000d8c <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 800237c:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <showStartScreen+0xa4>)
 800237e:	f240 1101 	movw	r1, #257	@ 0x101
 8002382:	2054      	movs	r0, #84	@ 0x54
 8002384:	f7fe fdb2 	bl	8000eec <LCD_DisplayString>
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000004 	.word	0x20000004
 8002394:	08007210 	.word	0x08007210
 8002398:	08007218 	.word	0x08007218

0800239c <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	460a      	mov	r2, r1
 80023a6:	80fb      	strh	r3, [r7, #6]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	2b1d      	cmp	r3, #29
 80023b0:	d90b      	bls.n	80023ca <startClicked+0x2e>
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2bd2      	cmp	r3, #210	@ 0xd2
 80023b6:	d808      	bhi.n	80023ca <startClicked+0x2e>
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	2bf1      	cmp	r3, #241	@ 0xf1
 80023bc:	d905      	bls.n	80023ca <startClicked+0x2e>
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80023c4:	d801      	bhi.n	80023ca <startClicked+0x2e>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <startClicked+0x30>
 80023ca:	2300      	movs	r3, #0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <showGameScreen>:

void showGameScreen(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0e4      	sub	sp, #400	@ 0x190
 80023e4:	af00      	add	r7, sp, #0
	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 80023e6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80023ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023ee:	4a08      	ldr	r2, [pc, #32]	@ (8002410 <showGameScreen+0x30>)
 80023f0:	4908      	ldr	r1, [pc, #32]	@ (8002414 <showGameScreen+0x34>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb42 	bl	8001a7c <boardWithPiece>
	Fill_Tetris_Board(
 80023f8:	463b      	mov	r3, r7
 80023fa:	2232      	movs	r2, #50	@ 0x32
 80023fc:	212d      	movs	r1, #45	@ 0x2d
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ffdc 	bl	80013bc <Fill_Tetris_Board>
			50
			);

	// Next Piece
//	DrawTetromino(& nextPiece, 130, 10);
}
 8002404:	bf00      	nop
 8002406:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20025d04 	.word	0x20025d04
 8002414:	20025b74 	.word	0x20025b74

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_MspInit+0x4c>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_MspInit+0x4c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_MspInit+0x4c>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_MspInit+0x4c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002456:	2007      	movs	r0, #7
 8002458:	f001 f832 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	@ 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a29      	ldr	r2, [pc, #164]	@ (800252c <HAL_I2C_MspInit+0xc4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d14b      	bne.n	8002522 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a20      	ldr	r2, [pc, #128]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80024c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024d4:	2304      	movs	r3, #4
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	4815      	ldr	r0, [pc, #84]	@ (8002534 <HAL_I2C_MspInit+0xcc>)
 80024e0:	f001 f864 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80024e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ea:	2312      	movs	r3, #18
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f6:	2304      	movs	r3, #4
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	480d      	ldr	r0, [pc, #52]	@ (8002538 <HAL_I2C_MspInit+0xd0>)
 8002502:	f001 f853 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 8002510:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_I2C_MspInit+0xc8>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	@ 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40005c00 	.word	0x40005c00
 8002530:	40023800 	.word	0x40023800
 8002534:	40020800 	.word	0x40020800
 8002538:	40020000 	.word	0x40020000

0800253c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b09a      	sub	sp, #104	@ 0x68
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002558:	2230      	movs	r2, #48	@ 0x30
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f004 f891 	bl	8006684 <memset>
  if(hltdc->Instance==LTDC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a81      	ldr	r2, [pc, #516]	@ (800276c <HAL_LTDC_MspInit+0x230>)
 8002568:	4293      	cmp	r3, r2
 800256a:	f040 80fa 	bne.w	8002762 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800256e:	2308      	movs	r3, #8
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002572:	2332      	movs	r3, #50	@ 0x32
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002576:	2302      	movs	r3, #2
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800257a:	2300      	movs	r3, #0
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fa32 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800258e:	f7ff fe4b 	bl	8002228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	4b76      	ldr	r3, [pc, #472]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	4a75      	ldr	r2, [pc, #468]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 800259c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a2:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025be:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	4b68      	ldr	r3, [pc, #416]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a67      	ldr	r2, [pc, #412]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b65      	ldr	r3, [pc, #404]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	4b61      	ldr	r3, [pc, #388]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a60      	ldr	r2, [pc, #384]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b5a      	ldr	r3, [pc, #360]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a59      	ldr	r2, [pc, #356]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 800260c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b57      	ldr	r3, [pc, #348]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6313      	str	r3, [r2, #48]	@ 0x30
 800262e:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a4b      	ldr	r2, [pc, #300]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_LTDC_MspInit+0x234>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800265a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002668:	230e      	movs	r3, #14
 800266a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800266c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002670:	4619      	mov	r1, r3
 8002672:	4840      	ldr	r0, [pc, #256]	@ (8002774 <HAL_LTDC_MspInit+0x238>)
 8002674:	f000 ff9a 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002678:	f641 0358 	movw	r3, #6232	@ 0x1858
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800268a:	230e      	movs	r3, #14
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002692:	4619      	mov	r1, r3
 8002694:	4838      	ldr	r0, [pc, #224]	@ (8002778 <HAL_LTDC_MspInit+0x23c>)
 8002696:	f000 ff89 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800269a:	2303      	movs	r3, #3
 800269c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026aa:	2309      	movs	r3, #9
 80026ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026b2:	4619      	mov	r1, r3
 80026b4:	4831      	ldr	r0, [pc, #196]	@ (800277c <HAL_LTDC_MspInit+0x240>)
 80026b6:	f000 ff79 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80026ba:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80026be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026cc:	230e      	movs	r3, #14
 80026ce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026d4:	4619      	mov	r1, r3
 80026d6:	4829      	ldr	r0, [pc, #164]	@ (800277c <HAL_LTDC_MspInit+0x240>)
 80026d8:	f000 ff68 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80026dc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80026e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026ee:	230e      	movs	r3, #14
 80026f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026f6:	4619      	mov	r1, r3
 80026f8:	4821      	ldr	r0, [pc, #132]	@ (8002780 <HAL_LTDC_MspInit+0x244>)
 80026fa:	f000 ff57 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80026fe:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002702:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002710:	230e      	movs	r3, #14
 8002712:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002718:	4619      	mov	r1, r3
 800271a:	481a      	ldr	r0, [pc, #104]	@ (8002784 <HAL_LTDC_MspInit+0x248>)
 800271c:	f000 ff46 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002720:	2348      	movs	r3, #72	@ 0x48
 8002722:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002730:	230e      	movs	r3, #14
 8002732:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002734:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002738:	4619      	mov	r1, r3
 800273a:	4813      	ldr	r0, [pc, #76]	@ (8002788 <HAL_LTDC_MspInit+0x24c>)
 800273c:	f000 ff36 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002744:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002752:	2309      	movs	r3, #9
 8002754:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002756:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800275a:	4619      	mov	r1, r3
 800275c:	4808      	ldr	r0, [pc, #32]	@ (8002780 <HAL_LTDC_MspInit+0x244>)
 800275e:	f000 ff25 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002762:	bf00      	nop
 8002764:	3768      	adds	r7, #104	@ 0x68
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40016800 	.word	0x40016800
 8002770:	40023800 	.word	0x40023800
 8002774:	40021400 	.word	0x40021400
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40021800 	.word	0x40021800
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00

0800278c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_SPI_MspInit+0x84>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12c      	bne.n	8002808 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027d4:	f043 0320 	orr.w	r3, r3, #32
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_SPI_MspInit+0x88>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80027e6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027f8:	2305      	movs	r3, #5
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4805      	ldr	r0, [pc, #20]	@ (8002818 <HAL_SPI_MspInit+0x8c>)
 8002804:	f000 fed2 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	@ 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40015000 	.word	0x40015000
 8002814:	40023800 	.word	0x40023800
 8002818:	40021400 	.word	0x40021400

0800281c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_SPI_MspDeInit+0x30>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10a      	bne.n	8002844 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_SPI_MspDeInit+0x34>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a07      	ldr	r2, [pc, #28]	@ (8002850 <HAL_SPI_MspDeInit+0x34>)
 8002834:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800283a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <HAL_SPI_MspDeInit+0x38>)
 8002840:	f001 f860 	bl	8003904 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40015000 	.word	0x40015000
 8002850:	40023800 	.word	0x40023800
 8002854:	40021400 	.word	0x40021400

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <NMI_Handler+0x4>

08002860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <MemManage_Handler+0x4>

08002870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <BusFault_Handler+0x4>

08002878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <UsageFault_Handler+0x4>

08002880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ae:	f000 fcb1 	bl	8003214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80028fa:	f000 f9dd 	bl	8002cb8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80028fe:	f000 f99d 	bl	8002c3c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002902:	2202      	movs	r2, #2
 8002904:	2103      	movs	r1, #3
 8002906:	2082      	movs	r0, #130	@ 0x82
 8002908:	f000 fa2a 	bl	8002d60 <I2C3_Write>
    HAL_Delay(5);
 800290c:	2005      	movs	r0, #5
 800290e:	f000 fca1 	bl	8003254 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002912:	2200      	movs	r2, #0
 8002914:	2103      	movs	r1, #3
 8002916:	2082      	movs	r0, #130	@ 0x82
 8002918:	f000 fa22 	bl	8002d60 <I2C3_Write>
    HAL_Delay(2);
 800291c:	2002      	movs	r0, #2
 800291e:	f000 fc99 	bl	8003254 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002922:	1cba      	adds	r2, r7, #2
 8002924:	2302      	movs	r3, #2
 8002926:	2100      	movs	r1, #0
 8002928:	2082      	movs	r0, #130	@ 0x82
 800292a:	f000 fa69 	bl	8002e00 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b29a      	uxth	r2, r3
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	4313      	orrs	r3, r2
 800293e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	f640 0211 	movw	r2, #2065	@ 0x811
 8002946:	4293      	cmp	r3, r2
 8002948:	d001      	beq.n	800294e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800294a:	2303      	movs	r3, #3
 800294c:	e095      	b.n	8002a7a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800294e:	2202      	movs	r2, #2
 8002950:	2103      	movs	r1, #3
 8002952:	2082      	movs	r0, #130	@ 0x82
 8002954:	f000 fa04 	bl	8002d60 <I2C3_Write>
    HAL_Delay(5);
 8002958:	2005      	movs	r0, #5
 800295a:	f000 fc7b 	bl	8003254 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800295e:	2200      	movs	r2, #0
 8002960:	2103      	movs	r1, #3
 8002962:	2082      	movs	r0, #130	@ 0x82
 8002964:	f000 f9fc 	bl	8002d60 <I2C3_Write>
    HAL_Delay(2);
 8002968:	2002      	movs	r0, #2
 800296a:	f000 fc73 	bl	8003254 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800296e:	2004      	movs	r0, #4
 8002970:	f000 f887 	bl	8002a82 <STMPE811_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002978:	797b      	ldrb	r3, [r7, #5]
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002980:	797b      	ldrb	r3, [r7, #5]
 8002982:	461a      	mov	r2, r3
 8002984:	2104      	movs	r1, #4
 8002986:	2082      	movs	r0, #130	@ 0x82
 8002988:	f000 f9ea 	bl	8002d60 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800298c:	2004      	movs	r0, #4
 800298e:	f000 f878 	bl	8002a82 <STMPE811_Read>
 8002992:	4603      	mov	r3, r0
 8002994:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002996:	797b      	ldrb	r3, [r7, #5]
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800299e:	797b      	ldrb	r3, [r7, #5]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2104      	movs	r1, #4
 80029a4:	2082      	movs	r0, #130	@ 0x82
 80029a6:	f000 f9db 	bl	8002d60 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029aa:	2249      	movs	r2, #73	@ 0x49
 80029ac:	2120      	movs	r1, #32
 80029ae:	2082      	movs	r0, #130	@ 0x82
 80029b0:	f000 f9d6 	bl	8002d60 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80029b4:	2002      	movs	r0, #2
 80029b6:	f000 fc4d 	bl	8003254 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80029ba:	2201      	movs	r2, #1
 80029bc:	2121      	movs	r1, #33	@ 0x21
 80029be:	2082      	movs	r0, #130	@ 0x82
 80029c0:	f000 f9ce 	bl	8002d60 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80029c4:	2017      	movs	r0, #23
 80029c6:	f000 f85c 	bl	8002a82 <STMPE811_Read>
 80029ca:	4603      	mov	r3, r0
 80029cc:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	f043 031e 	orr.w	r3, r3, #30
 80029d4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80029d6:	797b      	ldrb	r3, [r7, #5]
 80029d8:	461a      	mov	r2, r3
 80029da:	2117      	movs	r1, #23
 80029dc:	2082      	movs	r0, #130	@ 0x82
 80029de:	f000 f9bf 	bl	8002d60 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80029e2:	229a      	movs	r2, #154	@ 0x9a
 80029e4:	2141      	movs	r1, #65	@ 0x41
 80029e6:	2082      	movs	r0, #130	@ 0x82
 80029e8:	f000 f9ba 	bl	8002d60 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80029ec:	2201      	movs	r2, #1
 80029ee:	214a      	movs	r1, #74	@ 0x4a
 80029f0:	2082      	movs	r0, #130	@ 0x82
 80029f2:	f000 f9b5 	bl	8002d60 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80029f6:	2201      	movs	r2, #1
 80029f8:	214b      	movs	r1, #75	@ 0x4b
 80029fa:	2082      	movs	r0, #130	@ 0x82
 80029fc:	f000 f9b0 	bl	8002d60 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a00:	2200      	movs	r2, #0
 8002a02:	214b      	movs	r1, #75	@ 0x4b
 8002a04:	2082      	movs	r0, #130	@ 0x82
 8002a06:	f000 f9ab 	bl	8002d60 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2156      	movs	r1, #86	@ 0x56
 8002a0e:	2082      	movs	r0, #130	@ 0x82
 8002a10:	f000 f9a6 	bl	8002d60 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2158      	movs	r1, #88	@ 0x58
 8002a18:	2082      	movs	r0, #130	@ 0x82
 8002a1a:	f000 f9a1 	bl	8002d60 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a1e:	2203      	movs	r2, #3
 8002a20:	2140      	movs	r1, #64	@ 0x40
 8002a22:	2082      	movs	r0, #130	@ 0x82
 8002a24:	f000 f99c 	bl	8002d60 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	210b      	movs	r1, #11
 8002a2c:	2082      	movs	r0, #130	@ 0x82
 8002a2e:	f000 f997 	bl	8002d60 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002a32:	f000 f8c1 	bl	8002bb8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002a36:	2009      	movs	r0, #9
 8002a38:	f000 f823 	bl	8002a82 <STMPE811_Read>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002a40:	797b      	ldrb	r3, [r7, #5]
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002a48:	797b      	ldrb	r3, [r7, #5]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2109      	movs	r1, #9
 8002a4e:	2082      	movs	r0, #130	@ 0x82
 8002a50:	f000 f986 	bl	8002d60 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002a54:	200a      	movs	r0, #10
 8002a56:	f000 f814 	bl	8002a82 <STMPE811_Read>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002a5e:	797b      	ldrb	r3, [r7, #5]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002a66:	797b      	ldrb	r3, [r7, #5]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	210a      	movs	r1, #10
 8002a6c:	2082      	movs	r0, #130	@ 0x82
 8002a6e:	f000 f977 	bl	8002d60 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002a72:	20c8      	movs	r0, #200	@ 0xc8
 8002a74:	f000 fbee 	bl	8003254 <HAL_Delay>

    return STMPE811_State_Ok;
 8002a78:	2302      	movs	r3, #2

}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a8c:	f107 020f 	add.w	r2, r7, #15
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4619      	mov	r1, r3
 8002a94:	2082      	movs	r0, #130	@ 0x82
 8002a96:	f000 f98d 	bl	8002db4 <I2C3_Read>

    return readData;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460a      	mov	r2, r1
 8002aae:	71fb      	strb	r3, [r7, #7]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002ab4:	79ba      	ldrb	r2, [r7, #6]
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	2082      	movs	r0, #130	@ 0x82
 8002abc:	f000 f950 	bl	8002d60 <I2C3_Write>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	799b      	ldrb	r3, [r3, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d117      	bne.n	8002b08 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f9b1 	bl	8002e44 <TM_STMPE811_ReadX>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	885b      	ldrh	r3, [r3, #2]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fa04 	bl	8002f00 <TM_STMPE811_ReadY>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	805a      	strh	r2, [r3, #2]
 8002b06:	e048      	b.n	8002b9a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	799b      	ldrb	r3, [r3, #6]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d112      	bne.n	8002b36 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f995 	bl	8002e44 <TM_STMPE811_ReadX>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	885b      	ldrh	r3, [r3, #2]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9ea 	bl	8002f00 <TM_STMPE811_ReadY>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	805a      	strh	r2, [r3, #2]
 8002b34:	e031      	b.n	8002b9a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	799b      	ldrb	r3, [r3, #6]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d115      	bne.n	8002b6a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	885b      	ldrh	r3, [r3, #2]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f97e 	bl	8002e44 <TM_STMPE811_ReadX>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f9d3 	bl	8002f00 <TM_STMPE811_ReadY>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b60:	3301      	adds	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e017      	b.n	8002b9a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d113      	bne.n	8002b9a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f964 	bl	8002e44 <TM_STMPE811_ReadX>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f9b7 	bl	8002f00 <TM_STMPE811_ReadY>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	214b      	movs	r1, #75	@ 0x4b
 8002b9e:	2082      	movs	r0, #130	@ 0x82
 8002ba0:	f000 f8de 	bl	8002d60 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	214b      	movs	r1, #75	@ 0x4b
 8002ba8:	2082      	movs	r0, #130	@ 0x82
 8002baa:	f000 f8d9 	bl	8002d60 <I2C3_Write>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <enableInterruptSupportForTouch+0x5c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <enableInterruptSupportForTouch+0x5c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <enableInterruptSupportForTouch+0x5c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002bf2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <enableInterruptSupportForTouch+0x60>)
 8002c02:	f000 fcd3 	bl	80035ac <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c06:	2028      	movs	r0, #40	@ 0x28
 8002c08:	f7ff fe56 	bl	80028b8 <__NVIC_EnableIRQ>

}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020000 	.word	0x40020000

08002c1c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20025e44 	.word	0x20025e44

08002c3c <I2C3_Init>:

static void I2C3_Init()
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <I2C3_Init+0x6c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <I2C3_Init+0x6c>)
 8002c4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <I2C3_Init+0x6c>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <I2C3_Init+0x70>)
 8002c60:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <I2C3_Init+0x74>)
 8002c62:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <I2C3_Init+0x70>)
 8002c66:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <I2C3_Init+0x78>)
 8002c68:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <I2C3_Init+0x70>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002c70:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <I2C3_Init+0x70>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <I2C3_Init+0x70>)
 8002c78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c7c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <I2C3_Init+0x70>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <I2C3_Init+0x70>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002c8a:	4808      	ldr	r0, [pc, #32]	@ (8002cac <I2C3_Init+0x70>)
 8002c8c:	f000 ff60 	bl	8003b50 <HAL_I2C_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <I2C3_Init+0x5e>
    }
    return;
 8002c9e:	bf00      	nop
}
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	20025df0 	.word	0x20025df0
 8002cb0:	40005c00 	.word	0x40005c00
 8002cb4:	000186a0 	.word	0x000186a0

08002cb8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <I2C3_MspInit+0x9c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	4619      	mov	r1, r3
 8002d22:	480d      	ldr	r0, [pc, #52]	@ (8002d58 <I2C3_MspInit+0xa0>)
 8002d24:	f000 fc42 	bl	80035ac <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2e:	2312      	movs	r3, #18
 8002d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	4619      	mov	r1, r3
 8002d44:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <I2C3_MspInit+0xa4>)
 8002d46:	f000 fc31 	bl	80035ac <HAL_GPIO_Init>
    
}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020000 	.word	0x40020000

08002d60 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	717b      	strb	r3, [r7, #5]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002d72:	793b      	ldrb	r3, [r7, #4]
 8002d74:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d76:	797b      	ldrb	r3, [r7, #5]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	88f9      	ldrh	r1, [r7, #6]
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <I2C3_Write+0x48>)
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	f107 030f 	add.w	r3, r7, #15
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4807      	ldr	r0, [pc, #28]	@ (8002dac <I2C3_Write+0x4c>)
 8002d8e:	f001 f823 	bl	8003dd8 <HAL_I2C_Mem_Write>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <I2C3_Write+0x50>)
 8002d98:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d9a:	f7ff ff3f 	bl	8002c1c <verifyHAL_I2C_IS_OKAY>
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0003d090 	.word	0x0003d090
 8002dac:	20025df0 	.word	0x20025df0
 8002db0:	20025e44 	.word	0x20025e44

08002db4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	4603      	mov	r3, r0
 8002dbc:	603a      	str	r2, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	79bb      	ldrb	r3, [r7, #6]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <I2C3_Read+0x40>)
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4807      	ldr	r0, [pc, #28]	@ (8002df8 <I2C3_Read+0x44>)
 8002ddc:	f001 f8f6 	bl	8003fcc <HAL_I2C_Mem_Read>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <I2C3_Read+0x48>)
 8002de6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002de8:	f7ff ff18 	bl	8002c1c <verifyHAL_I2C_IS_OKAY>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0003d090 	.word	0x0003d090
 8002df8:	20025df0 	.word	0x20025df0
 8002dfc:	20025e44 	.word	0x20025e44

08002e00 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	603a      	str	r2, [r7, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	71bb      	strb	r3, [r7, #6]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	79bb      	ldrb	r3, [r7, #6]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <I2C3_MulitByteRead+0x3c>)
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	88bb      	ldrh	r3, [r7, #4]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <I2C3_MulitByteRead+0x40>)
 8002e2e:	f001 f8cd 	bl	8003fcc <HAL_I2C_Mem_Read>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0003d090 	.word	0x0003d090
 8002e40:	20025df0 	.word	0x20025df0

08002e44 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002e4e:	204d      	movs	r0, #77	@ 0x4d
 8002e50:	f7ff fe17 	bl	8002a82 <STMPE811_Read>
 8002e54:	4603      	mov	r3, r0
 8002e56:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002e58:	204e      	movs	r0, #78	@ 0x4e
 8002e5a:	f7ff fe12 	bl	8002a82 <STMPE811_Read>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002e62:	7a7b      	ldrb	r3, [r7, #9]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	7a3b      	ldrb	r3, [r7, #8]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e74:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	dc06      	bgt.n	8002e8a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002e82:	330c      	adds	r3, #12
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	81fb      	strh	r3, [r7, #14]
 8002e88:	e005      	b.n	8002e96 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002e90:	3308      	adds	r3, #8
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <TM_STMPE811_ReadX+0xb8>)
 8002e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002ea0:	441a      	add	r2, r3
 8002ea2:	10d2      	asrs	r2, r2, #3
 8002ea4:	17db      	asrs	r3, r3, #31
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eae:	2bef      	cmp	r3, #239	@ 0xef
 8002eb0:	dd02      	ble.n	8002eb8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002eb2:	23ef      	movs	r3, #239	@ 0xef
 8002eb4:	81fb      	strh	r3, [r7, #14]
 8002eb6:	e005      	b.n	8002ec4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002eb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da01      	bge.n	8002ec4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ec4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dd05      	ble.n	8002eda <TM_STMPE811_ReadX+0x96>
 8002ece:	89fa      	ldrh	r2, [r7, #14]
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	e004      	b.n	8002ee4 <TM_STMPE811_ReadX+0xa0>
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ee6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	dd01      	ble.n	8002ef2 <TM_STMPE811_ReadX+0xae>
        return val;
 8002eee:	89fb      	ldrh	r3, [r7, #14]
 8002ef0:	e000      	b.n	8002ef4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	88888889 	.word	0x88888889

08002f00 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002f0a:	204f      	movs	r0, #79	@ 0x4f
 8002f0c:	f7ff fdb9 	bl	8002a82 <STMPE811_Read>
 8002f10:	4603      	mov	r3, r0
 8002f12:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002f14:	2050      	movs	r0, #80	@ 0x50
 8002f16:	f7ff fdb4 	bl	8002a82 <STMPE811_Read>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f1e:	7a7b      	ldrb	r3, [r7, #9]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	7a3b      	ldrb	r3, [r7, #8]
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	@ (8002fa0 <TM_STMPE811_ReadY+0xa0>)
 8002f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002f40:	1052      	asrs	r2, r2, #1
 8002f42:	17db      	asrs	r3, r3, #31
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	dc02      	bgt.n	8002f56 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	81fb      	strh	r3, [r7, #14]
 8002f54:	e007      	b.n	8002f66 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f5e:	db02      	blt.n	8002f66 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002f60:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f64:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002f66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dd05      	ble.n	8002f7c <TM_STMPE811_ReadY+0x7c>
 8002f70:	89fa      	ldrh	r2, [r7, #14]
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	e004      	b.n	8002f86 <TM_STMPE811_ReadY+0x86>
 8002f7c:	89fb      	ldrh	r3, [r7, #14]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	dd01      	ble.n	8002f94 <TM_STMPE811_ReadY+0x94>
        return val;
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	e000      	b.n	8002f96 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002f94:	88fb      	ldrh	r3, [r7, #6]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2e8ba2e9 	.word	0x2e8ba2e9

08002fa4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e00a      	b.n	8002fda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	4601      	mov	r1, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	60ba      	str	r2, [r7, #8]
 8002fd0:	b2ca      	uxtb	r2, r1
 8002fd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dbf0      	blt.n	8002fc4 <_read+0x12>
  }

  return len;
 8002fe2:	687b      	ldr	r3, [r7, #4]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e009      	b.n	8003012 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	60ba      	str	r2, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	dbf1      	blt.n	8002ffe <_write+0x12>
  }
  return len;
 800301a:	687b      	ldr	r3, [r7, #4]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_close>:

int _close(int file)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800304c:	605a      	str	r2, [r3, #4]
  return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_isatty>:

int _isatty(int file)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <_sbrk+0x5c>)
 8003096:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <_sbrk+0x60>)
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <_sbrk+0x64>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <_sbrk+0x64>)
 80030aa:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <_sbrk+0x68>)
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <_sbrk+0x64>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d207      	bcs.n	80030cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030bc:	f003 fb30 	bl	8006720 <__errno>
 80030c0:	4603      	mov	r3, r0
 80030c2:	220c      	movs	r2, #12
 80030c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e009      	b.n	80030e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030cc:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <_sbrk+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030d2:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <_sbrk+0x64>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <_sbrk+0x64>)
 80030dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20030000 	.word	0x20030000
 80030ec:	00000400 	.word	0x00000400
 80030f0:	20025e48 	.word	0x20025e48
 80030f4:	20025fa0 	.word	0x20025fa0

080030f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <SystemInit+0x20>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <SystemInit+0x20>)
 8003104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800311c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003154 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003120:	f7ff ffea 	bl	80030f8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003124:	480c      	ldr	r0, [pc, #48]	@ (8003158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003126:	490d      	ldr	r1, [pc, #52]	@ (800315c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800312c:	e002      	b.n	8003134 <LoopCopyDataInit>

0800312e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003132:	3304      	adds	r3, #4

08003134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003138:	d3f9      	bcc.n	800312e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800313c:	4c0a      	ldr	r4, [pc, #40]	@ (8003168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003140:	e001      	b.n	8003146 <LoopFillZerobss>

08003142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003144:	3204      	adds	r2, #4

08003146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003148:	d3fb      	bcc.n	8003142 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800314a:	f003 faef 	bl	800672c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800314e:	f7ff f81e 	bl	800218e <main>
  bx  lr    
 8003152:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003154:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800315c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8003160:	0800844c 	.word	0x0800844c
  ldr r2, =_sbss
 8003164:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8003168:	20025f9c 	.word	0x20025f9c

0800316c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC_IRQHandler>
	...

08003170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0d      	ldr	r2, [pc, #52]	@ (80031b0 <HAL_Init+0x40>)
 800317a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800317e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003180:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_Init+0x40>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <HAL_Init+0x40>)
 8003186:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800318a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800318c:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_Init+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <HAL_Init+0x40>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003198:	2003      	movs	r0, #3
 800319a:	f000 f991 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800319e:	2000      	movs	r0, #0
 80031a0:	f000 f808 	bl	80031b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031a4:	f7ff f938 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023c00 	.word	0x40023c00

080031b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031bc:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_InitTick+0x54>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b12      	ldr	r3, [pc, #72]	@ (800320c <HAL_InitTick+0x58>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f9b7 	bl	8003546 <HAL_SYSTICK_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e00e      	b.n	8003200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b0f      	cmp	r3, #15
 80031e6:	d80a      	bhi.n	80031fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e8:	2200      	movs	r2, #0
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f000 f971 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031f4:	4a06      	ldr	r2, [pc, #24]	@ (8003210 <HAL_InitTick+0x5c>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200001fc 	.word	0x200001fc
 800320c:	20000204 	.word	0x20000204
 8003210:	20000200 	.word	0x20000200

08003214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_IncTick+0x20>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_IncTick+0x24>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4413      	add	r3, r2
 8003224:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_IncTick+0x24>)
 8003226:	6013      	str	r3, [r2, #0]
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000204 	.word	0x20000204
 8003238:	20025e4c 	.word	0x20025e4c

0800323c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return uwTick;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_GetTick+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20025e4c 	.word	0x20025e4c

08003254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff ffee 	bl	800323c <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d005      	beq.n	800327a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_Delay+0x44>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800327a:	bf00      	nop
 800327c:	f7ff ffde 	bl	800323c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d8f7      	bhi.n	800327c <HAL_Delay+0x28>
  {
  }
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000204 	.word	0x20000204

0800329c <__NVIC_SetPriorityGrouping>:
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ac:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ce:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60d3      	str	r3, [r2, #12]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_GetPriorityGrouping>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <__NVIC_GetPriorityGrouping+0x18>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0307 	and.w	r3, r3, #7
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_EnableIRQ>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0b      	blt.n	800332a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	@ (8003338 <__NVIC_EnableIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db12      	blt.n	8003374 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	490a      	ldr	r1, [pc, #40]	@ (8003380 <__NVIC_DisableIRQ+0x44>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	3320      	adds	r3, #32
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003368:	f3bf 8f4f 	dsb	sy
}
 800336c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800336e:	f3bf 8f6f 	isb	sy
}
 8003372:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0c      	blt.n	80033b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	@ (80033bc <__NVIC_ClearPendingIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	3360      	adds	r3, #96	@ 0x60
 80033ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	@ (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	@ (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	@ 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fee7 	bl	800329c <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff fefc 	bl	80032e4 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff feef 	bl	8003300 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff feff 	bl	800333c <__NVIC_DisableIRQ>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff94 	bl	800347c <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff09 	bl	8003384 <__NVIC_ClearPendingIRQ>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2201      	movs	r2, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003596:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <HAL_EXTI_ClearPending+0x2c>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6153      	str	r3, [r2, #20]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e177      	b.n	80038b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f040 8166 	bne.w	80038b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d005      	beq.n	80035fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d017      	beq.n	800369c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d123      	bne.n	80036f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80c0 	beq.w	80038b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	4a65      	ldr	r2, [pc, #404]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003740:	6453      	str	r3, [r2, #68]	@ 0x44
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_GPIO_Init+0x324>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374e:	4a61      	ldr	r2, [pc, #388]	@ (80038d4 <HAL_GPIO_Init+0x328>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <HAL_GPIO_Init+0x32c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_Init+0x23e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a57      	ldr	r2, [pc, #348]	@ (80038dc <HAL_GPIO_Init+0x330>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_GPIO_Init+0x23a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_GPIO_Init+0x334>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_Init+0x236>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a55      	ldr	r2, [pc, #340]	@ (80038e4 <HAL_GPIO_Init+0x338>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_Init+0x232>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a54      	ldr	r2, [pc, #336]	@ (80038e8 <HAL_GPIO_Init+0x33c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_Init+0x22e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a53      	ldr	r2, [pc, #332]	@ (80038ec <HAL_GPIO_Init+0x340>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a52      	ldr	r2, [pc, #328]	@ (80038f0 <HAL_GPIO_Init+0x344>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x226>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <HAL_GPIO_Init+0x348>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x222>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a50      	ldr	r2, [pc, #320]	@ (80038f8 <HAL_GPIO_Init+0x34c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x21e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4f      	ldr	r2, [pc, #316]	@ (80038fc <HAL_GPIO_Init+0x350>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x21a>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e012      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037c6:	230a      	movs	r3, #10
 80037c8:	e010      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ce:	2307      	movs	r3, #7
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	@ (80038d4 <HAL_GPIO_Init+0x328>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b3d      	ldr	r3, [pc, #244]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a34      	ldr	r2, [pc, #208]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b32      	ldr	r3, [pc, #200]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385e:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003882:	4a1f      	ldr	r2, [pc, #124]	@ (8003900 <HAL_GPIO_Init+0x354>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003888:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <HAL_GPIO_Init+0x354>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ac:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <HAL_GPIO_Init+0x354>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae84 	bls.w	80035c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40021400 	.word	0x40021400
 80038f0:	40021800 	.word	0x40021800
 80038f4:	40021c00 	.word	0x40021c00
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40022400 	.word	0x40022400
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e0d9      	b.n	8003ad4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003920:	2201      	movs	r2, #1
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	f040 80c9 	bne.w	8003ace <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800393c:	4a6b      	ldr	r2, [pc, #428]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a63      	ldr	r2, [pc, #396]	@ (8003af0 <HAL_GPIO_DeInit+0x1ec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d037      	beq.n	80039d6 <HAL_GPIO_DeInit+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a62      	ldr	r2, [pc, #392]	@ (8003af4 <HAL_GPIO_DeInit+0x1f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_GPIO_DeInit+0xce>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a61      	ldr	r2, [pc, #388]	@ (8003af8 <HAL_GPIO_DeInit+0x1f4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02b      	beq.n	80039ce <HAL_GPIO_DeInit+0xca>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a60      	ldr	r2, [pc, #384]	@ (8003afc <HAL_GPIO_DeInit+0x1f8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d025      	beq.n	80039ca <HAL_GPIO_DeInit+0xc6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a5f      	ldr	r2, [pc, #380]	@ (8003b00 <HAL_GPIO_DeInit+0x1fc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_GPIO_DeInit+0xc2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a5e      	ldr	r2, [pc, #376]	@ (8003b04 <HAL_GPIO_DeInit+0x200>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d019      	beq.n	80039c2 <HAL_GPIO_DeInit+0xbe>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_GPIO_DeInit+0x204>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_DeInit+0xba>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a5c      	ldr	r2, [pc, #368]	@ (8003b0c <HAL_GPIO_DeInit+0x208>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_DeInit+0xb6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_GPIO_DeInit+0x20c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_DeInit+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b14 <HAL_GPIO_DeInit+0x210>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_DeInit+0xae>
 80039ae:	2309      	movs	r3, #9
 80039b0:	e012      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039b2:	230a      	movs	r3, #10
 80039b4:	e010      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039b6:	2308      	movs	r3, #8
 80039b8:	e00e      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ba:	2307      	movs	r3, #7
 80039bc:	e00c      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039be:	2306      	movs	r3, #6
 80039c0:	e00a      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039c2:	2305      	movs	r3, #5
 80039c4:	e008      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e004      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_GPIO_DeInit+0xd4>
 80039d6:	2300      	movs	r3, #0
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	4093      	lsls	r3, r2
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d132      	bne.n	8003a4e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4949      	ldr	r1, [pc, #292]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	4946      	ldr	r1, [pc, #280]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a04:	4b44      	ldr	r3, [pc, #272]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	4942      	ldr	r1, [pc, #264]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	493f      	ldr	r1, [pc, #252]	@ (8003b18 <HAL_GPIO_DeInit+0x214>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a30:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	482a      	ldr	r0, [pc, #168]	@ (8003aec <HAL_GPIO_DeInit+0x1e8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	400a      	ands	r2, r1
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2103      	movs	r1, #3
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	08d2      	lsrs	r2, r2, #3
 8003a84:	4019      	ands	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3208      	adds	r2, #8
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2103      	movs	r1, #3
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	f67f af22 	bls.w	8003920 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020c00 	.word	0x40020c00
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40021400 	.word	0x40021400
 8003b08:	40021800 	.word	0x40021800
 8003b0c:	40021c00 	.word	0x40021c00
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022400 	.word	0x40022400
 8003b18:	40013c00 	.word	0x40013c00

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e12b      	b.n	8003dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe fc76 	bl	8002468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	@ 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f001 ff06 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a81      	ldr	r2, [pc, #516]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d807      	bhi.n	8003bd4 <HAL_I2C_Init+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a80      	ldr	r2, [pc, #512]	@ (8003dc8 <HAL_I2C_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e006      	b.n	8003be2 <HAL_I2C_Init+0x92>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dcc <HAL_I2C_Init+0x27c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0e7      	b.n	8003dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a78      	ldr	r2, [pc, #480]	@ (8003dd0 <HAL_I2C_Init+0x280>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a6a      	ldr	r2, [pc, #424]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <HAL_I2C_Init+0xd4>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	e009      	b.n	8003c38 <HAL_I2C_Init+0xe8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a69      	ldr	r2, [pc, #420]	@ (8003dd4 <HAL_I2C_Init+0x284>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	3301      	adds	r3, #1
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	495c      	ldr	r1, [pc, #368]	@ (8003dc4 <HAL_I2C_Init+0x274>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d819      	bhi.n	8003c8c <HAL_I2C_Init+0x13c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e59      	subs	r1, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_I2C_Init+0x138>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e59      	subs	r1, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	e051      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e04f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <HAL_I2C_Init+0x168>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_I2C_Init+0x18e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Init+0x196>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <HAL_I2C_Init+0x1bc>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e58      	subs	r0, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	440b      	add	r3, r1
 8003cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6809      	ldr	r1, [r1, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6911      	ldr	r1, [r2, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	000186a0 	.word	0x000186a0
 8003dc8:	001e847f 	.word	0x001e847f
 8003dcc:	003d08ff 	.word	0x003d08ff
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	460b      	mov	r3, r1
 8003dec:	813b      	strh	r3, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df2:	f7ff fa23 	bl	800323c <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	f040 80d9 	bne.w	8003fb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2319      	movs	r3, #25
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	496d      	ldr	r1, [pc, #436]	@ (8003fc4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fc8b 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0cc      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x56>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0c5      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d007      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2221      	movs	r2, #33	@ 0x21
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2240      	movs	r2, #64	@ 0x40
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc8 <HAL_I2C_Mem_Write+0x1f0>)
 8003e94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e96:	88f8      	ldrh	r0, [r7, #6]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	8979      	ldrh	r1, [r7, #10]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fac2 	bl	8004430 <I2C_RequestMemoryWrite>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d052      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e081      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fd50 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06b      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <HAL_I2C_Mem_Write+0x180>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1aa      	bne.n	8003eb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fd43 	bl	80049f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e016      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	00100002 	.word	0x00100002
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	@ 0x30
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	817b      	strh	r3, [r7, #10]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	813b      	strh	r3, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe6:	f7ff f929 	bl	800323c <HAL_GetTick>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	f040 8214 	bne.w	8004422 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2319      	movs	r3, #25
 8004000:	2201      	movs	r2, #1
 8004002:	497b      	ldr	r1, [pc, #492]	@ (80041f0 <HAL_I2C_Mem_Read+0x224>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fb91 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	e207      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_I2C_Mem_Read+0x56>
 800401e:	2302      	movs	r3, #2
 8004020:	e200      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d007      	beq.n	8004048 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	@ 0x22
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2240      	movs	r2, #64	@ 0x40
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a5b      	ldr	r2, [pc, #364]	@ (80041f4 <HAL_I2C_Mem_Read+0x228>)
 8004088:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408a:	88f8      	ldrh	r0, [r7, #6]
 800408c:	893a      	ldrh	r2, [r7, #8]
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4603      	mov	r3, r0
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fa5e 	bl	800455c <I2C_RequestMemoryRead>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1bc      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d113      	bne.n	80040da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e190      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e170      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	e150      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004170:	e144      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	2b03      	cmp	r3, #3
 8004178:	f200 80f1 	bhi.w	800435e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	2b01      	cmp	r3, #1
 8004182:	d123      	bne.n	80041cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fc79 	bl	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e145      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ca:	e117      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d14e      	bne.n	8004272 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2200      	movs	r2, #0
 80041dc:	4906      	ldr	r1, [pc, #24]	@ (80041f8 <HAL_I2C_Mem_Read+0x22c>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 faa4 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e11a      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
 80041ee:	bf00      	nop
 80041f0:	00100002 	.word	0x00100002
 80041f4:	ffff0000 	.word	0xffff0000
 80041f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004270:	e0c4      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2200      	movs	r2, #0
 800427a:	496c      	ldr	r1, [pc, #432]	@ (800442c <HAL_I2C_Mem_Read+0x460>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fa55 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cb      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	2200      	movs	r2, #0
 80042d6:	4955      	ldr	r1, [pc, #340]	@ (800442c <HAL_I2C_Mem_Read+0x460>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa27 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e09d      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800435c:	e04e      	b.n	80043fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fb8c 	bl	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e058      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d124      	bne.n	80043fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f aeb6 	bne.w	8004172 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010004 	.word	0x00010004

08004430 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2200      	movs	r2, #0
 8004462:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f960 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004480:	d103      	bne.n	800448a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e05f      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800449c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	492d      	ldr	r1, [pc, #180]	@ (8004558 <I2C_RequestMemoryWrite+0x128>)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f9bb 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04c      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa46 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e02b      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	e021      	b.n	800454c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	b29b      	uxth	r3, r3
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa20 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e005      	b.n	800454e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004542:	893b      	ldrh	r3, [r7, #8]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	00010002 	.word	0x00010002

0800455c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004584:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004594:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	2200      	movs	r2, #0
 800459e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f8c2 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045bc:	d103      	bne.n	80045c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0aa      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ca:	897b      	ldrh	r3, [r7, #10]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	4952      	ldr	r1, [pc, #328]	@ (8004728 <I2C_RequestMemoryRead+0x1cc>)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f91d 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e097      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f9a8 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e076      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]
 8004642:	e021      	b.n	8004688 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b29b      	uxth	r3, r3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	6a39      	ldr	r1, [r7, #32]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f982 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e050      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468a:	6a39      	ldr	r1, [r7, #32]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f967 	bl	8004960 <I2C_WaitOnTXEFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2b04      	cmp	r3, #4
 800469e:	d107      	bne.n	80046b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e035      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f82b 	bl	800472c <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ea:	d103      	bne.n	80046f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e013      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046f8:	897b      	ldrh	r3, [r7, #10]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	4906      	ldr	r1, [pc, #24]	@ (8004728 <I2C_RequestMemoryRead+0x1cc>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f886 	bl	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	00010002 	.word	0x00010002

0800472c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473c:	e048      	b.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d044      	beq.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fe fd79 	bl	800323c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d139      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10d      	bne.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	e00c      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d116      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e023      	b.n	8004818 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	43da      	mvns	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	e00c      	b.n	8004810 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	429a      	cmp	r2, r3
 8004814:	d093      	beq.n	800473e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482e:	e071      	b.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d123      	bne.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e067      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d041      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fe fcd4 	bl	800323c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d136      	bne.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e00b      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e021      	b.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10c      	bne.n	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	43da      	mvns	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e00b      	b.n	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f47f af6d 	bne.w	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8e3 	bl	8004b3a <I2C_IsAcknowledgeFailed>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e034      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d028      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004986:	f7fe fc59 	bl	800323c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d302      	bcc.n	800499c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11d      	bne.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d016      	beq.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d1c3      	bne.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f89b 	bl	8004b3a <I2C_IsAcknowledgeFailed>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e034      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d028      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fc11 	bl	800323c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11d      	bne.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d016      	beq.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d1c3      	bne.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a8c:	e049      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d119      	bne.n	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e030      	b.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fe fbb4 	bl	800323c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af0:	2b40      	cmp	r3, #64	@ 0x40
 8004af2:	d016      	beq.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e007      	b.n	8004b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d1ae      	bne.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b50:	d11b      	bne.n	8004b8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0bf      	b.n	8004d2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fcbc 	bl	800253c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004bda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bf0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_LTDC_Init+0x19c>)
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68d9      	ldr	r1, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b3e      	ldr	r3, [pc, #248]	@ (8004d34 <HAL_LTDC_Init+0x19c>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68d9      	ldr	r1, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6919      	ldr	r1, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b33      	ldr	r3, [pc, #204]	@ (8004d34 <HAL_LTDC_Init+0x19c>)
 8004c68:	400b      	ands	r3, r1
 8004c6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6919      	ldr	r1, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6959      	ldr	r1, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b27      	ldr	r3, [pc, #156]	@ (8004d34 <HAL_LTDC_Init+0x19c>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6959      	ldr	r1, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0206 	orr.w	r2, r2, #6
 8004d06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	f000f800 	.word	0xf000f800

08004d38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d38:	b5b0      	push	{r4, r5, r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_LTDC_ConfigLayer+0x1a>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e02c      	b.n	8004dac <HAL_LTDC_ConfigLayer+0x74>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2134      	movs	r1, #52	@ 0x34
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4614      	mov	r4, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f811 	bl	8004db4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bdb0      	pop	{r4, r5, r7, pc}

08004db4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	@ 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	4413      	add	r3, r2
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	01db      	lsls	r3, r3, #7
 8004de0:	4413      	add	r3, r2
 8004de2:	3384      	adds	r3, #132	@ 0x84
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	01d2      	lsls	r2, r2, #7
 8004df0:	440a      	add	r2, r1
 8004df2:	3284      	adds	r2, #132	@ 0x84
 8004df4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004df8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	01db      	lsls	r3, r3, #7
 8004e18:	440b      	add	r3, r1
 8004e1a:	3384      	adds	r3, #132	@ 0x84
 8004e1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e32:	4413      	add	r3, r2
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	01db      	lsls	r3, r3, #7
 8004e42:	4413      	add	r3, r2
 8004e44:	3384      	adds	r3, #132	@ 0x84
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	01d2      	lsls	r2, r2, #7
 8004e52:	440a      	add	r2, r1
 8004e54:	3284      	adds	r2, #132	@ 0x84
 8004e56:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e6a:	4413      	add	r3, r2
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	01db      	lsls	r3, r3, #7
 8004e78:	440b      	add	r3, r1
 8004e7a:	3384      	adds	r3, #132	@ 0x84
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	01db      	lsls	r3, r3, #7
 8004e8e:	4413      	add	r3, r2
 8004e90:	3384      	adds	r3, #132	@ 0x84
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	01d2      	lsls	r2, r2, #7
 8004e9e:	440a      	add	r2, r1
 8004ea0:	3284      	adds	r2, #132	@ 0x84
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	01db      	lsls	r3, r3, #7
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3384      	adds	r3, #132	@ 0x84
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	01db      	lsls	r3, r3, #7
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3384      	adds	r3, #132	@ 0x84
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	01db      	lsls	r3, r3, #7
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3384      	adds	r3, #132	@ 0x84
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f04:	461a      	mov	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	01db      	lsls	r3, r3, #7
 8004f18:	440b      	add	r3, r1
 8004f1a:	3384      	adds	r3, #132	@ 0x84
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	01db      	lsls	r3, r3, #7
 8004f2e:	4413      	add	r3, r2
 8004f30:	3384      	adds	r3, #132	@ 0x84
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	01d2      	lsls	r2, r2, #7
 8004f3e:	440a      	add	r2, r1
 8004f40:	3284      	adds	r2, #132	@ 0x84
 8004f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	3384      	adds	r3, #132	@ 0x84
 8004f56:	461a      	mov	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	01db      	lsls	r3, r3, #7
 8004f68:	4413      	add	r3, r2
 8004f6a:	3384      	adds	r3, #132	@ 0x84
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	4611      	mov	r1, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	01d2      	lsls	r2, r2, #7
 8004f78:	440a      	add	r2, r1
 8004f7a:	3284      	adds	r2, #132	@ 0x84
 8004f7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	6809      	ldr	r1, [r1, #0]
 8004f92:	4608      	mov	r0, r1
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	01c9      	lsls	r1, r1, #7
 8004f98:	4401      	add	r1, r0
 8004f9a:	3184      	adds	r1, #132	@ 0x84
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4413      	add	r3, r2
 8004fac:	3384      	adds	r3, #132	@ 0x84
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	01db      	lsls	r3, r3, #7
 8004fba:	4413      	add	r3, r2
 8004fbc:	3384      	adds	r3, #132	@ 0x84
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	01db      	lsls	r3, r3, #7
 8004fce:	4413      	add	r3, r2
 8004fd0:	3384      	adds	r3, #132	@ 0x84
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	e01b      	b.n	8005020 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d102      	bne.n	8004ff6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e014      	b.n	8005020 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d00b      	beq.n	8005016 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005002:	2b02      	cmp	r3, #2
 8005004:	d007      	beq.n	8005016 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800500a:	2b03      	cmp	r3, #3
 800500c:	d003      	beq.n	8005016 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005012:	2b07      	cmp	r3, #7
 8005014:	d102      	bne.n	800501c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005016:	2302      	movs	r3, #2
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e001      	b.n	8005020 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	01db      	lsls	r3, r3, #7
 800502a:	4413      	add	r3, r2
 800502c:	3384      	adds	r3, #132	@ 0x84
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4611      	mov	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	01d2      	lsls	r2, r2, #7
 800503a:	440a      	add	r2, r1
 800503c:	3284      	adds	r2, #132	@ 0x84
 800503e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1acb      	subs	r3, r1, r3
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6809      	ldr	r1, [r1, #0]
 8005066:	4608      	mov	r0, r1
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	01c9      	lsls	r1, r1, #7
 800506c:	4401      	add	r1, r0
 800506e:	3184      	adds	r1, #132	@ 0x84
 8005070:	4313      	orrs	r3, r2
 8005072:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	4413      	add	r3, r2
 8005080:	3384      	adds	r3, #132	@ 0x84
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	4611      	mov	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	01d2      	lsls	r2, r2, #7
 800508e:	440a      	add	r2, r1
 8005090:	3284      	adds	r2, #132	@ 0x84
 8005092:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	01db      	lsls	r3, r3, #7
 80050a6:	4413      	add	r3, r2
 80050a8:	3384      	adds	r3, #132	@ 0x84
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	01db      	lsls	r3, r3, #7
 80050bc:	4413      	add	r3, r2
 80050be:	3384      	adds	r3, #132	@ 0x84
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4611      	mov	r1, r2
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	01d2      	lsls	r2, r2, #7
 80050cc:	440a      	add	r2, r1
 80050ce:	3284      	adds	r2, #132	@ 0x84
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6013      	str	r3, [r2, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3724      	adds	r7, #36	@ 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e267      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d075      	beq.n	80051ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005102:	4b88      	ldr	r3, [pc, #544]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b04      	cmp	r3, #4
 800510c:	d00c      	beq.n	8005128 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510e:	4b85      	ldr	r3, [pc, #532]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005116:	2b08      	cmp	r3, #8
 8005118:	d112      	bne.n	8005140 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511a:	4b82      	ldr	r3, [pc, #520]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005126:	d10b      	bne.n	8005140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005128:	4b7e      	ldr	r3, [pc, #504]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d05b      	beq.n	80051ec <HAL_RCC_OscConfig+0x108>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d157      	bne.n	80051ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e242      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005148:	d106      	bne.n	8005158 <HAL_RCC_OscConfig+0x74>
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	e01d      	b.n	8005194 <HAL_RCC_OscConfig+0xb0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x98>
 8005162:	4b70      	ldr	r3, [pc, #448]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6f      	ldr	r2, [pc, #444]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b6d      	ldr	r3, [pc, #436]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6c      	ldr	r2, [pc, #432]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0xb0>
 800517c:	4b69      	ldr	r3, [pc, #420]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a68      	ldr	r2, [pc, #416]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b66      	ldr	r3, [pc, #408]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a65      	ldr	r2, [pc, #404]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fe f84e 	bl	800323c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fe f84a 	bl	800323c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e207      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0xc0>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fe f83a 	bl	800323c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fe f836 	bl	800323c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	@ 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e1f3      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051de:	4b51      	ldr	r3, [pc, #324]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0xe8>
 80051ea:	e000      	b.n	80051ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d063      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005206:	4b47      	ldr	r3, [pc, #284]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800520e:	2b08      	cmp	r3, #8
 8005210:	d11c      	bne.n	800524c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005212:	4b44      	ldr	r3, [pc, #272]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d116      	bne.n	800524c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	4b41      	ldr	r3, [pc, #260]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_RCC_OscConfig+0x152>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e1c7      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005236:	4b3b      	ldr	r3, [pc, #236]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4937      	ldr	r1, [pc, #220]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	e03a      	b.n	80052c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005254:	4b34      	ldr	r3, [pc, #208]	@ (8005328 <HAL_RCC_OscConfig+0x244>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fd ffef 	bl	800323c <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005262:	f7fd ffeb 	bl	800323c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e1a8      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005274:	4b2b      	ldr	r3, [pc, #172]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005280:	4b28      	ldr	r3, [pc, #160]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4925      	ldr	r1, [pc, #148]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
 8005294:	e015      	b.n	80052c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005296:	4b24      	ldr	r3, [pc, #144]	@ (8005328 <HAL_RCC_OscConfig+0x244>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fd ffce 	bl	800323c <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a4:	f7fd ffca 	bl	800323c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e187      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d036      	beq.n	800533c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d6:	4b15      	ldr	r3, [pc, #84]	@ (800532c <HAL_RCC_OscConfig+0x248>)
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fd ffae 	bl	800323c <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fd ffaa 	bl	800323c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e167      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCC_OscConfig+0x240>)
 80052f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x200>
 8005302:	e01b      	b.n	800533c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005304:	4b09      	ldr	r3, [pc, #36]	@ (800532c <HAL_RCC_OscConfig+0x248>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fd ff97 	bl	800323c <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005310:	e00e      	b.n	8005330 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005312:	f7fd ff93 	bl	800323c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d907      	bls.n	8005330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e150      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
 8005324:	40023800 	.word	0x40023800
 8005328:	42470000 	.word	0x42470000
 800532c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005330:	4b88      	ldr	r3, [pc, #544]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ea      	bne.n	8005312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8097 	beq.w	8005478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534a:	2300      	movs	r3, #0
 800534c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534e:	4b81      	ldr	r3, [pc, #516]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	4b7d      	ldr	r3, [pc, #500]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	4a7c      	ldr	r2, [pc, #496]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005368:	6413      	str	r3, [r2, #64]	@ 0x40
 800536a:	4b7a      	ldr	r3, [pc, #488]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537a:	4b77      	ldr	r3, [pc, #476]	@ (8005558 <HAL_RCC_OscConfig+0x474>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d118      	bne.n	80053b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005386:	4b74      	ldr	r3, [pc, #464]	@ (8005558 <HAL_RCC_OscConfig+0x474>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a73      	ldr	r2, [pc, #460]	@ (8005558 <HAL_RCC_OscConfig+0x474>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005392:	f7fd ff53 	bl	800323c <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539a:	f7fd ff4f 	bl	800323c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e10c      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005558 <HAL_RCC_OscConfig+0x474>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x2ea>
 80053c0:	4b64      	ldr	r3, [pc, #400]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c4:	4a63      	ldr	r2, [pc, #396]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80053cc:	e01c      	b.n	8005408 <HAL_RCC_OscConfig+0x324>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x30c>
 80053d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053da:	4a5e      	ldr	r2, [pc, #376]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053dc:	f043 0304 	orr.w	r3, r3, #4
 80053e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0x324>
 80053f0:	4b58      	ldr	r3, [pc, #352]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	4a57      	ldr	r2, [pc, #348]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053fc:	4b55      	ldr	r3, [pc, #340]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005400:	4a54      	ldr	r2, [pc, #336]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005402:	f023 0304 	bic.w	r3, r3, #4
 8005406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fd ff14 	bl	800323c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fd ff10 	bl	800323c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0cb      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542e:	4b49      	ldr	r3, [pc, #292]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ee      	beq.n	8005418 <HAL_RCC_OscConfig+0x334>
 800543a:	e014      	b.n	8005466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543c:	f7fd fefe 	bl	800323c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fd fefa 	bl	800323c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0b5      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ee      	bne.n	8005444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d105      	bne.n	8005478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546c:	4b39      	ldr	r3, [pc, #228]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	4a38      	ldr	r2, [pc, #224]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a1 	beq.w	80055c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005482:	4b34      	ldr	r3, [pc, #208]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	d05c      	beq.n	8005548 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d141      	bne.n	800551a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005496:	4b31      	ldr	r3, [pc, #196]	@ (800555c <HAL_RCC_OscConfig+0x478>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd fece 	bl	800323c <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fd feca 	bl	800323c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e087      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b6:	4b27      	ldr	r3, [pc, #156]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	3b01      	subs	r3, #1
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	061b      	lsls	r3, r3, #24
 80054e6:	491b      	ldr	r1, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ec:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <HAL_RCC_OscConfig+0x478>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f2:	f7fd fea3 	bl	800323c <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fa:	f7fd fe9f 	bl	800323c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e05c      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550c:	4b11      	ldr	r3, [pc, #68]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x416>
 8005518:	e054      	b.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_RCC_OscConfig+0x478>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fd fe8c 	bl	800323c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fd fe88 	bl	800323c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e045      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <HAL_RCC_OscConfig+0x470>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x444>
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e038      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
 8005554:	40023800 	.word	0x40023800
 8005558:	40007000 	.word	0x40007000
 800555c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005560:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <HAL_RCC_OscConfig+0x4ec>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d028      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d121      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d11a      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	3b01      	subs	r3, #1
 80055aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023800 	.word	0x40023800

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0cc      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b68      	ldr	r3, [pc, #416]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90c      	bls.n	8005610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b65      	ldr	r3, [pc, #404]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b63      	ldr	r3, [pc, #396]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b8      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d020      	beq.n	800565e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005628:	4b59      	ldr	r3, [pc, #356]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a58      	ldr	r2, [pc, #352]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005640:	4b53      	ldr	r3, [pc, #332]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a52      	ldr	r2, [pc, #328]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800564a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b50      	ldr	r3, [pc, #320]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	494d      	ldr	r1, [pc, #308]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d044      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	4b47      	ldr	r3, [pc, #284]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d119      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d003      	beq.n	8005692 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568e:	2b03      	cmp	r3, #3
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	4b3f      	ldr	r3, [pc, #252]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e06f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e067      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b2:	4b37      	ldr	r3, [pc, #220]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 0203 	bic.w	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4934      	ldr	r1, [pc, #208]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c4:	f7fd fdba 	bl	800323c <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056cc:	f7fd fdb6 	bl	800323c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e04f      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 020c 	and.w	r2, r3, #12
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1eb      	bne.n	80056cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b25      	ldr	r3, [pc, #148]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d20c      	bcs.n	800571c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b22      	ldr	r3, [pc, #136]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570a:	4b20      	ldr	r3, [pc, #128]	@ (800578c <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d001      	beq.n	800571c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e032      	b.n	8005782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005728:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4916      	ldr	r1, [pc, #88]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005746:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	490e      	ldr	r1, [pc, #56]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800575a:	f000 f821 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 800575e:	4602      	mov	r2, r0
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	490a      	ldr	r1, [pc, #40]	@ (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 800576c:	5ccb      	ldrb	r3, [r1, r3]
 800576e:	fa22 f303 	lsr.w	r3, r2, r3
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005776:	4b09      	ldr	r3, [pc, #36]	@ (800579c <HAL_RCC_ClockConfig+0x1c8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd fd1a 	bl	80031b4 <HAL_InitTick>

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023c00 	.word	0x40023c00
 8005790:	40023800 	.word	0x40023800
 8005794:	080083f0 	.word	0x080083f0
 8005798:	200001fc 	.word	0x200001fc
 800579c:	20000200 	.word	0x20000200

080057a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a4:	b094      	sub	sp, #80	@ 0x50
 80057a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b8:	4b79      	ldr	r3, [pc, #484]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d00d      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x40>
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	f200 80e1 	bhi.w	800598c <HAL_RCC_GetSysClockFreq+0x1ec>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d003      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x3a>
 80057d2:	e0db      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d4:	4b73      	ldr	r3, [pc, #460]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057d8:	e0db      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057da:	4b73      	ldr	r3, [pc, #460]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057de:	e0d8      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e0:	4b6f      	ldr	r3, [pc, #444]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ea:	4b6d      	ldr	r3, [pc, #436]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d063      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f6:	4b6a      	ldr	r3, [pc, #424]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	2200      	movs	r2, #0
 80057fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005800:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005808:	633b      	str	r3, [r7, #48]	@ 0x30
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
 800580e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005812:	4622      	mov	r2, r4
 8005814:	462b      	mov	r3, r5
 8005816:	f04f 0000 	mov.w	r0, #0
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	0159      	lsls	r1, r3, #5
 8005820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005824:	0150      	lsls	r0, r2, #5
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4621      	mov	r1, r4
 800582c:	1a51      	subs	r1, r2, r1
 800582e:	6139      	str	r1, [r7, #16]
 8005830:	4629      	mov	r1, r5
 8005832:	eb63 0301 	sbc.w	r3, r3, r1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005844:	4659      	mov	r1, fp
 8005846:	018b      	lsls	r3, r1, #6
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584e:	4651      	mov	r1, sl
 8005850:	018a      	lsls	r2, r1, #6
 8005852:	4651      	mov	r1, sl
 8005854:	ebb2 0801 	subs.w	r8, r2, r1
 8005858:	4659      	mov	r1, fp
 800585a:	eb63 0901 	sbc.w	r9, r3, r1
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800586a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800586e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005872:	4690      	mov	r8, r2
 8005874:	4699      	mov	r9, r3
 8005876:	4623      	mov	r3, r4
 8005878:	eb18 0303 	adds.w	r3, r8, r3
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	462b      	mov	r3, r5
 8005880:	eb49 0303 	adc.w	r3, r9, r3
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005892:	4629      	mov	r1, r5
 8005894:	024b      	lsls	r3, r1, #9
 8005896:	4621      	mov	r1, r4
 8005898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800589c:	4621      	mov	r1, r4
 800589e:	024a      	lsls	r2, r1, #9
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	2200      	movs	r2, #0
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058b0:	f7fa fcee 	bl	8000290 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058bc:	e058      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058be:	4b38      	ldr	r3, [pc, #224]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	2200      	movs	r2, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	4611      	mov	r1, r2
 80058ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058d8:	4642      	mov	r2, r8
 80058da:	464b      	mov	r3, r9
 80058dc:	f04f 0000 	mov.w	r0, #0
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	0159      	lsls	r1, r3, #5
 80058e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ea:	0150      	lsls	r0, r2, #5
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4641      	mov	r1, r8
 80058f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80058f6:	4649      	mov	r1, r9
 80058f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800590c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005910:	ebb2 040a 	subs.w	r4, r2, sl
 8005914:	eb63 050b 	sbc.w	r5, r3, fp
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	00eb      	lsls	r3, r5, #3
 8005922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005926:	00e2      	lsls	r2, r4, #3
 8005928:	4614      	mov	r4, r2
 800592a:	461d      	mov	r5, r3
 800592c:	4643      	mov	r3, r8
 800592e:	18e3      	adds	r3, r4, r3
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	464b      	mov	r3, r9
 8005934:	eb45 0303 	adc.w	r3, r5, r3
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005946:	4629      	mov	r1, r5
 8005948:	028b      	lsls	r3, r1, #10
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005950:	4621      	mov	r1, r4
 8005952:	028a      	lsls	r2, r1, #10
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800595a:	2200      	movs	r2, #0
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	61fa      	str	r2, [r7, #28]
 8005960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005964:	f7fa fc94 	bl	8000290 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	3301      	adds	r3, #1
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800598e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005994:	4618      	mov	r0, r3
 8005996:	3750      	adds	r7, #80	@ 0x50
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	007a1200 	.word	0x007a1200

080059ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	200001fc 	.word	0x200001fc

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059c8:	f7ff fff0 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	@ (80059e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	08008400 	.word	0x08008400

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d075      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a20:	4b91      	ldr	r3, [pc, #580]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a26:	f7fd fc09 	bl	800323c <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fd fc05 	bl	800323c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e189      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a40:	4b8a      	ldr	r3, [pc, #552]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	019a      	lsls	r2, r3, #6
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	071b      	lsls	r3, r3, #28
 8005a64:	4981      	ldr	r1, [pc, #516]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01f      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a78:	4b7c      	ldr	r3, [pc, #496]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a7e:	0f1b      	lsrs	r3, r3, #28
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	019a      	lsls	r2, r3, #6
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	431a      	orrs	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	071b      	lsls	r3, r3, #28
 8005a98:	4974      	ldr	r1, [pc, #464]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005aa0:	4b72      	ldr	r3, [pc, #456]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa6:	f023 021f 	bic.w	r2, r3, #31
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	496e      	ldr	r1, [pc, #440]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	019a      	lsls	r2, r3, #6
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	061b      	lsls	r3, r3, #24
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	071b      	lsls	r3, r3, #28
 8005ad8:	4964      	ldr	r1, [pc, #400]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ae0:	4b61      	ldr	r3, [pc, #388]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae6:	f7fd fba9 	bl	800323c <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aee:	f7fd fba5 	bl	800323c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e129      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b00:	4b5a      	ldr	r3, [pc, #360]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d079      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b24:	4b52      	ldr	r3, [pc, #328]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2a:	f7fd fb87 	bl	800323c <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b30:	e008      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b32:	f7fd fb83 	bl	800323c <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e107      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b44:	4b49      	ldr	r3, [pc, #292]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b50:	d0ef      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b5e:	4b43      	ldr	r3, [pc, #268]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	0f1b      	lsrs	r3, r3, #28
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	019a      	lsls	r2, r3, #6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	071b      	lsls	r3, r3, #28
 8005b7e:	493b      	ldr	r1, [pc, #236]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b86:	4b39      	ldr	r3, [pc, #228]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b8c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	4934      	ldr	r1, [pc, #208]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bac:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	0e1b      	lsrs	r3, r3, #24
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	019a      	lsls	r2, r3, #6
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	061b      	lsls	r3, r3, #24
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	071b      	lsls	r3, r3, #28
 8005bcc:	4927      	ldr	r1, [pc, #156]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bd4:	4b25      	ldr	r3, [pc, #148]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	4922      	ldr	r1, [pc, #136]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bea:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bf0:	f7fd fb24 	bl	800323c <HAL_GetTick>
 8005bf4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bf8:	f7fd fb20 	bl	800323c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0a4      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c0a:	4b18      	ldr	r3, [pc, #96]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c16:	d1ef      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 808b 	beq.w	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a0b      	ldr	r2, [pc, #44]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4e:	f7fd faf5 	bl	800323c <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c54:	e010      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c56:	f7fd faf1 	bl	800323c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d909      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e075      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c68:	42470068 	.word	0x42470068
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470070 	.word	0x42470070
 8005c74:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c78:	4b38      	ldr	r3, [pc, #224]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0e8      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c84:	4b36      	ldr	r3, [pc, #216]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d028      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005caa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cac:	4b2d      	ldr	r3, [pc, #180]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cb8:	4a29      	ldr	r2, [pc, #164]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cbe:	4b28      	ldr	r3, [pc, #160]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d114      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fd fab7 	bl	800323c <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fd fab3 	bl	800323c <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e035      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0ee      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d00:	d10d      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d02:	4b17      	ldr	r3, [pc, #92]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d16:	4912      	ldr	r1, [pc, #72]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d1e:	4b10      	ldr	r3, [pc, #64]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4a0f      	ldr	r2, [pc, #60]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	490a      	ldr	r1, [pc, #40]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005d50:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	40023800 	.word	0x40023800
 8005d64:	42470e40 	.word	0x42470e40
 8005d68:	424711e0 	.word	0x424711e0

08005d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07b      	b.n	8005e76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d8e:	d009      	beq.n	8005da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	61da      	str	r2, [r3, #28]
 8005d96:	e005      	b.n	8005da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc fce4 	bl	800278c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	ea42 0103 	orr.w	r1, r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	f003 0104 	and.w	r1, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	f003 0210 	and.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e01a      	b.n	8005ec6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fc fcb7 	bl	800281c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b088      	sub	sp, #32
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ede:	f7fd f9ad 	bl	800323c <HAL_GetTick>
 8005ee2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e12a      	b.n	800614e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x36>
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e122      	b.n	800614e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_SPI_Transmit+0x48>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e11b      	b.n	800614e <HAL_SPI_Transmit+0x280>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f64:	d10f      	bne.n	8005f86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d007      	beq.n	8005fa4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fac:	d152      	bne.n	8006054 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_Transmit+0xee>
 8005fb6:	8b7b      	ldrh	r3, [r7, #26]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d145      	bne.n	8006048 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fe0:	e032      	b.n	8006048 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d112      	bne.n	8006016 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006014:	e018      	b.n	8006048 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006016:	f7fd f911 	bl	800323c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d803      	bhi.n	800602e <HAL_SPI_Transmit+0x160>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d102      	bne.n	8006034 <HAL_SPI_Transmit+0x166>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e082      	b.n	800614e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1c7      	bne.n	8005fe2 <HAL_SPI_Transmit+0x114>
 8006052:	e053      	b.n	80060fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Transmit+0x194>
 800605c:	8b7b      	ldrh	r3, [r7, #26]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d147      	bne.n	80060f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006088:	e033      	b.n	80060f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	d113      	bne.n	80060c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060be:	e018      	b.n	80060f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c0:	f7fd f8bc 	bl	800323c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d803      	bhi.n	80060d8 <HAL_SPI_Transmit+0x20a>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Transmit+0x210>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e02d      	b.n	800614e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1c6      	bne.n	800608a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f8bf 	bl	8006284 <SPI_EndRxTxTransaction>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800614c:	2300      	movs	r3, #0
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006164:	b2db      	uxtb	r3, r3
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006184:	f7fd f85a 	bl	800323c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4413      	add	r3, r2
 8006192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006194:	f7fd f852 	bl	800323c <HAL_GetTick>
 8006198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800619a:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	015b      	lsls	r3, r3, #5
 80061a0:	0d1b      	lsrs	r3, r3, #20
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061aa:	e054      	b.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d050      	beq.n	8006256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061b4:	f7fd f842 	bl	800323c <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d902      	bls.n	80061ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d13d      	bne.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e2:	d111      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ec:	d004      	beq.n	80061f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f6:	d107      	bne.n	8006208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006210:	d10f      	bne.n	8006232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e017      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	3b01      	subs	r3, #1
 8006254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d19b      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200001fc 	.word	0x200001fc

08006284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2201      	movs	r2, #1
 8006298:	2102      	movs	r1, #2
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff ff6a 	bl	8006174 <SPI_WaitFlagStateUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e032      	b.n	800631c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006324 <SPI_EndRxTxTransaction+0xa0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <SPI_EndRxTxTransaction+0xa4>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	0d5b      	lsrs	r3, r3, #21
 80062c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062d4:	d112      	bne.n	80062fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	2180      	movs	r1, #128	@ 0x80
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff ff47 	bl	8006174 <SPI_WaitFlagStateUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e00f      	b.n	800631c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	3b01      	subs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	2b80      	cmp	r3, #128	@ 0x80
 8006314:	d0f2      	beq.n	80062fc <SPI_EndRxTxTransaction+0x78>
 8006316:	e000      	b.n	800631a <SPI_EndRxTxTransaction+0x96>
        break;
 8006318:	bf00      	nop
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	200001fc 	.word	0x200001fc
 8006328:	165e9f81 	.word	0x165e9f81

0800632c <std>:
 800632c:	2300      	movs	r3, #0
 800632e:	b510      	push	{r4, lr}
 8006330:	4604      	mov	r4, r0
 8006332:	e9c0 3300 	strd	r3, r3, [r0]
 8006336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800633a:	6083      	str	r3, [r0, #8]
 800633c:	8181      	strh	r1, [r0, #12]
 800633e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006340:	81c2      	strh	r2, [r0, #14]
 8006342:	6183      	str	r3, [r0, #24]
 8006344:	4619      	mov	r1, r3
 8006346:	2208      	movs	r2, #8
 8006348:	305c      	adds	r0, #92	@ 0x5c
 800634a:	f000 f99b 	bl	8006684 <memset>
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <std+0x58>)
 8006350:	6263      	str	r3, [r4, #36]	@ 0x24
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <std+0x5c>)
 8006354:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006356:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <std+0x60>)
 8006358:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <std+0x64>)
 800635c:	6323      	str	r3, [r4, #48]	@ 0x30
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <std+0x68>)
 8006360:	6224      	str	r4, [r4, #32]
 8006362:	429c      	cmp	r4, r3
 8006364:	d006      	beq.n	8006374 <std+0x48>
 8006366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800636a:	4294      	cmp	r4, r2
 800636c:	d002      	beq.n	8006374 <std+0x48>
 800636e:	33d0      	adds	r3, #208	@ 0xd0
 8006370:	429c      	cmp	r4, r3
 8006372:	d105      	bne.n	8006380 <std+0x54>
 8006374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800637c:	f000 b9fa 	b.w	8006774 <__retarget_lock_init_recursive>
 8006380:	bd10      	pop	{r4, pc}
 8006382:	bf00      	nop
 8006384:	080064d5 	.word	0x080064d5
 8006388:	080064f7 	.word	0x080064f7
 800638c:	0800652f 	.word	0x0800652f
 8006390:	08006553 	.word	0x08006553
 8006394:	20025e50 	.word	0x20025e50

08006398 <stdio_exit_handler>:
 8006398:	4a02      	ldr	r2, [pc, #8]	@ (80063a4 <stdio_exit_handler+0xc>)
 800639a:	4903      	ldr	r1, [pc, #12]	@ (80063a8 <stdio_exit_handler+0x10>)
 800639c:	4803      	ldr	r0, [pc, #12]	@ (80063ac <stdio_exit_handler+0x14>)
 800639e:	f000 b869 	b.w	8006474 <_fwalk_sglue>
 80063a2:	bf00      	nop
 80063a4:	20000208 	.word	0x20000208
 80063a8:	08007031 	.word	0x08007031
 80063ac:	20000218 	.word	0x20000218

080063b0 <cleanup_stdio>:
 80063b0:	6841      	ldr	r1, [r0, #4]
 80063b2:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <cleanup_stdio+0x34>)
 80063b4:	4299      	cmp	r1, r3
 80063b6:	b510      	push	{r4, lr}
 80063b8:	4604      	mov	r4, r0
 80063ba:	d001      	beq.n	80063c0 <cleanup_stdio+0x10>
 80063bc:	f000 fe38 	bl	8007030 <_fflush_r>
 80063c0:	68a1      	ldr	r1, [r4, #8]
 80063c2:	4b09      	ldr	r3, [pc, #36]	@ (80063e8 <cleanup_stdio+0x38>)
 80063c4:	4299      	cmp	r1, r3
 80063c6:	d002      	beq.n	80063ce <cleanup_stdio+0x1e>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fe31 	bl	8007030 <_fflush_r>
 80063ce:	68e1      	ldr	r1, [r4, #12]
 80063d0:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <cleanup_stdio+0x3c>)
 80063d2:	4299      	cmp	r1, r3
 80063d4:	d004      	beq.n	80063e0 <cleanup_stdio+0x30>
 80063d6:	4620      	mov	r0, r4
 80063d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063dc:	f000 be28 	b.w	8007030 <_fflush_r>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	bf00      	nop
 80063e4:	20025e50 	.word	0x20025e50
 80063e8:	20025eb8 	.word	0x20025eb8
 80063ec:	20025f20 	.word	0x20025f20

080063f0 <global_stdio_init.part.0>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <global_stdio_init.part.0+0x30>)
 80063f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006424 <global_stdio_init.part.0+0x34>)
 80063f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006428 <global_stdio_init.part.0+0x38>)
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	4620      	mov	r0, r4
 80063fc:	2200      	movs	r2, #0
 80063fe:	2104      	movs	r1, #4
 8006400:	f7ff ff94 	bl	800632c <std>
 8006404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006408:	2201      	movs	r2, #1
 800640a:	2109      	movs	r1, #9
 800640c:	f7ff ff8e 	bl	800632c <std>
 8006410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006414:	2202      	movs	r2, #2
 8006416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641a:	2112      	movs	r1, #18
 800641c:	f7ff bf86 	b.w	800632c <std>
 8006420:	20025f88 	.word	0x20025f88
 8006424:	20025e50 	.word	0x20025e50
 8006428:	08006399 	.word	0x08006399

0800642c <__sfp_lock_acquire>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__sfp_lock_acquire+0x8>)
 800642e:	f000 b9a2 	b.w	8006776 <__retarget_lock_acquire_recursive>
 8006432:	bf00      	nop
 8006434:	20025f91 	.word	0x20025f91

08006438 <__sfp_lock_release>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__sfp_lock_release+0x8>)
 800643a:	f000 b99d 	b.w	8006778 <__retarget_lock_release_recursive>
 800643e:	bf00      	nop
 8006440:	20025f91 	.word	0x20025f91

08006444 <__sinit>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4604      	mov	r4, r0
 8006448:	f7ff fff0 	bl	800642c <__sfp_lock_acquire>
 800644c:	6a23      	ldr	r3, [r4, #32]
 800644e:	b11b      	cbz	r3, 8006458 <__sinit+0x14>
 8006450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006454:	f7ff bff0 	b.w	8006438 <__sfp_lock_release>
 8006458:	4b04      	ldr	r3, [pc, #16]	@ (800646c <__sinit+0x28>)
 800645a:	6223      	str	r3, [r4, #32]
 800645c:	4b04      	ldr	r3, [pc, #16]	@ (8006470 <__sinit+0x2c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f5      	bne.n	8006450 <__sinit+0xc>
 8006464:	f7ff ffc4 	bl	80063f0 <global_stdio_init.part.0>
 8006468:	e7f2      	b.n	8006450 <__sinit+0xc>
 800646a:	bf00      	nop
 800646c:	080063b1 	.word	0x080063b1
 8006470:	20025f88 	.word	0x20025f88

08006474 <_fwalk_sglue>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	4607      	mov	r7, r0
 800647a:	4688      	mov	r8, r1
 800647c:	4614      	mov	r4, r2
 800647e:	2600      	movs	r6, #0
 8006480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006484:	f1b9 0901 	subs.w	r9, r9, #1
 8006488:	d505      	bpl.n	8006496 <_fwalk_sglue+0x22>
 800648a:	6824      	ldr	r4, [r4, #0]
 800648c:	2c00      	cmp	r4, #0
 800648e:	d1f7      	bne.n	8006480 <_fwalk_sglue+0xc>
 8006490:	4630      	mov	r0, r6
 8006492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d907      	bls.n	80064ac <_fwalk_sglue+0x38>
 800649c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064a0:	3301      	adds	r3, #1
 80064a2:	d003      	beq.n	80064ac <_fwalk_sglue+0x38>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4638      	mov	r0, r7
 80064a8:	47c0      	blx	r8
 80064aa:	4306      	orrs	r6, r0
 80064ac:	3568      	adds	r5, #104	@ 0x68
 80064ae:	e7e9      	b.n	8006484 <_fwalk_sglue+0x10>

080064b0 <iprintf>:
 80064b0:	b40f      	push	{r0, r1, r2, r3}
 80064b2:	b507      	push	{r0, r1, r2, lr}
 80064b4:	4906      	ldr	r1, [pc, #24]	@ (80064d0 <iprintf+0x20>)
 80064b6:	ab04      	add	r3, sp, #16
 80064b8:	6808      	ldr	r0, [r1, #0]
 80064ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80064be:	6881      	ldr	r1, [r0, #8]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	f000 fa8b 	bl	80069dc <_vfiprintf_r>
 80064c6:	b003      	add	sp, #12
 80064c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064cc:	b004      	add	sp, #16
 80064ce:	4770      	bx	lr
 80064d0:	20000214 	.word	0x20000214

080064d4 <__sread>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	460c      	mov	r4, r1
 80064d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064dc:	f000 f8fc 	bl	80066d8 <_read_r>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	bfab      	itete	ge
 80064e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064e6:	89a3      	ldrhlt	r3, [r4, #12]
 80064e8:	181b      	addge	r3, r3, r0
 80064ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ee:	bfac      	ite	ge
 80064f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064f2:	81a3      	strhlt	r3, [r4, #12]
 80064f4:	bd10      	pop	{r4, pc}

080064f6 <__swrite>:
 80064f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fa:	461f      	mov	r7, r3
 80064fc:	898b      	ldrh	r3, [r1, #12]
 80064fe:	05db      	lsls	r3, r3, #23
 8006500:	4605      	mov	r5, r0
 8006502:	460c      	mov	r4, r1
 8006504:	4616      	mov	r6, r2
 8006506:	d505      	bpl.n	8006514 <__swrite+0x1e>
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	2302      	movs	r3, #2
 800650e:	2200      	movs	r2, #0
 8006510:	f000 f8d0 	bl	80066b4 <_lseek_r>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800651a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	4632      	mov	r2, r6
 8006522:	463b      	mov	r3, r7
 8006524:	4628      	mov	r0, r5
 8006526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	f000 b8e7 	b.w	80066fc <_write_r>

0800652e <__sseek>:
 800652e:	b510      	push	{r4, lr}
 8006530:	460c      	mov	r4, r1
 8006532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006536:	f000 f8bd 	bl	80066b4 <_lseek_r>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	bf15      	itete	ne
 8006540:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800654a:	81a3      	strheq	r3, [r4, #12]
 800654c:	bf18      	it	ne
 800654e:	81a3      	strhne	r3, [r4, #12]
 8006550:	bd10      	pop	{r4, pc}

08006552 <__sclose>:
 8006552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006556:	f000 b89d 	b.w	8006694 <_close_r>

0800655a <__swbuf_r>:
 800655a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655c:	460e      	mov	r6, r1
 800655e:	4614      	mov	r4, r2
 8006560:	4605      	mov	r5, r0
 8006562:	b118      	cbz	r0, 800656c <__swbuf_r+0x12>
 8006564:	6a03      	ldr	r3, [r0, #32]
 8006566:	b90b      	cbnz	r3, 800656c <__swbuf_r+0x12>
 8006568:	f7ff ff6c 	bl	8006444 <__sinit>
 800656c:	69a3      	ldr	r3, [r4, #24]
 800656e:	60a3      	str	r3, [r4, #8]
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	071a      	lsls	r2, r3, #28
 8006574:	d501      	bpl.n	800657a <__swbuf_r+0x20>
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	b943      	cbnz	r3, 800658c <__swbuf_r+0x32>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f82b 	bl	80065d8 <__swsetup_r>
 8006582:	b118      	cbz	r0, 800658c <__swbuf_r+0x32>
 8006584:	f04f 37ff 	mov.w	r7, #4294967295
 8006588:	4638      	mov	r0, r7
 800658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	6922      	ldr	r2, [r4, #16]
 8006590:	1a98      	subs	r0, r3, r2
 8006592:	6963      	ldr	r3, [r4, #20]
 8006594:	b2f6      	uxtb	r6, r6
 8006596:	4283      	cmp	r3, r0
 8006598:	4637      	mov	r7, r6
 800659a:	dc05      	bgt.n	80065a8 <__swbuf_r+0x4e>
 800659c:	4621      	mov	r1, r4
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fd46 	bl	8007030 <_fflush_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1ed      	bne.n	8006584 <__swbuf_r+0x2a>
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60a3      	str	r3, [r4, #8]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	6022      	str	r2, [r4, #0]
 80065b4:	701e      	strb	r6, [r3, #0]
 80065b6:	6962      	ldr	r2, [r4, #20]
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d004      	beq.n	80065c8 <__swbuf_r+0x6e>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	07db      	lsls	r3, r3, #31
 80065c2:	d5e1      	bpl.n	8006588 <__swbuf_r+0x2e>
 80065c4:	2e0a      	cmp	r6, #10
 80065c6:	d1df      	bne.n	8006588 <__swbuf_r+0x2e>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 fd30 	bl	8007030 <_fflush_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d0d9      	beq.n	8006588 <__swbuf_r+0x2e>
 80065d4:	e7d6      	b.n	8006584 <__swbuf_r+0x2a>
	...

080065d8 <__swsetup_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <__swsetup_r+0xa8>)
 80065dc:	4605      	mov	r5, r0
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	460c      	mov	r4, r1
 80065e2:	b118      	cbz	r0, 80065ec <__swsetup_r+0x14>
 80065e4:	6a03      	ldr	r3, [r0, #32]
 80065e6:	b90b      	cbnz	r3, 80065ec <__swsetup_r+0x14>
 80065e8:	f7ff ff2c 	bl	8006444 <__sinit>
 80065ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d422      	bmi.n	800663a <__swsetup_r+0x62>
 80065f4:	06da      	lsls	r2, r3, #27
 80065f6:	d407      	bmi.n	8006608 <__swsetup_r+0x30>
 80065f8:	2209      	movs	r2, #9
 80065fa:	602a      	str	r2, [r5, #0]
 80065fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	f04f 30ff 	mov.w	r0, #4294967295
 8006606:	e033      	b.n	8006670 <__swsetup_r+0x98>
 8006608:	0758      	lsls	r0, r3, #29
 800660a:	d512      	bpl.n	8006632 <__swsetup_r+0x5a>
 800660c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800660e:	b141      	cbz	r1, 8006622 <__swsetup_r+0x4a>
 8006610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006614:	4299      	cmp	r1, r3
 8006616:	d002      	beq.n	800661e <__swsetup_r+0x46>
 8006618:	4628      	mov	r0, r5
 800661a:	f000 f8bd 	bl	8006798 <_free_r>
 800661e:	2300      	movs	r3, #0
 8006620:	6363      	str	r3, [r4, #52]	@ 0x34
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	2300      	movs	r3, #0
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	f043 0308 	orr.w	r3, r3, #8
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	b94b      	cbnz	r3, 8006652 <__swsetup_r+0x7a>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006648:	d003      	beq.n	8006652 <__swsetup_r+0x7a>
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f000 fd3d 	bl	80070cc <__smakebuf_r>
 8006652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006656:	f013 0201 	ands.w	r2, r3, #1
 800665a:	d00a      	beq.n	8006672 <__swsetup_r+0x9a>
 800665c:	2200      	movs	r2, #0
 800665e:	60a2      	str	r2, [r4, #8]
 8006660:	6962      	ldr	r2, [r4, #20]
 8006662:	4252      	negs	r2, r2
 8006664:	61a2      	str	r2, [r4, #24]
 8006666:	6922      	ldr	r2, [r4, #16]
 8006668:	b942      	cbnz	r2, 800667c <__swsetup_r+0xa4>
 800666a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800666e:	d1c5      	bne.n	80065fc <__swsetup_r+0x24>
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	0799      	lsls	r1, r3, #30
 8006674:	bf58      	it	pl
 8006676:	6962      	ldrpl	r2, [r4, #20]
 8006678:	60a2      	str	r2, [r4, #8]
 800667a:	e7f4      	b.n	8006666 <__swsetup_r+0x8e>
 800667c:	2000      	movs	r0, #0
 800667e:	e7f7      	b.n	8006670 <__swsetup_r+0x98>
 8006680:	20000214 	.word	0x20000214

08006684 <memset>:
 8006684:	4402      	add	r2, r0
 8006686:	4603      	mov	r3, r0
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <memset+0xa>
 800668c:	4770      	bx	lr
 800668e:	f803 1b01 	strb.w	r1, [r3], #1
 8006692:	e7f9      	b.n	8006688 <memset+0x4>

08006694 <_close_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d06      	ldr	r5, [pc, #24]	@ (80066b0 <_close_r+0x1c>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	f7fc fcc0 	bl	8003024 <_close>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_close_r+0x1a>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_close_r+0x1a>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20025f8c 	.word	0x20025f8c

080066b4 <_lseek_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	@ (80066d4 <_lseek_r+0x20>)
 80066b8:	4604      	mov	r4, r0
 80066ba:	4608      	mov	r0, r1
 80066bc:	4611      	mov	r1, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f7fc fcd5 	bl	8003072 <_lseek>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_lseek_r+0x1e>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_lseek_r+0x1e>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	20025f8c 	.word	0x20025f8c

080066d8 <_read_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d07      	ldr	r5, [pc, #28]	@ (80066f8 <_read_r+0x20>)
 80066dc:	4604      	mov	r4, r0
 80066de:	4608      	mov	r0, r1
 80066e0:	4611      	mov	r1, r2
 80066e2:	2200      	movs	r2, #0
 80066e4:	602a      	str	r2, [r5, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f7fc fc63 	bl	8002fb2 <_read>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_read_r+0x1e>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_read_r+0x1e>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20025f8c 	.word	0x20025f8c

080066fc <_write_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	@ (800671c <_write_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fc fc6e 	bl	8002fec <_write>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_write_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_write_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20025f8c 	.word	0x20025f8c

08006720 <__errno>:
 8006720:	4b01      	ldr	r3, [pc, #4]	@ (8006728 <__errno+0x8>)
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000214 	.word	0x20000214

0800672c <__libc_init_array>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4d0d      	ldr	r5, [pc, #52]	@ (8006764 <__libc_init_array+0x38>)
 8006730:	4c0d      	ldr	r4, [pc, #52]	@ (8006768 <__libc_init_array+0x3c>)
 8006732:	1b64      	subs	r4, r4, r5
 8006734:	10a4      	asrs	r4, r4, #2
 8006736:	2600      	movs	r6, #0
 8006738:	42a6      	cmp	r6, r4
 800673a:	d109      	bne.n	8006750 <__libc_init_array+0x24>
 800673c:	4d0b      	ldr	r5, [pc, #44]	@ (800676c <__libc_init_array+0x40>)
 800673e:	4c0c      	ldr	r4, [pc, #48]	@ (8006770 <__libc_init_array+0x44>)
 8006740:	f000 fd32 	bl	80071a8 <_init>
 8006744:	1b64      	subs	r4, r4, r5
 8006746:	10a4      	asrs	r4, r4, #2
 8006748:	2600      	movs	r6, #0
 800674a:	42a6      	cmp	r6, r4
 800674c:	d105      	bne.n	800675a <__libc_init_array+0x2e>
 800674e:	bd70      	pop	{r4, r5, r6, pc}
 8006750:	f855 3b04 	ldr.w	r3, [r5], #4
 8006754:	4798      	blx	r3
 8006756:	3601      	adds	r6, #1
 8006758:	e7ee      	b.n	8006738 <__libc_init_array+0xc>
 800675a:	f855 3b04 	ldr.w	r3, [r5], #4
 800675e:	4798      	blx	r3
 8006760:	3601      	adds	r6, #1
 8006762:	e7f2      	b.n	800674a <__libc_init_array+0x1e>
 8006764:	08008444 	.word	0x08008444
 8006768:	08008444 	.word	0x08008444
 800676c:	08008444 	.word	0x08008444
 8006770:	08008448 	.word	0x08008448

08006774 <__retarget_lock_init_recursive>:
 8006774:	4770      	bx	lr

08006776 <__retarget_lock_acquire_recursive>:
 8006776:	4770      	bx	lr

08006778 <__retarget_lock_release_recursive>:
 8006778:	4770      	bx	lr

0800677a <memcpy>:
 800677a:	440a      	add	r2, r1
 800677c:	4291      	cmp	r1, r2
 800677e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006782:	d100      	bne.n	8006786 <memcpy+0xc>
 8006784:	4770      	bx	lr
 8006786:	b510      	push	{r4, lr}
 8006788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800678c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006790:	4291      	cmp	r1, r2
 8006792:	d1f9      	bne.n	8006788 <memcpy+0xe>
 8006794:	bd10      	pop	{r4, pc}
	...

08006798 <_free_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4605      	mov	r5, r0
 800679c:	2900      	cmp	r1, #0
 800679e:	d041      	beq.n	8006824 <_free_r+0x8c>
 80067a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a4:	1f0c      	subs	r4, r1, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfb8      	it	lt
 80067aa:	18e4      	addlt	r4, r4, r3
 80067ac:	f000 f8e0 	bl	8006970 <__malloc_lock>
 80067b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006828 <_free_r+0x90>)
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	b933      	cbnz	r3, 80067c4 <_free_r+0x2c>
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	6014      	str	r4, [r2, #0]
 80067ba:	4628      	mov	r0, r5
 80067bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c0:	f000 b8dc 	b.w	800697c <__malloc_unlock>
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d908      	bls.n	80067da <_free_r+0x42>
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	1821      	adds	r1, r4, r0
 80067cc:	428b      	cmp	r3, r1
 80067ce:	bf01      	itttt	eq
 80067d0:	6819      	ldreq	r1, [r3, #0]
 80067d2:	685b      	ldreq	r3, [r3, #4]
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	e7ed      	b.n	80067b6 <_free_r+0x1e>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x4c>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x42>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1850      	adds	r0, r2, r1
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x6c>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	4401      	add	r1, r0
 80067f0:	1850      	adds	r0, r2, r1
 80067f2:	4283      	cmp	r3, r0
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1e0      	bne.n	80067ba <_free_r+0x22>
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	4408      	add	r0, r1
 8006800:	6010      	str	r0, [r2, #0]
 8006802:	e7da      	b.n	80067ba <_free_r+0x22>
 8006804:	d902      	bls.n	800680c <_free_r+0x74>
 8006806:	230c      	movs	r3, #12
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	e7d6      	b.n	80067ba <_free_r+0x22>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	1821      	adds	r1, r4, r0
 8006810:	428b      	cmp	r3, r1
 8006812:	bf04      	itt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	bf04      	itt	eq
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7ca      	b.n	80067ba <_free_r+0x22>
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	bf00      	nop
 8006828:	20025f98 	.word	0x20025f98

0800682c <sbrk_aligned>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4e0f      	ldr	r6, [pc, #60]	@ (800686c <sbrk_aligned+0x40>)
 8006830:	460c      	mov	r4, r1
 8006832:	6831      	ldr	r1, [r6, #0]
 8006834:	4605      	mov	r5, r0
 8006836:	b911      	cbnz	r1, 800683e <sbrk_aligned+0x12>
 8006838:	f000 fca6 	bl	8007188 <_sbrk_r>
 800683c:	6030      	str	r0, [r6, #0]
 800683e:	4621      	mov	r1, r4
 8006840:	4628      	mov	r0, r5
 8006842:	f000 fca1 	bl	8007188 <_sbrk_r>
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d103      	bne.n	8006852 <sbrk_aligned+0x26>
 800684a:	f04f 34ff 	mov.w	r4, #4294967295
 800684e:	4620      	mov	r0, r4
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	1cc4      	adds	r4, r0, #3
 8006854:	f024 0403 	bic.w	r4, r4, #3
 8006858:	42a0      	cmp	r0, r4
 800685a:	d0f8      	beq.n	800684e <sbrk_aligned+0x22>
 800685c:	1a21      	subs	r1, r4, r0
 800685e:	4628      	mov	r0, r5
 8006860:	f000 fc92 	bl	8007188 <_sbrk_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d1f2      	bne.n	800684e <sbrk_aligned+0x22>
 8006868:	e7ef      	b.n	800684a <sbrk_aligned+0x1e>
 800686a:	bf00      	nop
 800686c:	20025f94 	.word	0x20025f94

08006870 <_malloc_r>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	1ccd      	adds	r5, r1, #3
 8006876:	f025 0503 	bic.w	r5, r5, #3
 800687a:	3508      	adds	r5, #8
 800687c:	2d0c      	cmp	r5, #12
 800687e:	bf38      	it	cc
 8006880:	250c      	movcc	r5, #12
 8006882:	2d00      	cmp	r5, #0
 8006884:	4606      	mov	r6, r0
 8006886:	db01      	blt.n	800688c <_malloc_r+0x1c>
 8006888:	42a9      	cmp	r1, r5
 800688a:	d904      	bls.n	8006896 <_malloc_r+0x26>
 800688c:	230c      	movs	r3, #12
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	2000      	movs	r0, #0
 8006892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800696c <_malloc_r+0xfc>
 800689a:	f000 f869 	bl	8006970 <__malloc_lock>
 800689e:	f8d8 3000 	ldr.w	r3, [r8]
 80068a2:	461c      	mov	r4, r3
 80068a4:	bb44      	cbnz	r4, 80068f8 <_malloc_r+0x88>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ffbf 	bl	800682c <sbrk_aligned>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	4604      	mov	r4, r0
 80068b2:	d158      	bne.n	8006966 <_malloc_r+0xf6>
 80068b4:	f8d8 4000 	ldr.w	r4, [r8]
 80068b8:	4627      	mov	r7, r4
 80068ba:	2f00      	cmp	r7, #0
 80068bc:	d143      	bne.n	8006946 <_malloc_r+0xd6>
 80068be:	2c00      	cmp	r4, #0
 80068c0:	d04b      	beq.n	800695a <_malloc_r+0xea>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	4639      	mov	r1, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	eb04 0903 	add.w	r9, r4, r3
 80068cc:	f000 fc5c 	bl	8007188 <_sbrk_r>
 80068d0:	4581      	cmp	r9, r0
 80068d2:	d142      	bne.n	800695a <_malloc_r+0xea>
 80068d4:	6821      	ldr	r1, [r4, #0]
 80068d6:	1a6d      	subs	r5, r5, r1
 80068d8:	4629      	mov	r1, r5
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ffa6 	bl	800682c <sbrk_aligned>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d03a      	beq.n	800695a <_malloc_r+0xea>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	442b      	add	r3, r5
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	f8d8 3000 	ldr.w	r3, [r8]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	bb62      	cbnz	r2, 800694c <_malloc_r+0xdc>
 80068f2:	f8c8 7000 	str.w	r7, [r8]
 80068f6:	e00f      	b.n	8006918 <_malloc_r+0xa8>
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	1b52      	subs	r2, r2, r5
 80068fc:	d420      	bmi.n	8006940 <_malloc_r+0xd0>
 80068fe:	2a0b      	cmp	r2, #11
 8006900:	d917      	bls.n	8006932 <_malloc_r+0xc2>
 8006902:	1961      	adds	r1, r4, r5
 8006904:	42a3      	cmp	r3, r4
 8006906:	6025      	str	r5, [r4, #0]
 8006908:	bf18      	it	ne
 800690a:	6059      	strne	r1, [r3, #4]
 800690c:	6863      	ldr	r3, [r4, #4]
 800690e:	bf08      	it	eq
 8006910:	f8c8 1000 	streq.w	r1, [r8]
 8006914:	5162      	str	r2, [r4, r5]
 8006916:	604b      	str	r3, [r1, #4]
 8006918:	4630      	mov	r0, r6
 800691a:	f000 f82f 	bl	800697c <__malloc_unlock>
 800691e:	f104 000b 	add.w	r0, r4, #11
 8006922:	1d23      	adds	r3, r4, #4
 8006924:	f020 0007 	bic.w	r0, r0, #7
 8006928:	1ac2      	subs	r2, r0, r3
 800692a:	bf1c      	itt	ne
 800692c:	1a1b      	subne	r3, r3, r0
 800692e:	50a3      	strne	r3, [r4, r2]
 8006930:	e7af      	b.n	8006892 <_malloc_r+0x22>
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	42a3      	cmp	r3, r4
 8006936:	bf0c      	ite	eq
 8006938:	f8c8 2000 	streq.w	r2, [r8]
 800693c:	605a      	strne	r2, [r3, #4]
 800693e:	e7eb      	b.n	8006918 <_malloc_r+0xa8>
 8006940:	4623      	mov	r3, r4
 8006942:	6864      	ldr	r4, [r4, #4]
 8006944:	e7ae      	b.n	80068a4 <_malloc_r+0x34>
 8006946:	463c      	mov	r4, r7
 8006948:	687f      	ldr	r7, [r7, #4]
 800694a:	e7b6      	b.n	80068ba <_malloc_r+0x4a>
 800694c:	461a      	mov	r2, r3
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	42a3      	cmp	r3, r4
 8006952:	d1fb      	bne.n	800694c <_malloc_r+0xdc>
 8006954:	2300      	movs	r3, #0
 8006956:	6053      	str	r3, [r2, #4]
 8006958:	e7de      	b.n	8006918 <_malloc_r+0xa8>
 800695a:	230c      	movs	r3, #12
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f80c 	bl	800697c <__malloc_unlock>
 8006964:	e794      	b.n	8006890 <_malloc_r+0x20>
 8006966:	6005      	str	r5, [r0, #0]
 8006968:	e7d6      	b.n	8006918 <_malloc_r+0xa8>
 800696a:	bf00      	nop
 800696c:	20025f98 	.word	0x20025f98

08006970 <__malloc_lock>:
 8006970:	4801      	ldr	r0, [pc, #4]	@ (8006978 <__malloc_lock+0x8>)
 8006972:	f7ff bf00 	b.w	8006776 <__retarget_lock_acquire_recursive>
 8006976:	bf00      	nop
 8006978:	20025f90 	.word	0x20025f90

0800697c <__malloc_unlock>:
 800697c:	4801      	ldr	r0, [pc, #4]	@ (8006984 <__malloc_unlock+0x8>)
 800697e:	f7ff befb 	b.w	8006778 <__retarget_lock_release_recursive>
 8006982:	bf00      	nop
 8006984:	20025f90 	.word	0x20025f90

08006988 <__sfputc_r>:
 8006988:	6893      	ldr	r3, [r2, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	b410      	push	{r4}
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	da08      	bge.n	80069a6 <__sfputc_r+0x1e>
 8006994:	6994      	ldr	r4, [r2, #24]
 8006996:	42a3      	cmp	r3, r4
 8006998:	db01      	blt.n	800699e <__sfputc_r+0x16>
 800699a:	290a      	cmp	r1, #10
 800699c:	d103      	bne.n	80069a6 <__sfputc_r+0x1e>
 800699e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a2:	f7ff bdda 	b.w	800655a <__swbuf_r>
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	1c58      	adds	r0, r3, #1
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	7019      	strb	r1, [r3, #0]
 80069ae:	4608      	mov	r0, r1
 80069b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <__sfputs_r>:
 80069b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	460f      	mov	r7, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	18d5      	adds	r5, r2, r3
 80069c0:	42ac      	cmp	r4, r5
 80069c2:	d101      	bne.n	80069c8 <__sfputs_r+0x12>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e007      	b.n	80069d8 <__sfputs_r+0x22>
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	463a      	mov	r2, r7
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffda 	bl	8006988 <__sfputc_r>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d1f3      	bne.n	80069c0 <__sfputs_r+0xa>
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069dc <_vfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	460d      	mov	r5, r1
 80069e2:	b09d      	sub	sp, #116	@ 0x74
 80069e4:	4614      	mov	r4, r2
 80069e6:	4698      	mov	r8, r3
 80069e8:	4606      	mov	r6, r0
 80069ea:	b118      	cbz	r0, 80069f4 <_vfiprintf_r+0x18>
 80069ec:	6a03      	ldr	r3, [r0, #32]
 80069ee:	b90b      	cbnz	r3, 80069f4 <_vfiprintf_r+0x18>
 80069f0:	f7ff fd28 	bl	8006444 <__sinit>
 80069f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d405      	bmi.n	8006a06 <_vfiprintf_r+0x2a>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	059a      	lsls	r2, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_vfiprintf_r+0x2a>
 8006a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a02:	f7ff feb8 	bl	8006776 <__retarget_lock_acquire_recursive>
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	071b      	lsls	r3, r3, #28
 8006a0a:	d501      	bpl.n	8006a10 <_vfiprintf_r+0x34>
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	b99b      	cbnz	r3, 8006a38 <_vfiprintf_r+0x5c>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff fde0 	bl	80065d8 <__swsetup_r>
 8006a18:	b170      	cbz	r0, 8006a38 <_vfiprintf_r+0x5c>
 8006a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a1c:	07dc      	lsls	r4, r3, #31
 8006a1e:	d504      	bpl.n	8006a2a <_vfiprintf_r+0x4e>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b01d      	add	sp, #116	@ 0x74
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	0598      	lsls	r0, r3, #22
 8006a2e:	d4f7      	bmi.n	8006a20 <_vfiprintf_r+0x44>
 8006a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a32:	f7ff fea1 	bl	8006778 <__retarget_lock_release_recursive>
 8006a36:	e7f3      	b.n	8006a20 <_vfiprintf_r+0x44>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a46:	2330      	movs	r3, #48	@ 0x30
 8006a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bf8 <_vfiprintf_r+0x21c>
 8006a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a50:	f04f 0901 	mov.w	r9, #1
 8006a54:	4623      	mov	r3, r4
 8006a56:	469a      	mov	sl, r3
 8006a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a5c:	b10a      	cbz	r2, 8006a62 <_vfiprintf_r+0x86>
 8006a5e:	2a25      	cmp	r2, #37	@ 0x25
 8006a60:	d1f9      	bne.n	8006a56 <_vfiprintf_r+0x7a>
 8006a62:	ebba 0b04 	subs.w	fp, sl, r4
 8006a66:	d00b      	beq.n	8006a80 <_vfiprintf_r+0xa4>
 8006a68:	465b      	mov	r3, fp
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7ff ffa1 	bl	80069b6 <__sfputs_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	f000 80a7 	beq.w	8006bc8 <_vfiprintf_r+0x1ec>
 8006a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a7c:	445a      	add	r2, fp
 8006a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 809f 	beq.w	8006bc8 <_vfiprintf_r+0x1ec>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a94:	f10a 0a01 	add.w	sl, sl, #1
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	9307      	str	r3, [sp, #28]
 8006a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aa2:	4654      	mov	r4, sl
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aaa:	4853      	ldr	r0, [pc, #332]	@ (8006bf8 <_vfiprintf_r+0x21c>)
 8006aac:	f7f9 fba0 	bl	80001f0 <memchr>
 8006ab0:	9a04      	ldr	r2, [sp, #16]
 8006ab2:	b9d8      	cbnz	r0, 8006aec <_vfiprintf_r+0x110>
 8006ab4:	06d1      	lsls	r1, r2, #27
 8006ab6:	bf44      	itt	mi
 8006ab8:	2320      	movmi	r3, #32
 8006aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006abe:	0713      	lsls	r3, r2, #28
 8006ac0:	bf44      	itt	mi
 8006ac2:	232b      	movmi	r3, #43	@ 0x2b
 8006ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8006acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ace:	d015      	beq.n	8006afc <_vfiprintf_r+0x120>
 8006ad0:	9a07      	ldr	r2, [sp, #28]
 8006ad2:	4654      	mov	r4, sl
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f04f 0c0a 	mov.w	ip, #10
 8006ada:	4621      	mov	r1, r4
 8006adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae0:	3b30      	subs	r3, #48	@ 0x30
 8006ae2:	2b09      	cmp	r3, #9
 8006ae4:	d94b      	bls.n	8006b7e <_vfiprintf_r+0x1a2>
 8006ae6:	b1b0      	cbz	r0, 8006b16 <_vfiprintf_r+0x13a>
 8006ae8:	9207      	str	r2, [sp, #28]
 8006aea:	e014      	b.n	8006b16 <_vfiprintf_r+0x13a>
 8006aec:	eba0 0308 	sub.w	r3, r0, r8
 8006af0:	fa09 f303 	lsl.w	r3, r9, r3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	9304      	str	r3, [sp, #16]
 8006af8:	46a2      	mov	sl, r4
 8006afa:	e7d2      	b.n	8006aa2 <_vfiprintf_r+0xc6>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d19      	adds	r1, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9103      	str	r1, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfbb      	ittet	lt
 8006b08:	425b      	neglt	r3, r3
 8006b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b0e:	9307      	strge	r3, [sp, #28]
 8006b10:	9307      	strlt	r3, [sp, #28]
 8006b12:	bfb8      	it	lt
 8006b14:	9204      	strlt	r2, [sp, #16]
 8006b16:	7823      	ldrb	r3, [r4, #0]
 8006b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b1a:	d10a      	bne.n	8006b32 <_vfiprintf_r+0x156>
 8006b1c:	7863      	ldrb	r3, [r4, #1]
 8006b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b20:	d132      	bne.n	8006b88 <_vfiprintf_r+0x1ac>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	9203      	str	r2, [sp, #12]
 8006b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b2e:	3402      	adds	r4, #2
 8006b30:	9305      	str	r3, [sp, #20]
 8006b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c08 <_vfiprintf_r+0x22c>
 8006b36:	7821      	ldrb	r1, [r4, #0]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	4650      	mov	r0, sl
 8006b3c:	f7f9 fb58 	bl	80001f0 <memchr>
 8006b40:	b138      	cbz	r0, 8006b52 <_vfiprintf_r+0x176>
 8006b42:	9b04      	ldr	r3, [sp, #16]
 8006b44:	eba0 000a 	sub.w	r0, r0, sl
 8006b48:	2240      	movs	r2, #64	@ 0x40
 8006b4a:	4082      	lsls	r2, r0
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	3401      	adds	r4, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b56:	4829      	ldr	r0, [pc, #164]	@ (8006bfc <_vfiprintf_r+0x220>)
 8006b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b5c:	2206      	movs	r2, #6
 8006b5e:	f7f9 fb47 	bl	80001f0 <memchr>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d03f      	beq.n	8006be6 <_vfiprintf_r+0x20a>
 8006b66:	4b26      	ldr	r3, [pc, #152]	@ (8006c00 <_vfiprintf_r+0x224>)
 8006b68:	bb1b      	cbnz	r3, 8006bb2 <_vfiprintf_r+0x1d6>
 8006b6a:	9b03      	ldr	r3, [sp, #12]
 8006b6c:	3307      	adds	r3, #7
 8006b6e:	f023 0307 	bic.w	r3, r3, #7
 8006b72:	3308      	adds	r3, #8
 8006b74:	9303      	str	r3, [sp, #12]
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	443b      	add	r3, r7
 8006b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7c:	e76a      	b.n	8006a54 <_vfiprintf_r+0x78>
 8006b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b82:	460c      	mov	r4, r1
 8006b84:	2001      	movs	r0, #1
 8006b86:	e7a8      	b.n	8006ada <_vfiprintf_r+0xfe>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f04f 0c0a 	mov.w	ip, #10
 8006b94:	4620      	mov	r0, r4
 8006b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b9a:	3a30      	subs	r2, #48	@ 0x30
 8006b9c:	2a09      	cmp	r2, #9
 8006b9e:	d903      	bls.n	8006ba8 <_vfiprintf_r+0x1cc>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0c6      	beq.n	8006b32 <_vfiprintf_r+0x156>
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	e7c4      	b.n	8006b32 <_vfiprintf_r+0x156>
 8006ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bac:	4604      	mov	r4, r0
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e7f0      	b.n	8006b94 <_vfiprintf_r+0x1b8>
 8006bb2:	ab03      	add	r3, sp, #12
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	462a      	mov	r2, r5
 8006bb8:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <_vfiprintf_r+0x228>)
 8006bba:	a904      	add	r1, sp, #16
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f3af 8000 	nop.w
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	1c78      	adds	r0, r7, #1
 8006bc6:	d1d6      	bne.n	8006b76 <_vfiprintf_r+0x19a>
 8006bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bca:	07d9      	lsls	r1, r3, #31
 8006bcc:	d405      	bmi.n	8006bda <_vfiprintf_r+0x1fe>
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	059a      	lsls	r2, r3, #22
 8006bd2:	d402      	bmi.n	8006bda <_vfiprintf_r+0x1fe>
 8006bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bd6:	f7ff fdcf 	bl	8006778 <__retarget_lock_release_recursive>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	065b      	lsls	r3, r3, #25
 8006bde:	f53f af1f 	bmi.w	8006a20 <_vfiprintf_r+0x44>
 8006be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006be4:	e71e      	b.n	8006a24 <_vfiprintf_r+0x48>
 8006be6:	ab03      	add	r3, sp, #12
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	462a      	mov	r2, r5
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <_vfiprintf_r+0x228>)
 8006bee:	a904      	add	r1, sp, #16
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f879 	bl	8006ce8 <_printf_i>
 8006bf6:	e7e4      	b.n	8006bc2 <_vfiprintf_r+0x1e6>
 8006bf8:	08008408 	.word	0x08008408
 8006bfc:	08008412 	.word	0x08008412
 8006c00:	00000000 	.word	0x00000000
 8006c04:	080069b7 	.word	0x080069b7
 8006c08:	0800840e 	.word	0x0800840e

08006c0c <_printf_common>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	4616      	mov	r6, r2
 8006c12:	4698      	mov	r8, r3
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bfb8      	it	lt
 8006c20:	4613      	movlt	r3, r2
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c28:	4607      	mov	r7, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_printf_common+0x26>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0699      	lsls	r1, r3, #26
 8006c36:	bf42      	ittt	mi
 8006c38:	6833      	ldrmi	r3, [r6, #0]
 8006c3a:	3302      	addmi	r3, #2
 8006c3c:	6033      	strmi	r3, [r6, #0]
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	f015 0506 	ands.w	r5, r5, #6
 8006c44:	d106      	bne.n	8006c54 <_printf_common+0x48>
 8006c46:	f104 0a19 	add.w	sl, r4, #25
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	6832      	ldr	r2, [r6, #0]
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dc26      	bgt.n	8006ca2 <_printf_common+0x96>
 8006c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	3b00      	subs	r3, #0
 8006c5c:	bf18      	it	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d42b      	bmi.n	8006cbc <_printf_common+0xb0>
 8006c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c8      	blx	r9
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d01e      	beq.n	8006cb0 <_printf_common+0xa4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	f003 0306 	and.w	r3, r3, #6
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	bf02      	ittt	eq
 8006c7e:	68e5      	ldreq	r5, [r4, #12]
 8006c80:	6833      	ldreq	r3, [r6, #0]
 8006c82:	1aed      	subeq	r5, r5, r3
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	bf0c      	ite	eq
 8006c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c8c:	2500      	movne	r5, #0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfc4      	itt	gt
 8006c92:	1a9b      	subgt	r3, r3, r2
 8006c94:	18ed      	addgt	r5, r5, r3
 8006c96:	2600      	movs	r6, #0
 8006c98:	341a      	adds	r4, #26
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xa8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	4638      	mov	r0, r7
 8006caa:	47c8      	blx	r9
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xac>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c6      	b.n	8006c4a <_printf_common+0x3e>
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	2030      	movs	r0, #48	@ 0x30
 8006cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cc6:	4422      	add	r2, r4
 8006cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	e7c7      	b.n	8006c64 <_printf_common+0x58>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c8      	blx	r9
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xa4>
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7d9      	b.n	8006c9a <_printf_common+0x8e>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	7e0f      	ldrb	r7, [r1, #24]
 8006cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cf0:	2f78      	cmp	r7, #120	@ 0x78
 8006cf2:	4691      	mov	r9, r2
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cfe:	d807      	bhi.n	8006d10 <_printf_i+0x28>
 8006d00:	2f62      	cmp	r7, #98	@ 0x62
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x32>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	f000 80d2 	beq.w	8006eae <_printf_i+0x1c6>
 8006d0a:	2f58      	cmp	r7, #88	@ 0x58
 8006d0c:	f000 80b9 	beq.w	8006e82 <_printf_i+0x19a>
 8006d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d18:	e03a      	b.n	8006d90 <_printf_i+0xa8>
 8006d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d1e:	2b15      	cmp	r3, #21
 8006d20:	d8f6      	bhi.n	8006d10 <_printf_i+0x28>
 8006d22:	a101      	add	r1, pc, #4	@ (adr r1, 8006d28 <_printf_i+0x40>)
 8006d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d11 	.word	0x08006d11
 8006d34:	08006d11 	.word	0x08006d11
 8006d38:	08006d11 	.word	0x08006d11
 8006d3c:	08006d11 	.word	0x08006d11
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d11 	.word	0x08006d11
 8006d48:	08006d11 	.word	0x08006d11
 8006d4c:	08006d11 	.word	0x08006d11
 8006d50:	08006d11 	.word	0x08006d11
 8006d54:	08006e95 	.word	0x08006e95
 8006d58:	08006dbf 	.word	0x08006dbf
 8006d5c:	08006e4f 	.word	0x08006e4f
 8006d60:	08006d11 	.word	0x08006d11
 8006d64:	08006d11 	.word	0x08006d11
 8006d68:	08006eb7 	.word	0x08006eb7
 8006d6c:	08006d11 	.word	0x08006d11
 8006d70:	08006dbf 	.word	0x08006dbf
 8006d74:	08006d11 	.word	0x08006d11
 8006d78:	08006d11 	.word	0x08006d11
 8006d7c:	08006e57 	.word	0x08006e57
 8006d80:	6833      	ldr	r3, [r6, #0]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6032      	str	r2, [r6, #0]
 8006d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d90:	2301      	movs	r3, #1
 8006d92:	e09d      	b.n	8006ed0 <_printf_i+0x1e8>
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	1d19      	adds	r1, r3, #4
 8006d9a:	6031      	str	r1, [r6, #0]
 8006d9c:	0606      	lsls	r6, r0, #24
 8006d9e:	d501      	bpl.n	8006da4 <_printf_i+0xbc>
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	e003      	b.n	8006dac <_printf_i+0xc4>
 8006da4:	0645      	lsls	r5, r0, #25
 8006da6:	d5fb      	bpl.n	8006da0 <_printf_i+0xb8>
 8006da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	da03      	bge.n	8006db8 <_printf_i+0xd0>
 8006db0:	232d      	movs	r3, #45	@ 0x2d
 8006db2:	426d      	negs	r5, r5
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db8:	4859      	ldr	r0, [pc, #356]	@ (8006f20 <_printf_i+0x238>)
 8006dba:	230a      	movs	r3, #10
 8006dbc:	e011      	b.n	8006de2 <_printf_i+0xfa>
 8006dbe:	6821      	ldr	r1, [r4, #0]
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	0608      	lsls	r0, r1, #24
 8006dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dc8:	d402      	bmi.n	8006dd0 <_printf_i+0xe8>
 8006dca:	0649      	lsls	r1, r1, #25
 8006dcc:	bf48      	it	mi
 8006dce:	b2ad      	uxthmi	r5, r5
 8006dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dd2:	4853      	ldr	r0, [pc, #332]	@ (8006f20 <_printf_i+0x238>)
 8006dd4:	6033      	str	r3, [r6, #0]
 8006dd6:	bf14      	ite	ne
 8006dd8:	230a      	movne	r3, #10
 8006dda:	2308      	moveq	r3, #8
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006de2:	6866      	ldr	r6, [r4, #4]
 8006de4:	60a6      	str	r6, [r4, #8]
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	bfa2      	ittt	ge
 8006dea:	6821      	ldrge	r1, [r4, #0]
 8006dec:	f021 0104 	bicge.w	r1, r1, #4
 8006df0:	6021      	strge	r1, [r4, #0]
 8006df2:	b90d      	cbnz	r5, 8006df8 <_printf_i+0x110>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	d04b      	beq.n	8006e90 <_printf_i+0x1a8>
 8006df8:	4616      	mov	r6, r2
 8006dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8006e02:	5dc7      	ldrb	r7, [r0, r7]
 8006e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e08:	462f      	mov	r7, r5
 8006e0a:	42bb      	cmp	r3, r7
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	d9f4      	bls.n	8006dfa <_printf_i+0x112>
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d10b      	bne.n	8006e2c <_printf_i+0x144>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	07df      	lsls	r7, r3, #31
 8006e18:	d508      	bpl.n	8006e2c <_printf_i+0x144>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	6861      	ldr	r1, [r4, #4]
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	bfde      	ittt	le
 8006e22:	2330      	movle	r3, #48	@ 0x30
 8006e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e2c:	1b92      	subs	r2, r2, r6
 8006e2e:	6122      	str	r2, [r4, #16]
 8006e30:	f8cd a000 	str.w	sl, [sp]
 8006e34:	464b      	mov	r3, r9
 8006e36:	aa03      	add	r2, sp, #12
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7ff fee6 	bl	8006c0c <_printf_common>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d14a      	bne.n	8006eda <_printf_i+0x1f2>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b004      	add	sp, #16
 8006e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	f043 0320 	orr.w	r3, r3, #32
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	4833      	ldr	r0, [pc, #204]	@ (8006f24 <_printf_i+0x23c>)
 8006e58:	2778      	movs	r7, #120	@ 0x78
 8006e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	6831      	ldr	r1, [r6, #0]
 8006e62:	061f      	lsls	r7, r3, #24
 8006e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e68:	d402      	bmi.n	8006e70 <_printf_i+0x188>
 8006e6a:	065f      	lsls	r7, r3, #25
 8006e6c:	bf48      	it	mi
 8006e6e:	b2ad      	uxthmi	r5, r5
 8006e70:	6031      	str	r1, [r6, #0]
 8006e72:	07d9      	lsls	r1, r3, #31
 8006e74:	bf44      	itt	mi
 8006e76:	f043 0320 	orrmi.w	r3, r3, #32
 8006e7a:	6023      	strmi	r3, [r4, #0]
 8006e7c:	b11d      	cbz	r5, 8006e86 <_printf_i+0x19e>
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e7ac      	b.n	8006ddc <_printf_i+0xf4>
 8006e82:	4827      	ldr	r0, [pc, #156]	@ (8006f20 <_printf_i+0x238>)
 8006e84:	e7e9      	b.n	8006e5a <_printf_i+0x172>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f023 0320 	bic.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	e7f6      	b.n	8006e7e <_printf_i+0x196>
 8006e90:	4616      	mov	r6, r2
 8006e92:	e7bd      	b.n	8006e10 <_printf_i+0x128>
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	6961      	ldr	r1, [r4, #20]
 8006e9a:	1d18      	adds	r0, r3, #4
 8006e9c:	6030      	str	r0, [r6, #0]
 8006e9e:	062e      	lsls	r6, r5, #24
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0x1c0>
 8006ea4:	6019      	str	r1, [r3, #0]
 8006ea6:	e002      	b.n	8006eae <_printf_i+0x1c6>
 8006ea8:	0668      	lsls	r0, r5, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0x1bc>
 8006eac:	8019      	strh	r1, [r3, #0]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	4616      	mov	r6, r2
 8006eb4:	e7bc      	b.n	8006e30 <_printf_i+0x148>
 8006eb6:	6833      	ldr	r3, [r6, #0]
 8006eb8:	1d1a      	adds	r2, r3, #4
 8006eba:	6032      	str	r2, [r6, #0]
 8006ebc:	681e      	ldr	r6, [r3, #0]
 8006ebe:	6862      	ldr	r2, [r4, #4]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7f9 f994 	bl	80001f0 <memchr>
 8006ec8:	b108      	cbz	r0, 8006ece <_printf_i+0x1e6>
 8006eca:	1b80      	subs	r0, r0, r6
 8006ecc:	6060      	str	r0, [r4, #4]
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	e7aa      	b.n	8006e30 <_printf_i+0x148>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	4632      	mov	r2, r6
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	47d0      	blx	sl
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d0ad      	beq.n	8006e44 <_printf_i+0x15c>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	079b      	lsls	r3, r3, #30
 8006eec:	d413      	bmi.n	8006f16 <_printf_i+0x22e>
 8006eee:	68e0      	ldr	r0, [r4, #12]
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	bfb8      	it	lt
 8006ef6:	4618      	movlt	r0, r3
 8006ef8:	e7a6      	b.n	8006e48 <_printf_i+0x160>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	47d0      	blx	sl
 8006f04:	3001      	adds	r0, #1
 8006f06:	d09d      	beq.n	8006e44 <_printf_i+0x15c>
 8006f08:	3501      	adds	r5, #1
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	1a5b      	subs	r3, r3, r1
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	dcf2      	bgt.n	8006efa <_printf_i+0x212>
 8006f14:	e7eb      	b.n	8006eee <_printf_i+0x206>
 8006f16:	2500      	movs	r5, #0
 8006f18:	f104 0619 	add.w	r6, r4, #25
 8006f1c:	e7f5      	b.n	8006f0a <_printf_i+0x222>
 8006f1e:	bf00      	nop
 8006f20:	08008419 	.word	0x08008419
 8006f24:	0800842a 	.word	0x0800842a

08006f28 <__sflush_r>:
 8006f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	0716      	lsls	r6, r2, #28
 8006f32:	4605      	mov	r5, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	d454      	bmi.n	8006fe2 <__sflush_r+0xba>
 8006f38:	684b      	ldr	r3, [r1, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dc02      	bgt.n	8006f44 <__sflush_r+0x1c>
 8006f3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd48      	ble.n	8006fd6 <__sflush_r+0xae>
 8006f44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d045      	beq.n	8006fd6 <__sflush_r+0xae>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f50:	682f      	ldr	r7, [r5, #0]
 8006f52:	6a21      	ldr	r1, [r4, #32]
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	d030      	beq.n	8006fba <__sflush_r+0x92>
 8006f58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	0759      	lsls	r1, r3, #29
 8006f5e:	d505      	bpl.n	8006f6c <__sflush_r+0x44>
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f66:	b10b      	cbz	r3, 8006f6c <__sflush_r+0x44>
 8006f68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f70:	6a21      	ldr	r1, [r4, #32]
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b0      	blx	r6
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	d106      	bne.n	8006f8a <__sflush_r+0x62>
 8006f7c:	6829      	ldr	r1, [r5, #0]
 8006f7e:	291d      	cmp	r1, #29
 8006f80:	d82b      	bhi.n	8006fda <__sflush_r+0xb2>
 8006f82:	4a2a      	ldr	r2, [pc, #168]	@ (800702c <__sflush_r+0x104>)
 8006f84:	410a      	asrs	r2, r1
 8006f86:	07d6      	lsls	r6, r2, #31
 8006f88:	d427      	bmi.n	8006fda <__sflush_r+0xb2>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	6062      	str	r2, [r4, #4]
 8006f8e:	04d9      	lsls	r1, r3, #19
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	6022      	str	r2, [r4, #0]
 8006f94:	d504      	bpl.n	8006fa0 <__sflush_r+0x78>
 8006f96:	1c42      	adds	r2, r0, #1
 8006f98:	d101      	bne.n	8006f9e <__sflush_r+0x76>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	b903      	cbnz	r3, 8006fa0 <__sflush_r+0x78>
 8006f9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fa2:	602f      	str	r7, [r5, #0]
 8006fa4:	b1b9      	cbz	r1, 8006fd6 <__sflush_r+0xae>
 8006fa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006faa:	4299      	cmp	r1, r3
 8006fac:	d002      	beq.n	8006fb4 <__sflush_r+0x8c>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7ff fbf2 	bl	8006798 <_free_r>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fb8:	e00d      	b.n	8006fd6 <__sflush_r+0xae>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b0      	blx	r6
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	1c50      	adds	r0, r2, #1
 8006fc4:	d1c9      	bne.n	8006f5a <__sflush_r+0x32>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0c6      	beq.n	8006f5a <__sflush_r+0x32>
 8006fcc:	2b1d      	cmp	r3, #29
 8006fce:	d001      	beq.n	8006fd4 <__sflush_r+0xac>
 8006fd0:	2b16      	cmp	r3, #22
 8006fd2:	d11e      	bne.n	8007012 <__sflush_r+0xea>
 8006fd4:	602f      	str	r7, [r5, #0]
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e022      	b.n	8007020 <__sflush_r+0xf8>
 8006fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fde:	b21b      	sxth	r3, r3
 8006fe0:	e01b      	b.n	800701a <__sflush_r+0xf2>
 8006fe2:	690f      	ldr	r7, [r1, #16]
 8006fe4:	2f00      	cmp	r7, #0
 8006fe6:	d0f6      	beq.n	8006fd6 <__sflush_r+0xae>
 8006fe8:	0793      	lsls	r3, r2, #30
 8006fea:	680e      	ldr	r6, [r1, #0]
 8006fec:	bf08      	it	eq
 8006fee:	694b      	ldreq	r3, [r1, #20]
 8006ff0:	600f      	str	r7, [r1, #0]
 8006ff2:	bf18      	it	ne
 8006ff4:	2300      	movne	r3, #0
 8006ff6:	eba6 0807 	sub.w	r8, r6, r7
 8006ffa:	608b      	str	r3, [r1, #8]
 8006ffc:	f1b8 0f00 	cmp.w	r8, #0
 8007000:	dde9      	ble.n	8006fd6 <__sflush_r+0xae>
 8007002:	6a21      	ldr	r1, [r4, #32]
 8007004:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007006:	4643      	mov	r3, r8
 8007008:	463a      	mov	r2, r7
 800700a:	4628      	mov	r0, r5
 800700c:	47b0      	blx	r6
 800700e:	2800      	cmp	r0, #0
 8007010:	dc08      	bgt.n	8007024 <__sflush_r+0xfc>
 8007012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007024:	4407      	add	r7, r0
 8007026:	eba8 0800 	sub.w	r8, r8, r0
 800702a:	e7e7      	b.n	8006ffc <__sflush_r+0xd4>
 800702c:	dfbffffe 	.word	0xdfbffffe

08007030 <_fflush_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	4605      	mov	r5, r0
 8007036:	460c      	mov	r4, r1
 8007038:	b913      	cbnz	r3, 8007040 <_fflush_r+0x10>
 800703a:	2500      	movs	r5, #0
 800703c:	4628      	mov	r0, r5
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	b118      	cbz	r0, 800704a <_fflush_r+0x1a>
 8007042:	6a03      	ldr	r3, [r0, #32]
 8007044:	b90b      	cbnz	r3, 800704a <_fflush_r+0x1a>
 8007046:	f7ff f9fd 	bl	8006444 <__sinit>
 800704a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f3      	beq.n	800703a <_fflush_r+0xa>
 8007052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007054:	07d0      	lsls	r0, r2, #31
 8007056:	d404      	bmi.n	8007062 <_fflush_r+0x32>
 8007058:	0599      	lsls	r1, r3, #22
 800705a:	d402      	bmi.n	8007062 <_fflush_r+0x32>
 800705c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800705e:	f7ff fb8a 	bl	8006776 <__retarget_lock_acquire_recursive>
 8007062:	4628      	mov	r0, r5
 8007064:	4621      	mov	r1, r4
 8007066:	f7ff ff5f 	bl	8006f28 <__sflush_r>
 800706a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800706c:	07da      	lsls	r2, r3, #31
 800706e:	4605      	mov	r5, r0
 8007070:	d4e4      	bmi.n	800703c <_fflush_r+0xc>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	059b      	lsls	r3, r3, #22
 8007076:	d4e1      	bmi.n	800703c <_fflush_r+0xc>
 8007078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707a:	f7ff fb7d 	bl	8006778 <__retarget_lock_release_recursive>
 800707e:	e7dd      	b.n	800703c <_fflush_r+0xc>

08007080 <__swhatbuf_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2900      	cmp	r1, #0
 800708a:	b096      	sub	sp, #88	@ 0x58
 800708c:	4615      	mov	r5, r2
 800708e:	461e      	mov	r6, r3
 8007090:	da0d      	bge.n	80070ae <__swhatbuf_r+0x2e>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007098:	f04f 0100 	mov.w	r1, #0
 800709c:	bf14      	ite	ne
 800709e:	2340      	movne	r3, #64	@ 0x40
 80070a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070a4:	2000      	movs	r0, #0
 80070a6:	6031      	str	r1, [r6, #0]
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	b016      	add	sp, #88	@ 0x58
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	466a      	mov	r2, sp
 80070b0:	f000 f848 	bl	8007144 <_fstat_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	dbec      	blt.n	8007092 <__swhatbuf_r+0x12>
 80070b8:	9901      	ldr	r1, [sp, #4]
 80070ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070c2:	4259      	negs	r1, r3
 80070c4:	4159      	adcs	r1, r3
 80070c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ca:	e7eb      	b.n	80070a4 <__swhatbuf_r+0x24>

080070cc <__smakebuf_r>:
 80070cc:	898b      	ldrh	r3, [r1, #12]
 80070ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d0:	079d      	lsls	r5, r3, #30
 80070d2:	4606      	mov	r6, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	d507      	bpl.n	80070e8 <__smakebuf_r+0x1c>
 80070d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	2301      	movs	r3, #1
 80070e2:	6163      	str	r3, [r4, #20]
 80070e4:	b003      	add	sp, #12
 80070e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e8:	ab01      	add	r3, sp, #4
 80070ea:	466a      	mov	r2, sp
 80070ec:	f7ff ffc8 	bl	8007080 <__swhatbuf_r>
 80070f0:	9f00      	ldr	r7, [sp, #0]
 80070f2:	4605      	mov	r5, r0
 80070f4:	4639      	mov	r1, r7
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff fbba 	bl	8006870 <_malloc_r>
 80070fc:	b948      	cbnz	r0, 8007112 <__smakebuf_r+0x46>
 80070fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007102:	059a      	lsls	r2, r3, #22
 8007104:	d4ee      	bmi.n	80070e4 <__smakebuf_r+0x18>
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	f043 0302 	orr.w	r3, r3, #2
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	e7e2      	b.n	80070d8 <__smakebuf_r+0xc>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	6020      	str	r0, [r4, #0]
 8007116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007122:	b15b      	cbz	r3, 800713c <__smakebuf_r+0x70>
 8007124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007128:	4630      	mov	r0, r6
 800712a:	f000 f81d 	bl	8007168 <_isatty_r>
 800712e:	b128      	cbz	r0, 800713c <__smakebuf_r+0x70>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	431d      	orrs	r5, r3
 8007140:	81a5      	strh	r5, [r4, #12]
 8007142:	e7cf      	b.n	80070e4 <__smakebuf_r+0x18>

08007144 <_fstat_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d07      	ldr	r5, [pc, #28]	@ (8007164 <_fstat_r+0x20>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	f7fb ff73 	bl	800303c <_fstat>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d102      	bne.n	8007160 <_fstat_r+0x1c>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b103      	cbz	r3, 8007160 <_fstat_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	20025f8c 	.word	0x20025f8c

08007168 <_isatty_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4d06      	ldr	r5, [pc, #24]	@ (8007184 <_isatty_r+0x1c>)
 800716c:	2300      	movs	r3, #0
 800716e:	4604      	mov	r4, r0
 8007170:	4608      	mov	r0, r1
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	f7fb ff72 	bl	800305c <_isatty>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_isatty_r+0x1a>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_isatty_r+0x1a>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20025f8c 	.word	0x20025f8c

08007188 <_sbrk_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d06      	ldr	r5, [pc, #24]	@ (80071a4 <_sbrk_r+0x1c>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	f7fb ff7a 	bl	800308c <_sbrk>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_sbrk_r+0x1a>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_sbrk_r+0x1a>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	20025f8c 	.word	0x20025f8c

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
