
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b2c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  08008cdc  08008cdc  00009cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f6c  08009f6c  0000b264  2**0
                  CONTENTS
  4 .ARM          00000008  08009f6c  08009f6c  0000af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f74  08009f74  0000b264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f74  08009f74  0000af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f78  08009f78  0000af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08009f7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b264  2**0
                  CONTENTS
 10 .bss          00026018  20000264  20000264  0000b264  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002627c  2002627c  0000b264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f46  00000000  00000000  0000b294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a0f  00000000  00000000  000211da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00024bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001028  00000000  00000000  000260f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ad5  00000000  00000000  00027118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b745  00000000  00000000  0004ebed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1675  00000000  00000000  0006a332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b9a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d0  00000000  00000000  0014b9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00151dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008cc4 	.word	0x08008cc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	08008cc4 	.word	0x08008cc4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000584:	f000 fa90 	bl	8000aa8 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fa4d 	bl	8000a28 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800058e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fbd0 	bl	8000d38 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000598:	f000 fcd0 	bl	8000f3c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <ApplicationInit+0x2c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a2:	f000 f869 	bl	8000678 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000280 	.word	0x20000280

080005b0 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005b0:	b490      	push	{r4, r7}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4604      	mov	r4, r0
 80005b8:	4608      	mov	r0, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	461a      	mov	r2, r3
 80005be:	4623      	mov	r3, r4
 80005c0:	80fb      	strh	r3, [r7, #6]
 80005c2:	4603      	mov	r3, r0
 80005c4:	80bb      	strh	r3, [r7, #4]
 80005c6:	460b      	mov	r3, r1
 80005c8:	807b      	strh	r3, [r7, #2]
 80005ca:	4613      	mov	r3, r2
 80005cc:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	085b      	lsrs	r3, r3, #1
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	085b      	lsrs	r3, r3, #1
 80005da:	b29b      	uxth	r3, r3
 80005dc:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	88fa      	ldrh	r2, [r7, #6]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005e8:	89ba      	ldrh	r2, [r7, #12]
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 80005f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dd08      	ble.n	8000610 <Determine_Touch_Quadrant+0x60>
 80005fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000602:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000606:	425b      	negs	r3, r3
 8000608:	429a      	cmp	r2, r3
 800060a:	dd01      	ble.n	8000610 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 800060c:	2300      	movs	r3, #0
 800060e:	e02d      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000610:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000618:	429a      	cmp	r2, r3
 800061a:	dc08      	bgt.n	800062e <Determine_Touch_Quadrant+0x7e>
 800061c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000620:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000624:	425b      	negs	r3, r3
 8000626:	429a      	cmp	r2, r3
 8000628:	dd01      	ble.n	800062e <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800062a:	2301      	movs	r3, #1
 800062c:	e01e      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 800062e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000636:	429a      	cmp	r2, r3
 8000638:	dc08      	bgt.n	800064c <Determine_Touch_Quadrant+0x9c>
 800063a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800063e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000642:	425b      	negs	r3, r3
 8000644:	429a      	cmp	r2, r3
 8000646:	dc01      	bgt.n	800064c <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 8000648:	2302      	movs	r3, #2
 800064a:	e00f      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 800064c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000650:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000654:	429a      	cmp	r2, r3
 8000656:	dd08      	ble.n	800066a <Determine_Touch_Quadrant+0xba>
 8000658:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000660:	425b      	negs	r3, r3
 8000662:	429a      	cmp	r2, r3
 8000664:	dc01      	bgt.n	800066a <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 8000666:	2303      	movs	r3, #3
 8000668:	e000      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800066a:	23ff      	movs	r3, #255	@ 0xff
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bc90      	pop	{r4, r7}
 8000674:	4770      	bx	lr
	...

08000678 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800068c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000690:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000692:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000696:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006c2:	f003 fbf7 	bl	8003eb4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c6:	2028      	movs	r0, #40	@ 0x28
 80006c8:	f003 fba5 	bl	8003e16 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006ce:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000288 	.word	0x20000288
 80006e8:	0600000f 	.word	0x0600000f

080006ec <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006f2:	2028      	movs	r0, #40	@ 0x28
 80006f4:	f003 fb9d 	bl	8003e32 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80006fc:	4b5c      	ldr	r3, [pc, #368]	@ (8000870 <EXTI15_10_IRQHandler+0x184>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000702:	e006      	b.n	8000712 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000704:	204c      	movs	r0, #76	@ 0x4c
 8000706:	f002 feb4 	bl	8003472 <STMPE811_Read>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b58      	ldr	r3, [pc, #352]	@ (8000870 <EXTI15_10_IRQHandler+0x184>)
 8000710:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000712:	4b57      	ldr	r3, [pc, #348]	@ (8000870 <EXTI15_10_IRQHandler+0x184>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f4      	beq.n	8000704 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 fc24 	bl	8000f68 <ReadRegisterFromTouchModule>
 8000720:	4603      	mov	r3, r0
 8000722:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000724:	2100      	movs	r1, #0
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fc2c 	bl	8000f84 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800072c:	200b      	movs	r0, #11
 800072e:	f000 fc1b 	bl	8000f68 <ReadRegisterFromTouchModule>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <EXTI15_10_IRQHandler+0x188>)
 8000738:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800073a:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <EXTI15_10_IRQHandler+0x188>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000744:	797b      	ldrb	r3, [r7, #5]
 8000746:	4619      	mov	r1, r3
 8000748:	200b      	movs	r0, #11
 800074a:	f000 fc1b 	bl	8000f84 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800074e:	2040      	movs	r0, #64	@ 0x40
 8000750:	f000 fc0a 	bl	8000f68 <ReadRegisterFromTouchModule>
 8000754:	4603      	mov	r3, r0
 8000756:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000758:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da01      	bge.n	8000764 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000760:	2301      	movs	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d05e      	beq.n	8000828 <EXTI15_10_IRQHandler+0x13c>
	{
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 800076a:	4843      	ldr	r0, [pc, #268]	@ (8000878 <EXTI15_10_IRQHandler+0x18c>)
 800076c:	f000 fbf1 	bl	8000f52 <DetermineTouchPosition>
//		printf("\nPressed\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		printf("Tim: %u", __HAL_TIM_GET_COUNTER(&htim2));

		if (activeScreen == 0) {
 8000770:	4b42      	ldr	r3, [pc, #264]	@ (800087c <EXTI15_10_IRQHandler+0x190>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d130      	bne.n	80007da <EXTI15_10_IRQHandler+0xee>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <EXTI15_10_IRQHandler+0x18c>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <EXTI15_10_IRQHandler+0x18c>)
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000784:	b29b      	uxth	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4610      	mov	r0, r2
 800078a:	f002 fa35 	bl	8002bf8 <startClicked>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d04c      	beq.n	800082e <EXTI15_10_IRQHandler+0x142>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 8000794:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000798:	f000 faf0 	bl	8000d7c <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 800079c:	4838      	ldr	r0, [pc, #224]	@ (8000880 <EXTI15_10_IRQHandler+0x194>)
 800079e:	f000 fafd 	bl	8000d9c <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007a2:	4a38      	ldr	r2, [pc, #224]	@ (8000884 <EXTI15_10_IRQHandler+0x198>)
 80007a4:	21be      	movs	r1, #190	@ 0xbe
 80007a6:	201e      	movs	r0, #30
 80007a8:	f000 fb98 	bl	8000edc <LCD_DisplayString>
				printf("Starting...\n");
 80007ac:	4835      	ldr	r0, [pc, #212]	@ (8000884 <EXTI15_10_IRQHandler+0x198>)
 80007ae:	f007 fa3b 	bl	8007c28 <puts>
//				HAL_Delay(200);
				activeScreen = 1;
 80007b2:	4b32      	ldr	r3, [pc, #200]	@ (800087c <EXTI15_10_IRQHandler+0x190>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	801a      	strh	r2, [r3, #0]
				initGame();
 80007b8:	f000 ffca 	bl	8001750 <initGame>
//				HAL_Delay(2);
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 faba 	bl	8000d38 <LCD_Clear>
				showGameScreen();
 80007c4:	f002 fa50 	bl	8002c68 <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007c8:	20ff      	movs	r0, #255	@ 0xff
 80007ca:	f000 fd31 	bl	8001230 <Draw_Arrows_On_Screen>

//				HAL_TIM_Base_Start_IT(& htim2);
//			    HAL_TIM_Base_Start(& htim5);
			    startTimers();
 80007ce:	f002 f8db 	bl	8002988 <startTimers>

			    printf("Started Timers\n");
 80007d2:	482d      	ldr	r0, [pc, #180]	@ (8000888 <EXTI15_10_IRQHandler+0x19c>)
 80007d4:	f007 fa28 	bl	8007c28 <puts>
 80007d8:	e029      	b.n	800082e <EXTI15_10_IRQHandler+0x142>
			}
		} else if (activeScreen == 1) {
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <EXTI15_10_IRQHandler+0x190>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d125      	bne.n	800082e <EXTI15_10_IRQHandler+0x142>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 faa7 	bl	8000d38 <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007ea:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <EXTI15_10_IRQHandler+0x18c>)
 80007ec:	8818      	ldrh	r0, [r3, #0]
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <EXTI15_10_IRQHandler+0x18c>)
 80007f0:	885b      	ldrh	r3, [r3, #2]
 80007f2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80007f6:	b299      	uxth	r1, r3
 80007f8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007fc:	22f0      	movs	r2, #240	@ 0xf0
 80007fe:	f7ff fed7 	bl	80005b0 <Determine_Touch_Quadrant>
 8000802:	4603      	mov	r3, r0
 8000804:	70fb      	strb	r3, [r7, #3]
			Draw_Arrows_On_Screen(activeArrow);
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fd11 	bl	8001230 <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			handleInput(& board, & currentPiece, activeArrow);
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	461a      	mov	r2, r3
 8000812:	491e      	ldr	r1, [pc, #120]	@ (800088c <EXTI15_10_IRQHandler+0x1a0>)
 8000814:	481e      	ldr	r0, [pc, #120]	@ (8000890 <EXTI15_10_IRQHandler+0x1a4>)
 8000816:	f001 f985 	bl	8001b24 <handleInput>

			showGameScreen();
 800081a:	f002 fa25 	bl	8002c68 <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fd05 	bl	8001230 <Draw_Arrows_On_Screen>
 8000826:	e002      	b.n	800082e <EXTI15_10_IRQHandler+0x142>
		}
	} else {
		/* Touch not pressed */
		Draw_Arrows_On_Screen(-1);
 8000828:	20ff      	movs	r0, #255	@ 0xff
 800082a:	f000 fd01 	bl	8001230 <Draw_Arrows_On_Screen>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800082e:	2101      	movs	r1, #1
 8000830:	204b      	movs	r0, #75	@ 0x4b
 8000832:	f002 fe2f 	bl	8003494 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000836:	2100      	movs	r1, #0
 8000838:	204b      	movs	r0, #75	@ 0x4b
 800083a:	f002 fe2b 	bl	8003494 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	4619      	mov	r1, r3
 8000842:	200a      	movs	r0, #10
 8000844:	f000 fb9e 	bl	8000f84 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000848:	2103      	movs	r1, #3
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <EXTI15_10_IRQHandler+0x1a8>)
 800084c:	f003 fb1a 	bl	8003e84 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	@ 0x28
 8000852:	f003 fb08 	bl	8003e66 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000856:	2028      	movs	r0, #40	@ 0x28
 8000858:	f003 fadd 	bl	8003e16 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	4619      	mov	r1, r3
 8000860:	200b      	movs	r0, #11
 8000862:	f000 fb8f 	bl	8000f84 <WriteDataToTouchModule>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000294 	.word	0x20000294
 8000874:	20000290 	.word	0x20000290
 8000878:	20000280 	.word	0x20000280
 800087c:	2002602c 	.word	0x2002602c
 8000880:	20000004 	.word	0x20000004
 8000884:	08008d00 	.word	0x08008d00
 8000888:	08008d0c 	.word	0x08008d0c
 800088c:	20025e94 	.word	0x20025e94
 8000890:	20025b74 	.word	0x20025b74
 8000894:	20000288 	.word	0x20000288

08000898 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	4a59      	ldr	r2, [pc, #356]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ae:	4b57      	ldr	r3, [pc, #348]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b53      	ldr	r3, [pc, #332]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a52      	ldr	r2, [pc, #328]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b50      	ldr	r3, [pc, #320]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b4c      	ldr	r3, [pc, #304]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a4b      	ldr	r2, [pc, #300]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b45      	ldr	r3, [pc, #276]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a44      	ldr	r2, [pc, #272]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b3e      	ldr	r3, [pc, #248]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a3d      	ldr	r2, [pc, #244]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a36      	ldr	r2, [pc, #216]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <LCD_GPIO_Init+0x174>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000962:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000966:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000974:	230e      	movs	r3, #14
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4824      	ldr	r0, [pc, #144]	@ (8000a10 <LCD_GPIO_Init+0x178>)
 8000980:	f003 fa98 	bl	8003eb4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000984:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000988:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <LCD_GPIO_Init+0x17c>)
 8000992:	f003 fa8f 	bl	8003eb4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000996:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <LCD_GPIO_Init+0x180>)
 80009a4:	f003 fa86 	bl	8003eb4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009a8:	2348      	movs	r3, #72	@ 0x48
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481a      	ldr	r0, [pc, #104]	@ (8000a1c <LCD_GPIO_Init+0x184>)
 80009b4:	f003 fa7e 	bl	8003eb4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4816      	ldr	r0, [pc, #88]	@ (8000a20 <LCD_GPIO_Init+0x188>)
 80009c6:	f003 fa75 	bl	8003eb4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009ca:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009ce:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <LCD_GPIO_Init+0x18c>)
 80009d8:	f003 fa6c 	bl	8003eb4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009dc:	2303      	movs	r3, #3
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009e0:	2309      	movs	r3, #9
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <LCD_GPIO_Init+0x17c>)
 80009ec:	f003 fa62 	bl	8003eb4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80009f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <LCD_GPIO_Init+0x18c>)
 80009fe:	f003 fa59 	bl	8003eb4 <HAL_GPIO_Init>
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	@ 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40021400 	.word	0x40021400
 8000a24:	40021800 	.word	0x40021800

08000a28 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b090      	sub	sp, #64	@ 0x40
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a36:	23f0      	movs	r3, #240	@ 0xf0
 8000a38:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a3e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a42:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a48:	23ff      	movs	r3, #255	@ 0xff
 8000a4a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <LTCD_Layer_Init+0x78>)
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a64:	23f0      	movs	r3, #240	@ 0xf0
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a68:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <LTCD_Layer_Init+0x7c>)
 8000a8a:	f004 fe0b 	bl	80056a4 <HAL_LTDC_ConfigLayer>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000a94:	f000 fa4c 	bl	8000f30 <LCD_Error_Handler>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3740      	adds	r7, #64	@ 0x40
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000374 	.word	0x20000374
 8000aa4:	20000298 	.word	0x20000298

08000aa8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000aac:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <LTCD__Init+0xb0>)
 8000aae:	4a2b      	ldr	r2, [pc, #172]	@ (8000b5c <LTCD__Init+0xb4>)
 8000ab0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <LTCD__Init+0xb0>)
 8000ab4:	2209      	movs	r2, #9
 8000ab6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <LTCD__Init+0xb0>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <LTCD__Init+0xb0>)
 8000ac0:	221d      	movs	r2, #29
 8000ac2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <LTCD__Init+0xb0>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <LTCD__Init+0xb0>)
 8000acc:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <LTCD__Init+0xb0>)
 8000ad4:	f240 1243 	movw	r2, #323	@ 0x143
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <LTCD__Init+0xb0>)
 8000adc:	f240 1217 	movw	r2, #279	@ 0x117
 8000ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <LTCD__Init+0xb0>)
 8000ae4:	f240 1247 	movw	r2, #327	@ 0x147
 8000ae8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <LTCD__Init+0xb0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <LTCD__Init+0xb0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <LTCD__Init+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <LTCD__Init+0xb8>)
 8000b04:	2208      	movs	r2, #8
 8000b06:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <LTCD__Init+0xb8>)
 8000b0a:	22c0      	movs	r2, #192	@ 0xc0
 8000b0c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <LTCD__Init+0xb8>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <LTCD__Init+0xb8>)
 8000b16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b1c:	4810      	ldr	r0, [pc, #64]	@ (8000b60 <LTCD__Init+0xb8>)
 8000b1e:	f005 fc1b 	bl	8006358 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <LTCD__Init+0xb0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <LTCD__Init+0xb0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <LTCD__Init+0xb0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LTCD__Init+0xb0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b3a:	f7ff fead 	bl	8000898 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <LTCD__Init+0xb0>)
 8000b40:	f004 fce0 	bl	8005504 <HAL_LTDC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b4a:	f000 f9f1 	bl	8000f30 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b4e:	f001 f94f 	bl	8001df0 <ili9341_Init>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000298 	.word	0x20000298
 8000b5c:	40016800 	.word	0x40016800
 8000b60:	20000340 	.word	0x20000340

08000b64 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	807b      	strh	r3, [r7, #2]
		HAL_Delay(1);
		drawn = 0;
	}
#endif
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	2bef      	cmp	r3, #239	@ 0xef
 8000b7a:	d80f      	bhi.n	8000b9c <LCD_Draw_Pixel+0x38>
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b82:	d20b      	bcs.n	8000b9c <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000b84:	88ba      	ldrh	r2, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	461a      	mov	r2, r3
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4413      	add	r3, r2
 8000b94:	4904      	ldr	r1, [pc, #16]	@ (8000ba8 <LCD_Draw_Pixel+0x44>)
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000374 	.word	0x20000374

08000bac <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4623      	mov	r3, r4
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	807b      	strh	r3, [r7, #2]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	425b      	negs	r3, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	81fb      	strh	r3, [r7, #14]
 8000bd2:	e034      	b.n	8000c3e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	81bb      	strh	r3, [r7, #12]
 8000bdc:	e024      	b.n	8000c28 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000bde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000be2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000be6:	fb03 f202 	mul.w	r2, r3, r2
 8000bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bee:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	441a      	add	r2, r3
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	8879      	ldrh	r1, [r7, #2]
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dc0b      	bgt.n	8000c1c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c04:	89ba      	ldrh	r2, [r7, #12]
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	89fa      	ldrh	r2, [r7, #14]
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	883a      	ldrh	r2, [r7, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff ffa4 	bl	8000b64 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	81bb      	strh	r3, [r7, #12]
 8000c28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	ddd5      	ble.n	8000bde <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	81fb      	strh	r3, [r7, #14]
 8000c3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	ddc5      	ble.n	8000bd4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}

08000c52 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c52:	b590      	push	{r4, r7, lr}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4604      	mov	r4, r0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4623      	mov	r3, r4
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4603      	mov	r3, r0
 8000c66:	80bb      	strh	r3, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	81fb      	strh	r3, [r7, #14]
 8000c74:	e01c      	b.n	8000cb0 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	e00b      	b.n	8000c94 <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000c7c:	89bb      	ldrh	r3, [r7, #12]
 8000c7e:	89f9      	ldrh	r1, [r7, #14]
 8000c80:	8c3a      	ldrh	r2, [r7, #32]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff6e 	bl	8000b64 <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
 8000c94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c98:	88f9      	ldrh	r1, [r7, #6]
 8000c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbeb      	blt.n	8000c7c <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	81fb      	strh	r3, [r7, #14]
 8000cb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cb4:	88b9      	ldrh	r1, [r7, #4]
 8000cb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cba:	440b      	add	r3, r1
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbda      	blt.n	8000c76 <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}

08000cca <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000cca:	b590      	push	{r4, r7, lr}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4603      	mov	r3, r0
 8000cde:	80bb      	strh	r3, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e01a      	b.n	8000d24 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	e010      	b.n	8000d16 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	88ba      	ldrh	r2, [r7, #4]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff ff2a 	bl	8000b64 <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	ddea      	ble.n	8000cf4 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbe0      	blt.n	8000cee <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
	...

08000d38 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10e      	bne.n	8000d6c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e007      	b.n	8000d64 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d54:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <LCD_Clear+0x40>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d6a:	d3f3      	bcc.n	8000d54 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000374 	.word	0x20000374

08000d7c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <LCD_SetTextColor+0x1c>)
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	8013      	strh	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000000 	.word	0x20000000

08000d9c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <LCD_SetFont+0x1c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000370 	.word	0x20000370

08000dbc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	603a      	str	r2, [r7, #0]
 8000dc6:	80fb      	strh	r3, [r7, #6]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e04c      	b.n	8000e74 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e03f      	b.n	8000e60 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <LCD_Draw_Char+0xd4>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	2280      	movs	r2, #128	@ 0x80
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	fa42 f303 	asr.w	r3, r2, r3
 8000e08:	400b      	ands	r3, r1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <LCD_Draw_Char+0x5c>
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d920      	bls.n	8000e5a <LCD_Draw_Char+0x9e>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	fa42 f303 	asr.w	r3, r2, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <LCD_Draw_Char+0x80>
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	889b      	ldrh	r3, [r3, #4]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d80e      	bhi.n	8000e5a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	4413      	add	r3, r2
 8000e44:	b298      	uxth	r0, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <LCD_Draw_Char+0xd8>)
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fe85 	bl	8000b64 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3b8      	bcc.n	8000de0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <LCD_Draw_Char+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	88db      	ldrh	r3, [r3, #6]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d3ab      	bcc.n	8000dda <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000370 	.word	0x20000370
 8000e90:	aaaaaaab 	.word	0xaaaaaaab
 8000e94:	20000000 	.word	0x20000000

08000e98 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	80bb      	strh	r3, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	3b20      	subs	r3, #32
 8000eae:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <LCD_DisplayChar+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <LCD_DisplayChar+0x40>)
 8000eba:	6809      	ldr	r1, [r1, #0]
 8000ebc:	88c9      	ldrh	r1, [r1, #6]
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	441a      	add	r2, r3
 8000ec6:	88b9      	ldrh	r1, [r7, #4]
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff76 	bl	8000dbc <LCD_Draw_Char>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000370 	.word	0x20000370

08000edc <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000ee8:	2310      	movs	r3, #16
 8000eea:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	e011      	b.n	8000f1a <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	b298      	uxth	r0, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	b299      	uxth	r1, r3
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f7ff ffc6 	bl	8000e98 <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4413      	add	r3, r2
 8000f12:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1e7      	bne.n	8000ef6 <LCD_DisplayString+0x1a>
    }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <LCD_Error_Handler+0x8>

08000f3c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f40:	f002 f9d0 	bl	80032e4 <STMPE811_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d001      	beq.n	8000f4e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f4a:	bf00      	nop
 8000f4c:	e7fd      	b.n	8000f4a <InitializeLCDTouch+0xe>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f002 faac 	bl	80034b8 <STMPE811_DetermineTouchPosition>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fa7c 	bl	8003472 <STMPE811_Read>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fa7a 	bl	8003494 <STMPE811_Write>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e00c      	b.n	8000fe6 <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	883a      	ldrh	r2, [r7, #0]
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fdc2 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbee      	blt.n	8000fcc <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	e01e      	b.n	8001032 <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	b29a      	uxth	r2, r3
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	883a      	ldrh	r2, [r7, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdaa 	bl	8000b64 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	b29a      	uxth	r2, r3
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	4413      	add	r3, r2
 8001018:	b298      	uxth	r0, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	b29a      	uxth	r2, r3
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	883a      	ldrh	r2, [r7, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fd9c 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3301      	adds	r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	085b      	lsrs	r3, r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4293      	cmp	r3, r2
 800103e:	dbd9      	blt.n	8000ff4 <Draw_Arrow_Up+0x4c>
    }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	4604      	mov	r4, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	461a      	mov	r2, r3
 8001058:	4623      	mov	r3, r4
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	4603      	mov	r3, r0
 800105e:	80bb      	strh	r3, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e00c      	b.n	8001088 <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop - i, color);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	b29b      	uxth	r3, r3
 8001072:	88ba      	ldrh	r2, [r7, #4]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b299      	uxth	r1, r3
 8001078:	883a      	ldrh	r2, [r7, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fd71 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbee      	blt.n	800106e <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	e01e      	b.n	80010d4 <Draw_Arrow_Down+0x8a>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i , color); // Left diagonal
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	b29a      	uxth	r2, r3
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4413      	add	r3, r2
 800109e:	b298      	uxth	r0, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	88ba      	ldrh	r2, [r7, #4]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	883a      	ldrh	r2, [r7, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd59 	bl	8000b64 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i, color); // Right diagonal
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	88fa      	ldrh	r2, [r7, #6]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b298      	uxth	r0, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	883a      	ldrh	r2, [r7, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd4b 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4293      	cmp	r3, r2
 80010e0:	dbd9      	blt.n	8001096 <Draw_Arrow_Down+0x4c>
    }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}

080010ec <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	4603      	mov	r3, r0
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e00c      	b.n	800112a <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	b29a      	uxth	r2, r3
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
 800111a:	883a      	ldrh	r2, [r7, #0]
 800111c:	88b9      	ldrh	r1, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fd20 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbee      	blt.n	8001110 <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	e01e      	b.n	8001176 <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	b29a      	uxth	r2, r3
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4413      	add	r3, r2
 8001140:	b298      	uxth	r0, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	b29b      	uxth	r3, r3
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b29b      	uxth	r3, r3
 800114c:	883a      	ldrh	r2, [r7, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd08 	bl	8000b64 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b29a      	uxth	r2, r3
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4413      	add	r3, r2
 800115c:	b298      	uxth	r0, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	b29a      	uxth	r2, r3
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	883a      	ldrh	r2, [r7, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fcfa 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	4293      	cmp	r3, r2
 8001182:	dbd9      	blt.n	8001138 <Draw_Arrow_Left+0x4c>
    }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 800118e:	b590      	push	{r4, r7, lr}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	4604      	mov	r4, r0
 8001196:	4608      	mov	r0, r1
 8001198:	4611      	mov	r1, r2
 800119a:	461a      	mov	r2, r3
 800119c:	4623      	mov	r3, r4
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	4603      	mov	r3, r0
 80011a2:	80bb      	strh	r3, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e00c      	b.n	80011cc <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	88fa      	ldrh	r2, [r7, #6]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	883a      	ldrh	r2, [r7, #0]
 80011be:	88b9      	ldrh	r1, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fccf 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbee      	blt.n	80011b2 <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	e01e      	b.n	8001218 <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b298      	uxth	r0, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcb7 	bl	8000b64 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	88fa      	ldrh	r2, [r7, #6]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	b298      	uxth	r0, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	b29a      	uxth	r2, r3
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	883a      	ldrh	r2, [r7, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fca9 	bl	8000b64 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4293      	cmp	r3, r2
 8001224:	dbd9      	blt.n	80011da <Draw_Arrow_Right+0x4c>
    }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <Draw_Arrows_On_Screen+0x16>
 8001240:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001244:	e001      	b.n	800124a <Draw_Arrows_On_Screen+0x1a>
 8001246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800124a:	2214      	movs	r2, #20
 800124c:	210a      	movs	r1, #10
 800124e:	2078      	movs	r0, #120	@ 0x78
 8001250:	f7ff feaa 	bl	8000fa8 <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d102      	bne.n	8001260 <Draw_Arrows_On_Screen+0x30>
 800125a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800125e:	e001      	b.n	8001264 <Draw_Arrows_On_Screen+0x34>
 8001260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001264:	2214      	movs	r2, #20
 8001266:	21a0      	movs	r1, #160	@ 0xa0
 8001268:	20e6      	movs	r0, #230	@ 0xe6
 800126a:	f7ff ff90 	bl	800118e <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d102      	bne.n	800127a <Draw_Arrows_On_Screen+0x4a>
 8001274:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001278:	e001      	b.n	800127e <Draw_Arrows_On_Screen+0x4e>
 800127a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800127e:	2214      	movs	r2, #20
 8001280:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001284:	2078      	movs	r0, #120	@ 0x78
 8001286:	f7ff fee0 	bl	800104a <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d102      	bne.n	8001296 <Draw_Arrows_On_Screen+0x66>
 8001290:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001294:	e001      	b.n	800129a <Draw_Arrows_On_Screen+0x6a>
 8001296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129a:	2214      	movs	r2, #20
 800129c:	21a0      	movs	r1, #160	@ 0xa0
 800129e:	200a      	movs	r0, #10
 80012a0:	f7ff ff24 	bl	80010ec <Draw_Arrow_Left>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4604      	mov	r4, r0
 80012b4:	4608      	mov	r0, r1
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	4603      	mov	r3, r0
 80012c0:	80bb      	strh	r3, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]
 80012c6:	4613      	mov	r3, r2
 80012c8:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	4a33      	ldr	r2, [pc, #204]	@ (800139c <Draw_Tetris_Block+0xf0>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 80012d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012da:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 80012de:	88b9      	ldrh	r1, [r7, #4]
 80012e0:	88f8      	ldrh	r0, [r7, #6]
 80012e2:	883b      	ldrh	r3, [r7, #0]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4623      	mov	r3, r4
 80012e8:	f7ff fcb3 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 80012ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012f0:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80012f4:	88b9      	ldrh	r1, [r7, #4]
 80012f6:	88f8      	ldrh	r0, [r7, #6]
 80012f8:	8c3b      	ldrh	r3, [r7, #32]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4623      	mov	r3, r4
 80012fe:	f7ff fca8 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 8001302:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001306:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800130a:	88b9      	ldrh	r1, [r7, #4]
 800130c:	88f8      	ldrh	r0, [r7, #6]
 800130e:	8c3b      	ldrh	r3, [r7, #32]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4623      	mov	r3, r4
 8001314:	f7ff fc9d 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 8001318:	88ba      	ldrh	r2, [r7, #4]
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	4413      	add	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b299      	uxth	r1, r3
 8001326:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800132a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800132e:	88f8      	ldrh	r0, [r7, #6]
 8001330:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4623      	mov	r3, r4
 8001336:	f7ff fc8c 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	4413      	add	r3, r2
 8001340:	b29a      	uxth	r2, r3
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b298      	uxth	r0, r3
 8001348:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800134c:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001350:	88b9      	ldrh	r1, [r7, #4]
 8001352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	4623      	mov	r3, r4
 8001358:	f7ff fc7b 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 800135c:	88ba      	ldrh	r2, [r7, #4]
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	4413      	add	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	3b01      	subs	r3, #1
 8001366:	b299      	uxth	r1, r3
 8001368:	8c3b      	ldrh	r3, [r7, #32]
 800136a:	89fa      	ldrh	r2, [r7, #14]
 800136c:	88f8      	ldrh	r0, [r7, #6]
 800136e:	f7ff fcac 	bl	8000cca <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 8001372:	88fa      	ldrh	r2, [r7, #6]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b298      	uxth	r0, r3
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	4413      	add	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b299      	uxth	r1, r3
 800138c:	8c3b      	ldrh	r3, [r7, #32]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	f7ff fc9b 	bl	8000cca <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	aaaaaaab 	.word	0xaaaaaaab

080013a0 <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	82fb      	strh	r3, [r7, #22]
 80013b4:	e047      	b.n	8001446 <Fill_Tetris_Board+0xa6>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	82bb      	strh	r3, [r7, #20]
 80013ba:	e03e      	b.n	800143a <Fill_Tetris_Board+0x9a>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 80013bc:	8abb      	ldrh	r3, [r7, #20]
 80013be:	461a      	mov	r2, r3
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	4413      	add	r3, r2
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	8abb      	ldrh	r3, [r7, #20]
 80013d0:	4413      	add	r3, r2
 80013d2:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80013d4:	8afb      	ldrh	r3, [r7, #22]
 80013d6:	461a      	mov	r2, r3
 80013d8:	0052      	lsls	r2, r2, #1
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	883b      	ldrh	r3, [r7, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	4413      	add	r3, r2
 80013ea:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = board->grid[row][col];
 80013ec:	8afa      	ldrh	r2, [r7, #22]
 80013ee:	8ab8      	ldrh	r0, [r7, #20]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001400:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d015      	beq.n	8001434 <Fill_Tetris_Board+0x94>
				uint16_t * colors = piceIndexToColors(index-1);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3b01      	subs	r3, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fb7b 	bl	8002b08 <piceIndexToColors>
 8001412:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	881c      	ldrh	r4, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3302      	adds	r3, #2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	3204      	adds	r2, #4
 8001422:	8812      	ldrh	r2, [r2, #0]
 8001424:	8a39      	ldrh	r1, [r7, #16]
 8001426:	8a78      	ldrh	r0, [r7, #18]
 8001428:	9201      	str	r2, [sp, #4]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4623      	mov	r3, r4
 800142e:	220c      	movs	r2, #12
 8001430:	f7ff ff3c 	bl	80012ac <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 8001434:	8abb      	ldrh	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	82bb      	strh	r3, [r7, #20]
 800143a:	8abb      	ldrh	r3, [r7, #20]
 800143c:	2b09      	cmp	r3, #9
 800143e:	d9bd      	bls.n	80013bc <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001440:	8afb      	ldrh	r3, [r7, #22]
 8001442:	3301      	adds	r3, #1
 8001444:	82fb      	strh	r3, [r7, #22]
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	2b13      	cmp	r3, #19
 800144a:	d9b4      	bls.n	80013b6 <Fill_Tetris_Board+0x16>
//        Draw_Tetris_Block(startX - BLOCK_SIZE - 1, yPos, BLOCK_SIZE, greyColor, greyColor, greyColor);
//
//        // Right border
//        Draw_Tetris_Block(startX + BOARD_WIDTH * BLOCK_SIZE + BOARD_WIDTH, yPos, BLOCK_SIZE, greyColor, greyColor, greyColor);
//    }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
	...

08001458 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 800146a:	2300      	movs	r3, #0
 800146c:	82fb      	strh	r3, [r7, #22]
 800146e:	e047      	b.n	8001500 <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001470:	2300      	movs	r3, #0
 8001472:	82bb      	strh	r3, [r7, #20]
 8001474:	e03e      	b.n	80014f4 <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001476:	8abb      	ldrh	r3, [r7, #20]
 8001478:	461a      	mov	r2, r3
 800147a:	0052      	lsls	r2, r2, #1
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	b29a      	uxth	r2, r3
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	8abb      	ldrh	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	461a      	mov	r2, r3
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	b29a      	uxth	r2, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	4413      	add	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	4413      	add	r3, r2
 80014a4:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 80014a6:	79f9      	ldrb	r1, [r7, #7]
 80014a8:	8afa      	ldrh	r2, [r7, #22]
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	4818      	ldr	r0, [pc, #96]	@ (8001510 <DrawTetrominoByIndex+0xb8>)
 80014ae:	0089      	lsls	r1, r1, #2
 80014b0:	440a      	add	r2, r1
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014ba:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb1e 	bl	8002b08 <piceIndexToColors>
 80014cc:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	881c      	ldrh	r4, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3302      	adds	r3, #2
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	3204      	adds	r2, #4
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	8a39      	ldrh	r1, [r7, #16]
 80014e0:	8a78      	ldrh	r0, [r7, #18]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4623      	mov	r3, r4
 80014e8:	220c      	movs	r2, #12
 80014ea:	f7ff fedf 	bl	80012ac <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	82bb      	strh	r3, [r7, #20]
 80014f4:	8abb      	ldrh	r3, [r7, #20]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d9bd      	bls.n	8001476 <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	3301      	adds	r3, #1
 80014fe:	82fb      	strh	r3, [r7, #22]
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9b4      	bls.n	8001470 <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	20000010 	.word	0x20000010

08001514 <DrawTetromino>:
void DrawTetromino(Piece * piece, uint16_t startX, uint16_t startY)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001524:	2300      	movs	r3, #0
 8001526:	82fb      	strh	r3, [r7, #22]
 8001528:	e044      	b.n	80015b4 <DrawTetromino+0xa0>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 800152a:	2300      	movs	r3, #0
 800152c:	82bb      	strh	r3, [r7, #20]
 800152e:	e03b      	b.n	80015a8 <DrawTetromino+0x94>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001530:	8abb      	ldrh	r3, [r7, #20]
 8001532:	461a      	mov	r2, r3
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	b29a      	uxth	r2, r3
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4413      	add	r3, r2
 8001540:	b29a      	uxth	r2, r3
 8001542:	8abb      	ldrh	r3, [r7, #20]
 8001544:	4413      	add	r3, r2
 8001546:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001548:	8afb      	ldrh	r3, [r7, #22]
 800154a:	461a      	mov	r2, r3
 800154c:	0052      	lsls	r2, r2, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	b29a      	uxth	r2, r3
 8001554:	883b      	ldrh	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	8afb      	ldrh	r3, [r7, #22]
 800155c:	4413      	add	r3, r2
 800155e:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = piece->matrix[row][col];
 8001560:	8af9      	ldrh	r1, [r7, #22]
 8001562:	8aba      	ldrh	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0089      	lsls	r1, r1, #2
 8001568:	440a      	add	r2, r1
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <DrawTetromino+0x8e>
				uint16_t * colors = piceIndexToColors(index-1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fac4 	bl	8002b08 <piceIndexToColors>
 8001580:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	881c      	ldrh	r4, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3302      	adds	r3, #2
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	3204      	adds	r2, #4
 8001590:	8812      	ldrh	r2, [r2, #0]
 8001592:	8a39      	ldrh	r1, [r7, #16]
 8001594:	8a78      	ldrh	r0, [r7, #18]
 8001596:	9201      	str	r2, [sp, #4]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4623      	mov	r3, r4
 800159c:	220c      	movs	r2, #12
 800159e:	f7ff fe85 	bl	80012ac <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80015a2:	8abb      	ldrh	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	82bb      	strh	r3, [r7, #20]
 80015a8:	8abb      	ldrh	r3, [r7, #20]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d9c0      	bls.n	8001530 <DrawTetromino+0x1c>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80015ae:	8afb      	ldrh	r3, [r7, #22]
 80015b0:	3301      	adds	r3, #1
 80015b2:	82fb      	strh	r3, [r7, #22]
 80015b4:	8afb      	ldrh	r3, [r7, #22]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d9b7      	bls.n	800152a <DrawTetromino+0x16>
            }
        }
    }
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}

080015c4 <LCD_Draw_Rounded_Rectangle_Fill>:

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	8b3b      	ldrh	r3, [r7, #24]
 80015e6:	4413      	add	r3, r2
 80015e8:	b298      	uxth	r0, r3
 80015ea:	88ba      	ldrh	r2, [r7, #4]
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	4413      	add	r3, r2
 80015f0:	b299      	uxth	r1, r3
 80015f2:	8b3b      	ldrh	r3, [r7, #24]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21c      	sxth	r4, r3
 8001600:	8b3b      	ldrh	r3, [r7, #24]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	883a      	ldrh	r2, [r7, #0]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	b21a      	sxth	r2, r3
 800160e:	8bbb      	ldrh	r3, [r7, #28]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	4622      	mov	r2, r4
 8001616:	f7ff fb1c 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	8b3b      	ldrh	r3, [r7, #24]
 800161e:	4413      	add	r3, r2
 8001620:	b298      	uxth	r0, r3
 8001622:	8b3b      	ldrh	r3, [r7, #24]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	b29b      	uxth	r3, r3
 800162e:	b21a      	sxth	r2, r3
 8001630:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001634:	88b9      	ldrh	r1, [r7, #4]
 8001636:	8bbb      	ldrh	r3, [r7, #28]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	4623      	mov	r3, r4
 800163c:	f7ff fb09 	bl	8000c52 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	8b3b      	ldrh	r3, [r7, #24]
 8001644:	4413      	add	r3, r2
 8001646:	b298      	uxth	r0, r3
 8001648:	88ba      	ldrh	r2, [r7, #4]
 800164a:	883b      	ldrh	r3, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	8b3b      	ldrh	r3, [r7, #24]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b299      	uxth	r1, r3
 8001656:	8b3b      	ldrh	r3, [r7, #24]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001668:	8bbb      	ldrh	r3, [r7, #28]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4623      	mov	r3, r4
 800166e:	f7ff faf0 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 8001672:	88ba      	ldrh	r2, [r7, #4]
 8001674:	8b3b      	ldrh	r3, [r7, #24]
 8001676:	4413      	add	r3, r2
 8001678:	b299      	uxth	r1, r3
 800167a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800167e:	8b3b      	ldrh	r3, [r7, #24]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	883a      	ldrh	r2, [r7, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21a      	sxth	r2, r3
 800168c:	88f8      	ldrh	r0, [r7, #6]
 800168e:	8bbb      	ldrh	r3, [r7, #28]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	4622      	mov	r2, r4
 8001696:	f7ff fadc 	bl	8000c52 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4413      	add	r3, r2
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	8b3b      	ldrh	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	b298      	uxth	r0, r3
 80016a8:	88ba      	ldrh	r2, [r7, #4]
 80016aa:	8b3b      	ldrh	r3, [r7, #24]
 80016ac:	4413      	add	r3, r2
 80016ae:	b299      	uxth	r1, r3
 80016b0:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80016b4:	8b3b      	ldrh	r3, [r7, #24]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	883a      	ldrh	r2, [r7, #0]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	8bbb      	ldrh	r3, [r7, #28]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	f7ff fac2 	bl	8000c52 <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	8b3b      	ldrh	r3, [r7, #24]
 80016d2:	4413      	add	r3, r2
 80016d4:	b298      	uxth	r0, r3
 80016d6:	88ba      	ldrh	r2, [r7, #4]
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	4413      	add	r3, r2
 80016dc:	b299      	uxth	r1, r3
 80016de:	8bbb      	ldrh	r3, [r7, #28]
 80016e0:	8b3a      	ldrh	r2, [r7, #24]
 80016e2:	f7ff fa63 	bl	8000bac <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4413      	add	r3, r2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	8b3b      	ldrh	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b298      	uxth	r0, r3
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	8b3b      	ldrh	r3, [r7, #24]
 80016f8:	4413      	add	r3, r2
 80016fa:	b299      	uxth	r1, r3
 80016fc:	8bbb      	ldrh	r3, [r7, #28]
 80016fe:	8b3a      	ldrh	r2, [r7, #24]
 8001700:	f7ff fa54 	bl	8000bac <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	8b3b      	ldrh	r3, [r7, #24]
 8001708:	4413      	add	r3, r2
 800170a:	b298      	uxth	r0, r3
 800170c:	88ba      	ldrh	r2, [r7, #4]
 800170e:	883b      	ldrh	r3, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b29a      	uxth	r2, r3
 8001714:	8b3b      	ldrh	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b299      	uxth	r1, r3
 800171a:	8bbb      	ldrh	r3, [r7, #28]
 800171c:	8b3a      	ldrh	r2, [r7, #24]
 800171e:	f7ff fa45 	bl	8000bac <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	8b3b      	ldrh	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b298      	uxth	r0, r3
 8001730:	88ba      	ldrh	r2, [r7, #4]
 8001732:	883b      	ldrh	r3, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	b29a      	uxth	r2, r3
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b299      	uxth	r1, r3
 800173e:	8bbb      	ldrh	r3, [r7, #28]
 8001740:	8b3a      	ldrh	r2, [r7, #24]
 8001742:	f7ff fa33 	bl	8000bac <LCD_Draw_Circle_Fill>
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
	...

08001750 <initGame>:
Board board;
Piece currentPiece;
Piece nextPiece;
uint32_t pointsScored;

void initGame() {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 8001754:	4806      	ldr	r0, [pc, #24]	@ (8001770 <initGame+0x20>)
 8001756:	f000 fa63 	bl	8001c20 <initializeBoard>
	initializeRandomPiece(& currentPiece);
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <initGame+0x24>)
 800175c:	f001 f990 	bl	8002a80 <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <initGame+0x28>)
 8001762:	f001 f98d 	bl	8002a80 <initializeRandomPiece>
	pointsScored = 0;
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <initGame+0x2c>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20025b74 	.word	0x20025b74
 8001774:	20025e94 	.word	0x20025e94
 8001778:	20025edc 	.word	0x20025edc
 800177c:	20025f24 	.word	0x20025f24

08001780 <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
    piece->y++;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f921 	bl	80019de <collision>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <movePieceDown+0x38>
        piece->y--;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44
        lockPiece(board, piece);
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f81a 	bl	80017e8 <lockPiece>
        return false;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <movePieceDown+0x3a>
    }
    return true;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <dropPiece>:
void dropPiece(Board *board, Piece *piece) {
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 80017cc:	bf00      	nop
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffd5 	bl	8001780 <movePieceDown>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f8      	bne.n	80017ce <dropPiece+0xc>
    }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e03b      	b.n	8001870 <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e032      	b.n	8001864 <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	0091      	lsls	r1, r2, #2
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	440a      	add	r2, r1
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d026      	beq.n	800185e <lockPiece+0x76>
                int x = piece->x + j;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4413      	add	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db19      	blt.n	800185e <lockPiece+0x76>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b13      	cmp	r3, #19
 800182e:	dc16      	bgt.n	800185e <lockPiece+0x76>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db13      	blt.n	800185e <lockPiece+0x76>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b09      	cmp	r3, #9
 800183a:	dc10      	bgt.n	800185e <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	0091      	lsls	r1, r2, #2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	440a      	add	r2, r1
 8001846:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	3301      	adds	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b03      	cmp	r3, #3
 8001868:	ddc9      	ble.n	80017fe <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b03      	cmp	r3, #3
 8001874:	ddc0      	ble.n	80017f8 <lockPiece+0x10>
                }
            }
        }
    }

    if (isGameOver(board)){
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f9b6 	bl	8001be8 <isGameOver>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <lockPiece+0xa2>
    	showEndScreen();
 8001882:	f001 fa25 	bl	8002cd0 <showEndScreen>
    	Error_Handler();
 8001886:	f001 f8f5 	bl	8002a74 <Error_Handler>
    }


    currentPiece = nextPiece;
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <lockPiece+0x114>)
 800188c:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <lockPiece+0x118>)
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	2348      	movs	r3, #72	@ 0x48
 8001894:	461a      	mov	r2, r3
 8001896:	f006 fb56 	bl	8007f46 <memcpy>
    initializeRandomPiece( & nextPiece);
 800189a:	4819      	ldr	r0, [pc, #100]	@ (8001900 <lockPiece+0x118>)
 800189c:	f001 f8f0 	bl	8002a80 <initializeRandomPiece>
    switch (clearCompletedRows(board)){
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f831 	bl	8001908 <clearCompletedRows>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d823      	bhi.n	80018f4 <lockPiece+0x10c>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <lockPiece+0xcc>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018f3 	.word	0x080018f3
 80018b8:	080018e9 	.word	0x080018e9
 80018bc:	080018df 	.word	0x080018df
 80018c0:	080018d5 	.word	0x080018d5
 80018c4:	080018c9 	.word	0x080018c9
		case 4:
			pointsScored+=300;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <lockPiece+0x11c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80018d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001904 <lockPiece+0x11c>)
 80018d2:	6013      	str	r3, [r2, #0]
		case 3:
			pointsScored+=200;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <lockPiece+0x11c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	33c8      	adds	r3, #200	@ 0xc8
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <lockPiece+0x11c>)
 80018dc:	6013      	str	r3, [r2, #0]
		case 2:
			pointsScored+=200;
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <lockPiece+0x11c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	33c8      	adds	r3, #200	@ 0xc8
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <lockPiece+0x11c>)
 80018e6:	6013      	str	r3, [r2, #0]
		case 1:
			pointsScored+=100;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <lockPiece+0x11c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3364      	adds	r3, #100	@ 0x64
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <lockPiece+0x11c>)
 80018f0:	6013      	str	r3, [r2, #0]
		case 0:
			break;
 80018f2:	bf00      	nop
    }
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20025e94 	.word	0x20025e94
 8001900:	20025edc 	.word	0x20025edc
 8001904:	20025f24 	.word	0x20025f24

08001908 <clearCompletedRows>:
uint16_t clearCompletedRows(Board *board) {
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	@ 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint16_t clearedRows = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	e057      	b.n	80019ca <clearCompletedRows+0xc2>
        int isComplete = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e011      	b.n	8001948 <clearCompletedRows+0x40>
            if (board->grid[i][j] == 0) {
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4413      	add	r3, r2
 8001934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <clearCompletedRows+0x3a>
                isComplete = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
                break;
 8001940:	e005      	b.n	800194e <clearCompletedRows+0x46>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	3301      	adds	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b09      	cmp	r3, #9
 800194c:	ddea      	ble.n	8001924 <clearCompletedRows+0x1c>
            }
        }

        if (isComplete) {
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d037      	beq.n	80019c4 <clearCompletedRows+0xbc>
            clearedRows++;
 8001954:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001956:	3301      	adds	r3, #1
 8001958:	84fb      	strh	r3, [r7, #38]	@ 0x26
            for (int k = i; k > 0; k--) {
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e020      	b.n	80019a2 <clearCompletedRows+0x9a>
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e017      	b.n	8001996 <clearCompletedRows+0x8e>
                    board->grid[k][j] = board->grid[k - 1][j];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	3301      	adds	r3, #1
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b09      	cmp	r3, #9
 800199a:	dde4      	ble.n	8001966 <clearCompletedRows+0x5e>
            for (int k = i; k > 0; k--) {
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3b01      	subs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dcdb      	bgt.n	8001960 <clearCompletedRows+0x58>
                }
            }

            for (int j = 0; j < BOARD_WIDTH; j++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e007      	b.n	80019be <clearCompletedRows+0xb6>
                board->grid[0][j] = 0;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	2100      	movs	r1, #0
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < BOARD_WIDTH; j++) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	ddf4      	ble.n	80019ae <clearCompletedRows+0xa6>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	3301      	adds	r3, #1
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	2b13      	cmp	r3, #19
 80019ce:	dda4      	ble.n	800191a <clearCompletedRows+0x12>
            }
        }
    }
    return clearedRows;
 80019d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	372c      	adds	r7, #44	@ 0x2c
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <collision>:

bool collision(Board *board, Piece *piece) {
 80019de:	b480      	push	{r7}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e03a      	b.n	8001a64 <collision+0x86>
        for (int j = 0; j < 4; j++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e031      	b.n	8001a58 <collision+0x7a>
            if (piece->matrix[i][j]) {
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	0091      	lsls	r1, r2, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	440a      	add	r2, r1
 80019fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d025      	beq.n	8001a52 <collision+0x74>
                int x = piece->x + j;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db05      	blt.n	8001a2c <collision+0x4e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	dc02      	bgt.n	8001a2c <collision+0x4e>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b13      	cmp	r3, #19
 8001a2a:	dd01      	ble.n	8001a30 <collision+0x52>
                    return true;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01d      	b.n	8001a6c <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0d      	blt.n	8001a52 <collision+0x74>
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <collision+0x74>
                    return true;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00c      	b.n	8001a6c <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	ddca      	ble.n	80019f4 <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	ddc1      	ble.n	80019ee <collision+0x10>
                }
            }
        }
    }
    return false;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <rotatePiece>:

void rotatePiece(Piece *piece) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b096      	sub	sp, #88	@ 0x58
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 f9e1 	bl	8007e50 <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a92:	e01d      	b.n	8001ad0 <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a98:	e014      	b.n	8001ac4 <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	f1c3 0303 	rsb	r3, r3, #3
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001aa4:	0088      	lsls	r0, r1, #2
 8001aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001aa8:	4401      	add	r1, r0
 8001aaa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001aae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ab0:	0089      	lsls	r1, r1, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	3358      	adds	r3, #88	@ 0x58
 8001ab8:	443b      	add	r3, r7
 8001aba:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 8001abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	dde7      	ble.n	8001a9a <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	3301      	adds	r3, #1
 8001ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	ddde      	ble.n	8001a94 <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ada:	e01b      	b.n	8001b14 <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ae0:	e012      	b.n	8001b08 <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ae4:	009a      	lsls	r2, r3, #2
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3358      	adds	r3, #88	@ 0x58
 8001aee:	443b      	add	r3, r7
 8001af0:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af8:	0090      	lsls	r0, r2, #2
 8001afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001afc:	4402      	add	r2, r0
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b04:	3301      	adds	r3, #1
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	dde9      	ble.n	8001ae2 <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b10:	3301      	adds	r3, #1
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	dde0      	ble.n	8001adc <rotatePiece+0x64>
        }
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3758      	adds	r7, #88	@ 0x58
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d83b      	bhi.n	8001bb0 <handleInput+0x8c>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <handleInput+0x1c>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b6d 	.word	0x08001b6d
 8001b44:	08001b61 	.word	0x08001b61
 8001b48:	08001b9b 	.word	0x08001b9b
 8001b4c:	08001b55 	.word	0x08001b55
 8001b50:	08001ba5 	.word	0x08001ba5
        case 3: // Move left
            piece->x--;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001b5e:	e027      	b.n	8001bb0 <handleInput+0x8c>
        case 1: // Move right
            piece->x++;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001b6a:	e021      	b.n	8001bb0 <handleInput+0x8c>
        case 0: // Rotate
            rotatePiece(piece);
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f7ff ff83 	bl	8001a78 <rotatePiece>
            if (collision(board, piece)) {
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff ff32 	bl	80019de <collision>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <handleInput+0x8a>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e005      	b.n	8001b92 <handleInput+0x6e>
                    rotatePiece(piece);
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff ff76 	bl	8001a78 <rotatePiece>
                for (int i = 0; i < 3; i++) {
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	ddf6      	ble.n	8001b86 <handleInput+0x62>
                }
            }
            break;
 8001b98:	e009      	b.n	8001bae <handleInput+0x8a>
        case 2: // Soft drop
        	movePieceDown(board, piece);
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff fdef 	bl	8001780 <movePieceDown>
            break;
 8001ba2:	e005      	b.n	8001bb0 <handleInput+0x8c>
        case 4: // Hard drop
            dropPiece(board, piece);
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fe0b 	bl	80017c2 <dropPiece>
            break;
 8001bac:	e000      	b.n	8001bb0 <handleInput+0x8c>
            break;
 8001bae:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff ff13 	bl	80019de <collision>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <handleInput+0xbc>
        switch (command) {
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d007      	beq.n	8001bd4 <handleInput+0xb0>
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d10b      	bne.n	8001be0 <handleInput+0xbc>
            case 3: piece->x++; break;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bd2:	e005      	b.n	8001be0 <handleInput+0xbc>
            case 1: piece->x--; break;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bde:	bf00      	nop
        }
    }
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <isGameOver>:

bool isGameOver(Board *board) {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e00a      	b.n	8001c0c <isGameOver+0x24>
        if (board->grid[0][i] != 0) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <isGameOver+0x1e>
            return true;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e006      	b.n	8001c14 <isGameOver+0x2c>
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	ddf1      	ble.n	8001bf6 <isGameOver+0xe>
        }
    }
    return false;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e016      	b.n	8001c5c <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	e00d      	b.n	8001c50 <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	4413      	add	r3, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	ddee      	ble.n	8001c34 <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b13      	cmp	r3, #19
 8001c60:	dde5      	ble.n	8001c2e <initializeBoard+0xe>
        }
    }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <boardWithPiece>:

Board boardWithPiece(Board *board, Piece *piece) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001c7c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001c80:	6018      	str	r0, [r3, #0]
 8001c82:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001c86:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001c8a:	6019      	str	r1, [r3, #0]
 8001c8c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001c90:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001c94:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001c9c:	e030      	b.n	8001d00 <boardWithPiece+0x90>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001ca4:	e023      	b.n	8001cee <boardWithPiece+0x7e>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001ca6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001caa:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001cc6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001cca:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001cce:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001cde:	4413      	add	r3, r2
 8001ce0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ce4:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001cee:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001cf2:	2b09      	cmp	r3, #9
 8001cf4:	ddd7      	ble.n	8001ca6 <boardWithPiece+0x36>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001cf6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001d00:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001d04:	2b13      	cmp	r3, #19
 8001d06:	ddca      	ble.n	8001c9e <boardWithPiece+0x2e>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001d0e:	e052      	b.n	8001db6 <boardWithPiece+0x146>
        for (int pj = 0; pj < 4; pj++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001d16:	e045      	b.n	8001da4 <boardWithPiece+0x134>
            int px = piece->x + pj;
 8001d18:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d1c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001d28:	4413      	add	r3, r2
 8001d2a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int py = piece->y + pi;
 8001d2e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d32:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001d3e:	4413      	add	r3, r2
 8001d40:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001d44:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d48:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001d52:	0091      	lsls	r1, r2, #2
 8001d54:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001d58:	440a      	add	r2, r1
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01b      	beq.n	8001d9a <boardWithPiece+0x12a>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001d62:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d66:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001d76:	440a      	add	r2, r1
 8001d78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d80:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001d84:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001d94:	4413      	add	r3, r2
 8001d96:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001d9a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001da4:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	ddb5      	ble.n	8001d18 <boardWithPiece+0xa8>
    for (int pi = 0; pi < 4; pi++) {
 8001dac:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001db0:	3301      	adds	r3, #1
 8001db2:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001db6:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	dda8      	ble.n	8001d10 <boardWithPiece+0xa0>
//            }
        }
    }

    return tempBoard;
 8001dbe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001dc2:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001dcc:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f006 f8b4 	bl	8007f46 <memcpy>
}
 8001dde:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001de2:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001df4:	f000 f9fe 	bl	80021f4 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001df8:	20ca      	movs	r0, #202	@ 0xca
 8001dfa:	f000 f943 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001dfe:	20c3      	movs	r0, #195	@ 0xc3
 8001e00:	f000 f94d 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001e04:	2008      	movs	r0, #8
 8001e06:	f000 f94a 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001e0a:	2050      	movs	r0, #80	@ 0x50
 8001e0c:	f000 f947 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001e10:	20cf      	movs	r0, #207	@ 0xcf
 8001e12:	f000 f937 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f941 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e1c:	20c1      	movs	r0, #193	@ 0xc1
 8001e1e:	f000 f93e 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e22:	2030      	movs	r0, #48	@ 0x30
 8001e24:	f000 f93b 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e28:	20ed      	movs	r0, #237	@ 0xed
 8001e2a:	f000 f92b 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e2e:	2064      	movs	r0, #100	@ 0x64
 8001e30:	f000 f935 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f932 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e3a:	2012      	movs	r0, #18
 8001e3c:	f000 f92f 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e40:	2081      	movs	r0, #129	@ 0x81
 8001e42:	f000 f92c 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e46:	20e8      	movs	r0, #232	@ 0xe8
 8001e48:	f000 f91c 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e4c:	2085      	movs	r0, #133	@ 0x85
 8001e4e:	f000 f926 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f923 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e58:	2078      	movs	r0, #120	@ 0x78
 8001e5a:	f000 f920 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e5e:	20cb      	movs	r0, #203	@ 0xcb
 8001e60:	f000 f910 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e64:	2039      	movs	r0, #57	@ 0x39
 8001e66:	f000 f91a 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e6a:	202c      	movs	r0, #44	@ 0x2c
 8001e6c:	f000 f917 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 f914 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e76:	2034      	movs	r0, #52	@ 0x34
 8001e78:	f000 f911 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f000 f90e 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e82:	20f7      	movs	r0, #247	@ 0xf7
 8001e84:	f000 f8fe 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f000 f908 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001e8e:	20ea      	movs	r0, #234	@ 0xea
 8001e90:	f000 f8f8 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f902 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f8ff 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001ea0:	20b1      	movs	r0, #177	@ 0xb1
 8001ea2:	f000 f8ef 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f8f9 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001eac:	201b      	movs	r0, #27
 8001eae:	f000 f8f6 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001eb2:	20b6      	movs	r0, #182	@ 0xb6
 8001eb4:	f000 f8e6 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001eb8:	200a      	movs	r0, #10
 8001eba:	f000 f8f0 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001ebe:	20a2      	movs	r0, #162	@ 0xa2
 8001ec0:	f000 f8ed 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001ec4:	20c0      	movs	r0, #192	@ 0xc0
 8001ec6:	f000 f8dd 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001eca:	2010      	movs	r0, #16
 8001ecc:	f000 f8e7 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ed0:	20c1      	movs	r0, #193	@ 0xc1
 8001ed2:	f000 f8d7 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ed6:	2010      	movs	r0, #16
 8001ed8:	f000 f8e1 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001edc:	20c5      	movs	r0, #197	@ 0xc5
 8001ede:	f000 f8d1 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ee2:	2045      	movs	r0, #69	@ 0x45
 8001ee4:	f000 f8db 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ee8:	2015      	movs	r0, #21
 8001eea:	f000 f8d8 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001eee:	20c7      	movs	r0, #199	@ 0xc7
 8001ef0:	f000 f8c8 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ef4:	2090      	movs	r0, #144	@ 0x90
 8001ef6:	f000 f8d2 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001efa:	2036      	movs	r0, #54	@ 0x36
 8001efc:	f000 f8c2 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001f00:	20c8      	movs	r0, #200	@ 0xc8
 8001f02:	f000 f8cc 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001f06:	20f2      	movs	r0, #242	@ 0xf2
 8001f08:	f000 f8bc 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 f8c6 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001f12:	20b0      	movs	r0, #176	@ 0xb0
 8001f14:	f000 f8b6 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f18:	20c2      	movs	r0, #194	@ 0xc2
 8001f1a:	f000 f8c0 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f1e:	20b6      	movs	r0, #182	@ 0xb6
 8001f20:	f000 f8b0 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f000 f8ba 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f2a:	20a7      	movs	r0, #167	@ 0xa7
 8001f2c:	f000 f8b7 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f30:	2027      	movs	r0, #39	@ 0x27
 8001f32:	f000 f8b4 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f36:	2004      	movs	r0, #4
 8001f38:	f000 f8b1 	bl	800209e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f3c:	202a      	movs	r0, #42	@ 0x2a
 8001f3e:	f000 f8a1 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f8ab 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f8a8 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f8a5 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f54:	20ef      	movs	r0, #239	@ 0xef
 8001f56:	f000 f8a2 	bl	800209e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f5a:	202b      	movs	r0, #43	@ 0x2b
 8001f5c:	f000 f892 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 f89c 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f899 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f000 f896 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f72:	203f      	movs	r0, #63	@ 0x3f
 8001f74:	f000 f893 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f78:	20f6      	movs	r0, #246	@ 0xf6
 8001f7a:	f000 f883 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 f88d 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 f88a 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001f8a:	2006      	movs	r0, #6
 8001f8c:	f000 f887 	bl	800209e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001f90:	202c      	movs	r0, #44	@ 0x2c
 8001f92:	f000 f877 	bl	8002084 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f96:	20c8      	movs	r0, #200	@ 0xc8
 8001f98:	f000 f9e8 	bl	800236c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001f9c:	2026      	movs	r0, #38	@ 0x26
 8001f9e:	f000 f871 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f000 f87b 	bl	800209e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001fa8:	20e0      	movs	r0, #224	@ 0xe0
 8001faa:	f000 f86b 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f000 f875 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fb4:	2029      	movs	r0, #41	@ 0x29
 8001fb6:	f000 f872 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001fba:	2024      	movs	r0, #36	@ 0x24
 8001fbc:	f000 f86f 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fc0:	200c      	movs	r0, #12
 8001fc2:	f000 f86c 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fc6:	200e      	movs	r0, #14
 8001fc8:	f000 f869 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fcc:	2009      	movs	r0, #9
 8001fce:	f000 f866 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001fd2:	204e      	movs	r0, #78	@ 0x4e
 8001fd4:	f000 f863 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fd8:	2078      	movs	r0, #120	@ 0x78
 8001fda:	f000 f860 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001fde:	203c      	movs	r0, #60	@ 0x3c
 8001fe0:	f000 f85d 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fe4:	2009      	movs	r0, #9
 8001fe6:	f000 f85a 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001fea:	2013      	movs	r0, #19
 8001fec:	f000 f857 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f000 f854 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001ff6:	2017      	movs	r0, #23
 8001ff8:	f000 f851 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ffc:	2011      	movs	r0, #17
 8001ffe:	f000 f84e 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f84b 	bl	800209e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002008:	20e1      	movs	r0, #225	@ 0xe1
 800200a:	f000 f83b 	bl	8002084 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f845 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002014:	2016      	movs	r0, #22
 8002016:	f000 f842 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800201a:	201b      	movs	r0, #27
 800201c:	f000 f83f 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002020:	2004      	movs	r0, #4
 8002022:	f000 f83c 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002026:	2011      	movs	r0, #17
 8002028:	f000 f839 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800202c:	2007      	movs	r0, #7
 800202e:	f000 f836 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002032:	2031      	movs	r0, #49	@ 0x31
 8002034:	f000 f833 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002038:	2033      	movs	r0, #51	@ 0x33
 800203a:	f000 f830 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800203e:	2042      	movs	r0, #66	@ 0x42
 8002040:	f000 f82d 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002044:	2005      	movs	r0, #5
 8002046:	f000 f82a 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800204a:	200c      	movs	r0, #12
 800204c:	f000 f827 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002050:	200a      	movs	r0, #10
 8002052:	f000 f824 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002056:	2028      	movs	r0, #40	@ 0x28
 8002058:	f000 f821 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800205c:	202f      	movs	r0, #47	@ 0x2f
 800205e:	f000 f81e 	bl	800209e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002062:	200f      	movs	r0, #15
 8002064:	f000 f81b 	bl	800209e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002068:	2011      	movs	r0, #17
 800206a:	f000 f80b 	bl	8002084 <ili9341_Write_Reg>
  LCD_Delay(200);
 800206e:	20c8      	movs	r0, #200	@ 0xc8
 8002070:	f000 f97c 	bl	800236c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002074:	2029      	movs	r0, #41	@ 0x29
 8002076:	f000 f805 	bl	8002084 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800207a:	202c      	movs	r0, #44	@ 0x2c
 800207c:	f000 f802 	bl	8002084 <ili9341_Write_Reg>
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f949 	bl	8002328 <LCD_IO_WriteReg>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f91a 	bl	80022e4 <LCD_IO_WriteData>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020bc:	4819      	ldr	r0, [pc, #100]	@ (8002124 <SPI_Init+0x6c>)
 80020be:	f004 fd80 	bl	8006bc2 <HAL_SPI_GetState>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d12b      	bne.n	8002120 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020c8:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <SPI_Init+0x6c>)
 80020ca:	4a17      	ldr	r2, [pc, #92]	@ (8002128 <SPI_Init+0x70>)
 80020cc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <SPI_Init+0x6c>)
 80020d0:	2218      	movs	r2, #24
 80020d2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <SPI_Init+0x6c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <SPI_Init+0x6c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020e0:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <SPI_Init+0x6c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <SPI_Init+0x6c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <SPI_Init+0x6c>)
 80020ee:	2207      	movs	r2, #7
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <SPI_Init+0x6c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <SPI_Init+0x6c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <SPI_Init+0x6c>)
 8002100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002104:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <SPI_Init+0x6c>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <SPI_Init+0x6c>)
 800210e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002112:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <SPI_Init+0x6c>)
 8002116:	f000 f833 	bl	8002180 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800211a:	4802      	ldr	r0, [pc, #8]	@ (8002124 <SPI_Init+0x6c>)
 800211c:	f004 fb5c 	bl	80067d8 <HAL_SPI_Init>
  }
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20025f28 	.word	0x20025f28
 8002128:	40015000 	.word	0x40015000

0800212c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <SPI_Write+0x34>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1db9      	adds	r1, r7, #6
 8002140:	2201      	movs	r2, #1
 8002142:	4808      	ldr	r0, [pc, #32]	@ (8002164 <SPI_Write+0x38>)
 8002144:	f004 fbf9 	bl	800693a <HAL_SPI_Transmit>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002152:	f000 f809 	bl	8002168 <SPI_Error>
  }
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c
 8002164:	20025f28 	.word	0x20025f28

08002168 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800216c:	4803      	ldr	r0, [pc, #12]	@ (800217c <SPI_Error+0x14>)
 800216e:	f004 fbbc 	bl	80068ea <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002172:	f7ff ffa1 	bl	80020b8 <SPI_Init>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20025f28 	.word	0x20025f28

08002180 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <SPI_MspInit+0x6c>)
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <SPI_MspInit+0x6c>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	6453      	str	r3, [r2, #68]	@ 0x44
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <SPI_MspInit+0x6c>)
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <SPI_MspInit+0x6c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <SPI_MspInit+0x6c>)
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <SPI_MspInit+0x6c>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021c0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021ce:	2301      	movs	r3, #1
 80021d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021d2:	2305      	movs	r3, #5
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <SPI_MspInit+0x70>)
 80021de:	f001 fe69 	bl	8003eb4 <HAL_GPIO_Init>
}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40021400 	.word	0x40021400

080021f4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80021fa:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <LCD_IO_Init+0xe0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d164      	bne.n	80022cc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002202:	4b34      	ldr	r3, [pc, #208]	@ (80022d4 <LCD_IO_Init+0xe0>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <LCD_IO_Init+0xe4>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <LCD_IO_Init+0xe4>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <LCD_IO_Init+0xe4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002228:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4827      	ldr	r0, [pc, #156]	@ (80022dc <LCD_IO_Init+0xe8>)
 800223e:	f001 fe39 	bl	8003eb4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <LCD_IO_Init+0xe4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a23      	ldr	r2, [pc, #140]	@ (80022d8 <LCD_IO_Init+0xe4>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <LCD_IO_Init+0xe4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800225e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002262:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800226c:	2302      	movs	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4619      	mov	r1, r3
 8002276:	4819      	ldr	r0, [pc, #100]	@ (80022dc <LCD_IO_Init+0xe8>)
 8002278:	f001 fe1c 	bl	8003eb4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <LCD_IO_Init+0xe4>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <LCD_IO_Init+0xe4>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6313      	str	r3, [r2, #48]	@ 0x30
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <LCD_IO_Init+0xe4>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002298:	2304      	movs	r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	4619      	mov	r1, r3
 80022ae:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <LCD_IO_Init+0xec>)
 80022b0:	f001 fe00 	bl	8003eb4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022b4:	2200      	movs	r2, #0
 80022b6:	2104      	movs	r1, #4
 80022b8:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <LCD_IO_Init+0xec>)
 80022ba:	f002 f8b3 	bl	8004424 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022be:	2201      	movs	r2, #1
 80022c0:	2104      	movs	r1, #4
 80022c2:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <LCD_IO_Init+0xec>)
 80022c4:	f002 f8ae 	bl	8004424 <HAL_GPIO_WritePin>

    SPI_Init();
 80022c8:	f7ff fef6 	bl	80020b8 <SPI_Init>
  }
}
 80022cc:	bf00      	nop
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20025f80 	.word	0x20025f80
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40020800 	.word	0x40020800

080022e4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022f4:	480a      	ldr	r0, [pc, #40]	@ (8002320 <LCD_IO_WriteData+0x3c>)
 80022f6:	f002 f895 	bl	8004424 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80022fa:	2200      	movs	r2, #0
 80022fc:	2104      	movs	r1, #4
 80022fe:	4809      	ldr	r0, [pc, #36]	@ (8002324 <LCD_IO_WriteData+0x40>)
 8002300:	f002 f890 	bl	8004424 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff10 	bl	800212c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800230c:	2201      	movs	r2, #1
 800230e:	2104      	movs	r1, #4
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <LCD_IO_WriteData+0x40>)
 8002312:	f002 f887 	bl	8004424 <HAL_GPIO_WritePin>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40020800 	.word	0x40020800

08002328 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002338:	480a      	ldr	r0, [pc, #40]	@ (8002364 <LCD_IO_WriteReg+0x3c>)
 800233a:	f002 f873 	bl	8004424 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800233e:	2200      	movs	r2, #0
 8002340:	2104      	movs	r1, #4
 8002342:	4809      	ldr	r0, [pc, #36]	@ (8002368 <LCD_IO_WriteReg+0x40>)
 8002344:	f002 f86e 	bl	8004424 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff feed 	bl	800212c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002352:	2201      	movs	r2, #1
 8002354:	2104      	movs	r1, #4
 8002356:	4804      	ldr	r0, [pc, #16]	@ (8002368 <LCD_IO_WriteReg+0x40>)
 8002358:	f002 f864 	bl	8004424 <HAL_GPIO_WritePin>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40020800 	.word	0x40020800

0800236c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f001 fbf1 	bl	8003b5c <HAL_Delay>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002388:	f001 fb76 	bl	8003a78 <HAL_Init>
  /* USER CODE BEGIN Init */
//#ifdef DONTDEFINE
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238c:	f000 f81e 	bl	80023cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
//#endif
  ApplicationInit(); // Initializes the LCD functionality
 8002390:	f7fe f8f6 	bl	8000580 <ApplicationInit>
  showStartScreen();
 8002394:	f000 fbdc 	bl	8002b50 <showStartScreen>
  MX_SPI5_Init();
  MX_TIM5_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 8002398:	f000 f932 	bl	8002600 <MX_GPIO_Init>
  MX_RNG_Init();
 800239c:	f000 f880 	bl	80024a0 <MX_RNG_Init>
  MX_TIM5_Init();
 80023a0:	f000 f8e0 	bl	8002564 <MX_TIM5_Init>
  MX_TIM2_Init();
 80023a4:	f000 f890 	bl	80024c8 <MX_TIM2_Init>

//  HAL_TIM_Base_Start_IT(& htim2);
//  HAL_TIM_Base_Start(& htim5);

  ApplicationInit(); // Initializes the LCD functionality
 80023a8:	f7fe f8ea 	bl	8000580 <ApplicationInit>

//  printf("Hi!\n");

HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80023ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023b0:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <main+0x44>)
 80023b2:	f002 f850 	bl	8004456 <HAL_GPIO_TogglePin>


  showStartScreen();
 80023b6:	f000 fbcb 	bl	8002b50 <showStartScreen>

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80023ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023be:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <main+0x44>)
 80023c0:	f002 f849 	bl	8004456 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <main+0x40>
 80023c8:	40021800 	.word	0x40021800

080023cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	@ 0x50
 80023d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	2230      	movs	r2, #48	@ 0x30
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 fd38 	bl	8007e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <SystemClock_Config+0xcc>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a27      	ldr	r2, [pc, #156]	@ (8002498 <SystemClock_Config+0xcc>)
 80023fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <SystemClock_Config+0xcc>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <SystemClock_Config+0xd0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a21      	ldr	r2, [pc, #132]	@ (800249c <SystemClock_Config+0xd0>)
 8002416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <SystemClock_Config+0xd0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002428:	2301      	movs	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800242c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002432:	2302      	movs	r3, #2
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002436:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800243c:	2308      	movs	r3, #8
 800243e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 335;
 8002440:	f240 134f 	movw	r3, #335	@ 0x14f
 8002444:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002446:	2302      	movs	r3, #2
 8002448:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800244a:	2307      	movs	r3, #7
 800244c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fafc 	bl	8005a50 <HAL_RCC_OscConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800245e:	f000 fb09 	bl	8002a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002462:	230f      	movs	r3, #15
 8002464:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002466:	2302      	movs	r3, #2
 8002468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800246e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002478:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	2105      	movs	r1, #5
 8002480:	4618      	mov	r0, r3
 8002482:	f003 fd5d 	bl	8005f40 <HAL_RCC_ClockConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800248c:	f000 faf2 	bl	8002a74 <Error_Handler>
  }
}
 8002490:	bf00      	nop
 8002492:	3750      	adds	r7, #80	@ 0x50
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000

080024a0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <MX_RNG_Init+0x20>)
 80024a6:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <MX_RNG_Init+0x24>)
 80024a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <MX_RNG_Init+0x20>)
 80024ac:	f004 f914 	bl	80066d8 <HAL_RNG_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80024b6:	f000 fadd 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20025f84 	.word	0x20025f84
 80024c4:	50060800 	.word	0x50060800

080024c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	463b      	mov	r3, r7
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <MX_TIM2_Init+0x98>)
 80024e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16750 - 1;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_TIM2_Init+0x98>)
 80024ee:	f244 126d 	movw	r2, #16749	@ 0x416d
 80024f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_TIM2_Init+0x98>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (500) - 1;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_TIM2_Init+0x98>)
 80024fc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_TIM2_Init+0x98>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <MX_TIM2_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800250e:	4814      	ldr	r0, [pc, #80]	@ (8002560 <MX_TIM2_Init+0x98>)
 8002510:	f004 fc42 	bl	8006d98 <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800251a:	f000 faab 	bl	8002a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002522:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_TIM2_Init+0x98>)
 800252c:	f004 fe4c 	bl	80071c8 <HAL_TIM_ConfigClockSource>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002536:	f000 fa9d 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	@ (8002560 <MX_TIM2_Init+0x98>)
 8002548:	f005 f874 	bl	8007634 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002552:	f000 fa8f 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20025f94 	.word	0x20025f94

08002564 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <MX_TIM5_Init+0x94>)
 8002582:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <MX_TIM5_Init+0x98>)
 8002584:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16750 - 1;
 8002586:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <MX_TIM5_Init+0x94>)
 8002588:	f244 126d 	movw	r2, #16749	@ 0x416d
 800258c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <MX_TIM5_Init+0x94>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002594:	4b18      	ldr	r3, [pc, #96]	@ (80025f8 <MX_TIM5_Init+0x94>)
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259c:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <MX_TIM5_Init+0x94>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <MX_TIM5_Init+0x94>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025a8:	4813      	ldr	r0, [pc, #76]	@ (80025f8 <MX_TIM5_Init+0x94>)
 80025aa:	f004 fbf5 	bl	8006d98 <HAL_TIM_Base_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80025b4:	f000 fa5e 	bl	8002a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	480c      	ldr	r0, [pc, #48]	@ (80025f8 <MX_TIM5_Init+0x94>)
 80025c6:	f004 fdff 	bl	80071c8 <HAL_TIM_ConfigClockSource>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80025d0:	f000 fa50 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	@ (80025f8 <MX_TIM5_Init+0x94>)
 80025e2:	f005 f827 	bl	8007634 <HAL_TIMEx_MasterConfigSynchronization>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80025ec:	f000 fa42 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20025fdc 	.word	0x20025fdc
 80025fc:	40000c00 	.word	0x40000c00

08002600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08e      	sub	sp, #56	@ 0x38
 8002604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	4bb3      	ldr	r3, [pc, #716]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4ab2      	ldr	r2, [pc, #712]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4bb0      	ldr	r3, [pc, #704]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	4bac      	ldr	r3, [pc, #688]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4aab      	ldr	r2, [pc, #684]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4ba9      	ldr	r3, [pc, #676]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4ba5      	ldr	r3, [pc, #660]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4aa4      	ldr	r2, [pc, #656]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4ba2      	ldr	r3, [pc, #648]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b9e      	ldr	r3, [pc, #632]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a9d      	ldr	r2, [pc, #628]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b9b      	ldr	r3, [pc, #620]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b97      	ldr	r3, [pc, #604]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a96      	ldr	r2, [pc, #600]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b94      	ldr	r3, [pc, #592]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b90      	ldr	r3, [pc, #576]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a8f      	ldr	r2, [pc, #572]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b8d      	ldr	r3, [pc, #564]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b89      	ldr	r3, [pc, #548]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a88      	ldr	r2, [pc, #544]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b86      	ldr	r3, [pc, #536]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b82      	ldr	r3, [pc, #520]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a81      	ldr	r2, [pc, #516]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b7f      	ldr	r3, [pc, #508]	@ (80028e8 <MX_GPIO_Init+0x2e8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2116      	movs	r1, #22
 80026fa:	487c      	ldr	r0, [pc, #496]	@ (80028ec <MX_GPIO_Init+0x2ec>)
 80026fc:	f001 fe92 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	@ 0x80
 8002704:	487a      	ldr	r0, [pc, #488]	@ (80028f0 <MX_GPIO_Init+0x2f0>)
 8002706:	f001 fe8d 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002710:	4878      	ldr	r0, [pc, #480]	@ (80028f4 <MX_GPIO_Init+0x2f4>)
 8002712:	f001 fe87 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800271c:	4876      	ldr	r0, [pc, #472]	@ (80028f8 <MX_GPIO_Init+0x2f8>)
 800271e:	f001 fe81 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002722:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002734:	230c      	movs	r3, #12
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	486f      	ldr	r0, [pc, #444]	@ (80028fc <MX_GPIO_Init+0x2fc>)
 8002740:	f001 fbb8 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002744:	2301      	movs	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002754:	230c      	movs	r3, #12
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	4863      	ldr	r0, [pc, #396]	@ (80028ec <MX_GPIO_Init+0x2ec>)
 8002760:	f001 fba8 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002764:	2316      	movs	r3, #22
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002768:	2301      	movs	r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	485c      	ldr	r0, [pc, #368]	@ (80028ec <MX_GPIO_Init+0x2ec>)
 800277c:	f001 fb9a 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002780:	2301      	movs	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002784:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4856      	ldr	r0, [pc, #344]	@ (80028f0 <MX_GPIO_Init+0x2f0>)
 8002796:	f001 fb8d 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800279a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	484f      	ldr	r0, [pc, #316]	@ (80028f0 <MX_GPIO_Init+0x2f0>)
 80027b2:	f001 fb7f 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4848      	ldr	r0, [pc, #288]	@ (80028f0 <MX_GPIO_Init+0x2f0>)
 80027ce:	f001 fb71 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80027d2:	2320      	movs	r3, #32
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	4841      	ldr	r0, [pc, #260]	@ (80028ec <MX_GPIO_Init+0x2ec>)
 80027e8:	f001 fb64 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027ec:	2304      	movs	r3, #4
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	4840      	ldr	r0, [pc, #256]	@ (8002900 <MX_GPIO_Init+0x300>)
 8002800:	f001 fb58 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002804:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002816:	230c      	movs	r3, #12
 8002818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	4835      	ldr	r0, [pc, #212]	@ (80028f8 <MX_GPIO_Init+0x2f8>)
 8002822:	f001 fb47 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002826:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002838:	230c      	movs	r3, #12
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4830      	ldr	r0, [pc, #192]	@ (8002904 <MX_GPIO_Init+0x304>)
 8002844:	f001 fb36 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002848:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800285a:	230c      	movs	r3, #12
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	4826      	ldr	r0, [pc, #152]	@ (8002900 <MX_GPIO_Init+0x300>)
 8002866:	f001 fb25 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800286a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287c:	4619      	mov	r1, r3
 800287e:	4820      	ldr	r0, [pc, #128]	@ (8002900 <MX_GPIO_Init+0x300>)
 8002880:	f001 fb18 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002884:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002896:	230c      	movs	r3, #12
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <MX_GPIO_Init+0x2f4>)
 80028a2:	f001 fb07 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80028a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b8:	4619      	mov	r1, r3
 80028ba:	480e      	ldr	r0, [pc, #56]	@ (80028f4 <MX_GPIO_Init+0x2f4>)
 80028bc:	f001 fafa 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80028c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	4806      	ldr	r0, [pc, #24]	@ (80028f4 <MX_GPIO_Init+0x2f4>)
 80028da:	f001 faeb 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e4:	e010      	b.n	8002908 <MX_GPIO_Init+0x308>
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021400 	.word	0x40021400
 8002900:	40020400 	.word	0x40020400
 8002904:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002914:	2307      	movs	r3, #7
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	4817      	ldr	r0, [pc, #92]	@ (800297c <MX_GPIO_Init+0x37c>)
 8002920:	f001 fac8 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002924:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4810      	ldr	r0, [pc, #64]	@ (8002980 <MX_GPIO_Init+0x380>)
 800293e:	f001 fab9 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002942:	2360      	movs	r3, #96	@ 0x60
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002952:	230c      	movs	r3, #12
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295a:	4619      	mov	r1, r3
 800295c:	4809      	ldr	r0, [pc, #36]	@ (8002984 <MX_GPIO_Init+0x384>)
 800295e:	f001 faa9 	bl	8003eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2006      	movs	r0, #6
 8002968:	f001 fa39 	bl	8003dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800296c:	2006      	movs	r0, #6
 800296e:	f001 fa52 	bl	8003e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002972:	bf00      	nop
 8002974:	3738      	adds	r7, #56	@ 0x38
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40020000 	.word	0x40020000
 8002980:	40021800 	.word	0x40021800
 8002984:	40020400 	.word	0x40020400

08002988 <startTimers>:

/* USER CODE BEGIN 4 */
void startTimers(){
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(& htim2);
 800298c:	4803      	ldr	r0, [pc, #12]	@ (800299c <startTimers+0x14>)
 800298e:	f004 fabb 	bl	8006f08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(& htim5);
 8002992:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <startTimers+0x18>)
 8002994:	f004 fa50 	bl	8006e38 <HAL_TIM_Base_Start>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20025f94 	.word	0x20025f94
 80029a0:	20025fdc 	.word	0x20025fdc

080029a4 <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t tim2CallCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
//	printf("TIMERCALLED\n");
	if (htim == &htim2) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a15      	ldr	r2, [pc, #84]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d123      	bne.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x58>
		tim2CallCounter++;
 80029b4:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029c0:	701a      	strb	r2, [r3, #0]
//		printf("Counter: %u\n", tim2CallCounter);
//		printf("1/10 of a second\n");
		if (tim2CallCounter >= 10 * BLOCK_FALL_TIME){
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d917      	bls.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x58>
			printf("1 second\n");
 80029cc:	480f      	ldr	r0, [pc, #60]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80029ce:	f005 f92b 	bl	8007c28 <puts>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80029d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029d6:	480e      	ldr	r0, [pc, #56]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80029d8:	f001 fd3d 	bl	8004456 <HAL_GPIO_TogglePin>
			movePieceDown(& board,& currentPiece);
 80029dc:	490d      	ldr	r1, [pc, #52]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80029de:	480e      	ldr	r0, [pc, #56]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029e0:	f7fe fece 	bl	8001780 <movePieceDown>
			LCD_Clear(0,LCD_COLOR_BLACK);
 80029e4:	2100      	movs	r1, #0
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe f9a6 	bl	8000d38 <LCD_Clear>
			showGameScreen();
 80029ec:	f000 f93c 	bl	8002c68 <showGameScreen>
			Draw_Arrows_On_Screen(-1);
 80029f0:	20ff      	movs	r0, #255	@ 0xff
 80029f2:	f7fe fc1d 	bl	8001230 <Draw_Arrows_On_Screen>
			tim2CallCounter = 0;
 80029f6:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20025f94 	.word	0x20025f94
 8002a08:	20026024 	.word	0x20026024
 8002a0c:	08008d1c 	.word	0x08008d1c
 8002a10:	40021800 	.word	0x40021800
 8002a14:	20025e94 	.word	0x20025e94
 8002a18:	20025b74 	.word	0x20025b74

08002a1c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
	static volatile uint32_t last;
	uint32_t current = __HAL_TIM_GET_COUNTER(&htim5);
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002a2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a32:	480c      	ldr	r0, [pc, #48]	@ (8002a64 <HAL_GPIO_EXTI_Callback+0x48>)
 8002a34:	f001 fd0f 	bl	8004456 <HAL_GPIO_TogglePin>
	printf("Pushed after %u\n", (current - last)/5000);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_GPIO_EXTI_Callback+0x50>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0b1b      	lsrs	r3, r3, #12
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x54>)
 8002a4c:	f005 f884 	bl	8007b58 <iprintf>
	last = current;
 8002a50:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6013      	str	r3, [r2, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20025fdc 	.word	0x20025fdc
 8002a64:	40021800 	.word	0x40021800
 8002a68:	20026028 	.word	0x20026028
 8002a6c:	d1b71759 	.word	0xd1b71759
 8002a70:	08008d28 	.word	0x08008d28

08002a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <Error_Handler+0x8>

08002a80 <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 8002a88:	f000 f852 	bl	8002b30 <rand>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <initializeRandomPiece+0x80>)
 8002a90:	fba3 2301 	umull	r2, r3, r3, r1
 8002a94:	1aca      	subs	r2, r1, r3
 8002a96:	0852      	lsrs	r2, r2, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	089a      	lsrs	r2, r3, #2
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	1aca      	subs	r2, r1, r3
 8002aa4:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e01c      	b.n	8002ae6 <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e013      	b.n	8002ada <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 8002ab2:	4914      	ldr	r1, [pc, #80]	@ (8002b04 <initializeRandomPiece+0x84>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4413      	add	r3, r2
 8002abc:	009a      	lsls	r2, r3, #2
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	0090      	lsls	r0, r2, #2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4402      	add	r2, r0
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	dde8      	ble.n	8002ab2 <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	dddf      	ble.n	8002aac <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2204      	movs	r2, #4
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	24924925 	.word	0x24924925
 8002b04:	20000010 	.word	0x20000010

08002b08 <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <piceIndexToColors+0x24>)
 8002b1c:	4413      	add	r3, r2
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	200001d0 	.word	0x200001d0

08002b30 <rand>:
 *
 *  Created on: Dec 7, 2024
 *      Author: user
 */
#include "rand.h"
uint32_t rand(){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(& hrng, &rand);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4804      	ldr	r0, [pc, #16]	@ (8002b4c <rand+0x1c>)
 8002b3c:	f003 fdf6 	bl	800672c <HAL_RNG_GenerateRandomNumber>
	return rand;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20025f84 	.word	0x20025f84

08002b50 <showStartScreen>:
void shadingDemo(){
	LCD_Clear(0, LCD_COLOR_BLACK);

	Draw_Tetris_Block(40,40,80,0xCB20, 0xFC40, 0x9A20);
}
void showStartScreen(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002b56:	2100      	movs	r1, #0
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe f8ed 	bl	8000d38 <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002b5e:	4823      	ldr	r0, [pc, #140]	@ (8002bec <showStartScreen+0x9c>)
 8002b60:	f7fe f91c 	bl	8000d9c <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002b64:	2228      	movs	r2, #40	@ 0x28
 8002b66:	2114      	movs	r1, #20
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe fc75 	bl	8001458 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002b6e:	2246      	movs	r2, #70	@ 0x46
 8002b70:	2114      	movs	r1, #20
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fe fc70 	bl	8001458 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 8002b78:	2228      	movs	r2, #40	@ 0x28
 8002b7a:	215a      	movs	r1, #90	@ 0x5a
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7fe fc6b 	bl	8001458 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 8002b82:	2228      	movs	r2, #40	@ 0x28
 8002b84:	218c      	movs	r1, #140	@ 0x8c
 8002b86:	2003      	movs	r0, #3
 8002b88:	f7fe fc66 	bl	8001458 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 8002b8c:	2250      	movs	r2, #80	@ 0x50
 8002b8e:	2141      	movs	r1, #65	@ 0x41
 8002b90:	2004      	movs	r0, #4
 8002b92:	f7fe fc61 	bl	8001458 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 8002b96:	2250      	movs	r2, #80	@ 0x50
 8002b98:	2164      	movs	r1, #100	@ 0x64
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	f7fe fc5c 	bl	8001458 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 8002ba0:	228c      	movs	r2, #140	@ 0x8c
 8002ba2:	2132      	movs	r1, #50	@ 0x32
 8002ba4:	2006      	movs	r0, #6
 8002ba6:	f7fe fc57 	bl	8001458 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8002baa:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002bae:	f7fe f8e5 	bl	8000d7c <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 8002bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf0 <showStartScreen+0xa0>)
 8002bb4:	2198      	movs	r1, #152	@ 0x98
 8002bb6:	2064      	movs	r0, #100	@ 0x64
 8002bb8:	f7fe f990 	bl	8000edc <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 8002bbc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2330      	movs	r3, #48	@ 0x30
 8002bc8:	22b4      	movs	r2, #180	@ 0xb4
 8002bca:	21f2      	movs	r1, #242	@ 0xf2
 8002bcc:	201e      	movs	r0, #30
 8002bce:	f7fe fcf9 	bl	80015c4 <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7fe f8d2 	bl	8000d7c <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <showStartScreen+0xa4>)
 8002bda:	f240 1101 	movw	r1, #257	@ 0x101
 8002bde:	2054      	movs	r0, #84	@ 0x54
 8002be0:	f7fe f97c 	bl	8000edc <LCD_DisplayString>
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	08008d3c 	.word	0x08008d3c
 8002bf4:	08008d44 	.word	0x08008d44

08002bf8 <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460a      	mov	r2, r1
 8002c02:	80fb      	strh	r3, [r7, #6]
 8002c04:	4613      	mov	r3, r2
 8002c06:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	2b1d      	cmp	r3, #29
 8002c0c:	d90b      	bls.n	8002c26 <startClicked+0x2e>
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2bd2      	cmp	r3, #210	@ 0xd2
 8002c12:	d808      	bhi.n	8002c26 <startClicked+0x2e>
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	2bf1      	cmp	r3, #241	@ 0xf1
 8002c18:	d905      	bls.n	8002c26 <startClicked+0x2e>
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002c20:	d801      	bhi.n	8002c26 <startClicked+0x2e>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <startClicked+0x30>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <uint32_to_string>:

void uint32_to_string(uint32_t value, char *buffer, size_t buffer_size) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
    // Ensure the buffer is large enough to hold the maximum uint32_t value and a null terminator
    if (buffer_size < 11) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b0a      	cmp	r3, #10
 8002c4c:	d906      	bls.n	8002c5c <uint32_to_string+0x20>
        // Handle error: buffer too small
        return;
    }
    // Format the uint32_t value as a string and store it in the buffer
    snprintf(buffer, buffer_size, "%u", value);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <uint32_to_string+0x28>)
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	f004 ffef 	bl	8007c38 <sniprintf>
 8002c5a:	e000      	b.n	8002c5e <uint32_to_string+0x22>
        return;
 8002c5c:	bf00      	nop
}
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	08008d4c 	.word	0x08008d4c

08002c68 <showGameScreen>:

void showGameScreen(){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8002c6e:	af00      	add	r7, sp, #0
	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 8002c70:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002c74:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <showGameScreen+0x58>)
 8002c7a:	4912      	ldr	r1, [pc, #72]	@ (8002cc4 <showGameScreen+0x5c>)
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fff7 	bl	8001c70 <boardWithPiece>
	Fill_Tetris_Board(
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	220c      	movs	r2, #12
 8002c88:	2137      	movs	r1, #55	@ 0x37
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fb88 	bl	80013a0 <Fill_Tetris_Board>
			LCD_PIXEL_WIDTH /2 - BOARD_WIDTH*(BLOCK_SIZE + 1)/2 ,
			12
			);

	// Next Piece
	DrawTetromino(& nextPiece, 190, 10);
 8002c90:	220a      	movs	r2, #10
 8002c92:	21be      	movs	r1, #190	@ 0xbe
 8002c94:	480c      	ldr	r0, [pc, #48]	@ (8002cc8 <showGameScreen+0x60>)
 8002c96:	f7fe fc3d 	bl	8001514 <DrawTetromino>
//	char randNumStr[11];
//	uint32_to_string(rand(),& randNumStr,11);
//	LCD_DisplayString(10,100,randNumStr);

	char scoreStr[11];
	uint32_to_string(pointsScored,&scoreStr,11);
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <showGameScreen+0x64>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1d39      	adds	r1, r7, #4
 8002ca0:	220b      	movs	r2, #11
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ffca 	bl	8002c3c <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	461a      	mov	r2, r3
 8002cac:	210a      	movs	r1, #10
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f7fe f914 	bl	8000edc <LCD_DisplayString>
}
 8002cb4:	bf00      	nop
 8002cb6:	f507 774c 	add.w	r7, r7, #816	@ 0x330
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20025e94 	.word	0x20025e94
 8002cc4:	20025b74 	.word	0x20025b74
 8002cc8:	20025edc 	.word	0x20025edc
 8002ccc:	20025f24 	.word	0x20025f24

08002cd0 <showEndScreen>:

void showEndScreen(){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_MAGENTA);
 8002cd6:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe f82c 	bl	8000d38 <LCD_Clear>
	char scoreStr[11];
	uint32_to_string(pointsScored,&scoreStr,11);
 8002ce0:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <showEndScreen+0x54>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	220b      	movs	r2, #11
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ffa7 	bl	8002c3c <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002cee:	463b      	mov	r3, r7
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	210a      	movs	r1, #10
 8002cf4:	200a      	movs	r0, #10
 8002cf6:	f7fe f8f1 	bl	8000edc <LCD_DisplayString>

	uint32_t timeLasted = __HAL_TIM_GET_COUNTER(&htim5);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <showEndScreen+0x58>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	60fb      	str	r3, [r7, #12]
	uint32_to_string(timeLasted,&scoreStr,11);
 8002d02:	463b      	mov	r3, r7
 8002d04:	220b      	movs	r2, #11
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff ff97 	bl	8002c3c <uint32_to_string>
	LCD_DisplayString(10,40,scoreStr);
 8002d0e:	463b      	mov	r3, r7
 8002d10:	461a      	mov	r2, r3
 8002d12:	2128      	movs	r1, #40	@ 0x28
 8002d14:	200a      	movs	r0, #10
 8002d16:	f7fe f8e1 	bl	8000edc <LCD_DisplayString>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20025f24 	.word	0x20025f24
 8002d28:	20025fdc 	.word	0x20025fdc

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d6a:	2007      	movs	r0, #7
 8002d6c:	f001 f82c 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a29      	ldr	r2, [pc, #164]	@ (8002e40 <HAL_I2C_MspInit+0xc4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d14b      	bne.n	8002e36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ddc:	2312      	movs	r3, #18
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002de8:	2304      	movs	r3, #4
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	4815      	ldr	r0, [pc, #84]	@ (8002e48 <HAL_I2C_MspInit+0xcc>)
 8002df4:	f001 f85e 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfe:	2312      	movs	r3, #18
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <HAL_I2C_MspInit+0xd0>)
 8002e16:	f001 f84d 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	@ 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40005c00 	.word	0x40005c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020000 	.word	0x40020000

08002e50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b09a      	sub	sp, #104	@ 0x68
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6c:	2230      	movs	r2, #48	@ 0x30
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 ffed 	bl	8007e50 <memset>
  if(hltdc->Instance==LTDC)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a81      	ldr	r2, [pc, #516]	@ (8003080 <HAL_LTDC_MspInit+0x230>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f040 80fb 	bne.w	8003078 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e82:	2308      	movs	r3, #8
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8002e86:	2364      	movs	r3, #100	@ 0x64
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002e8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fa5d 	bl	8006358 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002ea4:	f7ff fde6 	bl	8002a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	4b75      	ldr	r3, [pc, #468]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	4a74      	ldr	r2, [pc, #464]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb8:	4b72      	ldr	r3, [pc, #456]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ece:	f043 0320 	orr.w	r3, r3, #32
 8002ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	4a66      	ldr	r2, [pc, #408]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef0:	4b64      	ldr	r3, [pc, #400]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	4b60      	ldr	r3, [pc, #384]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	4a5f      	ldr	r2, [pc, #380]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	4a58      	ldr	r2, [pc, #352]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f28:	4b56      	ldr	r3, [pc, #344]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	4a51      	ldr	r2, [pc, #324]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	4b4b      	ldr	r3, [pc, #300]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	4a4a      	ldr	r2, [pc, #296]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f5a:	f043 0308 	orr.w	r3, r3, #8
 8002f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f60:	4b48      	ldr	r3, [pc, #288]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f70:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f7e:	230e      	movs	r3, #14
 8002f80:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f86:	4619      	mov	r1, r3
 8002f88:	483f      	ldr	r0, [pc, #252]	@ (8003088 <HAL_LTDC_MspInit+0x238>)
 8002f8a:	f000 ff93 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f8e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f92:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fa0:	230e      	movs	r3, #14
 8002fa2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4838      	ldr	r0, [pc, #224]	@ (800308c <HAL_LTDC_MspInit+0x23c>)
 8002fac:	f000 ff82 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fc0:	2309      	movs	r3, #9
 8002fc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4831      	ldr	r0, [pc, #196]	@ (8003090 <HAL_LTDC_MspInit+0x240>)
 8002fcc:	f000 ff72 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002fd0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002fd4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fe2:	230e      	movs	r3, #14
 8002fe4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fea:	4619      	mov	r1, r3
 8002fec:	4828      	ldr	r0, [pc, #160]	@ (8003090 <HAL_LTDC_MspInit+0x240>)
 8002fee:	f000 ff61 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ff2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ff6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003004:	230e      	movs	r3, #14
 8003006:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003008:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800300c:	4619      	mov	r1, r3
 800300e:	4821      	ldr	r0, [pc, #132]	@ (8003094 <HAL_LTDC_MspInit+0x244>)
 8003010:	f000 ff50 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003014:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003018:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003026:	230e      	movs	r3, #14
 8003028:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800302e:	4619      	mov	r1, r3
 8003030:	4819      	ldr	r0, [pc, #100]	@ (8003098 <HAL_LTDC_MspInit+0x248>)
 8003032:	f000 ff3f 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003036:	2348      	movs	r3, #72	@ 0x48
 8003038:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003046:	230e      	movs	r3, #14
 8003048:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800304e:	4619      	mov	r1, r3
 8003050:	4812      	ldr	r0, [pc, #72]	@ (800309c <HAL_LTDC_MspInit+0x24c>)
 8003052:	f000 ff2f 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003056:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800305a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003068:	2309      	movs	r3, #9
 800306a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800306c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003070:	4619      	mov	r1, r3
 8003072:	4808      	ldr	r0, [pc, #32]	@ (8003094 <HAL_LTDC_MspInit+0x244>)
 8003074:	f000 ff1e 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003078:	bf00      	nop
 800307a:	3768      	adds	r7, #104	@ 0x68
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40016800 	.word	0x40016800
 8003084:	40023800 	.word	0x40023800
 8003088:	40021400 	.word	0x40021400
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40021800 	.word	0x40021800
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00

080030a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <HAL_RNG_MspInit+0x3c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	50060800 	.word	0x50060800
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	@ 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_SPI_MspInit+0x84>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12c      	bne.n	8003160 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <HAL_SPI_MspInit+0x88>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003114:	6453      	str	r3, [r2, #68]	@ 0x44
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <HAL_SPI_MspInit+0x88>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800313e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003150:	2305      	movs	r3, #5
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4805      	ldr	r0, [pc, #20]	@ (8003170 <HAL_SPI_MspInit+0x8c>)
 800315c:	f000 feaa 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40015000 	.word	0x40015000
 800316c:	40023800 	.word	0x40023800
 8003170:	40021400 	.word	0x40021400

08003174 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a08      	ldr	r2, [pc, #32]	@ (80031a4 <HAL_SPI_MspDeInit+0x30>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10a      	bne.n	800319c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_SPI_MspDeInit+0x34>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_SPI_MspDeInit+0x34>)
 800318c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003190:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003192:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <HAL_SPI_MspDeInit+0x38>)
 8003198:	f001 f838 	bl	800420c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40015000 	.word	0x40015000
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021400 	.word	0x40021400

080031b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c0:	d116      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d2:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	201c      	movs	r0, #28
 80031e4:	f000 fdfb 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031e8:	201c      	movs	r0, #28
 80031ea:	f000 fe14 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031ee:	e012      	b.n	8003216 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4a07      	ldr	r2, [pc, #28]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6413      	str	r3, [r2, #64]	@ 0x40
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40000c00 	.word	0x40000c00

08003228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <NMI_Handler+0x4>

08003230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <HardFault_Handler+0x4>

08003238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <MemManage_Handler+0x4>

08003240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <BusFault_Handler+0x4>

08003248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800324c:	bf00      	nop
 800324e:	e7fd      	b.n	800324c <UsageFault_Handler+0x4>

08003250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800327e:	f000 fc4d 	bl	8003b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}

08003286 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800328a:	2001      	movs	r0, #1
 800328c:	f001 f8fe 	bl	800448c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}

08003294 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003298:	4802      	ldr	r0, [pc, #8]	@ (80032a4 <TIM2_IRQHandler+0x10>)
 800329a:	f003 fea5 	bl	8006fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20025f94 	.word	0x20025f94

080032a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	@ (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80032ea:	f000 f9dd 	bl	80036a8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80032ee:	f000 f99d 	bl	800362c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80032f2:	2202      	movs	r2, #2
 80032f4:	2103      	movs	r1, #3
 80032f6:	2082      	movs	r0, #130	@ 0x82
 80032f8:	f000 fa2a 	bl	8003750 <I2C3_Write>
    HAL_Delay(5);
 80032fc:	2005      	movs	r0, #5
 80032fe:	f000 fc2d 	bl	8003b5c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003302:	2200      	movs	r2, #0
 8003304:	2103      	movs	r1, #3
 8003306:	2082      	movs	r0, #130	@ 0x82
 8003308:	f000 fa22 	bl	8003750 <I2C3_Write>
    HAL_Delay(2);
 800330c:	2002      	movs	r0, #2
 800330e:	f000 fc25 	bl	8003b5c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003312:	1cba      	adds	r2, r7, #2
 8003314:	2302      	movs	r3, #2
 8003316:	2100      	movs	r1, #0
 8003318:	2082      	movs	r0, #130	@ 0x82
 800331a:	f000 fa69 	bl	80037f0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b29a      	uxth	r2, r3
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	4313      	orrs	r3, r2
 800332e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f640 0211 	movw	r2, #2065	@ 0x811
 8003336:	4293      	cmp	r3, r2
 8003338:	d001      	beq.n	800333e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800333a:	2303      	movs	r3, #3
 800333c:	e095      	b.n	800346a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800333e:	2202      	movs	r2, #2
 8003340:	2103      	movs	r1, #3
 8003342:	2082      	movs	r0, #130	@ 0x82
 8003344:	f000 fa04 	bl	8003750 <I2C3_Write>
    HAL_Delay(5);
 8003348:	2005      	movs	r0, #5
 800334a:	f000 fc07 	bl	8003b5c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800334e:	2200      	movs	r2, #0
 8003350:	2103      	movs	r1, #3
 8003352:	2082      	movs	r0, #130	@ 0x82
 8003354:	f000 f9fc 	bl	8003750 <I2C3_Write>
    HAL_Delay(2);
 8003358:	2002      	movs	r0, #2
 800335a:	f000 fbff 	bl	8003b5c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800335e:	2004      	movs	r0, #4
 8003360:	f000 f887 	bl	8003472 <STMPE811_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003368:	797b      	ldrb	r3, [r7, #5]
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003370:	797b      	ldrb	r3, [r7, #5]
 8003372:	461a      	mov	r2, r3
 8003374:	2104      	movs	r1, #4
 8003376:	2082      	movs	r0, #130	@ 0x82
 8003378:	f000 f9ea 	bl	8003750 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800337c:	2004      	movs	r0, #4
 800337e:	f000 f878 	bl	8003472 <STMPE811_Read>
 8003382:	4603      	mov	r3, r0
 8003384:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003386:	797b      	ldrb	r3, [r7, #5]
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800338e:	797b      	ldrb	r3, [r7, #5]
 8003390:	461a      	mov	r2, r3
 8003392:	2104      	movs	r1, #4
 8003394:	2082      	movs	r0, #130	@ 0x82
 8003396:	f000 f9db 	bl	8003750 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800339a:	2249      	movs	r2, #73	@ 0x49
 800339c:	2120      	movs	r1, #32
 800339e:	2082      	movs	r0, #130	@ 0x82
 80033a0:	f000 f9d6 	bl	8003750 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80033a4:	2002      	movs	r0, #2
 80033a6:	f000 fbd9 	bl	8003b5c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80033aa:	2201      	movs	r2, #1
 80033ac:	2121      	movs	r1, #33	@ 0x21
 80033ae:	2082      	movs	r0, #130	@ 0x82
 80033b0:	f000 f9ce 	bl	8003750 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80033b4:	2017      	movs	r0, #23
 80033b6:	f000 f85c 	bl	8003472 <STMPE811_Read>
 80033ba:	4603      	mov	r3, r0
 80033bc:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80033be:	797b      	ldrb	r3, [r7, #5]
 80033c0:	f043 031e 	orr.w	r3, r3, #30
 80033c4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80033c6:	797b      	ldrb	r3, [r7, #5]
 80033c8:	461a      	mov	r2, r3
 80033ca:	2117      	movs	r1, #23
 80033cc:	2082      	movs	r0, #130	@ 0x82
 80033ce:	f000 f9bf 	bl	8003750 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80033d2:	229a      	movs	r2, #154	@ 0x9a
 80033d4:	2141      	movs	r1, #65	@ 0x41
 80033d6:	2082      	movs	r0, #130	@ 0x82
 80033d8:	f000 f9ba 	bl	8003750 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80033dc:	2201      	movs	r2, #1
 80033de:	214a      	movs	r1, #74	@ 0x4a
 80033e0:	2082      	movs	r0, #130	@ 0x82
 80033e2:	f000 f9b5 	bl	8003750 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80033e6:	2201      	movs	r2, #1
 80033e8:	214b      	movs	r1, #75	@ 0x4b
 80033ea:	2082      	movs	r0, #130	@ 0x82
 80033ec:	f000 f9b0 	bl	8003750 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80033f0:	2200      	movs	r2, #0
 80033f2:	214b      	movs	r1, #75	@ 0x4b
 80033f4:	2082      	movs	r0, #130	@ 0x82
 80033f6:	f000 f9ab 	bl	8003750 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80033fa:	2201      	movs	r2, #1
 80033fc:	2156      	movs	r1, #86	@ 0x56
 80033fe:	2082      	movs	r0, #130	@ 0x82
 8003400:	f000 f9a6 	bl	8003750 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003404:	2201      	movs	r2, #1
 8003406:	2158      	movs	r1, #88	@ 0x58
 8003408:	2082      	movs	r0, #130	@ 0x82
 800340a:	f000 f9a1 	bl	8003750 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800340e:	2203      	movs	r2, #3
 8003410:	2140      	movs	r1, #64	@ 0x40
 8003412:	2082      	movs	r0, #130	@ 0x82
 8003414:	f000 f99c 	bl	8003750 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003418:	22ff      	movs	r2, #255	@ 0xff
 800341a:	210b      	movs	r1, #11
 800341c:	2082      	movs	r0, #130	@ 0x82
 800341e:	f000 f997 	bl	8003750 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003422:	f000 f8c1 	bl	80035a8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003426:	2009      	movs	r0, #9
 8003428:	f000 f823 	bl	8003472 <STMPE811_Read>
 800342c:	4603      	mov	r3, r0
 800342e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003430:	797b      	ldrb	r3, [r7, #5]
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003438:	797b      	ldrb	r3, [r7, #5]
 800343a:	461a      	mov	r2, r3
 800343c:	2109      	movs	r1, #9
 800343e:	2082      	movs	r0, #130	@ 0x82
 8003440:	f000 f986 	bl	8003750 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003444:	200a      	movs	r0, #10
 8003446:	f000 f814 	bl	8003472 <STMPE811_Read>
 800344a:	4603      	mov	r3, r0
 800344c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800344e:	797b      	ldrb	r3, [r7, #5]
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003456:	797b      	ldrb	r3, [r7, #5]
 8003458:	461a      	mov	r2, r3
 800345a:	210a      	movs	r1, #10
 800345c:	2082      	movs	r0, #130	@ 0x82
 800345e:	f000 f977 	bl	8003750 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003462:	20c8      	movs	r0, #200	@ 0xc8
 8003464:	f000 fb7a 	bl	8003b5c <HAL_Delay>

    return STMPE811_State_Ok;
 8003468:	2302      	movs	r3, #2

}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800347c:	f107 020f 	add.w	r2, r7, #15
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4619      	mov	r1, r3
 8003484:	2082      	movs	r0, #130	@ 0x82
 8003486:	f000 f98d 	bl	80037a4 <I2C3_Read>

    return readData;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80034a4:	79ba      	ldrb	r2, [r7, #6]
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2082      	movs	r0, #130	@ 0x82
 80034ac:	f000 f950 	bl	8003750 <I2C3_Write>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	799b      	ldrb	r3, [r3, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d117      	bne.n	80034f8 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f9b1 	bl	8003834 <TM_STMPE811_ReadX>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	885b      	ldrh	r3, [r3, #2]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa04 	bl	80038f0 <TM_STMPE811_ReadY>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80034ee:	3301      	adds	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	805a      	strh	r2, [r3, #2]
 80034f6:	e048      	b.n	800358a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	799b      	ldrb	r3, [r3, #6]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d112      	bne.n	8003526 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f995 	bl	8003834 <TM_STMPE811_ReadX>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	885b      	ldrh	r3, [r3, #2]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f9ea 	bl	80038f0 <TM_STMPE811_ReadY>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	805a      	strh	r2, [r3, #2]
 8003524:	e031      	b.n	800358a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	799b      	ldrb	r3, [r3, #6]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d115      	bne.n	800355a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	885b      	ldrh	r3, [r3, #2]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f97e 	bl	8003834 <TM_STMPE811_ReadX>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f9d3 	bl	80038f0 <TM_STMPE811_ReadY>
 800354a:	4603      	mov	r3, r0
 800354c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003550:	3301      	adds	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	e017      	b.n	800358a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	799b      	ldrb	r3, [r3, #6]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d113      	bne.n	800358a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f964 	bl	8003834 <TM_STMPE811_ReadX>
 800356c:	4603      	mov	r3, r0
 800356e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003572:	b29a      	uxth	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f9b7 	bl	80038f0 <TM_STMPE811_ReadY>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800358a:	2201      	movs	r2, #1
 800358c:	214b      	movs	r1, #75	@ 0x4b
 800358e:	2082      	movs	r0, #130	@ 0x82
 8003590:	f000 f8de 	bl	8003750 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003594:	2200      	movs	r2, #0
 8003596:	214b      	movs	r1, #75	@ 0x4b
 8003598:	2082      	movs	r0, #130	@ 0x82
 800359a:	f000 f8d9 	bl	8003750 <I2C3_Write>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <enableInterruptSupportForTouch+0x5c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <enableInterruptSupportForTouch+0x5c>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <enableInterruptSupportForTouch+0x5c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035dc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80035de:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80035e2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e8:	2302      	movs	r3, #2
 80035ea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4805      	ldr	r0, [pc, #20]	@ (8003608 <enableInterruptSupportForTouch+0x60>)
 80035f2:	f000 fc5f 	bl	8003eb4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035f6:	2028      	movs	r0, #40	@ 0x28
 80035f8:	f7ff fe56 	bl	80032a8 <__NVIC_EnableIRQ>

}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000

0800360c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20026084 	.word	0x20026084

0800362c <I2C3_Init>:

static void I2C3_Init()
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <I2C3_Init+0x6c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <I2C3_Init+0x6c>)
 800363c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003640:	6413      	str	r3, [r2, #64]	@ 0x40
 8003642:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <I2C3_Init+0x6c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800364e:	4b13      	ldr	r3, [pc, #76]	@ (800369c <I2C3_Init+0x70>)
 8003650:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <I2C3_Init+0x74>)
 8003652:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <I2C3_Init+0x70>)
 8003656:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <I2C3_Init+0x78>)
 8003658:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800365a:	4b10      	ldr	r3, [pc, #64]	@ (800369c <I2C3_Init+0x70>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003660:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <I2C3_Init+0x70>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <I2C3_Init+0x70>)
 8003668:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800366c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800366e:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <I2C3_Init+0x70>)
 8003670:	2200      	movs	r2, #0
 8003672:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003674:	4b09      	ldr	r3, [pc, #36]	@ (800369c <I2C3_Init+0x70>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800367a:	4808      	ldr	r0, [pc, #32]	@ (800369c <I2C3_Init+0x70>)
 800367c:	f000 ff1e 	bl	80044bc <HAL_I2C_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800368a:	bf00      	nop
 800368c:	e7fd      	b.n	800368a <I2C3_Init+0x5e>
    }
    return;
 800368e:	bf00      	nop
}
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	20026030 	.word	0x20026030
 80036a0:	40005c00 	.word	0x40005c00
 80036a4:	000186a0 	.word	0x000186a0

080036a8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	4a18      	ldr	r2, [pc, #96]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <I2C3_MspInit+0x9c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80036f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fc:	2312      	movs	r3, #18
 80036fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003708:	2304      	movs	r3, #4
 800370a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4619      	mov	r1, r3
 8003712:	480d      	ldr	r0, [pc, #52]	@ (8003748 <I2C3_MspInit+0xa0>)
 8003714:	f000 fbce 	bl	8003eb4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800371c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371e:	2312      	movs	r3, #18
 8003720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800372a:	2304      	movs	r3, #4
 800372c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	@ (800374c <I2C3_MspInit+0xa4>)
 8003736:	f000 fbbd 	bl	8003eb4 <HAL_GPIO_Init>
    
}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40020800 	.word	0x40020800
 800374c:	40020000 	.word	0x40020000

08003750 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af04      	add	r7, sp, #16
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
 800375a:	460b      	mov	r3, r1
 800375c:	717b      	strb	r3, [r7, #5]
 800375e:	4613      	mov	r3, r2
 8003760:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003762:	793b      	ldrb	r3, [r7, #4]
 8003764:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003766:	797b      	ldrb	r3, [r7, #5]
 8003768:	b29a      	uxth	r2, r3
 800376a:	88f9      	ldrh	r1, [r7, #6]
 800376c:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <I2C3_Write+0x48>)
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	2301      	movs	r3, #1
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f107 030f 	add.w	r3, r7, #15
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2301      	movs	r3, #1
 800377c:	4807      	ldr	r0, [pc, #28]	@ (800379c <I2C3_Write+0x4c>)
 800377e:	f000 ffe1 	bl	8004744 <HAL_I2C_Mem_Write>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <I2C3_Write+0x50>)
 8003788:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800378a:	f7ff ff3f 	bl	800360c <verifyHAL_I2C_IS_OKAY>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	0003d090 	.word	0x0003d090
 800379c:	20026030 	.word	0x20026030
 80037a0:	20026084 	.word	0x20026084

080037a4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af04      	add	r7, sp, #16
 80037aa:	4603      	mov	r3, r0
 80037ac:	603a      	str	r2, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	460b      	mov	r3, r1
 80037b2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	b299      	uxth	r1, r3
 80037b8:	79bb      	ldrb	r3, [r7, #6]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <I2C3_Read+0x40>)
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	2301      	movs	r3, #1
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2301      	movs	r3, #1
 80037ca:	4807      	ldr	r0, [pc, #28]	@ (80037e8 <I2C3_Read+0x44>)
 80037cc:	f001 f8b4 	bl	8004938 <HAL_I2C_Mem_Read>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <I2C3_Read+0x48>)
 80037d6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80037d8:	f7ff ff18 	bl	800360c <verifyHAL_I2C_IS_OKAY>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	0003d090 	.word	0x0003d090
 80037e8:	20026030 	.word	0x20026030
 80037ec:	20026084 	.word	0x20026084

080037f0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	603a      	str	r2, [r7, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
 80037fe:	460b      	mov	r3, r1
 8003800:	71bb      	strb	r3, [r7, #6]
 8003802:	4613      	mov	r3, r2
 8003804:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	b299      	uxth	r1, r3
 800380a:	79bb      	ldrb	r3, [r7, #6]
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <I2C3_MulitByteRead+0x3c>)
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	88bb      	ldrh	r3, [r7, #4]
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2301      	movs	r3, #1
 800381c:	4804      	ldr	r0, [pc, #16]	@ (8003830 <I2C3_MulitByteRead+0x40>)
 800381e:	f001 f88b 	bl	8004938 <HAL_I2C_Mem_Read>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	0003d090 	.word	0x0003d090
 8003830:	20026030 	.word	0x20026030

08003834 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800383e:	204d      	movs	r0, #77	@ 0x4d
 8003840:	f7ff fe17 	bl	8003472 <STMPE811_Read>
 8003844:	4603      	mov	r3, r0
 8003846:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003848:	204e      	movs	r0, #78	@ 0x4e
 800384a:	f7ff fe12 	bl	8003472 <STMPE811_Read>
 800384e:	4603      	mov	r3, r0
 8003850:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003852:	7a7b      	ldrb	r3, [r7, #9]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	b21a      	sxth	r2, r3
 8003858:	7a3b      	ldrb	r3, [r7, #8]
 800385a:	b21b      	sxth	r3, r3
 800385c:	4313      	orrs	r3, r2
 800385e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003864:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003868:	4293      	cmp	r3, r2
 800386a:	dc06      	bgt.n	800387a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800386c:	89fb      	ldrh	r3, [r7, #14]
 800386e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003872:	330c      	adds	r3, #12
 8003874:	b29b      	uxth	r3, r3
 8003876:	81fb      	strh	r3, [r7, #14]
 8003878:	e005      	b.n	8003886 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003880:	3308      	adds	r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800388a:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <TM_STMPE811_ReadX+0xb8>)
 800388c:	fb82 1203 	smull	r1, r2, r2, r3
 8003890:	441a      	add	r2, r3
 8003892:	10d2      	asrs	r2, r2, #3
 8003894:	17db      	asrs	r3, r3, #31
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800389a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800389e:	2bef      	cmp	r3, #239	@ 0xef
 80038a0:	dd02      	ble.n	80038a8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80038a2:	23ef      	movs	r3, #239	@ 0xef
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	e005      	b.n	80038b4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80038a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da01      	bge.n	80038b4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80038b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dd05      	ble.n	80038ca <TM_STMPE811_ReadX+0x96>
 80038be:	89fa      	ldrh	r2, [r7, #14]
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	e004      	b.n	80038d4 <TM_STMPE811_ReadX+0xa0>
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80038d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	dd01      	ble.n	80038e2 <TM_STMPE811_ReadX+0xae>
        return val;
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	e000      	b.n	80038e4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80038e2:	88fb      	ldrh	r3, [r7, #6]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	88888889 	.word	0x88888889

080038f0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80038fa:	204f      	movs	r0, #79	@ 0x4f
 80038fc:	f7ff fdb9 	bl	8003472 <STMPE811_Read>
 8003900:	4603      	mov	r3, r0
 8003902:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003904:	2050      	movs	r0, #80	@ 0x50
 8003906:	f7ff fdb4 	bl	8003472 <STMPE811_Read>
 800390a:	4603      	mov	r3, r0
 800390c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800390e:	7a7b      	ldrb	r3, [r7, #9]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b21a      	sxth	r2, r3
 8003914:	7a3b      	ldrb	r3, [r7, #8]
 8003916:	b21b      	sxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003922:	b29b      	uxth	r3, r3
 8003924:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800392a:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <TM_STMPE811_ReadY+0xa0>)
 800392c:	fb82 1203 	smull	r1, r2, r2, r3
 8003930:	1052      	asrs	r2, r2, #1
 8003932:	17db      	asrs	r3, r3, #31
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800393c:	2b00      	cmp	r3, #0
 800393e:	dc02      	bgt.n	8003946 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	81fb      	strh	r3, [r7, #14]
 8003944:	e007      	b.n	8003956 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800394a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800394e:	db02      	blt.n	8003956 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003950:	f240 133f 	movw	r3, #319	@ 0x13f
 8003954:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003956:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	429a      	cmp	r2, r3
 800395e:	dd05      	ble.n	800396c <TM_STMPE811_ReadY+0x7c>
 8003960:	89fa      	ldrh	r2, [r7, #14]
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	b21b      	sxth	r3, r3
 800396a:	e004      	b.n	8003976 <TM_STMPE811_ReadY+0x86>
 800396c:	89fb      	ldrh	r3, [r7, #14]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	b21b      	sxth	r3, r3
 8003976:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003978:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800397c:	2b04      	cmp	r3, #4
 800397e:	dd01      	ble.n	8003984 <TM_STMPE811_ReadY+0x94>
        return val;
 8003980:	89fb      	ldrh	r3, [r7, #14]
 8003982:	e000      	b.n	8003986 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003984:	88fb      	ldrh	r3, [r7, #6]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2e8ba2e9 	.word	0x2e8ba2e9

08003994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800399c:	4a14      	ldr	r2, [pc, #80]	@ (80039f0 <_sbrk+0x5c>)
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <_sbrk+0x60>)
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <_sbrk+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b0:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <_sbrk+0x64>)
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <_sbrk+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <_sbrk+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d207      	bcs.n	80039d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c4:	f004 fa92 	bl	8007eec <__errno>
 80039c8:	4603      	mov	r3, r0
 80039ca:	220c      	movs	r2, #12
 80039cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	e009      	b.n	80039e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d4:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039da:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	4a05      	ldr	r2, [pc, #20]	@ (80039f8 <_sbrk+0x64>)
 80039e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20030000 	.word	0x20030000
 80039f4:	00000400 	.word	0x00000400
 80039f8:	20026088 	.word	0x20026088
 80039fc:	20026280 	.word	0x20026280

08003a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a04:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <SystemInit+0x20>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	4a05      	ldr	r2, [pc, #20]	@ (8003a20 <SystemInit+0x20>)
 8003a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a28:	f7ff ffea 	bl	8003a00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a2c:	480c      	ldr	r0, [pc, #48]	@ (8003a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a2e:	490d      	ldr	r1, [pc, #52]	@ (8003a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a34:	e002      	b.n	8003a3c <LoopCopyDataInit>

08003a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3a:	3304      	adds	r3, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a40:	d3f9      	bcc.n	8003a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a44:	4c0a      	ldr	r4, [pc, #40]	@ (8003a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a48:	e001      	b.n	8003a4e <LoopFillZerobss>

08003a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a4c:	3204      	adds	r2, #4

08003a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a50:	d3fb      	bcc.n	8003a4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a52:	f004 fa51 	bl	8007ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a56:	f7fe fc95 	bl	8002384 <main>
  bx  lr    
 8003a5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8003a68:	08009f7c 	.word	0x08009f7c
  ldr r2, =_sbss
 8003a6c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8003a70:	2002627c 	.word	0x2002627c

08003a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <ADC_IRQHandler>
	...

08003a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <HAL_Init+0x40>)
 8003a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <HAL_Init+0x40>)
 8003a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <HAL_Init+0x40>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	f000 f991 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f000 f808 	bl	8003abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aac:	f7ff f93e 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_InitTick+0x54>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_InitTick+0x58>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f9b7 	bl	8003e4e <HAL_SYSTICK_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00e      	b.n	8003b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d80a      	bhi.n	8003b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af0:	2200      	movs	r2, #0
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f000 f971 	bl	8003dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003afc:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <HAL_InitTick+0x5c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200001fc 	.word	0x200001fc
 8003b14:	20000204 	.word	0x20000204
 8003b18:	20000200 	.word	0x20000200

08003b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_IncTick+0x20>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000204 	.word	0x20000204
 8003b40:	2002608c 	.word	0x2002608c

08003b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return uwTick;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_GetTick+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2002608c 	.word	0x2002608c

08003b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff ffee 	bl	8003b44 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d005      	beq.n	8003b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_Delay+0x44>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b82:	bf00      	nop
 8003b84:	f7ff ffde 	bl	8003b44 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8f7      	bhi.n	8003b84 <HAL_Delay+0x28>
  {
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000204 	.word	0x20000204

08003ba4 <__NVIC_SetPriorityGrouping>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	@ (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db12      	blt.n	8003c7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	490a      	ldr	r1, [pc, #40]	@ (8003c88 <__NVIC_DisableIRQ+0x44>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	3320      	adds	r3, #32
 8003c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c70:	f3bf 8f4f 	dsb	sy
}
 8003c74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c76:	f3bf 8f6f 	isb	sy
}
 8003c7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0c      	blt.n	8003cb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	@ (8003cc4 <__NVIC_ClearPendingIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	3360      	adds	r3, #96	@ 0x60
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	@ (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	@ (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	@ 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	@ 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d94:	d301      	bcc.n	8003d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00f      	b.n	8003dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <SysTick_Config+0x40>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da2:	210f      	movs	r1, #15
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f7ff ff8e 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <SysTick_Config+0x40>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <SysTick_Config+0x40>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fee7 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff fefc 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff8e 	bl	8003d1c <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5d 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff feef 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff feff 	bl	8003c44 <__NVIC_DisableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff94 	bl	8003d84 <SysTick_Config>
 8003e5c:	4603      	mov	r3, r0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff09 	bl	8003c8c <__NVIC_ClearPendingIRQ>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003e9e:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <HAL_EXTI_ClearPending+0x2c>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6153      	str	r3, [r2, #20]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40013c00 	.word	0x40013c00

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e177      	b.n	80041c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f040 8166 	bne.w	80041ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d130      	bne.n	8003f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0201 	and.w	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d017      	beq.n	8003fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d123      	bne.n	8003ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80c0 	beq.w	80041ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_GPIO_Init+0x324>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	4a65      	ldr	r2, [pc, #404]	@ (80041d8 <HAL_GPIO_Init+0x324>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004048:	6453      	str	r3, [r2, #68]	@ 0x44
 800404a:	4b63      	ldr	r3, [pc, #396]	@ (80041d8 <HAL_GPIO_Init+0x324>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004056:	4a61      	ldr	r2, [pc, #388]	@ (80041dc <HAL_GPIO_Init+0x328>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a58      	ldr	r2, [pc, #352]	@ (80041e0 <HAL_GPIO_Init+0x32c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d037      	beq.n	80040f2 <HAL_GPIO_Init+0x23e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a57      	ldr	r2, [pc, #348]	@ (80041e4 <HAL_GPIO_Init+0x330>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_GPIO_Init+0x23a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a56      	ldr	r2, [pc, #344]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <HAL_GPIO_Init+0x236>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a55      	ldr	r2, [pc, #340]	@ (80041ec <HAL_GPIO_Init+0x338>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d025      	beq.n	80040e6 <HAL_GPIO_Init+0x232>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a54      	ldr	r2, [pc, #336]	@ (80041f0 <HAL_GPIO_Init+0x33c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01f      	beq.n	80040e2 <HAL_GPIO_Init+0x22e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a53      	ldr	r2, [pc, #332]	@ (80041f4 <HAL_GPIO_Init+0x340>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d019      	beq.n	80040de <HAL_GPIO_Init+0x22a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a52      	ldr	r2, [pc, #328]	@ (80041f8 <HAL_GPIO_Init+0x344>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_GPIO_Init+0x226>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a51      	ldr	r2, [pc, #324]	@ (80041fc <HAL_GPIO_Init+0x348>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00d      	beq.n	80040d6 <HAL_GPIO_Init+0x222>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a50      	ldr	r2, [pc, #320]	@ (8004200 <HAL_GPIO_Init+0x34c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <HAL_GPIO_Init+0x21e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004204 <HAL_GPIO_Init+0x350>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_GPIO_Init+0x21a>
 80040ca:	2309      	movs	r3, #9
 80040cc:	e012      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ce:	230a      	movs	r3, #10
 80040d0:	e010      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040d2:	2308      	movs	r3, #8
 80040d4:	e00e      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040d6:	2307      	movs	r3, #7
 80040d8:	e00c      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040da:	2306      	movs	r3, #6
 80040dc:	e00a      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040de:	2305      	movs	r3, #5
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040e2:	2304      	movs	r3, #4
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x240>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	@ (80041dc <HAL_GPIO_Init+0x328>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <HAL_GPIO_Init+0x354>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a34      	ldr	r2, [pc, #208]	@ (8004208 <HAL_GPIO_Init+0x354>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b32      	ldr	r3, [pc, #200]	@ (8004208 <HAL_GPIO_Init+0x354>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a29      	ldr	r2, [pc, #164]	@ (8004208 <HAL_GPIO_Init+0x354>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004166:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_GPIO_Init+0x354>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418a:	4a1f      	ldr	r2, [pc, #124]	@ (8004208 <HAL_GPIO_Init+0x354>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004190:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_GPIO_Init+0x354>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b4:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <HAL_GPIO_Init+0x354>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f ae84 	bls.w	8003ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40021400 	.word	0x40021400
 80041f8:	40021800 	.word	0x40021800
 80041fc:	40021c00 	.word	0x40021c00
 8004200:	40022000 	.word	0x40022000
 8004204:	40022400 	.word	0x40022400
 8004208:	40013c00 	.word	0x40013c00

0800420c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e0d9      	b.n	80043dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004228:	2201      	movs	r2, #1
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	f040 80c9 	bne.w	80043d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004244:	4a6b      	ldr	r2, [pc, #428]	@ (80043f4 <HAL_GPIO_DeInit+0x1e8>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a63      	ldr	r2, [pc, #396]	@ (80043f8 <HAL_GPIO_DeInit+0x1ec>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d037      	beq.n	80042de <HAL_GPIO_DeInit+0xd2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a62      	ldr	r2, [pc, #392]	@ (80043fc <HAL_GPIO_DeInit+0x1f0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_GPIO_DeInit+0xce>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a61      	ldr	r2, [pc, #388]	@ (8004400 <HAL_GPIO_DeInit+0x1f4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02b      	beq.n	80042d6 <HAL_GPIO_DeInit+0xca>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a60      	ldr	r2, [pc, #384]	@ (8004404 <HAL_GPIO_DeInit+0x1f8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d025      	beq.n	80042d2 <HAL_GPIO_DeInit+0xc6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a5f      	ldr	r2, [pc, #380]	@ (8004408 <HAL_GPIO_DeInit+0x1fc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <HAL_GPIO_DeInit+0xc2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a5e      	ldr	r2, [pc, #376]	@ (800440c <HAL_GPIO_DeInit+0x200>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d019      	beq.n	80042ca <HAL_GPIO_DeInit+0xbe>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <HAL_GPIO_DeInit+0x204>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_DeInit+0xba>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <HAL_GPIO_DeInit+0x208>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_DeInit+0xb6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004418 <HAL_GPIO_DeInit+0x20c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_DeInit+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a5a      	ldr	r2, [pc, #360]	@ (800441c <HAL_GPIO_DeInit+0x210>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_DeInit+0xae>
 80042b6:	2309      	movs	r3, #9
 80042b8:	e012      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042ba:	230a      	movs	r3, #10
 80042bc:	e010      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042be:	2308      	movs	r3, #8
 80042c0:	e00e      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042c2:	2307      	movs	r3, #7
 80042c4:	e00c      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00a      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042ca:	2305      	movs	r3, #5
 80042cc:	e008      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e006      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042d2:	2303      	movs	r3, #3
 80042d4:	e004      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e002      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_GPIO_DeInit+0xd4>
 80042de:	2300      	movs	r3, #0
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	f002 0203 	and.w	r2, r2, #3
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	4093      	lsls	r3, r2
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d132      	bne.n	8004356 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80042f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	4949      	ldr	r1, [pc, #292]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80042fe:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	43db      	mvns	r3, r3
 8004306:	4946      	ldr	r1, [pc, #280]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 8004308:	4013      	ands	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800430c:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	4942      	ldr	r1, [pc, #264]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 8004316:	4013      	ands	r3, r2
 8004318:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	493f      	ldr	r1, [pc, #252]	@ (8004420 <HAL_GPIO_DeInit+0x214>)
 8004324:	4013      	ands	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	220f      	movs	r2, #15
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004338:	4a2e      	ldr	r2, [pc, #184]	@ (80043f4 <HAL_GPIO_DeInit+0x1e8>)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	3302      	adds	r3, #2
 8004340:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	43da      	mvns	r2, r3
 8004348:	482a      	ldr	r0, [pc, #168]	@ (80043f4 <HAL_GPIO_DeInit+0x1e8>)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	400a      	ands	r2, r1
 8004350:	3302      	adds	r3, #2
 8004352:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2103      	movs	r1, #3
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	08da      	lsrs	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3208      	adds	r2, #8
 8004374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	08d2      	lsrs	r2, r2, #3
 800438c:	4019      	ands	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2103      	movs	r1, #3
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	401a      	ands	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	2101      	movs	r1, #1
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2103      	movs	r1, #3
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	401a      	ands	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	3301      	adds	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	f67f af22 	bls.w	8004228 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40020000 	.word	0x40020000
 80043fc:	40020400 	.word	0x40020400
 8004400:	40020800 	.word	0x40020800
 8004404:	40020c00 	.word	0x40020c00
 8004408:	40021000 	.word	0x40021000
 800440c:	40021400 	.word	0x40021400
 8004410:	40021800 	.word	0x40021800
 8004414:	40021c00 	.word	0x40021c00
 8004418:	40022000 	.word	0x40022000
 800441c:	40022400 	.word	0x40022400
 8004420:	40013c00 	.word	0x40013c00

08004424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
 8004430:	4613      	mov	r3, r2
 8004432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004434:	787b      	ldrb	r3, [r7, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004440:	e003      	b.n	800444a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004468:	887a      	ldrh	r2, [r7, #2]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4013      	ands	r3, r2
 800446e:	041a      	lsls	r2, r3, #16
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	43d9      	mvns	r1, r3
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	400b      	ands	r3, r1
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004496:	4b08      	ldr	r3, [pc, #32]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fab6 	bl	8002a1c <HAL_GPIO_EXTI_Callback>
  }
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40013c00 	.word	0x40013c00

080044bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e12b      	b.n	8004726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe fc4a 	bl	8002d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	@ 0x24
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800450e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800451e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004520:	f001 ff06 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 8004524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4a81      	ldr	r2, [pc, #516]	@ (8004730 <HAL_I2C_Init+0x274>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d807      	bhi.n	8004540 <HAL_I2C_Init+0x84>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a80      	ldr	r2, [pc, #512]	@ (8004734 <HAL_I2C_Init+0x278>)
 8004534:	4293      	cmp	r3, r2
 8004536:	bf94      	ite	ls
 8004538:	2301      	movls	r3, #1
 800453a:	2300      	movhi	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e006      	b.n	800454e <HAL_I2C_Init+0x92>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a7d      	ldr	r2, [pc, #500]	@ (8004738 <HAL_I2C_Init+0x27c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	bf94      	ite	ls
 8004548:	2301      	movls	r3, #1
 800454a:	2300      	movhi	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0e7      	b.n	8004726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a78      	ldr	r2, [pc, #480]	@ (800473c <HAL_I2C_Init+0x280>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0c9b      	lsrs	r3, r3, #18
 8004560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a6a      	ldr	r2, [pc, #424]	@ (8004730 <HAL_I2C_Init+0x274>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d802      	bhi.n	8004590 <HAL_I2C_Init+0xd4>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	e009      	b.n	80045a4 <HAL_I2C_Init+0xe8>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	4a69      	ldr	r2, [pc, #420]	@ (8004740 <HAL_I2C_Init+0x284>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	3301      	adds	r3, #1
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	495c      	ldr	r1, [pc, #368]	@ (8004730 <HAL_I2C_Init+0x274>)
 80045c0:	428b      	cmp	r3, r1
 80045c2:	d819      	bhi.n	80045f8 <HAL_I2C_Init+0x13c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e59      	subs	r1, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045d8:	400b      	ands	r3, r1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_I2C_Init+0x138>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e59      	subs	r1, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	e051      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e04f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d111      	bne.n	8004624 <HAL_I2C_Init+0x168>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e012      	b.n	800464a <HAL_I2C_Init+0x18e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	0099      	lsls	r1, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	fbb0 f3f3 	udiv	r3, r0, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Init+0x196>
 800464e:	2301      	movs	r3, #1
 8004650:	e022      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10e      	bne.n	8004678 <HAL_I2C_Init+0x1bc>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1e58      	subs	r0, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	440b      	add	r3, r1
 8004668:	fbb0 f3f3 	udiv	r3, r0, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004676:	e00f      	b.n	8004698 <HAL_I2C_Init+0x1dc>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e58      	subs	r0, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	0099      	lsls	r1, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	6809      	ldr	r1, [r1, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6911      	ldr	r1, [r2, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	000186a0 	.word	0x000186a0
 8004734:	001e847f 	.word	0x001e847f
 8004738:	003d08ff 	.word	0x003d08ff
 800473c:	431bde83 	.word	0x431bde83
 8004740:	10624dd3 	.word	0x10624dd3

08004744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	817b      	strh	r3, [r7, #10]
 8004756:	460b      	mov	r3, r1
 8004758:	813b      	strh	r3, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800475e:	f7ff f9f1 	bl	8003b44 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	f040 80d9 	bne.w	8004924 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2319      	movs	r3, #25
 8004778:	2201      	movs	r2, #1
 800477a:	496d      	ldr	r1, [pc, #436]	@ (8004930 <HAL_I2C_Mem_Write+0x1ec>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fc8b 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	e0cc      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_I2C_Mem_Write+0x56>
 8004796:	2302      	movs	r3, #2
 8004798:	e0c5      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d007      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2221      	movs	r2, #33	@ 0x21
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	@ 0x40
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004934 <HAL_I2C_Mem_Write+0x1f0>)
 8004800:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004802:	88f8      	ldrh	r0, [r7, #6]
 8004804:	893a      	ldrh	r2, [r7, #8]
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4603      	mov	r3, r0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fac2 	bl	8004d9c <I2C_RequestMemoryWrite>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d052      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e081      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fd50 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	2b04      	cmp	r3, #4
 8004838:	d107      	bne.n	800484a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e06b      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d11b      	bne.n	80048c4 <HAL_I2C_Mem_Write+0x180>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	d017      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1aa      	bne.n	8004822 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fd43 	bl	800535c <I2C_WaitOnBTFFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d107      	bne.n	80048f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e016      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	00100002 	.word	0x00100002
 8004934:	ffff0000 	.word	0xffff0000

08004938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	@ 0x30
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004952:	f7ff f8f7 	bl	8003b44 <HAL_GetTick>
 8004956:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	f040 8214 	bne.w	8004d8e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2319      	movs	r3, #25
 800496c:	2201      	movs	r2, #1
 800496e:	497b      	ldr	r1, [pc, #492]	@ (8004b5c <HAL_I2C_Mem_Read+0x224>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fb91 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	e207      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2C_Mem_Read+0x56>
 800498a:	2302      	movs	r3, #2
 800498c:	e200      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d007      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2222      	movs	r2, #34	@ 0x22
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2240      	movs	r2, #64	@ 0x40
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b60 <HAL_I2C_Mem_Read+0x228>)
 80049f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f6:	88f8      	ldrh	r0, [r7, #6]
 80049f8:	893a      	ldrh	r2, [r7, #8]
 80049fa:	8979      	ldrh	r1, [r7, #10]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4603      	mov	r3, r0
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa5e 	bl	8004ec8 <I2C_RequestMemoryRead>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e1bc      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e190      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d11b      	bne.n	8004a86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e170      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d11b      	bne.n	8004ac6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	e150      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004adc:	e144      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	f200 80f1 	bhi.w	8004cca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d123      	bne.n	8004b38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fc79 	bl	80053ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e145      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b36:	e117      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d14e      	bne.n	8004bde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	2200      	movs	r2, #0
 8004b48:	4906      	ldr	r1, [pc, #24]	@ (8004b64 <HAL_I2C_Mem_Read+0x22c>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 faa4 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e11a      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
 8004b5a:	bf00      	nop
 8004b5c:	00100002 	.word	0x00100002
 8004b60:	ffff0000 	.word	0xffff0000
 8004b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bdc:	e0c4      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	2200      	movs	r2, #0
 8004be6:	496c      	ldr	r1, [pc, #432]	@ (8004d98 <HAL_I2C_Mem_Read+0x460>)
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa55 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0cb      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	2200      	movs	r2, #0
 8004c42:	4955      	ldr	r1, [pc, #340]	@ (8004d98 <HAL_I2C_Mem_Read+0x460>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fa27 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e09d      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cc8:	e04e      	b.n	8004d68 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ccc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fb8c 	bl	80053ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e058      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d124      	bne.n	8004d68 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f aeb6 	bne.w	8004ade <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	@ 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	00010004 	.word	0x00010004

08004d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	817b      	strh	r3, [r7, #10]
 8004dae:	460b      	mov	r3, r1
 8004db0:	813b      	strh	r3, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f960 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dec:	d103      	bne.n	8004df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e05f      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	492d      	ldr	r1, [pc, #180]	@ (8004ec4 <I2C_RequestMemoryWrite+0x128>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f9bb 	bl	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04c      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e38:	6a39      	ldr	r1, [r7, #32]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa46 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d107      	bne.n	8004e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e02b      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]
 8004e72:	e021      	b.n	8004eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	6a39      	ldr	r1, [r7, #32]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fa20 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d107      	bne.n	8004eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e005      	b.n	8004eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	00010002 	.word	0x00010002

08004ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	817b      	strh	r3, [r7, #10]
 8004eda:	460b      	mov	r3, r1
 8004edc:	813b      	strh	r3, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f8c2 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f28:	d103      	bne.n	8004f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0aa      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f36:	897b      	ldrh	r3, [r7, #10]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	4952      	ldr	r1, [pc, #328]	@ (8005094 <I2C_RequestMemoryRead+0x1cc>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f91d 	bl	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e097      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f74:	6a39      	ldr	r1, [r7, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f9a8 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d107      	bne.n	8004f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e076      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	893b      	ldrh	r3, [r7, #8]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	611a      	str	r2, [r3, #16]
 8004fae:	e021      	b.n	8004ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	6a39      	ldr	r1, [r7, #32]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f982 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d107      	bne.n	8004fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e050      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff6:	6a39      	ldr	r1, [r7, #32]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f967 	bl	80052cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	2b04      	cmp	r3, #4
 800500a:	d107      	bne.n	800501c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800501a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e035      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800502e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	2200      	movs	r2, #0
 8005038:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f82b 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005056:	d103      	bne.n	8005060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e013      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005064:	897b      	ldrh	r3, [r7, #10]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	4906      	ldr	r1, [pc, #24]	@ (8005094 <I2C_RequestMemoryRead+0x1cc>)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f886 	bl	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010002 	.word	0x00010002

08005098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a8:	e048      	b.n	800513c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d044      	beq.n	800513c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fe fd47 	bl	8003b44 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d139      	bne.n	800513c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10d      	bne.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	43da      	mvns	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	e00c      	b.n	8005108 <I2C_WaitOnFlagUntilTimeout+0x70>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	43da      	mvns	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	d116      	bne.n	800513c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e023      	b.n	8005184 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10d      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	43da      	mvns	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	e00c      	b.n	800517c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	43da      	mvns	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d093      	beq.n	80050aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800519a:	e071      	b.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d123      	bne.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f043 0204 	orr.w	r2, r3, #4
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e067      	b.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d041      	beq.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fc:	f7fe fca2 	bl	8003b44 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d136      	bne.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10c      	bne.n	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e00b      	b.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d016      	beq.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e021      	b.n	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10c      	bne.n	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	43da      	mvns	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e00b      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f af6d 	bne.w	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d8:	e034      	b.n	8005344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f8e3 	bl	80054a6 <I2C_IsAcknowledgeFailed>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e034      	b.n	8005354 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d028      	beq.n	8005344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe fc27 	bl	8003b44 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11d      	bne.n	8005344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b80      	cmp	r3, #128	@ 0x80
 8005314:	d016      	beq.n	8005344 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b80      	cmp	r3, #128	@ 0x80
 8005350:	d1c3      	bne.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005368:	e034      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f89b 	bl	80054a6 <I2C_IsAcknowledgeFailed>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e034      	b.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d028      	beq.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fe fbdf 	bl	8003b44 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11d      	bne.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d016      	beq.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d1c3      	bne.n	800536a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f8:	e049      	b.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d119      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e030      	b.n	800549e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fe fb82 	bl	8003b44 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11d      	bne.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b40      	cmp	r3, #64	@ 0x40
 800545e:	d016      	beq.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d1ae      	bne.n	80053fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054bc:	d11b      	bne.n	80054f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f043 0204 	orr.w	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0bf      	b.n	8005696 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fd fc90 	bl	8002e50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005546:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800555c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6899      	ldr	r1, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b4a      	ldr	r3, [pc, #296]	@ (80056a0 <HAL_LTDC_Init+0x19c>)
 8005578:	400b      	ands	r3, r1
 800557a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6899      	ldr	r1, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68d9      	ldr	r1, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b3e      	ldr	r3, [pc, #248]	@ (80056a0 <HAL_LTDC_Init+0x19c>)
 80055a6:	400b      	ands	r3, r1
 80055a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68d9      	ldr	r1, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6919      	ldr	r1, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b33      	ldr	r3, [pc, #204]	@ (80056a0 <HAL_LTDC_Init+0x19c>)
 80055d4:	400b      	ands	r3, r1
 80055d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6919      	ldr	r1, [r3, #16]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6959      	ldr	r1, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <HAL_LTDC_Init+0x19c>)
 8005602:	400b      	ands	r3, r1
 8005604:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6959      	ldr	r1, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0206 	orr.w	r2, r2, #6
 8005672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	f000f800 	.word	0xf000f800

080056a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056a4:	b5b0      	push	{r4, r5, r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_LTDC_ConfigLayer+0x1a>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e02c      	b.n	8005718 <HAL_LTDC_ConfigLayer+0x74>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2134      	movs	r1, #52	@ 0x34
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
 80056e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f811 	bl	8005720 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bdb0      	pop	{r4, r5, r7, pc}

08005720 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573c:	4413      	add	r3, r2
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	4413      	add	r3, r2
 800574e:	3384      	adds	r3, #132	@ 0x84
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	4611      	mov	r1, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	01d2      	lsls	r2, r2, #7
 800575c:	440a      	add	r2, r1
 800575e:	3284      	adds	r2, #132	@ 0x84
 8005760:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005764:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005776:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005778:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	440b      	add	r3, r1
 8005786:	3384      	adds	r3, #132	@ 0x84
 8005788:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800578e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800579e:	4413      	add	r3, r2
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	01db      	lsls	r3, r3, #7
 80057ae:	4413      	add	r3, r2
 80057b0:	3384      	adds	r3, #132	@ 0x84
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	4611      	mov	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	01d2      	lsls	r2, r2, #7
 80057be:	440a      	add	r2, r1
 80057c0:	3284      	adds	r2, #132	@ 0x84
 80057c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80057c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d6:	4413      	add	r3, r2
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4619      	mov	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	01db      	lsls	r3, r3, #7
 80057e4:	440b      	add	r3, r1
 80057e6:	3384      	adds	r3, #132	@ 0x84
 80057e8:	4619      	mov	r1, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	01db      	lsls	r3, r3, #7
 80057fa:	4413      	add	r3, r2
 80057fc:	3384      	adds	r3, #132	@ 0x84
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	4611      	mov	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	01d2      	lsls	r2, r2, #7
 800580a:	440a      	add	r2, r1
 800580c:	3284      	adds	r2, #132	@ 0x84
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	01db      	lsls	r3, r3, #7
 800581e:	4413      	add	r3, r2
 8005820:	3384      	adds	r3, #132	@ 0x84
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	061b      	lsls	r3, r3, #24
 8005844:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	01db      	lsls	r3, r3, #7
 8005850:	4413      	add	r3, r2
 8005852:	3384      	adds	r3, #132	@ 0x84
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	01db      	lsls	r3, r3, #7
 8005860:	4413      	add	r3, r2
 8005862:	3384      	adds	r3, #132	@ 0x84
 8005864:	461a      	mov	r2, r3
 8005866:	2300      	movs	r3, #0
 8005868:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005870:	461a      	mov	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	431a      	orrs	r2, r3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	440b      	add	r3, r1
 8005886:	3384      	adds	r3, #132	@ 0x84
 8005888:	4619      	mov	r1, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	01db      	lsls	r3, r3, #7
 800589a:	4413      	add	r3, r2
 800589c:	3384      	adds	r3, #132	@ 0x84
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	4611      	mov	r1, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	01d2      	lsls	r2, r2, #7
 80058aa:	440a      	add	r2, r1
 80058ac:	3284      	adds	r2, #132	@ 0x84
 80058ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	01db      	lsls	r3, r3, #7
 80058be:	4413      	add	r3, r2
 80058c0:	3384      	adds	r3, #132	@ 0x84
 80058c2:	461a      	mov	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	01db      	lsls	r3, r3, #7
 80058d4:	4413      	add	r3, r2
 80058d6:	3384      	adds	r3, #132	@ 0x84
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	4611      	mov	r1, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	01d2      	lsls	r2, r2, #7
 80058e4:	440a      	add	r2, r1
 80058e6:	3284      	adds	r2, #132	@ 0x84
 80058e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058ec:	f023 0307 	bic.w	r3, r3, #7
 80058f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	6809      	ldr	r1, [r1, #0]
 80058fe:	4608      	mov	r0, r1
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	01c9      	lsls	r1, r1, #7
 8005904:	4401      	add	r1, r0
 8005906:	3184      	adds	r1, #132	@ 0x84
 8005908:	4313      	orrs	r3, r2
 800590a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	4413      	add	r3, r2
 8005918:	3384      	adds	r3, #132	@ 0x84
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	01db      	lsls	r3, r3, #7
 8005926:	4413      	add	r3, r2
 8005928:	3384      	adds	r3, #132	@ 0x84
 800592a:	461a      	mov	r2, r3
 800592c:	2300      	movs	r3, #0
 800592e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	01db      	lsls	r3, r3, #7
 800593a:	4413      	add	r3, r2
 800593c:	3384      	adds	r3, #132	@ 0x84
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800594e:	2304      	movs	r3, #4
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e01b      	b.n	800598c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800595c:	2303      	movs	r3, #3
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e014      	b.n	800598c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b04      	cmp	r3, #4
 8005968:	d00b      	beq.n	8005982 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800596e:	2b02      	cmp	r3, #2
 8005970:	d007      	beq.n	8005982 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005976:	2b03      	cmp	r3, #3
 8005978:	d003      	beq.n	8005982 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800597e:	2b07      	cmp	r3, #7
 8005980:	d102      	bne.n	8005988 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005982:	2302      	movs	r3, #2
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e001      	b.n	800598c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005988:	2301      	movs	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	01db      	lsls	r3, r3, #7
 8005996:	4413      	add	r3, r2
 8005998:	3384      	adds	r3, #132	@ 0x84
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	4611      	mov	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	01d2      	lsls	r2, r2, #7
 80059a6:	440a      	add	r2, r1
 80059a8:	3284      	adds	r2, #132	@ 0x84
 80059aa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80059ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	1acb      	subs	r3, r1, r3
 80059c6:	69f9      	ldr	r1, [r7, #28]
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	6809      	ldr	r1, [r1, #0]
 80059d2:	4608      	mov	r0, r1
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	01c9      	lsls	r1, r1, #7
 80059d8:	4401      	add	r1, r0
 80059da:	3184      	adds	r1, #132	@ 0x84
 80059dc:	4313      	orrs	r3, r2
 80059de:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4413      	add	r3, r2
 80059ec:	3384      	adds	r3, #132	@ 0x84
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	4611      	mov	r1, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	01d2      	lsls	r2, r2, #7
 80059fa:	440a      	add	r2, r1
 80059fc:	3284      	adds	r2, #132	@ 0x84
 80059fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a02:	f023 0307 	bic.w	r3, r3, #7
 8005a06:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	01db      	lsls	r3, r3, #7
 8005a12:	4413      	add	r3, r2
 8005a14:	3384      	adds	r3, #132	@ 0x84
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	01db      	lsls	r3, r3, #7
 8005a28:	4413      	add	r3, r2
 8005a2a:	3384      	adds	r3, #132	@ 0x84
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	4611      	mov	r1, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	01d2      	lsls	r2, r2, #7
 8005a38:	440a      	add	r2, r1
 8005a3a:	3284      	adds	r2, #132	@ 0x84
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6013      	str	r3, [r2, #0]
}
 8005a42:	bf00      	nop
 8005a44:	3724      	adds	r7, #36	@ 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e267      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d075      	beq.n	8005b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a6e:	4b88      	ldr	r3, [pc, #544]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d00c      	beq.n	8005a94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7a:	4b85      	ldr	r3, [pc, #532]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d112      	bne.n	8005aac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a86:	4b82      	ldr	r3, [pc, #520]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a92:	d10b      	bne.n	8005aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a94:	4b7e      	ldr	r3, [pc, #504]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d05b      	beq.n	8005b58 <HAL_RCC_OscConfig+0x108>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d157      	bne.n	8005b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e242      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab4:	d106      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x74>
 8005ab6:	4b76      	ldr	r3, [pc, #472]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a75      	ldr	r2, [pc, #468]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e01d      	b.n	8005b00 <HAL_RCC_OscConfig+0xb0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x98>
 8005ace:	4b70      	ldr	r3, [pc, #448]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	4b6d      	ldr	r3, [pc, #436]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6c      	ldr	r2, [pc, #432]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e00b      	b.n	8005b00 <HAL_RCC_OscConfig+0xb0>
 8005ae8:	4b69      	ldr	r3, [pc, #420]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a68      	ldr	r2, [pc, #416]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	4b66      	ldr	r3, [pc, #408]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a65      	ldr	r2, [pc, #404]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d013      	beq.n	8005b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7fe f81c 	bl	8003b44 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fe f818 	bl	8003b44 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	@ 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e207      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b22:	4b5b      	ldr	r3, [pc, #364]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0xc0>
 8005b2e:	e014      	b.n	8005b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fe f808 	bl	8003b44 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b38:	f7fe f804 	bl	8003b44 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b64      	cmp	r3, #100	@ 0x64
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e1f3      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4a:	4b51      	ldr	r3, [pc, #324]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0xe8>
 8005b56:	e000      	b.n	8005b5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d063      	beq.n	8005c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b66:	4b4a      	ldr	r3, [pc, #296]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b72:	4b47      	ldr	r3, [pc, #284]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d11c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7e:	4b44      	ldr	r3, [pc, #272]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d116      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8a:	4b41      	ldr	r3, [pc, #260]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x152>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e1c7      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4937      	ldr	r1, [pc, #220]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb6:	e03a      	b.n	8005c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d020      	beq.n	8005c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc0:	4b34      	ldr	r3, [pc, #208]	@ (8005c94 <HAL_RCC_OscConfig+0x244>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fd ffbd 	bl	8003b44 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bce:	f7fd ffb9 	bl	8003b44 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e1a8      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bec:	4b28      	ldr	r3, [pc, #160]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4925      	ldr	r1, [pc, #148]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]
 8005c00:	e015      	b.n	8005c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c02:	4b24      	ldr	r3, [pc, #144]	@ (8005c94 <HAL_RCC_OscConfig+0x244>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fd ff9c 	bl	8003b44 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c10:	f7fd ff98 	bl	8003b44 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e187      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d036      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d016      	beq.n	8005c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c42:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <HAL_RCC_OscConfig+0x248>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fd ff7c 	bl	8003b44 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c50:	f7fd ff78 	bl	8003b44 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e167      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c62:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <HAL_RCC_OscConfig+0x240>)
 8005c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x200>
 8005c6e:	e01b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c70:	4b09      	ldr	r3, [pc, #36]	@ (8005c98 <HAL_RCC_OscConfig+0x248>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c76:	f7fd ff65 	bl	8003b44 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c7c:	e00e      	b.n	8005c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7e:	f7fd ff61 	bl	8003b44 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d907      	bls.n	8005c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e150      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
 8005c90:	40023800 	.word	0x40023800
 8005c94:	42470000 	.word	0x42470000
 8005c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c9c:	4b88      	ldr	r3, [pc, #544]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ea      	bne.n	8005c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8097 	beq.w	8005de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cba:	4b81      	ldr	r3, [pc, #516]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	4b7d      	ldr	r3, [pc, #500]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	4a7c      	ldr	r2, [pc, #496]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce6:	4b77      	ldr	r3, [pc, #476]	@ (8005ec4 <HAL_RCC_OscConfig+0x474>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d118      	bne.n	8005d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf2:	4b74      	ldr	r3, [pc, #464]	@ (8005ec4 <HAL_RCC_OscConfig+0x474>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a73      	ldr	r2, [pc, #460]	@ (8005ec4 <HAL_RCC_OscConfig+0x474>)
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfe:	f7fd ff21 	bl	8003b44 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d06:	f7fd ff1d 	bl	8003b44 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e10c      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec4 <HAL_RCC_OscConfig+0x474>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x2ea>
 8005d2c:	4b64      	ldr	r3, [pc, #400]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d30:	4a63      	ldr	r2, [pc, #396]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d38:	e01c      	b.n	8005d74 <HAL_RCC_OscConfig+0x324>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x30c>
 8005d42:	4b5f      	ldr	r3, [pc, #380]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d48:	f043 0304 	orr.w	r3, r3, #4
 8005d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	4a5b      	ldr	r2, [pc, #364]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5a:	e00b      	b.n	8005d74 <HAL_RCC_OscConfig+0x324>
 8005d5c:	4b58      	ldr	r3, [pc, #352]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d60:	4a57      	ldr	r2, [pc, #348]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d68:	4b55      	ldr	r3, [pc, #340]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6c:	4a54      	ldr	r2, [pc, #336]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	f023 0304 	bic.w	r3, r3, #4
 8005d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7c:	f7fd fee2 	bl	8003b44 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d82:	e00a      	b.n	8005d9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d84:	f7fd fede 	bl	8003b44 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e0cb      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9a:	4b49      	ldr	r3, [pc, #292]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0ee      	beq.n	8005d84 <HAL_RCC_OscConfig+0x334>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da8:	f7fd fecc 	bl	8003b44 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fd fec8 	bl	8003b44 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0b5      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1ee      	bne.n	8005db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d105      	bne.n	8005de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd8:	4b39      	ldr	r3, [pc, #228]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ddc:	4a38      	ldr	r2, [pc, #224]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80a1 	beq.w	8005f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dee:	4b34      	ldr	r3, [pc, #208]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d05c      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d141      	bne.n	8005e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <HAL_RCC_OscConfig+0x478>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fd fe9c 	bl	8003b44 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fd fe98 	bl	8003b44 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e087      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e22:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	019b      	lsls	r3, r3, #6
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	3b01      	subs	r3, #1
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	491b      	ldr	r1, [pc, #108]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <HAL_RCC_OscConfig+0x478>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5e:	f7fd fe71 	bl	8003b44 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e66:	f7fd fe6d 	bl	8003b44 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e05c      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x416>
 8005e84:	e054      	b.n	8005f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e86:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <HAL_RCC_OscConfig+0x478>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fd fe5a 	bl	8003b44 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fd fe56 	bl	8003b44 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e045      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x444>
 8005eb2:	e03d      	b.n	8005f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e038      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <HAL_RCC_OscConfig+0x4ec>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d028      	beq.n	8005f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d121      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d11a      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005efc:	4013      	ands	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d111      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	3b01      	subs	r3, #1
 8005f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d107      	bne.n	8005f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800

08005f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0cc      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f54:	4b68      	ldr	r3, [pc, #416]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d90c      	bls.n	8005f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b65      	ldr	r3, [pc, #404]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	4b63      	ldr	r3, [pc, #396]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d001      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0b8      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d020      	beq.n	8005fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f94:	4b59      	ldr	r3, [pc, #356]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4a58      	ldr	r2, [pc, #352]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fac:	4b53      	ldr	r3, [pc, #332]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4a52      	ldr	r2, [pc, #328]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb8:	4b50      	ldr	r3, [pc, #320]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	494d      	ldr	r1, [pc, #308]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d044      	beq.n	8006060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d107      	bne.n	8005fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fde:	4b47      	ldr	r3, [pc, #284]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d119      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07f      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e06f      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600e:	4b3b      	ldr	r3, [pc, #236]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e067      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601e:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 0203 	bic.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4934      	ldr	r1, [pc, #208]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006030:	f7fd fd88 	bl	8003b44 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fd fd84 	bl	8003b44 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e04f      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	4b2b      	ldr	r3, [pc, #172]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 020c 	and.w	r2, r3, #12
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	429a      	cmp	r2, r3
 800605e:	d1eb      	bne.n	8006038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006060:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d20c      	bcs.n	8006088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606e:	4b22      	ldr	r3, [pc, #136]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006076:	4b20      	ldr	r3, [pc, #128]	@ (80060f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d001      	beq.n	8006088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e032      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006094:	4b19      	ldr	r3, [pc, #100]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4916      	ldr	r1, [pc, #88]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	490e      	ldr	r1, [pc, #56]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060c6:	f000 f821 	bl	800610c <HAL_RCC_GetSysClockFreq>
 80060ca:	4602      	mov	r2, r0
 80060cc:	4b0b      	ldr	r3, [pc, #44]	@ (80060fc <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	490a      	ldr	r1, [pc, #40]	@ (8006100 <HAL_RCC_ClockConfig+0x1c0>)
 80060d8:	5ccb      	ldrb	r3, [r1, r3]
 80060da:	fa22 f303 	lsr.w	r3, r2, r3
 80060de:	4a09      	ldr	r2, [pc, #36]	@ (8006104 <HAL_RCC_ClockConfig+0x1c4>)
 80060e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060e2:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <HAL_RCC_ClockConfig+0x1c8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd fce8 	bl	8003abc <HAL_InitTick>

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40023c00 	.word	0x40023c00
 80060fc:	40023800 	.word	0x40023800
 8006100:	08009f20 	.word	0x08009f20
 8006104:	200001fc 	.word	0x200001fc
 8006108:	20000200 	.word	0x20000200

0800610c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800610c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006110:	b094      	sub	sp, #80	@ 0x50
 8006112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006124:	4b79      	ldr	r3, [pc, #484]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d00d      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x40>
 8006130:	2b08      	cmp	r3, #8
 8006132:	f200 80e1 	bhi.w	80062f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_RCC_GetSysClockFreq+0x34>
 800613a:	2b04      	cmp	r3, #4
 800613c:	d003      	beq.n	8006146 <HAL_RCC_GetSysClockFreq+0x3a>
 800613e:	e0db      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006140:	4b73      	ldr	r3, [pc, #460]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x204>)
 8006142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006144:	e0db      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006146:	4b73      	ldr	r3, [pc, #460]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x208>)
 8006148:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800614a:	e0d8      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800614c:	4b6f      	ldr	r3, [pc, #444]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006154:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006156:	4b6d      	ldr	r3, [pc, #436]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d063      	beq.n	800622a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006162:	4b6a      	ldr	r3, [pc, #424]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	2200      	movs	r2, #0
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800616c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
 800617a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	0159      	lsls	r1, r3, #5
 800618c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006190:	0150      	lsls	r0, r2, #5
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4621      	mov	r1, r4
 8006198:	1a51      	subs	r1, r2, r1
 800619a:	6139      	str	r1, [r7, #16]
 800619c:	4629      	mov	r1, r5
 800619e:	eb63 0301 	sbc.w	r3, r3, r1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b0:	4659      	mov	r1, fp
 80061b2:	018b      	lsls	r3, r1, #6
 80061b4:	4651      	mov	r1, sl
 80061b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ba:	4651      	mov	r1, sl
 80061bc:	018a      	lsls	r2, r1, #6
 80061be:	4651      	mov	r1, sl
 80061c0:	ebb2 0801 	subs.w	r8, r2, r1
 80061c4:	4659      	mov	r1, fp
 80061c6:	eb63 0901 	sbc.w	r9, r3, r1
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061de:	4690      	mov	r8, r2
 80061e0:	4699      	mov	r9, r3
 80061e2:	4623      	mov	r3, r4
 80061e4:	eb18 0303 	adds.w	r3, r8, r3
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	462b      	mov	r3, r5
 80061ec:	eb49 0303 	adc.w	r3, r9, r3
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061fe:	4629      	mov	r1, r5
 8006200:	024b      	lsls	r3, r1, #9
 8006202:	4621      	mov	r1, r4
 8006204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006208:	4621      	mov	r1, r4
 800620a:	024a      	lsls	r2, r1, #9
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006212:	2200      	movs	r2, #0
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800621c:	f7fa f838 	bl	8000290 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4613      	mov	r3, r2
 8006226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006228:	e058      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622a:	4b38      	ldr	r3, [pc, #224]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	099b      	lsrs	r3, r3, #6
 8006230:	2200      	movs	r2, #0
 8006232:	4618      	mov	r0, r3
 8006234:	4611      	mov	r1, r2
 8006236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800623a:	623b      	str	r3, [r7, #32]
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	f04f 0000 	mov.w	r0, #0
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	0159      	lsls	r1, r3, #5
 8006252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006256:	0150      	lsls	r0, r2, #5
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4641      	mov	r1, r8
 800625e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006262:	4649      	mov	r1, r9
 8006264:	eb63 0b01 	sbc.w	fp, r3, r1
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800627c:	ebb2 040a 	subs.w	r4, r2, sl
 8006280:	eb63 050b 	sbc.w	r5, r3, fp
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	00eb      	lsls	r3, r5, #3
 800628e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006292:	00e2      	lsls	r2, r4, #3
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	4643      	mov	r3, r8
 800629a:	18e3      	adds	r3, r4, r3
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	464b      	mov	r3, r9
 80062a0:	eb45 0303 	adc.w	r3, r5, r3
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b2:	4629      	mov	r1, r5
 80062b4:	028b      	lsls	r3, r1, #10
 80062b6:	4621      	mov	r1, r4
 80062b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062bc:	4621      	mov	r1, r4
 80062be:	028a      	lsls	r2, r1, #10
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c6:	2200      	movs	r2, #0
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	61fa      	str	r2, [r7, #28]
 80062cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d0:	f7f9 ffde 	bl	8000290 <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4613      	mov	r3, r2
 80062da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80062dc:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <HAL_RCC_GetSysClockFreq+0x200>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	3301      	adds	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062f6:	e002      	b.n	80062fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <HAL_RCC_GetSysClockFreq+0x204>)
 80062fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006300:	4618      	mov	r0, r3
 8006302:	3750      	adds	r7, #80	@ 0x50
 8006304:	46bd      	mov	sp, r7
 8006306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800
 8006310:	00f42400 	.word	0x00f42400
 8006314:	007a1200 	.word	0x007a1200

08006318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800631c:	4b03      	ldr	r3, [pc, #12]	@ (800632c <HAL_RCC_GetHCLKFreq+0x14>)
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	200001fc 	.word	0x200001fc

08006330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006334:	f7ff fff0 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0a9b      	lsrs	r3, r3, #10
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4903      	ldr	r1, [pc, #12]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40023800 	.word	0x40023800
 8006354:	08009f30 	.word	0x08009f30

08006358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800637c:	2b00      	cmp	r3, #0
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006388:	2b00      	cmp	r3, #0
 800638a:	d075      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800638c:	4b91      	ldr	r3, [pc, #580]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006392:	f7fd fbd7 	bl	8003b44 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800639a:	f7fd fbd3 	bl	8003b44 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e189      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063ac:	4b8a      	ldr	r3, [pc, #552]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	019a      	lsls	r2, r3, #6
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	071b      	lsls	r3, r3, #28
 80063d0:	4981      	ldr	r1, [pc, #516]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01f      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063e4:	4b7c      	ldr	r3, [pc, #496]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ea:	0f1b      	lsrs	r3, r3, #28
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	019a      	lsls	r2, r3, #6
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	061b      	lsls	r3, r3, #24
 80063fe:	431a      	orrs	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	071b      	lsls	r3, r3, #28
 8006404:	4974      	ldr	r1, [pc, #464]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800640c:	4b72      	ldr	r3, [pc, #456]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006412:	f023 021f 	bic.w	r2, r3, #31
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	3b01      	subs	r3, #1
 800641c:	496e      	ldr	r1, [pc, #440]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	019a      	lsls	r2, r3, #6
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	071b      	lsls	r3, r3, #28
 8006444:	4964      	ldr	r1, [pc, #400]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800644c:	4b61      	ldr	r3, [pc, #388]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006452:	f7fd fb77 	bl	8003b44 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006458:	e008      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800645a:	f7fd fb73 	bl	8003b44 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e129      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800646c:	4b5a      	ldr	r3, [pc, #360]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800648c:	2b00      	cmp	r3, #0
 800648e:	d079      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006490:	4b52      	ldr	r3, [pc, #328]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006496:	f7fd fb55 	bl	8003b44 <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800649e:	f7fd fb51 	bl	8003b44 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e107      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064b0:	4b49      	ldr	r3, [pc, #292]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064bc:	d0ef      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064ca:	4b43      	ldr	r3, [pc, #268]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	0f1b      	lsrs	r3, r3, #28
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	019a      	lsls	r2, r3, #6
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	061b      	lsls	r3, r3, #24
 80064e4:	431a      	orrs	r2, r3
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	071b      	lsls	r3, r3, #28
 80064ea:	493b      	ldr	r1, [pc, #236]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064f2:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	3b01      	subs	r3, #1
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	4934      	ldr	r1, [pc, #208]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01e      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006518:	4b2f      	ldr	r3, [pc, #188]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	0e1b      	lsrs	r3, r3, #24
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	019a      	lsls	r2, r3, #6
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	061b      	lsls	r3, r3, #24
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	071b      	lsls	r3, r3, #28
 8006538:	4927      	ldr	r1, [pc, #156]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006540:	4b25      	ldr	r3, [pc, #148]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006546:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	4922      	ldr	r1, [pc, #136]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006556:	4b21      	ldr	r3, [pc, #132]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800655c:	f7fd faf2 	bl	8003b44 <HAL_GetTick>
 8006560:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006564:	f7fd faee 	bl	8003b44 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0a4      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006576:	4b18      	ldr	r3, [pc, #96]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800657e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006582:	d1ef      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 808b 	beq.w	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	4a0f      	ldr	r2, [pc, #60]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065ae:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0b      	ldr	r2, [pc, #44]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80065b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065ba:	f7fd fac3 	bl	8003b44 <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065c0:	e010      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c2:	f7fd fabf 	bl	8003b44 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d909      	bls.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e075      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80065d4:	42470068 	.word	0x42470068
 80065d8:	40023800 	.word	0x40023800
 80065dc:	42470070 	.word	0x42470070
 80065e0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065e4:	4b38      	ldr	r3, [pc, #224]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0e8      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065f0:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d028      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800660e:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006616:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006618:	4b2d      	ldr	r3, [pc, #180]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800661e:	4b2c      	ldr	r3, [pc, #176]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006624:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800662a:	4b28      	ldr	r3, [pc, #160]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d114      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006636:	f7fd fa85 	bl	8003b44 <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663c:	e00a      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fd fa81 	bl	8003b44 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e035      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	4b1d      	ldr	r3, [pc, #116]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800666c:	d10d      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800667e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006682:	4912      	ldr	r1, [pc, #72]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006684:	4313      	orrs	r3, r2
 8006686:	608b      	str	r3, [r1, #8]
 8006688:	e005      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800668a:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a0f      	ldr	r2, [pc, #60]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006690:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	4b0d      	ldr	r3, [pc, #52]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006698:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a2:	490a      	ldr	r1, [pc, #40]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80066ba:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80066bc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40007000 	.word	0x40007000
 80066cc:	40023800 	.word	0x40023800
 80066d0:	42470e40 	.word	0x42470e40
 80066d4:	424711e0 	.word	0x424711e0

080066d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e01c      	b.n	8006724 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	795b      	ldrb	r3, [r3, #5]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fc fcd0 	bl	80030a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0204 	orr.w	r2, r2, #4
 8006714:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	791b      	ldrb	r3, [r3, #4]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006742:	2302      	movs	r3, #2
 8006744:	e044      	b.n	80067d0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	795b      	ldrb	r3, [r3, #5]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d133      	bne.n	80067be <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800675c:	f7fd f9f2 	bl	8003b44 <HAL_GetTick>
 8006760:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006762:	e018      	b.n	8006796 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006764:	f7fd f9ee 	bl	8003b44 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d911      	bls.n	8006796 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d00a      	beq.n	8006796 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e01c      	b.n	80067d0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d1df      	bne.n	8006764 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	715a      	strb	r2, [r3, #5]
 80067bc:	e004      	b.n	80067c8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	711a      	strb	r2, [r3, #4]

  return status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e07b      	b.n	80068e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067fa:	d009      	beq.n	8006810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
 8006802:	e005      	b.n	8006810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fc fc5a 	bl	80030e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006894:	ea42 0103 	orr.w	r1, r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0104 	and.w	r1, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	f003 0210 	and.w	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e01a      	b.n	8006932 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006912:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fc fc2d 	bl	8003174 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b088      	sub	sp, #32
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800694a:	f7fd f8fb 	bl	8003b44 <HAL_GetTick>
 800694e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	d001      	beq.n	8006964 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
 8006962:	e12a      	b.n	8006bba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_SPI_Transmit+0x36>
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e122      	b.n	8006bba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_SPI_Transmit+0x48>
 800697e:	2302      	movs	r3, #2
 8006980:	e11b      	b.n	8006bba <HAL_SPI_Transmit+0x280>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2203      	movs	r2, #3
 800698e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069d0:	d10f      	bne.n	80069f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fc:	2b40      	cmp	r3, #64	@ 0x40
 80069fe:	d007      	beq.n	8006a10 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a18:	d152      	bne.n	8006ac0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Transmit+0xee>
 8006a22:	8b7b      	ldrh	r3, [r7, #26]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d145      	bne.n	8006ab4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	1c9a      	adds	r2, r3, #2
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a4c:	e032      	b.n	8006ab4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d112      	bne.n	8006a82 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a60:	881a      	ldrh	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	1c9a      	adds	r2, r3, #2
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a80:	e018      	b.n	8006ab4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a82:	f7fd f85f 	bl	8003b44 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d803      	bhi.n	8006a9a <HAL_SPI_Transmit+0x160>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_Transmit+0x166>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e082      	b.n	8006bba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1c7      	bne.n	8006a4e <HAL_SPI_Transmit+0x114>
 8006abe:	e053      	b.n	8006b68 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_SPI_Transmit+0x194>
 8006ac8:	8b7b      	ldrh	r3, [r7, #26]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d147      	bne.n	8006b5e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006af4:	e033      	b.n	8006b5e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d113      	bne.n	8006b2c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b2a:	e018      	b.n	8006b5e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b2c:	f7fd f80a 	bl	8003b44 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d803      	bhi.n	8006b44 <HAL_SPI_Transmit+0x20a>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d102      	bne.n	8006b4a <HAL_SPI_Transmit+0x210>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e02d      	b.n	8006bba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1c6      	bne.n	8006af6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f8bf 	bl	8006cf0 <SPI_EndRxTxTransaction>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bd0:	b2db      	uxtb	r3, r3
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bf0:	f7fc ffa8 	bl	8003b44 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c00:	f7fc ffa0 	bl	8003b44 <HAL_GetTick>
 8006c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c06:	4b39      	ldr	r3, [pc, #228]	@ (8006cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	015b      	lsls	r3, r3, #5
 8006c0c:	0d1b      	lsrs	r3, r3, #20
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c16:	e054      	b.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d050      	beq.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c20:	f7fc ff90 	bl	8003b44 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d902      	bls.n	8006c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d13d      	bne.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c4e:	d111      	bne.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c58:	d004      	beq.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c62:	d107      	bne.n	8006c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c7c:	d10f      	bne.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e017      	b.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	2300      	movne	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d19b      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200001fc 	.word	0x200001fc

08006cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2201      	movs	r2, #1
 8006d04:	2102      	movs	r1, #2
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff ff6a 	bl	8006be0 <SPI_WaitFlagStateUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d16:	f043 0220 	orr.w	r2, r3, #32
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e032      	b.n	8006d88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d22:	4b1b      	ldr	r3, [pc, #108]	@ (8006d90 <SPI_EndRxTxTransaction+0xa0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1b      	ldr	r2, [pc, #108]	@ (8006d94 <SPI_EndRxTxTransaction+0xa4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	0d5b      	lsrs	r3, r3, #21
 8006d2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d40:	d112      	bne.n	8006d68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2180      	movs	r1, #128	@ 0x80
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff ff47 	bl	8006be0 <SPI_WaitFlagStateUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d016      	beq.n	8006d86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e00f      	b.n	8006d88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7e:	2b80      	cmp	r3, #128	@ 0x80
 8006d80:	d0f2      	beq.n	8006d68 <SPI_EndRxTxTransaction+0x78>
 8006d82:	e000      	b.n	8006d86 <SPI_EndRxTxTransaction+0x96>
        break;
 8006d84:	bf00      	nop
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	200001fc 	.word	0x200001fc
 8006d94:	165e9f81 	.word	0x165e9f81

08006d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e041      	b.n	8006e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fc f9f6 	bl	80031b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f000 fae6 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d001      	beq.n	8006e50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e046      	b.n	8006ede <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a23      	ldr	r2, [pc, #140]	@ (8006eec <HAL_TIM_Base_Start+0xb4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d022      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6a:	d01d      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a1f      	ldr	r2, [pc, #124]	@ (8006ef0 <HAL_TIM_Base_Start+0xb8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d018      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef4 <HAL_TIM_Base_Start+0xbc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <HAL_TIM_Base_Start+0xc0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00e      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006efc <HAL_TIM_Base_Start+0xc4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <HAL_TIM_Base_Start+0xc8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIM_Base_Start+0x70>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <HAL_TIM_Base_Start+0xcc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d111      	bne.n	8006ecc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d010      	beq.n	8006edc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	e007      	b.n	8006edc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40010000 	.word	0x40010000
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	40000c00 	.word	0x40000c00
 8006efc:	40010400 	.word	0x40010400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40001800 	.word	0x40001800

08006f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d001      	beq.n	8006f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e04e      	b.n	8006fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	@ (8006fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4a:	d01d      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d111      	bne.n	8006fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b06      	cmp	r3, #6
 8006f98:	d010      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006faa:	e007      	b.n	8006fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40001800 	.word	0x40001800

08006fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0202 	mvn.w	r2, #2
 800701c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f999 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f98b 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f99c 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d020      	beq.n	8007098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0204 	mvn.w	r2, #4
 8007068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f973 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f965 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f976 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d020      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0208 	mvn.w	r2, #8
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f94d 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f93f 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f950 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d020      	beq.n	8007130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01b      	beq.n	8007130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0210 	mvn.w	r2, #16
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2208      	movs	r2, #8
 8007106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f927 	bl	800736a <HAL_TIM_IC_CaptureCallback>
 800711c:	e005      	b.n	800712a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f919 	bl	8007356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f92a 	bl	800737e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0201 	mvn.w	r2, #1
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fb fc28 	bl	80029a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fae4 	bl	8007740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8fb 	bl	8007392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0220 	mvn.w	r2, #32
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fab6 	bl	800772c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_TIM_ConfigClockSource+0x1c>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e0b4      	b.n	800734e <HAL_TIM_ConfigClockSource+0x186>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800720a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721c:	d03e      	beq.n	800729c <HAL_TIM_ConfigClockSource+0xd4>
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007222:	f200 8087 	bhi.w	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722a:	f000 8086 	beq.w	800733a <HAL_TIM_ConfigClockSource+0x172>
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007232:	d87f      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b70      	cmp	r3, #112	@ 0x70
 8007236:	d01a      	beq.n	800726e <HAL_TIM_ConfigClockSource+0xa6>
 8007238:	2b70      	cmp	r3, #112	@ 0x70
 800723a:	d87b      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b60      	cmp	r3, #96	@ 0x60
 800723e:	d050      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007240:	2b60      	cmp	r3, #96	@ 0x60
 8007242:	d877      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b50      	cmp	r3, #80	@ 0x50
 8007246:	d03c      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007248:	2b50      	cmp	r3, #80	@ 0x50
 800724a:	d873      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 800724c:	2b40      	cmp	r3, #64	@ 0x40
 800724e:	d058      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x13a>
 8007250:	2b40      	cmp	r3, #64	@ 0x40
 8007252:	d86f      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b30      	cmp	r3, #48	@ 0x30
 8007256:	d064      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	2b30      	cmp	r3, #48	@ 0x30
 800725a:	d86b      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 800725c:	2b20      	cmp	r3, #32
 800725e:	d060      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15a>
 8007260:	2b20      	cmp	r3, #32
 8007262:	d867      	bhi.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d05c      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15a>
 8007268:	2b10      	cmp	r3, #16
 800726a:	d05a      	beq.n	8007322 <HAL_TIM_ConfigClockSource+0x15a>
 800726c:	e062      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800727e:	f000 f9b9 	bl	80075f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
      break;
 800729a:	e04f      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072ac:	f000 f9a2 	bl	80075f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072be:	609a      	str	r2, [r3, #8]
      break;
 80072c0:	e03c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ce:	461a      	mov	r2, r3
 80072d0:	f000 f916 	bl	8007500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2150      	movs	r1, #80	@ 0x50
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f96f 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 80072e0:	e02c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ee:	461a      	mov	r2, r3
 80072f0:	f000 f935 	bl	800755e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2160      	movs	r1, #96	@ 0x60
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f95f 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8007300:	e01c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800730e:	461a      	mov	r2, r3
 8007310:	f000 f8f6 	bl	8007500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2140      	movs	r1, #64	@ 0x40
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f94f 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8007320:	e00c      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f000 f946 	bl	80075be <TIM_ITRx_SetConfig>
      break;
 8007332:	e003      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e000      	b.n	800733c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800733a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a46      	ldr	r2, [pc, #280]	@ (80074d4 <TIM_Base_SetConfig+0x12c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a43      	ldr	r2, [pc, #268]	@ (80074d8 <TIM_Base_SetConfig+0x130>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a42      	ldr	r2, [pc, #264]	@ (80074dc <TIM_Base_SetConfig+0x134>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a41      	ldr	r2, [pc, #260]	@ (80074e0 <TIM_Base_SetConfig+0x138>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a40      	ldr	r2, [pc, #256]	@ (80074e4 <TIM_Base_SetConfig+0x13c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a35      	ldr	r2, [pc, #212]	@ (80074d4 <TIM_Base_SetConfig+0x12c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d02b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007408:	d027      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a32      	ldr	r2, [pc, #200]	@ (80074d8 <TIM_Base_SetConfig+0x130>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d023      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a31      	ldr	r2, [pc, #196]	@ (80074dc <TIM_Base_SetConfig+0x134>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a30      	ldr	r2, [pc, #192]	@ (80074e0 <TIM_Base_SetConfig+0x138>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2f      	ldr	r2, [pc, #188]	@ (80074e4 <TIM_Base_SetConfig+0x13c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d017      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2e      	ldr	r2, [pc, #184]	@ (80074e8 <TIM_Base_SetConfig+0x140>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2d      	ldr	r2, [pc, #180]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a2c      	ldr	r2, [pc, #176]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2b      	ldr	r2, [pc, #172]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2a      	ldr	r2, [pc, #168]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a29      	ldr	r2, [pc, #164]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d108      	bne.n	800746c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a10      	ldr	r2, [pc, #64]	@ (80074d4 <TIM_Base_SetConfig+0x12c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a12      	ldr	r2, [pc, #72]	@ (80074e4 <TIM_Base_SetConfig+0x13c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d103      	bne.n	80074a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d105      	bne.n	80074c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	611a      	str	r2, [r3, #16]
  }
}
 80074c6:	bf00      	nop
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00
 80074e4:	40010400 	.word	0x40010400
 80074e8:	40014000 	.word	0x40014000
 80074ec:	40014400 	.word	0x40014400
 80074f0:	40014800 	.word	0x40014800
 80074f4:	40001800 	.word	0x40001800
 80074f8:	40001c00 	.word	0x40001c00
 80074fc:	40002000 	.word	0x40002000

08007500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800752a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f023 030a 	bic.w	r3, r3, #10
 800753c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800755e:	b480      	push	{r7}
 8007560:	b087      	sub	sp, #28
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	f023 0210 	bic.w	r2, r3, #16
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800759a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	f043 0307 	orr.w	r3, r3, #7
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	609a      	str	r2, [r3, #8]
}
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800760e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	021a      	lsls	r2, r3, #8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	431a      	orrs	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007648:	2302      	movs	r3, #2
 800764a:	e05a      	b.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a21      	ldr	r2, [pc, #132]	@ (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d022      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007698:	d01d      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1d      	ldr	r2, [pc, #116]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d018      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1a      	ldr	r2, [pc, #104]	@ (800771c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00e      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a18      	ldr	r2, [pc, #96]	@ (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d009      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a17      	ldr	r2, [pc, #92]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d004      	beq.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a15      	ldr	r2, [pc, #84]	@ (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d10c      	bne.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40010000 	.word	0x40010000
 8007714:	40000400 	.word	0x40000400
 8007718:	40000800 	.word	0x40000800
 800771c:	40000c00 	.word	0x40000c00
 8007720:	40010400 	.word	0x40010400
 8007724:	40014000 	.word	0x40014000
 8007728:	40001800 	.word	0x40001800

0800772c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <findslot>:
 8007754:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <findslot+0x2c>)
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	b118      	cbz	r0, 8007766 <findslot+0x12>
 800775e:	6a03      	ldr	r3, [r0, #32]
 8007760:	b90b      	cbnz	r3, 8007766 <findslot+0x12>
 8007762:	f000 f9c3 	bl	8007aec <__sinit>
 8007766:	2c13      	cmp	r4, #19
 8007768:	d807      	bhi.n	800777a <findslot+0x26>
 800776a:	4806      	ldr	r0, [pc, #24]	@ (8007784 <findslot+0x30>)
 800776c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007770:	3201      	adds	r2, #1
 8007772:	d002      	beq.n	800777a <findslot+0x26>
 8007774:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007778:	bd10      	pop	{r4, pc}
 800777a:	2000      	movs	r0, #0
 800777c:	e7fc      	b.n	8007778 <findslot+0x24>
 800777e:	bf00      	nop
 8007780:	20000214 	.word	0x20000214
 8007784:	20026090 	.word	0x20026090

08007788 <error>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4604      	mov	r4, r0
 800778c:	f000 fbae 	bl	8007eec <__errno>
 8007790:	2613      	movs	r6, #19
 8007792:	4605      	mov	r5, r0
 8007794:	2700      	movs	r7, #0
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	beab      	bkpt	0x00ab
 800779c:	4606      	mov	r6, r0
 800779e:	602e      	str	r6, [r5, #0]
 80077a0:	4620      	mov	r0, r4
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077a4 <checkerror>:
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d101      	bne.n	80077ac <checkerror+0x8>
 80077a8:	f7ff bfee 	b.w	8007788 <error>
 80077ac:	4770      	bx	lr

080077ae <_swiread>:
 80077ae:	b530      	push	{r4, r5, lr}
 80077b0:	b085      	sub	sp, #20
 80077b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80077b6:	9203      	str	r2, [sp, #12]
 80077b8:	2406      	movs	r4, #6
 80077ba:	ad01      	add	r5, sp, #4
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	beab      	bkpt	0x00ab
 80077c2:	4604      	mov	r4, r0
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff ffed 	bl	80077a4 <checkerror>
 80077ca:	b005      	add	sp, #20
 80077cc:	bd30      	pop	{r4, r5, pc}

080077ce <_read>:
 80077ce:	b570      	push	{r4, r5, r6, lr}
 80077d0:	460e      	mov	r6, r1
 80077d2:	4614      	mov	r4, r2
 80077d4:	f7ff ffbe 	bl	8007754 <findslot>
 80077d8:	4605      	mov	r5, r0
 80077da:	b930      	cbnz	r0, 80077ea <_read+0x1c>
 80077dc:	f000 fb86 	bl	8007eec <__errno>
 80077e0:	2309      	movs	r3, #9
 80077e2:	6003      	str	r3, [r0, #0]
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	6800      	ldr	r0, [r0, #0]
 80077ec:	4622      	mov	r2, r4
 80077ee:	4631      	mov	r1, r6
 80077f0:	f7ff ffdd 	bl	80077ae <_swiread>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d0f5      	beq.n	80077e4 <_read+0x16>
 80077f8:	686b      	ldr	r3, [r5, #4]
 80077fa:	1a20      	subs	r0, r4, r0
 80077fc:	4403      	add	r3, r0
 80077fe:	606b      	str	r3, [r5, #4]
 8007800:	e7f2      	b.n	80077e8 <_read+0x1a>

08007802 <_swilseek>:
 8007802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007804:	460c      	mov	r4, r1
 8007806:	4616      	mov	r6, r2
 8007808:	f7ff ffa4 	bl	8007754 <findslot>
 800780c:	4605      	mov	r5, r0
 800780e:	b940      	cbnz	r0, 8007822 <_swilseek+0x20>
 8007810:	f000 fb6c 	bl	8007eec <__errno>
 8007814:	2309      	movs	r3, #9
 8007816:	6003      	str	r3, [r0, #0]
 8007818:	f04f 34ff 	mov.w	r4, #4294967295
 800781c:	4620      	mov	r0, r4
 800781e:	b003      	add	sp, #12
 8007820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007822:	2e02      	cmp	r6, #2
 8007824:	d903      	bls.n	800782e <_swilseek+0x2c>
 8007826:	f000 fb61 	bl	8007eec <__errno>
 800782a:	2316      	movs	r3, #22
 800782c:	e7f3      	b.n	8007816 <_swilseek+0x14>
 800782e:	2e01      	cmp	r6, #1
 8007830:	d112      	bne.n	8007858 <_swilseek+0x56>
 8007832:	6843      	ldr	r3, [r0, #4]
 8007834:	18e4      	adds	r4, r4, r3
 8007836:	d4f6      	bmi.n	8007826 <_swilseek+0x24>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	260a      	movs	r6, #10
 800783c:	e9cd 3400 	strd	r3, r4, [sp]
 8007840:	466f      	mov	r7, sp
 8007842:	4630      	mov	r0, r6
 8007844:	4639      	mov	r1, r7
 8007846:	beab      	bkpt	0x00ab
 8007848:	4606      	mov	r6, r0
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff ffaa 	bl	80077a4 <checkerror>
 8007850:	2800      	cmp	r0, #0
 8007852:	dbe1      	blt.n	8007818 <_swilseek+0x16>
 8007854:	606c      	str	r4, [r5, #4]
 8007856:	e7e1      	b.n	800781c <_swilseek+0x1a>
 8007858:	2e02      	cmp	r6, #2
 800785a:	6803      	ldr	r3, [r0, #0]
 800785c:	d1ec      	bne.n	8007838 <_swilseek+0x36>
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	260c      	movs	r6, #12
 8007862:	466f      	mov	r7, sp
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	beab      	bkpt	0x00ab
 800786a:	4606      	mov	r6, r0
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff ff99 	bl	80077a4 <checkerror>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d0d0      	beq.n	8007818 <_swilseek+0x16>
 8007876:	4404      	add	r4, r0
 8007878:	e7de      	b.n	8007838 <_swilseek+0x36>

0800787a <_lseek>:
 800787a:	f7ff bfc2 	b.w	8007802 <_swilseek>

0800787e <_swiwrite>:
 800787e:	b530      	push	{r4, r5, lr}
 8007880:	b085      	sub	sp, #20
 8007882:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007886:	9203      	str	r2, [sp, #12]
 8007888:	2405      	movs	r4, #5
 800788a:	ad01      	add	r5, sp, #4
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	beab      	bkpt	0x00ab
 8007892:	4604      	mov	r4, r0
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff ff85 	bl	80077a4 <checkerror>
 800789a:	b005      	add	sp, #20
 800789c:	bd30      	pop	{r4, r5, pc}

0800789e <_write>:
 800789e:	b570      	push	{r4, r5, r6, lr}
 80078a0:	460e      	mov	r6, r1
 80078a2:	4615      	mov	r5, r2
 80078a4:	f7ff ff56 	bl	8007754 <findslot>
 80078a8:	4604      	mov	r4, r0
 80078aa:	b930      	cbnz	r0, 80078ba <_write+0x1c>
 80078ac:	f000 fb1e 	bl	8007eec <__errno>
 80078b0:	2309      	movs	r3, #9
 80078b2:	6003      	str	r3, [r0, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	462a      	mov	r2, r5
 80078be:	4631      	mov	r1, r6
 80078c0:	f7ff ffdd 	bl	800787e <_swiwrite>
 80078c4:	1e03      	subs	r3, r0, #0
 80078c6:	dbf5      	blt.n	80078b4 <_write+0x16>
 80078c8:	6862      	ldr	r2, [r4, #4]
 80078ca:	1ae8      	subs	r0, r5, r3
 80078cc:	4402      	add	r2, r0
 80078ce:	42ab      	cmp	r3, r5
 80078d0:	6062      	str	r2, [r4, #4]
 80078d2:	d1f1      	bne.n	80078b8 <_write+0x1a>
 80078d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078d8:	2000      	movs	r0, #0
 80078da:	f7ff bf55 	b.w	8007788 <error>

080078de <_swiclose>:
 80078de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078e0:	2402      	movs	r4, #2
 80078e2:	9001      	str	r0, [sp, #4]
 80078e4:	ad01      	add	r5, sp, #4
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	beab      	bkpt	0x00ab
 80078ec:	4604      	mov	r4, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff ff58 	bl	80077a4 <checkerror>
 80078f4:	b003      	add	sp, #12
 80078f6:	bd30      	pop	{r4, r5, pc}

080078f8 <_close>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4605      	mov	r5, r0
 80078fc:	f7ff ff2a 	bl	8007754 <findslot>
 8007900:	4604      	mov	r4, r0
 8007902:	b930      	cbnz	r0, 8007912 <_close+0x1a>
 8007904:	f000 faf2 	bl	8007eec <__errno>
 8007908:	2309      	movs	r3, #9
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	bd38      	pop	{r3, r4, r5, pc}
 8007912:	3d01      	subs	r5, #1
 8007914:	2d01      	cmp	r5, #1
 8007916:	d809      	bhi.n	800792c <_close+0x34>
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <_close+0x40>)
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d104      	bne.n	800792c <_close+0x34>
 8007922:	f04f 33ff 	mov.w	r3, #4294967295
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	2000      	movs	r0, #0
 800792a:	e7f1      	b.n	8007910 <_close+0x18>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	f7ff ffd6 	bl	80078de <_swiclose>
 8007932:	2800      	cmp	r0, #0
 8007934:	d0f5      	beq.n	8007922 <_close+0x2a>
 8007936:	e7eb      	b.n	8007910 <_close+0x18>
 8007938:	20026090 	.word	0x20026090

0800793c <_swistat>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	460c      	mov	r4, r1
 8007940:	f7ff ff08 	bl	8007754 <findslot>
 8007944:	4605      	mov	r5, r0
 8007946:	b930      	cbnz	r0, 8007956 <_swistat+0x1a>
 8007948:	f000 fad0 	bl	8007eec <__errno>
 800794c:	2309      	movs	r3, #9
 800794e:	6003      	str	r3, [r0, #0]
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	6863      	ldr	r3, [r4, #4]
 8007958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800795c:	6063      	str	r3, [r4, #4]
 800795e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007962:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007964:	260c      	movs	r6, #12
 8007966:	4630      	mov	r0, r6
 8007968:	4629      	mov	r1, r5
 800796a:	beab      	bkpt	0x00ab
 800796c:	4605      	mov	r5, r0
 800796e:	4628      	mov	r0, r5
 8007970:	f7ff ff18 	bl	80077a4 <checkerror>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d0eb      	beq.n	8007950 <_swistat+0x14>
 8007978:	6120      	str	r0, [r4, #16]
 800797a:	2000      	movs	r0, #0
 800797c:	e7ea      	b.n	8007954 <_swistat+0x18>

0800797e <_fstat>:
 800797e:	460b      	mov	r3, r1
 8007980:	b510      	push	{r4, lr}
 8007982:	2100      	movs	r1, #0
 8007984:	4604      	mov	r4, r0
 8007986:	2258      	movs	r2, #88	@ 0x58
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fa61 	bl	8007e50 <memset>
 800798e:	4601      	mov	r1, r0
 8007990:	4620      	mov	r0, r4
 8007992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007996:	f7ff bfd1 	b.w	800793c <_swistat>

0800799a <_isatty>:
 800799a:	b570      	push	{r4, r5, r6, lr}
 800799c:	f7ff feda 	bl	8007754 <findslot>
 80079a0:	2409      	movs	r4, #9
 80079a2:	4605      	mov	r5, r0
 80079a4:	b920      	cbnz	r0, 80079b0 <_isatty+0x16>
 80079a6:	f000 faa1 	bl	8007eec <__errno>
 80079aa:	6004      	str	r4, [r0, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	beab      	bkpt	0x00ab
 80079b6:	4604      	mov	r4, r0
 80079b8:	2c01      	cmp	r4, #1
 80079ba:	4620      	mov	r0, r4
 80079bc:	d0f7      	beq.n	80079ae <_isatty+0x14>
 80079be:	f000 fa95 	bl	8007eec <__errno>
 80079c2:	2513      	movs	r5, #19
 80079c4:	4604      	mov	r4, r0
 80079c6:	2600      	movs	r6, #0
 80079c8:	4628      	mov	r0, r5
 80079ca:	4631      	mov	r1, r6
 80079cc:	beab      	bkpt	0x00ab
 80079ce:	4605      	mov	r5, r0
 80079d0:	6025      	str	r5, [r4, #0]
 80079d2:	e7eb      	b.n	80079ac <_isatty+0x12>

080079d4 <std>:
 80079d4:	2300      	movs	r3, #0
 80079d6:	b510      	push	{r4, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	e9c0 3300 	strd	r3, r3, [r0]
 80079de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079e2:	6083      	str	r3, [r0, #8]
 80079e4:	8181      	strh	r1, [r0, #12]
 80079e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80079e8:	81c2      	strh	r2, [r0, #14]
 80079ea:	6183      	str	r3, [r0, #24]
 80079ec:	4619      	mov	r1, r3
 80079ee:	2208      	movs	r2, #8
 80079f0:	305c      	adds	r0, #92	@ 0x5c
 80079f2:	f000 fa2d 	bl	8007e50 <memset>
 80079f6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a2c <std+0x58>)
 80079f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <std+0x5c>)
 80079fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <std+0x60>)
 8007a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a02:	4b0d      	ldr	r3, [pc, #52]	@ (8007a38 <std+0x64>)
 8007a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a06:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <std+0x68>)
 8007a08:	6224      	str	r4, [r4, #32]
 8007a0a:	429c      	cmp	r4, r3
 8007a0c:	d006      	beq.n	8007a1c <std+0x48>
 8007a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a12:	4294      	cmp	r4, r2
 8007a14:	d002      	beq.n	8007a1c <std+0x48>
 8007a16:	33d0      	adds	r3, #208	@ 0xd0
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d105      	bne.n	8007a28 <std+0x54>
 8007a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a24:	f000 ba8c 	b.w	8007f40 <__retarget_lock_init_recursive>
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08007ca1 	.word	0x08007ca1
 8007a30:	08007cc3 	.word	0x08007cc3
 8007a34:	08007cfb 	.word	0x08007cfb
 8007a38:	08007d1f 	.word	0x08007d1f
 8007a3c:	20026130 	.word	0x20026130

08007a40 <stdio_exit_handler>:
 8007a40:	4a02      	ldr	r2, [pc, #8]	@ (8007a4c <stdio_exit_handler+0xc>)
 8007a42:	4903      	ldr	r1, [pc, #12]	@ (8007a50 <stdio_exit_handler+0x10>)
 8007a44:	4803      	ldr	r0, [pc, #12]	@ (8007a54 <stdio_exit_handler+0x14>)
 8007a46:	f000 b869 	b.w	8007b1c <_fwalk_sglue>
 8007a4a:	bf00      	nop
 8007a4c:	20000208 	.word	0x20000208
 8007a50:	08008aad 	.word	0x08008aad
 8007a54:	20000218 	.word	0x20000218

08007a58 <cleanup_stdio>:
 8007a58:	6841      	ldr	r1, [r0, #4]
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a8c <cleanup_stdio+0x34>)
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	4604      	mov	r4, r0
 8007a62:	d001      	beq.n	8007a68 <cleanup_stdio+0x10>
 8007a64:	f001 f822 	bl	8008aac <_fflush_r>
 8007a68:	68a1      	ldr	r1, [r4, #8]
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <cleanup_stdio+0x38>)
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <cleanup_stdio+0x1e>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 f81b 	bl	8008aac <_fflush_r>
 8007a76:	68e1      	ldr	r1, [r4, #12]
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <cleanup_stdio+0x3c>)
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	d004      	beq.n	8007a88 <cleanup_stdio+0x30>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a84:	f001 b812 	b.w	8008aac <_fflush_r>
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20026130 	.word	0x20026130
 8007a90:	20026198 	.word	0x20026198
 8007a94:	20026200 	.word	0x20026200

08007a98 <global_stdio_init.part.0>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <global_stdio_init.part.0+0x30>)
 8007a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8007acc <global_stdio_init.part.0+0x34>)
 8007a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad0 <global_stdio_init.part.0+0x38>)
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	f7ff ff94 	bl	80079d4 <std>
 8007aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2109      	movs	r1, #9
 8007ab4:	f7ff ff8e 	bl	80079d4 <std>
 8007ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007abc:	2202      	movs	r2, #2
 8007abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac2:	2112      	movs	r1, #18
 8007ac4:	f7ff bf86 	b.w	80079d4 <std>
 8007ac8:	20026268 	.word	0x20026268
 8007acc:	20026130 	.word	0x20026130
 8007ad0:	08007a41 	.word	0x08007a41

08007ad4 <__sfp_lock_acquire>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	@ (8007adc <__sfp_lock_acquire+0x8>)
 8007ad6:	f000 ba34 	b.w	8007f42 <__retarget_lock_acquire_recursive>
 8007ada:	bf00      	nop
 8007adc:	20026271 	.word	0x20026271

08007ae0 <__sfp_lock_release>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	@ (8007ae8 <__sfp_lock_release+0x8>)
 8007ae2:	f000 ba2f 	b.w	8007f44 <__retarget_lock_release_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	20026271 	.word	0x20026271

08007aec <__sinit>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4604      	mov	r4, r0
 8007af0:	f7ff fff0 	bl	8007ad4 <__sfp_lock_acquire>
 8007af4:	6a23      	ldr	r3, [r4, #32]
 8007af6:	b11b      	cbz	r3, 8007b00 <__sinit+0x14>
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f7ff bff0 	b.w	8007ae0 <__sfp_lock_release>
 8007b00:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__sinit+0x28>)
 8007b02:	6223      	str	r3, [r4, #32]
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <__sinit+0x2c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f5      	bne.n	8007af8 <__sinit+0xc>
 8007b0c:	f7ff ffc4 	bl	8007a98 <global_stdio_init.part.0>
 8007b10:	e7f2      	b.n	8007af8 <__sinit+0xc>
 8007b12:	bf00      	nop
 8007b14:	08007a59 	.word	0x08007a59
 8007b18:	20026268 	.word	0x20026268

08007b1c <_fwalk_sglue>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4607      	mov	r7, r0
 8007b22:	4688      	mov	r8, r1
 8007b24:	4614      	mov	r4, r2
 8007b26:	2600      	movs	r6, #0
 8007b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007b30:	d505      	bpl.n	8007b3e <_fwalk_sglue+0x22>
 8007b32:	6824      	ldr	r4, [r4, #0]
 8007b34:	2c00      	cmp	r4, #0
 8007b36:	d1f7      	bne.n	8007b28 <_fwalk_sglue+0xc>
 8007b38:	4630      	mov	r0, r6
 8007b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	89ab      	ldrh	r3, [r5, #12]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d907      	bls.n	8007b54 <_fwalk_sglue+0x38>
 8007b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	d003      	beq.n	8007b54 <_fwalk_sglue+0x38>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	4306      	orrs	r6, r0
 8007b54:	3568      	adds	r5, #104	@ 0x68
 8007b56:	e7e9      	b.n	8007b2c <_fwalk_sglue+0x10>

08007b58 <iprintf>:
 8007b58:	b40f      	push	{r0, r1, r2, r3}
 8007b5a:	b507      	push	{r0, r1, r2, lr}
 8007b5c:	4906      	ldr	r1, [pc, #24]	@ (8007b78 <iprintf+0x20>)
 8007b5e:	ab04      	add	r3, sp, #16
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b66:	6881      	ldr	r1, [r0, #8]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	f000 fc75 	bl	8008458 <_vfiprintf_r>
 8007b6e:	b003      	add	sp, #12
 8007b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b74:	b004      	add	sp, #16
 8007b76:	4770      	bx	lr
 8007b78:	20000214 	.word	0x20000214

08007b7c <_puts_r>:
 8007b7c:	6a03      	ldr	r3, [r0, #32]
 8007b7e:	b570      	push	{r4, r5, r6, lr}
 8007b80:	6884      	ldr	r4, [r0, #8]
 8007b82:	4605      	mov	r5, r0
 8007b84:	460e      	mov	r6, r1
 8007b86:	b90b      	cbnz	r3, 8007b8c <_puts_r+0x10>
 8007b88:	f7ff ffb0 	bl	8007aec <__sinit>
 8007b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8e:	07db      	lsls	r3, r3, #31
 8007b90:	d405      	bmi.n	8007b9e <_puts_r+0x22>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	0598      	lsls	r0, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_puts_r+0x22>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f000 f9d2 	bl	8007f42 <__retarget_lock_acquire_recursive>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	0719      	lsls	r1, r3, #28
 8007ba2:	d502      	bpl.n	8007baa <_puts_r+0x2e>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d135      	bne.n	8007c16 <_puts_r+0x9a>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 f8f9 	bl	8007da4 <__swsetup_r>
 8007bb2:	b380      	cbz	r0, 8007c16 <_puts_r+0x9a>
 8007bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8007bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bba:	07da      	lsls	r2, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_puts_r+0x4e>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	059b      	lsls	r3, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_puts_r+0x4e>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc6:	f000 f9bd 	bl	8007f44 <__retarget_lock_release_recursive>
 8007bca:	4628      	mov	r0, r5
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da04      	bge.n	8007bdc <_puts_r+0x60>
 8007bd2:	69a2      	ldr	r2, [r4, #24]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	dc17      	bgt.n	8007c08 <_puts_r+0x8c>
 8007bd8:	290a      	cmp	r1, #10
 8007bda:	d015      	beq.n	8007c08 <_puts_r+0x8c>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	6022      	str	r2, [r4, #0]
 8007be2:	7019      	strb	r1, [r3, #0]
 8007be4:	68a3      	ldr	r3, [r4, #8]
 8007be6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bea:	3b01      	subs	r3, #1
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	2900      	cmp	r1, #0
 8007bf0:	d1ed      	bne.n	8007bce <_puts_r+0x52>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da11      	bge.n	8007c1a <_puts_r+0x9e>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	210a      	movs	r1, #10
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f893 	bl	8007d26 <__swbuf_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d0d7      	beq.n	8007bb4 <_puts_r+0x38>
 8007c04:	250a      	movs	r5, #10
 8007c06:	e7d7      	b.n	8007bb8 <_puts_r+0x3c>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f000 f88b 	bl	8007d26 <__swbuf_r>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1e7      	bne.n	8007be4 <_puts_r+0x68>
 8007c14:	e7ce      	b.n	8007bb4 <_puts_r+0x38>
 8007c16:	3e01      	subs	r6, #1
 8007c18:	e7e4      	b.n	8007be4 <_puts_r+0x68>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	220a      	movs	r2, #10
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e7ee      	b.n	8007c04 <_puts_r+0x88>
	...

08007c28 <puts>:
 8007c28:	4b02      	ldr	r3, [pc, #8]	@ (8007c34 <puts+0xc>)
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	f7ff bfa5 	b.w	8007b7c <_puts_r>
 8007c32:	bf00      	nop
 8007c34:	20000214 	.word	0x20000214

08007c38 <sniprintf>:
 8007c38:	b40c      	push	{r2, r3}
 8007c3a:	b530      	push	{r4, r5, lr}
 8007c3c:	4b17      	ldr	r3, [pc, #92]	@ (8007c9c <sniprintf+0x64>)
 8007c3e:	1e0c      	subs	r4, r1, #0
 8007c40:	681d      	ldr	r5, [r3, #0]
 8007c42:	b09d      	sub	sp, #116	@ 0x74
 8007c44:	da08      	bge.n	8007c58 <sniprintf+0x20>
 8007c46:	238b      	movs	r3, #139	@ 0x8b
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	b01d      	add	sp, #116	@ 0x74
 8007c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c54:	b002      	add	sp, #8
 8007c56:	4770      	bx	lr
 8007c58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c60:	bf14      	ite	ne
 8007c62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c66:	4623      	moveq	r3, r4
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	9307      	str	r3, [sp, #28]
 8007c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c70:	9002      	str	r0, [sp, #8]
 8007c72:	9006      	str	r0, [sp, #24]
 8007c74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c7a:	ab21      	add	r3, sp, #132	@ 0x84
 8007c7c:	a902      	add	r1, sp, #8
 8007c7e:	4628      	mov	r0, r5
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	f000 fac3 	bl	800820c <_svfiprintf_r>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	bfbc      	itt	lt
 8007c8a:	238b      	movlt	r3, #139	@ 0x8b
 8007c8c:	602b      	strlt	r3, [r5, #0]
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d0dd      	beq.n	8007c4e <sniprintf+0x16>
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e7d9      	b.n	8007c4e <sniprintf+0x16>
 8007c9a:	bf00      	nop
 8007c9c:	20000214 	.word	0x20000214

08007ca0 <__sread>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	f000 f8fc 	bl	8007ea4 <_read_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	bfab      	itete	ge
 8007cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb4:	181b      	addge	r3, r3, r0
 8007cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007cba:	bfac      	ite	ge
 8007cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007cbe:	81a3      	strhlt	r3, [r4, #12]
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <__swrite>:
 8007cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	898b      	ldrh	r3, [r1, #12]
 8007cca:	05db      	lsls	r3, r3, #23
 8007ccc:	4605      	mov	r5, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	d505      	bpl.n	8007ce0 <__swrite+0x1e>
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	2302      	movs	r3, #2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f000 f8d0 	bl	8007e80 <_lseek_r>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf6:	f000 b8e7 	b.w	8007ec8 <_write_r>

08007cfa <__sseek>:
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	f000 f8bd 	bl	8007e80 <_lseek_r>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	bf15      	itete	ne
 8007d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d16:	81a3      	strheq	r3, [r4, #12]
 8007d18:	bf18      	it	ne
 8007d1a:	81a3      	strhne	r3, [r4, #12]
 8007d1c:	bd10      	pop	{r4, pc}

08007d1e <__sclose>:
 8007d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d22:	f000 b89d 	b.w	8007e60 <_close_r>

08007d26 <__swbuf_r>:
 8007d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d28:	460e      	mov	r6, r1
 8007d2a:	4614      	mov	r4, r2
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	b118      	cbz	r0, 8007d38 <__swbuf_r+0x12>
 8007d30:	6a03      	ldr	r3, [r0, #32]
 8007d32:	b90b      	cbnz	r3, 8007d38 <__swbuf_r+0x12>
 8007d34:	f7ff feda 	bl	8007aec <__sinit>
 8007d38:	69a3      	ldr	r3, [r4, #24]
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	071a      	lsls	r2, r3, #28
 8007d40:	d501      	bpl.n	8007d46 <__swbuf_r+0x20>
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	b943      	cbnz	r3, 8007d58 <__swbuf_r+0x32>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f000 f82b 	bl	8007da4 <__swsetup_r>
 8007d4e:	b118      	cbz	r0, 8007d58 <__swbuf_r+0x32>
 8007d50:	f04f 37ff 	mov.w	r7, #4294967295
 8007d54:	4638      	mov	r0, r7
 8007d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	1a98      	subs	r0, r3, r2
 8007d5e:	6963      	ldr	r3, [r4, #20]
 8007d60:	b2f6      	uxtb	r6, r6
 8007d62:	4283      	cmp	r3, r0
 8007d64:	4637      	mov	r7, r6
 8007d66:	dc05      	bgt.n	8007d74 <__swbuf_r+0x4e>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 fe9e 	bl	8008aac <_fflush_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1ed      	bne.n	8007d50 <__swbuf_r+0x2a>
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	60a3      	str	r3, [r4, #8]
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	6022      	str	r2, [r4, #0]
 8007d80:	701e      	strb	r6, [r3, #0]
 8007d82:	6962      	ldr	r2, [r4, #20]
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d004      	beq.n	8007d94 <__swbuf_r+0x6e>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	07db      	lsls	r3, r3, #31
 8007d8e:	d5e1      	bpl.n	8007d54 <__swbuf_r+0x2e>
 8007d90:	2e0a      	cmp	r6, #10
 8007d92:	d1df      	bne.n	8007d54 <__swbuf_r+0x2e>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fe88 	bl	8008aac <_fflush_r>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d0d9      	beq.n	8007d54 <__swbuf_r+0x2e>
 8007da0:	e7d6      	b.n	8007d50 <__swbuf_r+0x2a>
	...

08007da4 <__swsetup_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4b29      	ldr	r3, [pc, #164]	@ (8007e4c <__swsetup_r+0xa8>)
 8007da8:	4605      	mov	r5, r0
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	460c      	mov	r4, r1
 8007dae:	b118      	cbz	r0, 8007db8 <__swsetup_r+0x14>
 8007db0:	6a03      	ldr	r3, [r0, #32]
 8007db2:	b90b      	cbnz	r3, 8007db8 <__swsetup_r+0x14>
 8007db4:	f7ff fe9a 	bl	8007aec <__sinit>
 8007db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbc:	0719      	lsls	r1, r3, #28
 8007dbe:	d422      	bmi.n	8007e06 <__swsetup_r+0x62>
 8007dc0:	06da      	lsls	r2, r3, #27
 8007dc2:	d407      	bmi.n	8007dd4 <__swsetup_r+0x30>
 8007dc4:	2209      	movs	r2, #9
 8007dc6:	602a      	str	r2, [r5, #0]
 8007dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	e033      	b.n	8007e3c <__swsetup_r+0x98>
 8007dd4:	0758      	lsls	r0, r3, #29
 8007dd6:	d512      	bpl.n	8007dfe <__swsetup_r+0x5a>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dda:	b141      	cbz	r1, 8007dee <__swsetup_r+0x4a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__swsetup_r+0x46>
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f8bd 	bl	8007f64 <_free_r>
 8007dea:	2300      	movs	r3, #0
 8007dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b94b      	cbnz	r3, 8007e1e <__swsetup_r+0x7a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e14:	d003      	beq.n	8007e1e <__swsetup_r+0x7a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fe95 	bl	8008b48 <__smakebuf_r>
 8007e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e22:	f013 0201 	ands.w	r2, r3, #1
 8007e26:	d00a      	beq.n	8007e3e <__swsetup_r+0x9a>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	60a2      	str	r2, [r4, #8]
 8007e2c:	6962      	ldr	r2, [r4, #20]
 8007e2e:	4252      	negs	r2, r2
 8007e30:	61a2      	str	r2, [r4, #24]
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	b942      	cbnz	r2, 8007e48 <__swsetup_r+0xa4>
 8007e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e3a:	d1c5      	bne.n	8007dc8 <__swsetup_r+0x24>
 8007e3c:	bd38      	pop	{r3, r4, r5, pc}
 8007e3e:	0799      	lsls	r1, r3, #30
 8007e40:	bf58      	it	pl
 8007e42:	6962      	ldrpl	r2, [r4, #20]
 8007e44:	60a2      	str	r2, [r4, #8]
 8007e46:	e7f4      	b.n	8007e32 <__swsetup_r+0x8e>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7f7      	b.n	8007e3c <__swsetup_r+0x98>
 8007e4c:	20000214 	.word	0x20000214

08007e50 <memset>:
 8007e50:	4402      	add	r2, r0
 8007e52:	4603      	mov	r3, r0
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d100      	bne.n	8007e5a <memset+0xa>
 8007e58:	4770      	bx	lr
 8007e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5e:	e7f9      	b.n	8007e54 <memset+0x4>

08007e60 <_close_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d06      	ldr	r5, [pc, #24]	@ (8007e7c <_close_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	f7ff fd44 	bl	80078f8 <_close>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_close_r+0x1a>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_close_r+0x1a>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	2002626c 	.word	0x2002626c

08007e80 <_lseek_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d07      	ldr	r5, [pc, #28]	@ (8007ea0 <_lseek_r+0x20>)
 8007e84:	4604      	mov	r4, r0
 8007e86:	4608      	mov	r0, r1
 8007e88:	4611      	mov	r1, r2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	602a      	str	r2, [r5, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f7ff fcf3 	bl	800787a <_lseek>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_lseek_r+0x1e>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_lseek_r+0x1e>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	2002626c 	.word	0x2002626c

08007ea4 <_read_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d07      	ldr	r5, [pc, #28]	@ (8007ec4 <_read_r+0x20>)
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	4608      	mov	r0, r1
 8007eac:	4611      	mov	r1, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	602a      	str	r2, [r5, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f7ff fc8b 	bl	80077ce <_read>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_read_r+0x1e>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_read_r+0x1e>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	2002626c 	.word	0x2002626c

08007ec8 <_write_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d07      	ldr	r5, [pc, #28]	@ (8007ee8 <_write_r+0x20>)
 8007ecc:	4604      	mov	r4, r0
 8007ece:	4608      	mov	r0, r1
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	602a      	str	r2, [r5, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f7ff fce1 	bl	800789e <_write>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_write_r+0x1e>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_write_r+0x1e>
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	2002626c 	.word	0x2002626c

08007eec <__errno>:
 8007eec:	4b01      	ldr	r3, [pc, #4]	@ (8007ef4 <__errno+0x8>)
 8007eee:	6818      	ldr	r0, [r3, #0]
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000214 	.word	0x20000214

08007ef8 <__libc_init_array>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	4d0d      	ldr	r5, [pc, #52]	@ (8007f30 <__libc_init_array+0x38>)
 8007efc:	4c0d      	ldr	r4, [pc, #52]	@ (8007f34 <__libc_init_array+0x3c>)
 8007efe:	1b64      	subs	r4, r4, r5
 8007f00:	10a4      	asrs	r4, r4, #2
 8007f02:	2600      	movs	r6, #0
 8007f04:	42a6      	cmp	r6, r4
 8007f06:	d109      	bne.n	8007f1c <__libc_init_array+0x24>
 8007f08:	4d0b      	ldr	r5, [pc, #44]	@ (8007f38 <__libc_init_array+0x40>)
 8007f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007f3c <__libc_init_array+0x44>)
 8007f0c:	f000 feda 	bl	8008cc4 <_init>
 8007f10:	1b64      	subs	r4, r4, r5
 8007f12:	10a4      	asrs	r4, r4, #2
 8007f14:	2600      	movs	r6, #0
 8007f16:	42a6      	cmp	r6, r4
 8007f18:	d105      	bne.n	8007f26 <__libc_init_array+0x2e>
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f20:	4798      	blx	r3
 8007f22:	3601      	adds	r6, #1
 8007f24:	e7ee      	b.n	8007f04 <__libc_init_array+0xc>
 8007f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2a:	4798      	blx	r3
 8007f2c:	3601      	adds	r6, #1
 8007f2e:	e7f2      	b.n	8007f16 <__libc_init_array+0x1e>
 8007f30:	08009f74 	.word	0x08009f74
 8007f34:	08009f74 	.word	0x08009f74
 8007f38:	08009f74 	.word	0x08009f74
 8007f3c:	08009f78 	.word	0x08009f78

08007f40 <__retarget_lock_init_recursive>:
 8007f40:	4770      	bx	lr

08007f42 <__retarget_lock_acquire_recursive>:
 8007f42:	4770      	bx	lr

08007f44 <__retarget_lock_release_recursive>:
 8007f44:	4770      	bx	lr

08007f46 <memcpy>:
 8007f46:	440a      	add	r2, r1
 8007f48:	4291      	cmp	r1, r2
 8007f4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f4e:	d100      	bne.n	8007f52 <memcpy+0xc>
 8007f50:	4770      	bx	lr
 8007f52:	b510      	push	{r4, lr}
 8007f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f5c:	4291      	cmp	r1, r2
 8007f5e:	d1f9      	bne.n	8007f54 <memcpy+0xe>
 8007f60:	bd10      	pop	{r4, pc}
	...

08007f64 <_free_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d041      	beq.n	8007ff0 <_free_r+0x8c>
 8007f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f70:	1f0c      	subs	r4, r1, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfb8      	it	lt
 8007f76:	18e4      	addlt	r4, r4, r3
 8007f78:	f000 f8e0 	bl	800813c <__malloc_lock>
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff4 <_free_r+0x90>)
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	b933      	cbnz	r3, 8007f90 <_free_r+0x2c>
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	6014      	str	r4, [r2, #0]
 8007f86:	4628      	mov	r0, r5
 8007f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8c:	f000 b8dc 	b.w	8008148 <__malloc_unlock>
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d908      	bls.n	8007fa6 <_free_r+0x42>
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	1821      	adds	r1, r4, r0
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf01      	itttt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	1809      	addeq	r1, r1, r0
 8007fa2:	6021      	streq	r1, [r4, #0]
 8007fa4:	e7ed      	b.n	8007f82 <_free_r+0x1e>
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b10b      	cbz	r3, 8007fb0 <_free_r+0x4c>
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	d9fa      	bls.n	8007fa6 <_free_r+0x42>
 8007fb0:	6811      	ldr	r1, [r2, #0]
 8007fb2:	1850      	adds	r0, r2, r1
 8007fb4:	42a0      	cmp	r0, r4
 8007fb6:	d10b      	bne.n	8007fd0 <_free_r+0x6c>
 8007fb8:	6820      	ldr	r0, [r4, #0]
 8007fba:	4401      	add	r1, r0
 8007fbc:	1850      	adds	r0, r2, r1
 8007fbe:	4283      	cmp	r3, r0
 8007fc0:	6011      	str	r1, [r2, #0]
 8007fc2:	d1e0      	bne.n	8007f86 <_free_r+0x22>
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	6053      	str	r3, [r2, #4]
 8007fca:	4408      	add	r0, r1
 8007fcc:	6010      	str	r0, [r2, #0]
 8007fce:	e7da      	b.n	8007f86 <_free_r+0x22>
 8007fd0:	d902      	bls.n	8007fd8 <_free_r+0x74>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	e7d6      	b.n	8007f86 <_free_r+0x22>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	1821      	adds	r1, r4, r0
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	bf04      	itt	eq
 8007fe0:	6819      	ldreq	r1, [r3, #0]
 8007fe2:	685b      	ldreq	r3, [r3, #4]
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	bf04      	itt	eq
 8007fe8:	1809      	addeq	r1, r1, r0
 8007fea:	6021      	streq	r1, [r4, #0]
 8007fec:	6054      	str	r4, [r2, #4]
 8007fee:	e7ca      	b.n	8007f86 <_free_r+0x22>
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20026278 	.word	0x20026278

08007ff8 <sbrk_aligned>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	4e0f      	ldr	r6, [pc, #60]	@ (8008038 <sbrk_aligned+0x40>)
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	6831      	ldr	r1, [r6, #0]
 8008000:	4605      	mov	r5, r0
 8008002:	b911      	cbnz	r1, 800800a <sbrk_aligned+0x12>
 8008004:	f000 fe18 	bl	8008c38 <_sbrk_r>
 8008008:	6030      	str	r0, [r6, #0]
 800800a:	4621      	mov	r1, r4
 800800c:	4628      	mov	r0, r5
 800800e:	f000 fe13 	bl	8008c38 <_sbrk_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	d103      	bne.n	800801e <sbrk_aligned+0x26>
 8008016:	f04f 34ff 	mov.w	r4, #4294967295
 800801a:	4620      	mov	r0, r4
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	1cc4      	adds	r4, r0, #3
 8008020:	f024 0403 	bic.w	r4, r4, #3
 8008024:	42a0      	cmp	r0, r4
 8008026:	d0f8      	beq.n	800801a <sbrk_aligned+0x22>
 8008028:	1a21      	subs	r1, r4, r0
 800802a:	4628      	mov	r0, r5
 800802c:	f000 fe04 	bl	8008c38 <_sbrk_r>
 8008030:	3001      	adds	r0, #1
 8008032:	d1f2      	bne.n	800801a <sbrk_aligned+0x22>
 8008034:	e7ef      	b.n	8008016 <sbrk_aligned+0x1e>
 8008036:	bf00      	nop
 8008038:	20026274 	.word	0x20026274

0800803c <_malloc_r>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	1ccd      	adds	r5, r1, #3
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	2d00      	cmp	r5, #0
 8008050:	4606      	mov	r6, r0
 8008052:	db01      	blt.n	8008058 <_malloc_r+0x1c>
 8008054:	42a9      	cmp	r1, r5
 8008056:	d904      	bls.n	8008062 <_malloc_r+0x26>
 8008058:	230c      	movs	r3, #12
 800805a:	6033      	str	r3, [r6, #0]
 800805c:	2000      	movs	r0, #0
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008138 <_malloc_r+0xfc>
 8008066:	f000 f869 	bl	800813c <__malloc_lock>
 800806a:	f8d8 3000 	ldr.w	r3, [r8]
 800806e:	461c      	mov	r4, r3
 8008070:	bb44      	cbnz	r4, 80080c4 <_malloc_r+0x88>
 8008072:	4629      	mov	r1, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff ffbf 	bl	8007ff8 <sbrk_aligned>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	4604      	mov	r4, r0
 800807e:	d158      	bne.n	8008132 <_malloc_r+0xf6>
 8008080:	f8d8 4000 	ldr.w	r4, [r8]
 8008084:	4627      	mov	r7, r4
 8008086:	2f00      	cmp	r7, #0
 8008088:	d143      	bne.n	8008112 <_malloc_r+0xd6>
 800808a:	2c00      	cmp	r4, #0
 800808c:	d04b      	beq.n	8008126 <_malloc_r+0xea>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	4639      	mov	r1, r7
 8008092:	4630      	mov	r0, r6
 8008094:	eb04 0903 	add.w	r9, r4, r3
 8008098:	f000 fdce 	bl	8008c38 <_sbrk_r>
 800809c:	4581      	cmp	r9, r0
 800809e:	d142      	bne.n	8008126 <_malloc_r+0xea>
 80080a0:	6821      	ldr	r1, [r4, #0]
 80080a2:	1a6d      	subs	r5, r5, r1
 80080a4:	4629      	mov	r1, r5
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7ff ffa6 	bl	8007ff8 <sbrk_aligned>
 80080ac:	3001      	adds	r0, #1
 80080ae:	d03a      	beq.n	8008126 <_malloc_r+0xea>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	442b      	add	r3, r5
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	bb62      	cbnz	r2, 8008118 <_malloc_r+0xdc>
 80080be:	f8c8 7000 	str.w	r7, [r8]
 80080c2:	e00f      	b.n	80080e4 <_malloc_r+0xa8>
 80080c4:	6822      	ldr	r2, [r4, #0]
 80080c6:	1b52      	subs	r2, r2, r5
 80080c8:	d420      	bmi.n	800810c <_malloc_r+0xd0>
 80080ca:	2a0b      	cmp	r2, #11
 80080cc:	d917      	bls.n	80080fe <_malloc_r+0xc2>
 80080ce:	1961      	adds	r1, r4, r5
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	6025      	str	r5, [r4, #0]
 80080d4:	bf18      	it	ne
 80080d6:	6059      	strne	r1, [r3, #4]
 80080d8:	6863      	ldr	r3, [r4, #4]
 80080da:	bf08      	it	eq
 80080dc:	f8c8 1000 	streq.w	r1, [r8]
 80080e0:	5162      	str	r2, [r4, r5]
 80080e2:	604b      	str	r3, [r1, #4]
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f82f 	bl	8008148 <__malloc_unlock>
 80080ea:	f104 000b 	add.w	r0, r4, #11
 80080ee:	1d23      	adds	r3, r4, #4
 80080f0:	f020 0007 	bic.w	r0, r0, #7
 80080f4:	1ac2      	subs	r2, r0, r3
 80080f6:	bf1c      	itt	ne
 80080f8:	1a1b      	subne	r3, r3, r0
 80080fa:	50a3      	strne	r3, [r4, r2]
 80080fc:	e7af      	b.n	800805e <_malloc_r+0x22>
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	42a3      	cmp	r3, r4
 8008102:	bf0c      	ite	eq
 8008104:	f8c8 2000 	streq.w	r2, [r8]
 8008108:	605a      	strne	r2, [r3, #4]
 800810a:	e7eb      	b.n	80080e4 <_malloc_r+0xa8>
 800810c:	4623      	mov	r3, r4
 800810e:	6864      	ldr	r4, [r4, #4]
 8008110:	e7ae      	b.n	8008070 <_malloc_r+0x34>
 8008112:	463c      	mov	r4, r7
 8008114:	687f      	ldr	r7, [r7, #4]
 8008116:	e7b6      	b.n	8008086 <_malloc_r+0x4a>
 8008118:	461a      	mov	r2, r3
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	42a3      	cmp	r3, r4
 800811e:	d1fb      	bne.n	8008118 <_malloc_r+0xdc>
 8008120:	2300      	movs	r3, #0
 8008122:	6053      	str	r3, [r2, #4]
 8008124:	e7de      	b.n	80080e4 <_malloc_r+0xa8>
 8008126:	230c      	movs	r3, #12
 8008128:	6033      	str	r3, [r6, #0]
 800812a:	4630      	mov	r0, r6
 800812c:	f000 f80c 	bl	8008148 <__malloc_unlock>
 8008130:	e794      	b.n	800805c <_malloc_r+0x20>
 8008132:	6005      	str	r5, [r0, #0]
 8008134:	e7d6      	b.n	80080e4 <_malloc_r+0xa8>
 8008136:	bf00      	nop
 8008138:	20026278 	.word	0x20026278

0800813c <__malloc_lock>:
 800813c:	4801      	ldr	r0, [pc, #4]	@ (8008144 <__malloc_lock+0x8>)
 800813e:	f7ff bf00 	b.w	8007f42 <__retarget_lock_acquire_recursive>
 8008142:	bf00      	nop
 8008144:	20026270 	.word	0x20026270

08008148 <__malloc_unlock>:
 8008148:	4801      	ldr	r0, [pc, #4]	@ (8008150 <__malloc_unlock+0x8>)
 800814a:	f7ff befb 	b.w	8007f44 <__retarget_lock_release_recursive>
 800814e:	bf00      	nop
 8008150:	20026270 	.word	0x20026270

08008154 <__ssputs_r>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	688e      	ldr	r6, [r1, #8]
 800815a:	461f      	mov	r7, r3
 800815c:	42be      	cmp	r6, r7
 800815e:	680b      	ldr	r3, [r1, #0]
 8008160:	4682      	mov	sl, r0
 8008162:	460c      	mov	r4, r1
 8008164:	4690      	mov	r8, r2
 8008166:	d82d      	bhi.n	80081c4 <__ssputs_r+0x70>
 8008168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800816c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008170:	d026      	beq.n	80081c0 <__ssputs_r+0x6c>
 8008172:	6965      	ldr	r5, [r4, #20]
 8008174:	6909      	ldr	r1, [r1, #16]
 8008176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800817a:	eba3 0901 	sub.w	r9, r3, r1
 800817e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008182:	1c7b      	adds	r3, r7, #1
 8008184:	444b      	add	r3, r9
 8008186:	106d      	asrs	r5, r5, #1
 8008188:	429d      	cmp	r5, r3
 800818a:	bf38      	it	cc
 800818c:	461d      	movcc	r5, r3
 800818e:	0553      	lsls	r3, r2, #21
 8008190:	d527      	bpl.n	80081e2 <__ssputs_r+0x8e>
 8008192:	4629      	mov	r1, r5
 8008194:	f7ff ff52 	bl	800803c <_malloc_r>
 8008198:	4606      	mov	r6, r0
 800819a:	b360      	cbz	r0, 80081f6 <__ssputs_r+0xa2>
 800819c:	6921      	ldr	r1, [r4, #16]
 800819e:	464a      	mov	r2, r9
 80081a0:	f7ff fed1 	bl	8007f46 <memcpy>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	6126      	str	r6, [r4, #16]
 80081b2:	6165      	str	r5, [r4, #20]
 80081b4:	444e      	add	r6, r9
 80081b6:	eba5 0509 	sub.w	r5, r5, r9
 80081ba:	6026      	str	r6, [r4, #0]
 80081bc:	60a5      	str	r5, [r4, #8]
 80081be:	463e      	mov	r6, r7
 80081c0:	42be      	cmp	r6, r7
 80081c2:	d900      	bls.n	80081c6 <__ssputs_r+0x72>
 80081c4:	463e      	mov	r6, r7
 80081c6:	6820      	ldr	r0, [r4, #0]
 80081c8:	4632      	mov	r2, r6
 80081ca:	4641      	mov	r1, r8
 80081cc:	f000 fcf8 	bl	8008bc0 <memmove>
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	1b9b      	subs	r3, r3, r6
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	4433      	add	r3, r6
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	2000      	movs	r0, #0
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	462a      	mov	r2, r5
 80081e4:	f000 fd38 	bl	8008c58 <_realloc_r>
 80081e8:	4606      	mov	r6, r0
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1e0      	bne.n	80081b0 <__ssputs_r+0x5c>
 80081ee:	6921      	ldr	r1, [r4, #16]
 80081f0:	4650      	mov	r0, sl
 80081f2:	f7ff feb7 	bl	8007f64 <_free_r>
 80081f6:	230c      	movs	r3, #12
 80081f8:	f8ca 3000 	str.w	r3, [sl]
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e7e9      	b.n	80081de <__ssputs_r+0x8a>
	...

0800820c <_svfiprintf_r>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	4698      	mov	r8, r3
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	061b      	lsls	r3, r3, #24
 8008216:	b09d      	sub	sp, #116	@ 0x74
 8008218:	4607      	mov	r7, r0
 800821a:	460d      	mov	r5, r1
 800821c:	4614      	mov	r4, r2
 800821e:	d510      	bpl.n	8008242 <_svfiprintf_r+0x36>
 8008220:	690b      	ldr	r3, [r1, #16]
 8008222:	b973      	cbnz	r3, 8008242 <_svfiprintf_r+0x36>
 8008224:	2140      	movs	r1, #64	@ 0x40
 8008226:	f7ff ff09 	bl	800803c <_malloc_r>
 800822a:	6028      	str	r0, [r5, #0]
 800822c:	6128      	str	r0, [r5, #16]
 800822e:	b930      	cbnz	r0, 800823e <_svfiprintf_r+0x32>
 8008230:	230c      	movs	r3, #12
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	@ 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	2340      	movs	r3, #64	@ 0x40
 8008240:	616b      	str	r3, [r5, #20]
 8008242:	2300      	movs	r3, #0
 8008244:	9309      	str	r3, [sp, #36]	@ 0x24
 8008246:	2320      	movs	r3, #32
 8008248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800824c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008250:	2330      	movs	r3, #48	@ 0x30
 8008252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083f0 <_svfiprintf_r+0x1e4>
 8008256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800825a:	f04f 0901 	mov.w	r9, #1
 800825e:	4623      	mov	r3, r4
 8008260:	469a      	mov	sl, r3
 8008262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008266:	b10a      	cbz	r2, 800826c <_svfiprintf_r+0x60>
 8008268:	2a25      	cmp	r2, #37	@ 0x25
 800826a:	d1f9      	bne.n	8008260 <_svfiprintf_r+0x54>
 800826c:	ebba 0b04 	subs.w	fp, sl, r4
 8008270:	d00b      	beq.n	800828a <_svfiprintf_r+0x7e>
 8008272:	465b      	mov	r3, fp
 8008274:	4622      	mov	r2, r4
 8008276:	4629      	mov	r1, r5
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ff6b 	bl	8008154 <__ssputs_r>
 800827e:	3001      	adds	r0, #1
 8008280:	f000 80a7 	beq.w	80083d2 <_svfiprintf_r+0x1c6>
 8008284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008286:	445a      	add	r2, fp
 8008288:	9209      	str	r2, [sp, #36]	@ 0x24
 800828a:	f89a 3000 	ldrb.w	r3, [sl]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 809f 	beq.w	80083d2 <_svfiprintf_r+0x1c6>
 8008294:	2300      	movs	r3, #0
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829e:	f10a 0a01 	add.w	sl, sl, #1
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	9307      	str	r3, [sp, #28]
 80082a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80082ac:	4654      	mov	r4, sl
 80082ae:	2205      	movs	r2, #5
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	484e      	ldr	r0, [pc, #312]	@ (80083f0 <_svfiprintf_r+0x1e4>)
 80082b6:	f7f7 ff9b 	bl	80001f0 <memchr>
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	b9d8      	cbnz	r0, 80082f6 <_svfiprintf_r+0xea>
 80082be:	06d0      	lsls	r0, r2, #27
 80082c0:	bf44      	itt	mi
 80082c2:	2320      	movmi	r3, #32
 80082c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c8:	0711      	lsls	r1, r2, #28
 80082ca:	bf44      	itt	mi
 80082cc:	232b      	movmi	r3, #43	@ 0x2b
 80082ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d2:	f89a 3000 	ldrb.w	r3, [sl]
 80082d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d8:	d015      	beq.n	8008306 <_svfiprintf_r+0xfa>
 80082da:	9a07      	ldr	r2, [sp, #28]
 80082dc:	4654      	mov	r4, sl
 80082de:	2000      	movs	r0, #0
 80082e0:	f04f 0c0a 	mov.w	ip, #10
 80082e4:	4621      	mov	r1, r4
 80082e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ea:	3b30      	subs	r3, #48	@ 0x30
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	d94b      	bls.n	8008388 <_svfiprintf_r+0x17c>
 80082f0:	b1b0      	cbz	r0, 8008320 <_svfiprintf_r+0x114>
 80082f2:	9207      	str	r2, [sp, #28]
 80082f4:	e014      	b.n	8008320 <_svfiprintf_r+0x114>
 80082f6:	eba0 0308 	sub.w	r3, r0, r8
 80082fa:	fa09 f303 	lsl.w	r3, r9, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	46a2      	mov	sl, r4
 8008304:	e7d2      	b.n	80082ac <_svfiprintf_r+0xa0>
 8008306:	9b03      	ldr	r3, [sp, #12]
 8008308:	1d19      	adds	r1, r3, #4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	9103      	str	r1, [sp, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfbb      	ittet	lt
 8008312:	425b      	neglt	r3, r3
 8008314:	f042 0202 	orrlt.w	r2, r2, #2
 8008318:	9307      	strge	r3, [sp, #28]
 800831a:	9307      	strlt	r3, [sp, #28]
 800831c:	bfb8      	it	lt
 800831e:	9204      	strlt	r2, [sp, #16]
 8008320:	7823      	ldrb	r3, [r4, #0]
 8008322:	2b2e      	cmp	r3, #46	@ 0x2e
 8008324:	d10a      	bne.n	800833c <_svfiprintf_r+0x130>
 8008326:	7863      	ldrb	r3, [r4, #1]
 8008328:	2b2a      	cmp	r3, #42	@ 0x2a
 800832a:	d132      	bne.n	8008392 <_svfiprintf_r+0x186>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	9203      	str	r2, [sp, #12]
 8008334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008338:	3402      	adds	r4, #2
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008400 <_svfiprintf_r+0x1f4>
 8008340:	7821      	ldrb	r1, [r4, #0]
 8008342:	2203      	movs	r2, #3
 8008344:	4650      	mov	r0, sl
 8008346:	f7f7 ff53 	bl	80001f0 <memchr>
 800834a:	b138      	cbz	r0, 800835c <_svfiprintf_r+0x150>
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	eba0 000a 	sub.w	r0, r0, sl
 8008352:	2240      	movs	r2, #64	@ 0x40
 8008354:	4082      	lsls	r2, r0
 8008356:	4313      	orrs	r3, r2
 8008358:	3401      	adds	r4, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008360:	4824      	ldr	r0, [pc, #144]	@ (80083f4 <_svfiprintf_r+0x1e8>)
 8008362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008366:	2206      	movs	r2, #6
 8008368:	f7f7 ff42 	bl	80001f0 <memchr>
 800836c:	2800      	cmp	r0, #0
 800836e:	d036      	beq.n	80083de <_svfiprintf_r+0x1d2>
 8008370:	4b21      	ldr	r3, [pc, #132]	@ (80083f8 <_svfiprintf_r+0x1ec>)
 8008372:	bb1b      	cbnz	r3, 80083bc <_svfiprintf_r+0x1b0>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	3307      	adds	r3, #7
 8008378:	f023 0307 	bic.w	r3, r3, #7
 800837c:	3308      	adds	r3, #8
 800837e:	9303      	str	r3, [sp, #12]
 8008380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008382:	4433      	add	r3, r6
 8008384:	9309      	str	r3, [sp, #36]	@ 0x24
 8008386:	e76a      	b.n	800825e <_svfiprintf_r+0x52>
 8008388:	fb0c 3202 	mla	r2, ip, r2, r3
 800838c:	460c      	mov	r4, r1
 800838e:	2001      	movs	r0, #1
 8008390:	e7a8      	b.n	80082e4 <_svfiprintf_r+0xd8>
 8008392:	2300      	movs	r3, #0
 8008394:	3401      	adds	r4, #1
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	4619      	mov	r1, r3
 800839a:	f04f 0c0a 	mov.w	ip, #10
 800839e:	4620      	mov	r0, r4
 80083a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a4:	3a30      	subs	r2, #48	@ 0x30
 80083a6:	2a09      	cmp	r2, #9
 80083a8:	d903      	bls.n	80083b2 <_svfiprintf_r+0x1a6>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c6      	beq.n	800833c <_svfiprintf_r+0x130>
 80083ae:	9105      	str	r1, [sp, #20]
 80083b0:	e7c4      	b.n	800833c <_svfiprintf_r+0x130>
 80083b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b6:	4604      	mov	r4, r0
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7f0      	b.n	800839e <_svfiprintf_r+0x192>
 80083bc:	ab03      	add	r3, sp, #12
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <_svfiprintf_r+0x1f0>)
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	4638      	mov	r0, r7
 80083c8:	f3af 8000 	nop.w
 80083cc:	1c42      	adds	r2, r0, #1
 80083ce:	4606      	mov	r6, r0
 80083d0:	d1d6      	bne.n	8008380 <_svfiprintf_r+0x174>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	065b      	lsls	r3, r3, #25
 80083d6:	f53f af2d 	bmi.w	8008234 <_svfiprintf_r+0x28>
 80083da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083dc:	e72c      	b.n	8008238 <_svfiprintf_r+0x2c>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <_svfiprintf_r+0x1f0>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4638      	mov	r0, r7
 80083ea:	f000 f9bb 	bl	8008764 <_printf_i>
 80083ee:	e7ed      	b.n	80083cc <_svfiprintf_r+0x1c0>
 80083f0:	08009f38 	.word	0x08009f38
 80083f4:	08009f42 	.word	0x08009f42
 80083f8:	00000000 	.word	0x00000000
 80083fc:	08008155 	.word	0x08008155
 8008400:	08009f3e 	.word	0x08009f3e

08008404 <__sfputc_r>:
 8008404:	6893      	ldr	r3, [r2, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	b410      	push	{r4}
 800840c:	6093      	str	r3, [r2, #8]
 800840e:	da08      	bge.n	8008422 <__sfputc_r+0x1e>
 8008410:	6994      	ldr	r4, [r2, #24]
 8008412:	42a3      	cmp	r3, r4
 8008414:	db01      	blt.n	800841a <__sfputc_r+0x16>
 8008416:	290a      	cmp	r1, #10
 8008418:	d103      	bne.n	8008422 <__sfputc_r+0x1e>
 800841a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800841e:	f7ff bc82 	b.w	8007d26 <__swbuf_r>
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	1c58      	adds	r0, r3, #1
 8008426:	6010      	str	r0, [r2, #0]
 8008428:	7019      	strb	r1, [r3, #0]
 800842a:	4608      	mov	r0, r1
 800842c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008430:	4770      	bx	lr

08008432 <__sfputs_r>:
 8008432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4614      	mov	r4, r2
 800843a:	18d5      	adds	r5, r2, r3
 800843c:	42ac      	cmp	r4, r5
 800843e:	d101      	bne.n	8008444 <__sfputs_r+0x12>
 8008440:	2000      	movs	r0, #0
 8008442:	e007      	b.n	8008454 <__sfputs_r+0x22>
 8008444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008448:	463a      	mov	r2, r7
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ffda 	bl	8008404 <__sfputc_r>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d1f3      	bne.n	800843c <__sfputs_r+0xa>
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008458 <_vfiprintf_r>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	460d      	mov	r5, r1
 800845e:	b09d      	sub	sp, #116	@ 0x74
 8008460:	4614      	mov	r4, r2
 8008462:	4698      	mov	r8, r3
 8008464:	4606      	mov	r6, r0
 8008466:	b118      	cbz	r0, 8008470 <_vfiprintf_r+0x18>
 8008468:	6a03      	ldr	r3, [r0, #32]
 800846a:	b90b      	cbnz	r3, 8008470 <_vfiprintf_r+0x18>
 800846c:	f7ff fb3e 	bl	8007aec <__sinit>
 8008470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008472:	07d9      	lsls	r1, r3, #31
 8008474:	d405      	bmi.n	8008482 <_vfiprintf_r+0x2a>
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	059a      	lsls	r2, r3, #22
 800847a:	d402      	bmi.n	8008482 <_vfiprintf_r+0x2a>
 800847c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800847e:	f7ff fd60 	bl	8007f42 <__retarget_lock_acquire_recursive>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	071b      	lsls	r3, r3, #28
 8008486:	d501      	bpl.n	800848c <_vfiprintf_r+0x34>
 8008488:	692b      	ldr	r3, [r5, #16]
 800848a:	b99b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x5c>
 800848c:	4629      	mov	r1, r5
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff fc88 	bl	8007da4 <__swsetup_r>
 8008494:	b170      	cbz	r0, 80084b4 <_vfiprintf_r+0x5c>
 8008496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008498:	07dc      	lsls	r4, r3, #31
 800849a:	d504      	bpl.n	80084a6 <_vfiprintf_r+0x4e>
 800849c:	f04f 30ff 	mov.w	r0, #4294967295
 80084a0:	b01d      	add	sp, #116	@ 0x74
 80084a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a6:	89ab      	ldrh	r3, [r5, #12]
 80084a8:	0598      	lsls	r0, r3, #22
 80084aa:	d4f7      	bmi.n	800849c <_vfiprintf_r+0x44>
 80084ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ae:	f7ff fd49 	bl	8007f44 <__retarget_lock_release_recursive>
 80084b2:	e7f3      	b.n	800849c <_vfiprintf_r+0x44>
 80084b4:	2300      	movs	r3, #0
 80084b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b8:	2320      	movs	r3, #32
 80084ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084be:	f8cd 800c 	str.w	r8, [sp, #12]
 80084c2:	2330      	movs	r3, #48	@ 0x30
 80084c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008674 <_vfiprintf_r+0x21c>
 80084c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084cc:	f04f 0901 	mov.w	r9, #1
 80084d0:	4623      	mov	r3, r4
 80084d2:	469a      	mov	sl, r3
 80084d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d8:	b10a      	cbz	r2, 80084de <_vfiprintf_r+0x86>
 80084da:	2a25      	cmp	r2, #37	@ 0x25
 80084dc:	d1f9      	bne.n	80084d2 <_vfiprintf_r+0x7a>
 80084de:	ebba 0b04 	subs.w	fp, sl, r4
 80084e2:	d00b      	beq.n	80084fc <_vfiprintf_r+0xa4>
 80084e4:	465b      	mov	r3, fp
 80084e6:	4622      	mov	r2, r4
 80084e8:	4629      	mov	r1, r5
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ffa1 	bl	8008432 <__sfputs_r>
 80084f0:	3001      	adds	r0, #1
 80084f2:	f000 80a7 	beq.w	8008644 <_vfiprintf_r+0x1ec>
 80084f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f8:	445a      	add	r2, fp
 80084fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80084fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 809f 	beq.w	8008644 <_vfiprintf_r+0x1ec>
 8008506:	2300      	movs	r3, #0
 8008508:	f04f 32ff 	mov.w	r2, #4294967295
 800850c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008510:	f10a 0a01 	add.w	sl, sl, #1
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800851c:	931a      	str	r3, [sp, #104]	@ 0x68
 800851e:	4654      	mov	r4, sl
 8008520:	2205      	movs	r2, #5
 8008522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008526:	4853      	ldr	r0, [pc, #332]	@ (8008674 <_vfiprintf_r+0x21c>)
 8008528:	f7f7 fe62 	bl	80001f0 <memchr>
 800852c:	9a04      	ldr	r2, [sp, #16]
 800852e:	b9d8      	cbnz	r0, 8008568 <_vfiprintf_r+0x110>
 8008530:	06d1      	lsls	r1, r2, #27
 8008532:	bf44      	itt	mi
 8008534:	2320      	movmi	r3, #32
 8008536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800853a:	0713      	lsls	r3, r2, #28
 800853c:	bf44      	itt	mi
 800853e:	232b      	movmi	r3, #43	@ 0x2b
 8008540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008544:	f89a 3000 	ldrb.w	r3, [sl]
 8008548:	2b2a      	cmp	r3, #42	@ 0x2a
 800854a:	d015      	beq.n	8008578 <_vfiprintf_r+0x120>
 800854c:	9a07      	ldr	r2, [sp, #28]
 800854e:	4654      	mov	r4, sl
 8008550:	2000      	movs	r0, #0
 8008552:	f04f 0c0a 	mov.w	ip, #10
 8008556:	4621      	mov	r1, r4
 8008558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800855c:	3b30      	subs	r3, #48	@ 0x30
 800855e:	2b09      	cmp	r3, #9
 8008560:	d94b      	bls.n	80085fa <_vfiprintf_r+0x1a2>
 8008562:	b1b0      	cbz	r0, 8008592 <_vfiprintf_r+0x13a>
 8008564:	9207      	str	r2, [sp, #28]
 8008566:	e014      	b.n	8008592 <_vfiprintf_r+0x13a>
 8008568:	eba0 0308 	sub.w	r3, r0, r8
 800856c:	fa09 f303 	lsl.w	r3, r9, r3
 8008570:	4313      	orrs	r3, r2
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	46a2      	mov	sl, r4
 8008576:	e7d2      	b.n	800851e <_vfiprintf_r+0xc6>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	1d19      	adds	r1, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	9103      	str	r1, [sp, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	bfbb      	ittet	lt
 8008584:	425b      	neglt	r3, r3
 8008586:	f042 0202 	orrlt.w	r2, r2, #2
 800858a:	9307      	strge	r3, [sp, #28]
 800858c:	9307      	strlt	r3, [sp, #28]
 800858e:	bfb8      	it	lt
 8008590:	9204      	strlt	r2, [sp, #16]
 8008592:	7823      	ldrb	r3, [r4, #0]
 8008594:	2b2e      	cmp	r3, #46	@ 0x2e
 8008596:	d10a      	bne.n	80085ae <_vfiprintf_r+0x156>
 8008598:	7863      	ldrb	r3, [r4, #1]
 800859a:	2b2a      	cmp	r3, #42	@ 0x2a
 800859c:	d132      	bne.n	8008604 <_vfiprintf_r+0x1ac>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	1d1a      	adds	r2, r3, #4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	9203      	str	r2, [sp, #12]
 80085a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085aa:	3402      	adds	r4, #2
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008684 <_vfiprintf_r+0x22c>
 80085b2:	7821      	ldrb	r1, [r4, #0]
 80085b4:	2203      	movs	r2, #3
 80085b6:	4650      	mov	r0, sl
 80085b8:	f7f7 fe1a 	bl	80001f0 <memchr>
 80085bc:	b138      	cbz	r0, 80085ce <_vfiprintf_r+0x176>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	eba0 000a 	sub.w	r0, r0, sl
 80085c4:	2240      	movs	r2, #64	@ 0x40
 80085c6:	4082      	lsls	r2, r0
 80085c8:	4313      	orrs	r3, r2
 80085ca:	3401      	adds	r4, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d2:	4829      	ldr	r0, [pc, #164]	@ (8008678 <_vfiprintf_r+0x220>)
 80085d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085d8:	2206      	movs	r2, #6
 80085da:	f7f7 fe09 	bl	80001f0 <memchr>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d03f      	beq.n	8008662 <_vfiprintf_r+0x20a>
 80085e2:	4b26      	ldr	r3, [pc, #152]	@ (800867c <_vfiprintf_r+0x224>)
 80085e4:	bb1b      	cbnz	r3, 800862e <_vfiprintf_r+0x1d6>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	3307      	adds	r3, #7
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	3308      	adds	r3, #8
 80085f0:	9303      	str	r3, [sp, #12]
 80085f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f4:	443b      	add	r3, r7
 80085f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f8:	e76a      	b.n	80084d0 <_vfiprintf_r+0x78>
 80085fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80085fe:	460c      	mov	r4, r1
 8008600:	2001      	movs	r0, #1
 8008602:	e7a8      	b.n	8008556 <_vfiprintf_r+0xfe>
 8008604:	2300      	movs	r3, #0
 8008606:	3401      	adds	r4, #1
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	4619      	mov	r1, r3
 800860c:	f04f 0c0a 	mov.w	ip, #10
 8008610:	4620      	mov	r0, r4
 8008612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008616:	3a30      	subs	r2, #48	@ 0x30
 8008618:	2a09      	cmp	r2, #9
 800861a:	d903      	bls.n	8008624 <_vfiprintf_r+0x1cc>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0c6      	beq.n	80085ae <_vfiprintf_r+0x156>
 8008620:	9105      	str	r1, [sp, #20]
 8008622:	e7c4      	b.n	80085ae <_vfiprintf_r+0x156>
 8008624:	fb0c 2101 	mla	r1, ip, r1, r2
 8008628:	4604      	mov	r4, r0
 800862a:	2301      	movs	r3, #1
 800862c:	e7f0      	b.n	8008610 <_vfiprintf_r+0x1b8>
 800862e:	ab03      	add	r3, sp, #12
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	462a      	mov	r2, r5
 8008634:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <_vfiprintf_r+0x228>)
 8008636:	a904      	add	r1, sp, #16
 8008638:	4630      	mov	r0, r6
 800863a:	f3af 8000 	nop.w
 800863e:	4607      	mov	r7, r0
 8008640:	1c78      	adds	r0, r7, #1
 8008642:	d1d6      	bne.n	80085f2 <_vfiprintf_r+0x19a>
 8008644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008646:	07d9      	lsls	r1, r3, #31
 8008648:	d405      	bmi.n	8008656 <_vfiprintf_r+0x1fe>
 800864a:	89ab      	ldrh	r3, [r5, #12]
 800864c:	059a      	lsls	r2, r3, #22
 800864e:	d402      	bmi.n	8008656 <_vfiprintf_r+0x1fe>
 8008650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008652:	f7ff fc77 	bl	8007f44 <__retarget_lock_release_recursive>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	065b      	lsls	r3, r3, #25
 800865a:	f53f af1f 	bmi.w	800849c <_vfiprintf_r+0x44>
 800865e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008660:	e71e      	b.n	80084a0 <_vfiprintf_r+0x48>
 8008662:	ab03      	add	r3, sp, #12
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	462a      	mov	r2, r5
 8008668:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <_vfiprintf_r+0x228>)
 800866a:	a904      	add	r1, sp, #16
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f879 	bl	8008764 <_printf_i>
 8008672:	e7e4      	b.n	800863e <_vfiprintf_r+0x1e6>
 8008674:	08009f38 	.word	0x08009f38
 8008678:	08009f42 	.word	0x08009f42
 800867c:	00000000 	.word	0x00000000
 8008680:	08008433 	.word	0x08008433
 8008684:	08009f3e 	.word	0x08009f3e

08008688 <_printf_common>:
 8008688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	4616      	mov	r6, r2
 800868e:	4698      	mov	r8, r3
 8008690:	688a      	ldr	r2, [r1, #8]
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008698:	4293      	cmp	r3, r2
 800869a:	bfb8      	it	lt
 800869c:	4613      	movlt	r3, r2
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086a4:	4607      	mov	r7, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	b10a      	cbz	r2, 80086ae <_printf_common+0x26>
 80086aa:	3301      	adds	r3, #1
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	0699      	lsls	r1, r3, #26
 80086b2:	bf42      	ittt	mi
 80086b4:	6833      	ldrmi	r3, [r6, #0]
 80086b6:	3302      	addmi	r3, #2
 80086b8:	6033      	strmi	r3, [r6, #0]
 80086ba:	6825      	ldr	r5, [r4, #0]
 80086bc:	f015 0506 	ands.w	r5, r5, #6
 80086c0:	d106      	bne.n	80086d0 <_printf_common+0x48>
 80086c2:	f104 0a19 	add.w	sl, r4, #25
 80086c6:	68e3      	ldr	r3, [r4, #12]
 80086c8:	6832      	ldr	r2, [r6, #0]
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	dc26      	bgt.n	800871e <_printf_common+0x96>
 80086d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	3b00      	subs	r3, #0
 80086d8:	bf18      	it	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	0692      	lsls	r2, r2, #26
 80086de:	d42b      	bmi.n	8008738 <_printf_common+0xb0>
 80086e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086e4:	4641      	mov	r1, r8
 80086e6:	4638      	mov	r0, r7
 80086e8:	47c8      	blx	r9
 80086ea:	3001      	adds	r0, #1
 80086ec:	d01e      	beq.n	800872c <_printf_common+0xa4>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	f003 0306 	and.w	r3, r3, #6
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	bf02      	ittt	eq
 80086fa:	68e5      	ldreq	r5, [r4, #12]
 80086fc:	6833      	ldreq	r3, [r6, #0]
 80086fe:	1aed      	subeq	r5, r5, r3
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	bf0c      	ite	eq
 8008704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008708:	2500      	movne	r5, #0
 800870a:	4293      	cmp	r3, r2
 800870c:	bfc4      	itt	gt
 800870e:	1a9b      	subgt	r3, r3, r2
 8008710:	18ed      	addgt	r5, r5, r3
 8008712:	2600      	movs	r6, #0
 8008714:	341a      	adds	r4, #26
 8008716:	42b5      	cmp	r5, r6
 8008718:	d11a      	bne.n	8008750 <_printf_common+0xc8>
 800871a:	2000      	movs	r0, #0
 800871c:	e008      	b.n	8008730 <_printf_common+0xa8>
 800871e:	2301      	movs	r3, #1
 8008720:	4652      	mov	r2, sl
 8008722:	4641      	mov	r1, r8
 8008724:	4638      	mov	r0, r7
 8008726:	47c8      	blx	r9
 8008728:	3001      	adds	r0, #1
 800872a:	d103      	bne.n	8008734 <_printf_common+0xac>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	3501      	adds	r5, #1
 8008736:	e7c6      	b.n	80086c6 <_printf_common+0x3e>
 8008738:	18e1      	adds	r1, r4, r3
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	2030      	movs	r0, #48	@ 0x30
 800873e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008742:	4422      	add	r2, r4
 8008744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800874c:	3302      	adds	r3, #2
 800874e:	e7c7      	b.n	80086e0 <_printf_common+0x58>
 8008750:	2301      	movs	r3, #1
 8008752:	4622      	mov	r2, r4
 8008754:	4641      	mov	r1, r8
 8008756:	4638      	mov	r0, r7
 8008758:	47c8      	blx	r9
 800875a:	3001      	adds	r0, #1
 800875c:	d0e6      	beq.n	800872c <_printf_common+0xa4>
 800875e:	3601      	adds	r6, #1
 8008760:	e7d9      	b.n	8008716 <_printf_common+0x8e>
	...

08008764 <_printf_i>:
 8008764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	7e0f      	ldrb	r7, [r1, #24]
 800876a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800876c:	2f78      	cmp	r7, #120	@ 0x78
 800876e:	4691      	mov	r9, r2
 8008770:	4680      	mov	r8, r0
 8008772:	460c      	mov	r4, r1
 8008774:	469a      	mov	sl, r3
 8008776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800877a:	d807      	bhi.n	800878c <_printf_i+0x28>
 800877c:	2f62      	cmp	r7, #98	@ 0x62
 800877e:	d80a      	bhi.n	8008796 <_printf_i+0x32>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f000 80d2 	beq.w	800892a <_printf_i+0x1c6>
 8008786:	2f58      	cmp	r7, #88	@ 0x58
 8008788:	f000 80b9 	beq.w	80088fe <_printf_i+0x19a>
 800878c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008794:	e03a      	b.n	800880c <_printf_i+0xa8>
 8008796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800879a:	2b15      	cmp	r3, #21
 800879c:	d8f6      	bhi.n	800878c <_printf_i+0x28>
 800879e:	a101      	add	r1, pc, #4	@ (adr r1, 80087a4 <_printf_i+0x40>)
 80087a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087a4:	080087fd 	.word	0x080087fd
 80087a8:	08008811 	.word	0x08008811
 80087ac:	0800878d 	.word	0x0800878d
 80087b0:	0800878d 	.word	0x0800878d
 80087b4:	0800878d 	.word	0x0800878d
 80087b8:	0800878d 	.word	0x0800878d
 80087bc:	08008811 	.word	0x08008811
 80087c0:	0800878d 	.word	0x0800878d
 80087c4:	0800878d 	.word	0x0800878d
 80087c8:	0800878d 	.word	0x0800878d
 80087cc:	0800878d 	.word	0x0800878d
 80087d0:	08008911 	.word	0x08008911
 80087d4:	0800883b 	.word	0x0800883b
 80087d8:	080088cb 	.word	0x080088cb
 80087dc:	0800878d 	.word	0x0800878d
 80087e0:	0800878d 	.word	0x0800878d
 80087e4:	08008933 	.word	0x08008933
 80087e8:	0800878d 	.word	0x0800878d
 80087ec:	0800883b 	.word	0x0800883b
 80087f0:	0800878d 	.word	0x0800878d
 80087f4:	0800878d 	.word	0x0800878d
 80087f8:	080088d3 	.word	0x080088d3
 80087fc:	6833      	ldr	r3, [r6, #0]
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6032      	str	r2, [r6, #0]
 8008804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800880c:	2301      	movs	r3, #1
 800880e:	e09d      	b.n	800894c <_printf_i+0x1e8>
 8008810:	6833      	ldr	r3, [r6, #0]
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	1d19      	adds	r1, r3, #4
 8008816:	6031      	str	r1, [r6, #0]
 8008818:	0606      	lsls	r6, r0, #24
 800881a:	d501      	bpl.n	8008820 <_printf_i+0xbc>
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	e003      	b.n	8008828 <_printf_i+0xc4>
 8008820:	0645      	lsls	r5, r0, #25
 8008822:	d5fb      	bpl.n	800881c <_printf_i+0xb8>
 8008824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008828:	2d00      	cmp	r5, #0
 800882a:	da03      	bge.n	8008834 <_printf_i+0xd0>
 800882c:	232d      	movs	r3, #45	@ 0x2d
 800882e:	426d      	negs	r5, r5
 8008830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008834:	4859      	ldr	r0, [pc, #356]	@ (800899c <_printf_i+0x238>)
 8008836:	230a      	movs	r3, #10
 8008838:	e011      	b.n	800885e <_printf_i+0xfa>
 800883a:	6821      	ldr	r1, [r4, #0]
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	0608      	lsls	r0, r1, #24
 8008840:	f853 5b04 	ldr.w	r5, [r3], #4
 8008844:	d402      	bmi.n	800884c <_printf_i+0xe8>
 8008846:	0649      	lsls	r1, r1, #25
 8008848:	bf48      	it	mi
 800884a:	b2ad      	uxthmi	r5, r5
 800884c:	2f6f      	cmp	r7, #111	@ 0x6f
 800884e:	4853      	ldr	r0, [pc, #332]	@ (800899c <_printf_i+0x238>)
 8008850:	6033      	str	r3, [r6, #0]
 8008852:	bf14      	ite	ne
 8008854:	230a      	movne	r3, #10
 8008856:	2308      	moveq	r3, #8
 8008858:	2100      	movs	r1, #0
 800885a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800885e:	6866      	ldr	r6, [r4, #4]
 8008860:	60a6      	str	r6, [r4, #8]
 8008862:	2e00      	cmp	r6, #0
 8008864:	bfa2      	ittt	ge
 8008866:	6821      	ldrge	r1, [r4, #0]
 8008868:	f021 0104 	bicge.w	r1, r1, #4
 800886c:	6021      	strge	r1, [r4, #0]
 800886e:	b90d      	cbnz	r5, 8008874 <_printf_i+0x110>
 8008870:	2e00      	cmp	r6, #0
 8008872:	d04b      	beq.n	800890c <_printf_i+0x1a8>
 8008874:	4616      	mov	r6, r2
 8008876:	fbb5 f1f3 	udiv	r1, r5, r3
 800887a:	fb03 5711 	mls	r7, r3, r1, r5
 800887e:	5dc7      	ldrb	r7, [r0, r7]
 8008880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008884:	462f      	mov	r7, r5
 8008886:	42bb      	cmp	r3, r7
 8008888:	460d      	mov	r5, r1
 800888a:	d9f4      	bls.n	8008876 <_printf_i+0x112>
 800888c:	2b08      	cmp	r3, #8
 800888e:	d10b      	bne.n	80088a8 <_printf_i+0x144>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	07df      	lsls	r7, r3, #31
 8008894:	d508      	bpl.n	80088a8 <_printf_i+0x144>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	6861      	ldr	r1, [r4, #4]
 800889a:	4299      	cmp	r1, r3
 800889c:	bfde      	ittt	le
 800889e:	2330      	movle	r3, #48	@ 0x30
 80088a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088a8:	1b92      	subs	r2, r2, r6
 80088aa:	6122      	str	r2, [r4, #16]
 80088ac:	f8cd a000 	str.w	sl, [sp]
 80088b0:	464b      	mov	r3, r9
 80088b2:	aa03      	add	r2, sp, #12
 80088b4:	4621      	mov	r1, r4
 80088b6:	4640      	mov	r0, r8
 80088b8:	f7ff fee6 	bl	8008688 <_printf_common>
 80088bc:	3001      	adds	r0, #1
 80088be:	d14a      	bne.n	8008956 <_printf_i+0x1f2>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	b004      	add	sp, #16
 80088c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f043 0320 	orr.w	r3, r3, #32
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	4833      	ldr	r0, [pc, #204]	@ (80089a0 <_printf_i+0x23c>)
 80088d4:	2778      	movs	r7, #120	@ 0x78
 80088d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	6831      	ldr	r1, [r6, #0]
 80088de:	061f      	lsls	r7, r3, #24
 80088e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80088e4:	d402      	bmi.n	80088ec <_printf_i+0x188>
 80088e6:	065f      	lsls	r7, r3, #25
 80088e8:	bf48      	it	mi
 80088ea:	b2ad      	uxthmi	r5, r5
 80088ec:	6031      	str	r1, [r6, #0]
 80088ee:	07d9      	lsls	r1, r3, #31
 80088f0:	bf44      	itt	mi
 80088f2:	f043 0320 	orrmi.w	r3, r3, #32
 80088f6:	6023      	strmi	r3, [r4, #0]
 80088f8:	b11d      	cbz	r5, 8008902 <_printf_i+0x19e>
 80088fa:	2310      	movs	r3, #16
 80088fc:	e7ac      	b.n	8008858 <_printf_i+0xf4>
 80088fe:	4827      	ldr	r0, [pc, #156]	@ (800899c <_printf_i+0x238>)
 8008900:	e7e9      	b.n	80088d6 <_printf_i+0x172>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	e7f6      	b.n	80088fa <_printf_i+0x196>
 800890c:	4616      	mov	r6, r2
 800890e:	e7bd      	b.n	800888c <_printf_i+0x128>
 8008910:	6833      	ldr	r3, [r6, #0]
 8008912:	6825      	ldr	r5, [r4, #0]
 8008914:	6961      	ldr	r1, [r4, #20]
 8008916:	1d18      	adds	r0, r3, #4
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	062e      	lsls	r6, r5, #24
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	d501      	bpl.n	8008924 <_printf_i+0x1c0>
 8008920:	6019      	str	r1, [r3, #0]
 8008922:	e002      	b.n	800892a <_printf_i+0x1c6>
 8008924:	0668      	lsls	r0, r5, #25
 8008926:	d5fb      	bpl.n	8008920 <_printf_i+0x1bc>
 8008928:	8019      	strh	r1, [r3, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	4616      	mov	r6, r2
 8008930:	e7bc      	b.n	80088ac <_printf_i+0x148>
 8008932:	6833      	ldr	r3, [r6, #0]
 8008934:	1d1a      	adds	r2, r3, #4
 8008936:	6032      	str	r2, [r6, #0]
 8008938:	681e      	ldr	r6, [r3, #0]
 800893a:	6862      	ldr	r2, [r4, #4]
 800893c:	2100      	movs	r1, #0
 800893e:	4630      	mov	r0, r6
 8008940:	f7f7 fc56 	bl	80001f0 <memchr>
 8008944:	b108      	cbz	r0, 800894a <_printf_i+0x1e6>
 8008946:	1b80      	subs	r0, r0, r6
 8008948:	6060      	str	r0, [r4, #4]
 800894a:	6863      	ldr	r3, [r4, #4]
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	2300      	movs	r3, #0
 8008950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008954:	e7aa      	b.n	80088ac <_printf_i+0x148>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	4632      	mov	r2, r6
 800895a:	4649      	mov	r1, r9
 800895c:	4640      	mov	r0, r8
 800895e:	47d0      	blx	sl
 8008960:	3001      	adds	r0, #1
 8008962:	d0ad      	beq.n	80088c0 <_printf_i+0x15c>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	079b      	lsls	r3, r3, #30
 8008968:	d413      	bmi.n	8008992 <_printf_i+0x22e>
 800896a:	68e0      	ldr	r0, [r4, #12]
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	4298      	cmp	r0, r3
 8008970:	bfb8      	it	lt
 8008972:	4618      	movlt	r0, r3
 8008974:	e7a6      	b.n	80088c4 <_printf_i+0x160>
 8008976:	2301      	movs	r3, #1
 8008978:	4632      	mov	r2, r6
 800897a:	4649      	mov	r1, r9
 800897c:	4640      	mov	r0, r8
 800897e:	47d0      	blx	sl
 8008980:	3001      	adds	r0, #1
 8008982:	d09d      	beq.n	80088c0 <_printf_i+0x15c>
 8008984:	3501      	adds	r5, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	9903      	ldr	r1, [sp, #12]
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	42ab      	cmp	r3, r5
 800898e:	dcf2      	bgt.n	8008976 <_printf_i+0x212>
 8008990:	e7eb      	b.n	800896a <_printf_i+0x206>
 8008992:	2500      	movs	r5, #0
 8008994:	f104 0619 	add.w	r6, r4, #25
 8008998:	e7f5      	b.n	8008986 <_printf_i+0x222>
 800899a:	bf00      	nop
 800899c:	08009f49 	.word	0x08009f49
 80089a0:	08009f5a 	.word	0x08009f5a

080089a4 <__sflush_r>:
 80089a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ac:	0716      	lsls	r6, r2, #28
 80089ae:	4605      	mov	r5, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d454      	bmi.n	8008a5e <__sflush_r+0xba>
 80089b4:	684b      	ldr	r3, [r1, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc02      	bgt.n	80089c0 <__sflush_r+0x1c>
 80089ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd48      	ble.n	8008a52 <__sflush_r+0xae>
 80089c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	d045      	beq.n	8008a52 <__sflush_r+0xae>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089cc:	682f      	ldr	r7, [r5, #0]
 80089ce:	6a21      	ldr	r1, [r4, #32]
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	d030      	beq.n	8008a36 <__sflush_r+0x92>
 80089d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	0759      	lsls	r1, r3, #29
 80089da:	d505      	bpl.n	80089e8 <__sflush_r+0x44>
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089e2:	b10b      	cbz	r3, 80089e8 <__sflush_r+0x44>
 80089e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089e6:	1ad2      	subs	r2, r2, r3
 80089e8:	2300      	movs	r3, #0
 80089ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b0      	blx	r6
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	d106      	bne.n	8008a06 <__sflush_r+0x62>
 80089f8:	6829      	ldr	r1, [r5, #0]
 80089fa:	291d      	cmp	r1, #29
 80089fc:	d82b      	bhi.n	8008a56 <__sflush_r+0xb2>
 80089fe:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa8 <__sflush_r+0x104>)
 8008a00:	410a      	asrs	r2, r1
 8008a02:	07d6      	lsls	r6, r2, #31
 8008a04:	d427      	bmi.n	8008a56 <__sflush_r+0xb2>
 8008a06:	2200      	movs	r2, #0
 8008a08:	6062      	str	r2, [r4, #4]
 8008a0a:	04d9      	lsls	r1, r3, #19
 8008a0c:	6922      	ldr	r2, [r4, #16]
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	d504      	bpl.n	8008a1c <__sflush_r+0x78>
 8008a12:	1c42      	adds	r2, r0, #1
 8008a14:	d101      	bne.n	8008a1a <__sflush_r+0x76>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b903      	cbnz	r3, 8008a1c <__sflush_r+0x78>
 8008a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a1e:	602f      	str	r7, [r5, #0]
 8008a20:	b1b9      	cbz	r1, 8008a52 <__sflush_r+0xae>
 8008a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a26:	4299      	cmp	r1, r3
 8008a28:	d002      	beq.n	8008a30 <__sflush_r+0x8c>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f7ff fa9a 	bl	8007f64 <_free_r>
 8008a30:	2300      	movs	r3, #0
 8008a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a34:	e00d      	b.n	8008a52 <__sflush_r+0xae>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b0      	blx	r6
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	1c50      	adds	r0, r2, #1
 8008a40:	d1c9      	bne.n	80089d6 <__sflush_r+0x32>
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0c6      	beq.n	80089d6 <__sflush_r+0x32>
 8008a48:	2b1d      	cmp	r3, #29
 8008a4a:	d001      	beq.n	8008a50 <__sflush_r+0xac>
 8008a4c:	2b16      	cmp	r3, #22
 8008a4e:	d11e      	bne.n	8008a8e <__sflush_r+0xea>
 8008a50:	602f      	str	r7, [r5, #0]
 8008a52:	2000      	movs	r0, #0
 8008a54:	e022      	b.n	8008a9c <__sflush_r+0xf8>
 8008a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5a:	b21b      	sxth	r3, r3
 8008a5c:	e01b      	b.n	8008a96 <__sflush_r+0xf2>
 8008a5e:	690f      	ldr	r7, [r1, #16]
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	d0f6      	beq.n	8008a52 <__sflush_r+0xae>
 8008a64:	0793      	lsls	r3, r2, #30
 8008a66:	680e      	ldr	r6, [r1, #0]
 8008a68:	bf08      	it	eq
 8008a6a:	694b      	ldreq	r3, [r1, #20]
 8008a6c:	600f      	str	r7, [r1, #0]
 8008a6e:	bf18      	it	ne
 8008a70:	2300      	movne	r3, #0
 8008a72:	eba6 0807 	sub.w	r8, r6, r7
 8008a76:	608b      	str	r3, [r1, #8]
 8008a78:	f1b8 0f00 	cmp.w	r8, #0
 8008a7c:	dde9      	ble.n	8008a52 <__sflush_r+0xae>
 8008a7e:	6a21      	ldr	r1, [r4, #32]
 8008a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a82:	4643      	mov	r3, r8
 8008a84:	463a      	mov	r2, r7
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b0      	blx	r6
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dc08      	bgt.n	8008aa0 <__sflush_r+0xfc>
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa0:	4407      	add	r7, r0
 8008aa2:	eba8 0800 	sub.w	r8, r8, r0
 8008aa6:	e7e7      	b.n	8008a78 <__sflush_r+0xd4>
 8008aa8:	dfbffffe 	.word	0xdfbffffe

08008aac <_fflush_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	690b      	ldr	r3, [r1, #16]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b913      	cbnz	r3, 8008abc <_fflush_r+0x10>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	4628      	mov	r0, r5
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	b118      	cbz	r0, 8008ac6 <_fflush_r+0x1a>
 8008abe:	6a03      	ldr	r3, [r0, #32]
 8008ac0:	b90b      	cbnz	r3, 8008ac6 <_fflush_r+0x1a>
 8008ac2:	f7ff f813 	bl	8007aec <__sinit>
 8008ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f3      	beq.n	8008ab6 <_fflush_r+0xa>
 8008ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ad0:	07d0      	lsls	r0, r2, #31
 8008ad2:	d404      	bmi.n	8008ade <_fflush_r+0x32>
 8008ad4:	0599      	lsls	r1, r3, #22
 8008ad6:	d402      	bmi.n	8008ade <_fflush_r+0x32>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ada:	f7ff fa32 	bl	8007f42 <__retarget_lock_acquire_recursive>
 8008ade:	4628      	mov	r0, r5
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	f7ff ff5f 	bl	80089a4 <__sflush_r>
 8008ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ae8:	07da      	lsls	r2, r3, #31
 8008aea:	4605      	mov	r5, r0
 8008aec:	d4e4      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	059b      	lsls	r3, r3, #22
 8008af2:	d4e1      	bmi.n	8008ab8 <_fflush_r+0xc>
 8008af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af6:	f7ff fa25 	bl	8007f44 <__retarget_lock_release_recursive>
 8008afa:	e7dd      	b.n	8008ab8 <_fflush_r+0xc>

08008afc <__swhatbuf_r>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	460c      	mov	r4, r1
 8008b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b04:	2900      	cmp	r1, #0
 8008b06:	b096      	sub	sp, #88	@ 0x58
 8008b08:	4615      	mov	r5, r2
 8008b0a:	461e      	mov	r6, r3
 8008b0c:	da0d      	bge.n	8008b2a <__swhatbuf_r+0x2e>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b14:	f04f 0100 	mov.w	r1, #0
 8008b18:	bf14      	ite	ne
 8008b1a:	2340      	movne	r3, #64	@ 0x40
 8008b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b20:	2000      	movs	r0, #0
 8008b22:	6031      	str	r1, [r6, #0]
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	b016      	add	sp, #88	@ 0x58
 8008b28:	bd70      	pop	{r4, r5, r6, pc}
 8008b2a:	466a      	mov	r2, sp
 8008b2c:	f000 f862 	bl	8008bf4 <_fstat_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	dbec      	blt.n	8008b0e <__swhatbuf_r+0x12>
 8008b34:	9901      	ldr	r1, [sp, #4]
 8008b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b3e:	4259      	negs	r1, r3
 8008b40:	4159      	adcs	r1, r3
 8008b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b46:	e7eb      	b.n	8008b20 <__swhatbuf_r+0x24>

08008b48 <__smakebuf_r>:
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b4c:	079d      	lsls	r5, r3, #30
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	d507      	bpl.n	8008b64 <__smakebuf_r+0x1c>
 8008b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	6163      	str	r3, [r4, #20]
 8008b60:	b003      	add	sp, #12
 8008b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b64:	ab01      	add	r3, sp, #4
 8008b66:	466a      	mov	r2, sp
 8008b68:	f7ff ffc8 	bl	8008afc <__swhatbuf_r>
 8008b6c:	9f00      	ldr	r7, [sp, #0]
 8008b6e:	4605      	mov	r5, r0
 8008b70:	4639      	mov	r1, r7
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff fa62 	bl	800803c <_malloc_r>
 8008b78:	b948      	cbnz	r0, 8008b8e <__smakebuf_r+0x46>
 8008b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7e:	059a      	lsls	r2, r3, #22
 8008b80:	d4ee      	bmi.n	8008b60 <__smakebuf_r+0x18>
 8008b82:	f023 0303 	bic.w	r3, r3, #3
 8008b86:	f043 0302 	orr.w	r3, r3, #2
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	e7e2      	b.n	8008b54 <__smakebuf_r+0xc>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	6020      	str	r0, [r4, #0]
 8008b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b9e:	b15b      	cbz	r3, 8008bb8 <__smakebuf_r+0x70>
 8008ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 f837 	bl	8008c18 <_isatty_r>
 8008baa:	b128      	cbz	r0, 8008bb8 <__smakebuf_r+0x70>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	431d      	orrs	r5, r3
 8008bbc:	81a5      	strh	r5, [r4, #12]
 8008bbe:	e7cf      	b.n	8008b60 <__smakebuf_r+0x18>

08008bc0 <memmove>:
 8008bc0:	4288      	cmp	r0, r1
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	eb01 0402 	add.w	r4, r1, r2
 8008bc8:	d902      	bls.n	8008bd0 <memmove+0x10>
 8008bca:	4284      	cmp	r4, r0
 8008bcc:	4623      	mov	r3, r4
 8008bce:	d807      	bhi.n	8008be0 <memmove+0x20>
 8008bd0:	1e43      	subs	r3, r0, #1
 8008bd2:	42a1      	cmp	r1, r4
 8008bd4:	d008      	beq.n	8008be8 <memmove+0x28>
 8008bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bde:	e7f8      	b.n	8008bd2 <memmove+0x12>
 8008be0:	4402      	add	r2, r0
 8008be2:	4601      	mov	r1, r0
 8008be4:	428a      	cmp	r2, r1
 8008be6:	d100      	bne.n	8008bea <memmove+0x2a>
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bf2:	e7f7      	b.n	8008be4 <memmove+0x24>

08008bf4 <_fstat_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	@ (8008c14 <_fstat_r+0x20>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f7fe febc 	bl	800797e <_fstat>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d102      	bne.n	8008c10 <_fstat_r+0x1c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b103      	cbz	r3, 8008c10 <_fstat_r+0x1c>
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	2002626c 	.word	0x2002626c

08008c18 <_isatty_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4d06      	ldr	r5, [pc, #24]	@ (8008c34 <_isatty_r+0x1c>)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	f7fe feb9 	bl	800799a <_isatty>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_isatty_r+0x1a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_isatty_r+0x1a>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	2002626c 	.word	0x2002626c

08008c38 <_sbrk_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	@ (8008c54 <_sbrk_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7fa fea6 	bl	8003994 <_sbrk>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_sbrk_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_sbrk_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	2002626c 	.word	0x2002626c

08008c58 <_realloc_r>:
 8008c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4615      	mov	r5, r2
 8008c60:	460c      	mov	r4, r1
 8008c62:	b921      	cbnz	r1, 8008c6e <_realloc_r+0x16>
 8008c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c68:	4611      	mov	r1, r2
 8008c6a:	f7ff b9e7 	b.w	800803c <_malloc_r>
 8008c6e:	b92a      	cbnz	r2, 8008c7c <_realloc_r+0x24>
 8008c70:	f7ff f978 	bl	8007f64 <_free_r>
 8008c74:	2400      	movs	r4, #0
 8008c76:	4620      	mov	r0, r4
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	f000 f81a 	bl	8008cb4 <_malloc_usable_size_r>
 8008c80:	4285      	cmp	r5, r0
 8008c82:	4606      	mov	r6, r0
 8008c84:	d802      	bhi.n	8008c8c <_realloc_r+0x34>
 8008c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c8a:	d8f4      	bhi.n	8008c76 <_realloc_r+0x1e>
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7ff f9d4 	bl	800803c <_malloc_r>
 8008c94:	4607      	mov	r7, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0ec      	beq.n	8008c74 <_realloc_r+0x1c>
 8008c9a:	42b5      	cmp	r5, r6
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	bf28      	it	cs
 8008ca2:	4632      	movcs	r2, r6
 8008ca4:	f7ff f94f 	bl	8007f46 <memcpy>
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4640      	mov	r0, r8
 8008cac:	f7ff f95a 	bl	8007f64 <_free_r>
 8008cb0:	463c      	mov	r4, r7
 8008cb2:	e7e0      	b.n	8008c76 <_realloc_r+0x1e>

08008cb4 <_malloc_usable_size_r>:
 8008cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb8:	1f18      	subs	r0, r3, #4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfbc      	itt	lt
 8008cbe:	580b      	ldrlt	r3, [r1, r0]
 8008cc0:	18c0      	addlt	r0, r0, r3
 8008cc2:	4770      	bx	lr

08008cc4 <_init>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr

08008cd0 <_fini>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	bf00      	nop
 8008cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd6:	bc08      	pop	{r3}
 8008cd8:	469e      	mov	lr, r3
 8008cda:	4770      	bx	lr
