
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c4  08009170  08009170  0000a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a434  0800a434  0000c26c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a434  0800a434  0000b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a43c  0800a43c  0000c26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a43c  0800a43c  0000b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a440  0800a440  0000b440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  0800a444  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c26c  2**0
                  CONTENTS
 10 .bss          00026024  2000026c  2000026c  0000c26c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026290  20026290  0000c26c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165fa  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a29  00000000  00000000  00022896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  000262c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  000277c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b52  00000000  00000000  000287e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b852  00000000  00000000  0005033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16e6  00000000  00000000  0006bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d273  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d0  00000000  00000000  0014d2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00153688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009158 	.word	0x08009158

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000270 	.word	0x20000270
 80001ec:	08009158 	.word	0x08009158

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
//	initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000594:	f000 faaa 	bl	8000aec <LTCD__Init>
    LTCD_Layer_Init(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa67 	bl	8000a6c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800059e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fbea 	bl	8000d7c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a8:	f000 fcea 	bl	8000f80 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <ApplicationInit+0x2c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b2:	f000 f869 	bl	8000688 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000288 	.word	0x20000288

080005c0 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	085b      	lsrs	r3, r3, #1
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005e6:	883b      	ldrh	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
 80005f0:	88fa      	ldrh	r2, [r7, #6]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005f8:	89ba      	ldrh	r2, [r7, #12]
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 8000602:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800060a:	429a      	cmp	r2, r3
 800060c:	dd08      	ble.n	8000620 <Determine_Touch_Quadrant+0x60>
 800060e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000612:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000616:	425b      	negs	r3, r3
 8000618:	429a      	cmp	r2, r3
 800061a:	dd01      	ble.n	8000620 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 800061c:	2300      	movs	r3, #0
 800061e:	e02d      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000620:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000628:	429a      	cmp	r2, r3
 800062a:	dc08      	bgt.n	800063e <Determine_Touch_Quadrant+0x7e>
 800062c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000634:	425b      	negs	r3, r3
 8000636:	429a      	cmp	r2, r3
 8000638:	dd01      	ble.n	800063e <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800063a:	2301      	movs	r3, #1
 800063c:	e01e      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 800063e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000646:	429a      	cmp	r2, r3
 8000648:	dc08      	bgt.n	800065c <Determine_Touch_Quadrant+0x9c>
 800064a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800064e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000652:	425b      	negs	r3, r3
 8000654:	429a      	cmp	r2, r3
 8000656:	dc01      	bgt.n	800065c <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 8000658:	2302      	movs	r3, #2
 800065a:	e00f      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000664:	429a      	cmp	r2, r3
 8000666:	dd08      	ble.n	800067a <Determine_Touch_Quadrant+0xba>
 8000668:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800066c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000670:	425b      	negs	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	dc01      	bgt.n	800067a <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 8000676:	2303      	movs	r3, #3
 8000678:	e000      	b.n	800067c <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800067a:	23ff      	movs	r3, #255	@ 0xff
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bc90      	pop	{r4, r7}
 8000684:	4770      	bx	lr
	...

08000688 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800069c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006a6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4807      	ldr	r0, [pc, #28]	@ (80006f0 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006d2:	f003 fce3 	bl	800409c <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d6:	2028      	movs	r0, #40	@ 0x28
 80006d8:	f003 fc91 	bl	8003ffe <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006de:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006e0:	601a      	str	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	20000290 	.word	0x20000290
 80006f8:	0600000f 	.word	0x0600000f

080006fc <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000702:	2028      	movs	r0, #40	@ 0x28
 8000704:	f003 fc89 	bl	800401a <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 800070c:	4b67      	ldr	r3, [pc, #412]	@ (80008ac <EXTI15_10_IRQHandler+0x1b0>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000712:	e006      	b.n	8000722 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000714:	204c      	movs	r0, #76	@ 0x4c
 8000716:	f002 ffa0 	bl	800365a <STMPE811_Read>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b63      	ldr	r3, [pc, #396]	@ (80008ac <EXTI15_10_IRQHandler+0x1b0>)
 8000720:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000722:	4b62      	ldr	r3, [pc, #392]	@ (80008ac <EXTI15_10_IRQHandler+0x1b0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f4      	beq.n	8000714 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fc3e 	bl	8000fac <ReadRegisterFromTouchModule>
 8000730:	4603      	mov	r3, r0
 8000732:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000734:	2100      	movs	r1, #0
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fc46 	bl	8000fc8 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800073c:	200b      	movs	r0, #11
 800073e:	f000 fc35 	bl	8000fac <ReadRegisterFromTouchModule>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b5a      	ldr	r3, [pc, #360]	@ (80008b0 <EXTI15_10_IRQHandler+0x1b4>)
 8000748:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800074a:	4b59      	ldr	r3, [pc, #356]	@ (80008b0 <EXTI15_10_IRQHandler+0x1b4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	713b      	strb	r3, [r7, #4]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000754:	793b      	ldrb	r3, [r7, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	200b      	movs	r0, #11
 800075a:	f000 fc35 	bl	8000fc8 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800075e:	2040      	movs	r0, #64	@ 0x40
 8000760:	f000 fc24 	bl	8000fac <ReadRegisterFromTouchModule>
 8000764:	4603      	mov	r3, r0
 8000766:	70fb      	strb	r3, [r7, #3]
	if (ctrlReg & 0x80)
 8000768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800076c:	2b00      	cmp	r3, #0
 800076e:	da01      	bge.n	8000774 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000770:	2301      	movs	r3, #1
 8000772:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d070      	beq.n	800085c <EXTI15_10_IRQHandler+0x160>
	{
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 800077a:	484e      	ldr	r0, [pc, #312]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 800077c:	f000 fc0b 	bl	8000f96 <DetermineTouchPosition>
//		printf("\nPressed\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		printf("Tim: %u", __HAL_TIM_GET_COUNTER(&htim2));

		if (activeScreen == 0) {
 8000780:	4b4d      	ldr	r3, [pc, #308]	@ (80008b8 <EXTI15_10_IRQHandler+0x1bc>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d130      	bne.n	80007ea <EXTI15_10_IRQHandler+0xee>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000788:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	4b49      	ldr	r3, [pc, #292]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 800078e:	885b      	ldrh	r3, [r3, #2]
 8000790:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000794:	b29b      	uxth	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f002 fabb 	bl	8002d14 <startClicked>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d062      	beq.n	800086a <EXTI15_10_IRQHandler+0x16e>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 80007a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007a8:	f000 fb0a 	bl	8000dc0 <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 80007ac:	4843      	ldr	r0, [pc, #268]	@ (80008bc <EXTI15_10_IRQHandler+0x1c0>)
 80007ae:	f000 fb17 	bl	8000de0 <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007b2:	4a43      	ldr	r2, [pc, #268]	@ (80008c0 <EXTI15_10_IRQHandler+0x1c4>)
 80007b4:	21be      	movs	r1, #190	@ 0xbe
 80007b6:	201e      	movs	r0, #30
 80007b8:	f000 fbb2 	bl	8000f20 <LCD_DisplayString>
				printf("Starting...\n");
 80007bc:	4840      	ldr	r0, [pc, #256]	@ (80008c0 <EXTI15_10_IRQHandler+0x1c4>)
 80007be:	f007 fc7d 	bl	80080bc <puts>
//				HAL_Delay(200);
				activeScreen = 1;
 80007c2:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <EXTI15_10_IRQHandler+0x1bc>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	801a      	strh	r2, [r3, #0]
				initGame();
 80007c8:	f001 f84e 	bl	8001868 <initGame>
//				HAL_Delay(2);
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fad4 	bl	8000d7c <LCD_Clear>
				showGameScreen();
 80007d4:	f002 fad6 	bl	8002d84 <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007d8:	20ff      	movs	r0, #255	@ 0xff
 80007da:	f000 fd4b 	bl	8001274 <Draw_Arrows_On_Screen>

//				HAL_TIM_Base_Start_IT(& htim2);
//			    HAL_TIM_Base_Start(& htim5);
			    startTimers();
 80007de:	f002 f961 	bl	8002aa4 <startTimers>

			    printf("Started Timers\n");
 80007e2:	4838      	ldr	r0, [pc, #224]	@ (80008c4 <EXTI15_10_IRQHandler+0x1c8>)
 80007e4:	f007 fc6a 	bl	80080bc <puts>
 80007e8:	e03f      	b.n	800086a <EXTI15_10_IRQHandler+0x16e>
			}
		} else if (activeScreen == 1) {
 80007ea:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <EXTI15_10_IRQHandler+0x1bc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d13b      	bne.n	800086a <EXTI15_10_IRQHandler+0x16e>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fac1 	bl	8000d7c <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007fa:	4b2e      	ldr	r3, [pc, #184]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 80007fc:	8818      	ldrh	r0, [r3, #0]
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <EXTI15_10_IRQHandler+0x1b8>)
 8000800:	885b      	ldrh	r3, [r3, #2]
 8000802:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000806:	b299      	uxth	r1, r3
 8000808:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800080c:	22f0      	movs	r2, #240	@ 0xf0
 800080e:	f7ff fed7 	bl	80005c0 <Determine_Touch_Quadrant>
 8000812:	4603      	mov	r3, r0
 8000814:	71bb      	strb	r3, [r7, #6]
			Draw_Arrows_On_Screen(activeArrow);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fd2b 	bl	8001274 <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			if (activeArrow == 2){
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d10e      	bne.n	8000842 <EXTI15_10_IRQHandler+0x146>
				if (tim2CallCounter >= 3){
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <EXTI15_10_IRQHandler+0x1cc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b02      	cmp	r3, #2
 800082c:	d907      	bls.n	800083e <EXTI15_10_IRQHandler+0x142>
					tim2CallCounter = 0;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <EXTI15_10_IRQHandler+0x1cc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <EXTI15_10_IRQHandler+0x1d0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
 800083c:	e001      	b.n	8000842 <EXTI15_10_IRQHandler+0x146>
				} else {
					activeArrow = -1;
 800083e:	23ff      	movs	r3, #255	@ 0xff
 8000840:	71bb      	strb	r3, [r7, #6]
				}

			}
			handleInput(& board, & currentPiece, activeArrow);
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	461a      	mov	r2, r3
 8000846:	4922      	ldr	r1, [pc, #136]	@ (80008d0 <EXTI15_10_IRQHandler+0x1d4>)
 8000848:	4822      	ldr	r0, [pc, #136]	@ (80008d4 <EXTI15_10_IRQHandler+0x1d8>)
 800084a:	f001 f9f7 	bl	8001c3c <handleInput>

			showGameScreen();
 800084e:	f002 fa99 	bl	8002d84 <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 8000852:	79bb      	ldrb	r3, [r7, #6]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fd0d 	bl	8001274 <Draw_Arrows_On_Screen>
 800085a:	e006      	b.n	800086a <EXTI15_10_IRQHandler+0x16e>
		}
	} else {
		/* Touch not pressed */
		if (activeScreen == 1) {
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <EXTI15_10_IRQHandler+0x1bc>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d102      	bne.n	800086a <EXTI15_10_IRQHandler+0x16e>
			Draw_Arrows_On_Screen(-1);
 8000864:	20ff      	movs	r0, #255	@ 0xff
 8000866:	f000 fd05 	bl	8001274 <Draw_Arrows_On_Screen>
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800086a:	2101      	movs	r1, #1
 800086c:	204b      	movs	r0, #75	@ 0x4b
 800086e:	f002 ff05 	bl	800367c <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000872:	2100      	movs	r1, #0
 8000874:	204b      	movs	r0, #75	@ 0x4b
 8000876:	f002 ff01 	bl	800367c <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800087a:	797b      	ldrb	r3, [r7, #5]
 800087c:	4619      	mov	r1, r3
 800087e:	200a      	movs	r0, #10
 8000880:	f000 fba2 	bl	8000fc8 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000884:	2103      	movs	r1, #3
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <EXTI15_10_IRQHandler+0x1dc>)
 8000888:	f003 fbf0 	bl	800406c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800088c:	2028      	movs	r0, #40	@ 0x28
 800088e:	f003 fbde 	bl	800404e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000892:	2028      	movs	r0, #40	@ 0x28
 8000894:	f003 fbb3 	bl	8003ffe <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000898:	793b      	ldrb	r3, [r7, #4]
 800089a:	4619      	mov	r1, r3
 800089c:	200b      	movs	r0, #11
 800089e:	f000 fb93 	bl	8000fc8 <WriteDataToTouchModule>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000029c 	.word	0x2000029c
 80008b0:	20000298 	.word	0x20000298
 80008b4:	20000288 	.word	0x20000288
 80008b8:	20026034 	.word	0x20026034
 80008bc:	20000004 	.word	0x20000004
 80008c0:	08009194 	.word	0x08009194
 80008c4:	080091a0 	.word	0x080091a0
 80008c8:	2002602c 	.word	0x2002602c
 80008cc:	20025f9c 	.word	0x20025f9c
 80008d0:	20025e9c 	.word	0x20025e9c
 80008d4:	20025b7c 	.word	0x20025b7c
 80008d8:	20000290 	.word	0x20000290

080008dc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a59      	ldr	r2, [pc, #356]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 80008ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b57      	ldr	r3, [pc, #348]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b53      	ldr	r3, [pc, #332]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a52      	ldr	r2, [pc, #328]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b50      	ldr	r3, [pc, #320]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a4b      	ldr	r2, [pc, #300]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b49      	ldr	r3, [pc, #292]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b45      	ldr	r3, [pc, #276]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a44      	ldr	r2, [pc, #272]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b42      	ldr	r3, [pc, #264]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b3b      	ldr	r3, [pc, #236]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b37      	ldr	r3, [pc, #220]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a36      	ldr	r2, [pc, #216]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <LCD_GPIO_Init+0x174>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009a6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009aa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80009b8:	230e      	movs	r3, #14
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4824      	ldr	r0, [pc, #144]	@ (8000a54 <LCD_GPIO_Init+0x178>)
 80009c4:	f003 fb6a 	bl	800409c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009c8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009cc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4820      	ldr	r0, [pc, #128]	@ (8000a58 <LCD_GPIO_Init+0x17c>)
 80009d6:	f003 fb61 	bl	800409c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009da:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481d      	ldr	r0, [pc, #116]	@ (8000a5c <LCD_GPIO_Init+0x180>)
 80009e8:	f003 fb58 	bl	800409c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009ec:	2348      	movs	r3, #72	@ 0x48
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <LCD_GPIO_Init+0x184>)
 80009f8:	f003 fb50 	bl	800409c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4816      	ldr	r0, [pc, #88]	@ (8000a64 <LCD_GPIO_Init+0x188>)
 8000a0a:	f003 fb47 	bl	800409c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a0e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000a12:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <LCD_GPIO_Init+0x18c>)
 8000a1c:	f003 fb3e 	bl	800409c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a24:	2309      	movs	r3, #9
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480a      	ldr	r0, [pc, #40]	@ (8000a58 <LCD_GPIO_Init+0x17c>)
 8000a30:	f003 fb34 	bl	800409c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <LCD_GPIO_Init+0x18c>)
 8000a42:	f003 fb2b 	bl	800409c <HAL_GPIO_Init>
}
 8000a46:	bf00      	nop
 8000a48:	3730      	adds	r7, #48	@ 0x30
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40021800 	.word	0x40021800

08000a6c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	@ 0x40
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a7a:	23f0      	movs	r3, #240	@ 0xf0
 8000a7c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a82:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a86:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a8c:	23ff      	movs	r3, #255	@ 0xff
 8000a8e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <LTCD_Layer_Init+0x78>)
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000aa8:	23f0      	movs	r3, #240	@ 0xf0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000aac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <LTCD_Layer_Init+0x7c>)
 8000ace:	f004 fedd 	bl	800588c <HAL_LTDC_ConfigLayer>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ad8:	f000 fa4c 	bl	8000f74 <LCD_Error_Handler>
	}
}
 8000adc:	bf00      	nop
 8000ade:	3740      	adds	r7, #64	@ 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000037c 	.word	0x2000037c
 8000ae8:	200002a0 	.word	0x200002a0

08000aec <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <LTCD__Init+0xb0>)
 8000af2:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <LTCD__Init+0xb4>)
 8000af4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <LTCD__Init+0xb0>)
 8000af8:	2209      	movs	r2, #9
 8000afa:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <LTCD__Init+0xb0>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b04:	221d      	movs	r2, #29
 8000b06:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b10:	f240 120d 	movw	r2, #269	@ 0x10d
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b18:	f240 1243 	movw	r2, #323	@ 0x143
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b20:	f240 1217 	movw	r2, #279	@ 0x117
 8000b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b28:	f240 1247 	movw	r2, #327	@ 0x147
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <LTCD__Init+0xb8>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <LTCD__Init+0xb8>)
 8000b4e:	22c0      	movs	r2, #192	@ 0xc0
 8000b50:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <LTCD__Init+0xb8>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <LTCD__Init+0xb8>)
 8000b5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <LTCD__Init+0xb8>)
 8000b62:	f005 fced 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b7e:	f7ff fead 	bl	80008dc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <LTCD__Init+0xb0>)
 8000b84:	f004 fdb2 	bl	80056ec <HAL_LTDC_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b8e:	f000 f9f1 	bl	8000f74 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b92:	f001 f9b9 	bl	8001f08 <ili9341_Init>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200002a0 	.word	0x200002a0
 8000ba0:	40016800 	.word	0x40016800
 8000ba4:	20000348 	.word	0x20000348

08000ba8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	807b      	strh	r3, [r7, #2]
		HAL_Delay(1);
		drawn = 0;
	}
#endif
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2bef      	cmp	r3, #239	@ 0xef
 8000bbe:	d80f      	bhi.n	8000be0 <LCD_Draw_Pixel+0x38>
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000bc6:	d20b      	bcs.n	8000be0 <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000bc8:	88ba      	ldrh	r2, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4904      	ldr	r1, [pc, #16]	@ (8000bec <LCD_Draw_Pixel+0x44>)
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	2000037c 	.word	0x2000037c

08000bf0 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4623      	mov	r3, r4
 8000c00:	80fb      	strh	r3, [r7, #6]
 8000c02:	4603      	mov	r3, r0
 8000c04:	80bb      	strh	r3, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	807b      	strh	r3, [r7, #2]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	425b      	negs	r3, r3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	81fb      	strh	r3, [r7, #14]
 8000c16:	e034      	b.n	8000c82 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	81bb      	strh	r3, [r7, #12]
 8000c20:	e024      	b.n	8000c6c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c2a:	fb03 f202 	mul.w	r2, r3, r2
 8000c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c32:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c36:	fb01 f303 	mul.w	r3, r1, r3
 8000c3a:	441a      	add	r2, r3
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	8879      	ldrh	r1, [r7, #2]
 8000c40:	fb01 f303 	mul.w	r3, r1, r3
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dc0b      	bgt.n	8000c60 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c48:	89ba      	ldrh	r2, [r7, #12]
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	89fa      	ldrh	r2, [r7, #14]
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	883a      	ldrh	r2, [r7, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f7ff ffa4 	bl	8000ba8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	3301      	adds	r3, #1
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	81bb      	strh	r3, [r7, #12]
 8000c6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	ddd5      	ble.n	8000c22 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	81fb      	strh	r3, [r7, #14]
 8000c82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	ddc5      	ble.n	8000c18 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}

08000c96 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c96:	b590      	push	{r4, r7, lr}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	80fb      	strh	r3, [r7, #6]
 8000ca8:	4603      	mov	r3, r0
 8000caa:	80bb      	strh	r3, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	81fb      	strh	r3, [r7, #14]
 8000cb8:	e01c      	b.n	8000cf4 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	81bb      	strh	r3, [r7, #12]
 8000cbe:	e00b      	b.n	8000cd8 <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000cc0:	89bb      	ldrh	r3, [r7, #12]
 8000cc2:	89f9      	ldrh	r1, [r7, #14]
 8000cc4:	8c3a      	ldrh	r2, [r7, #32]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff6e 	bl	8000ba8 <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000ccc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]
 8000cd8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cdc:	88f9      	ldrh	r1, [r7, #6]
 8000cde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce2:	440b      	add	r3, r1
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbeb      	blt.n	8000cc0 <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	81fb      	strh	r3, [r7, #14]
 8000cf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cf8:	88b9      	ldrh	r1, [r7, #4]
 8000cfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cfe:	440b      	add	r3, r1
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbda      	blt.n	8000cba <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}

08000d0e <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000d0e:	b590      	push	{r4, r7, lr}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4604      	mov	r4, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4611      	mov	r1, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	4603      	mov	r3, r0
 8000d22:	80bb      	strh	r3, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e01a      	b.n	8000d68 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	e010      	b.n	8000d5a <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b298      	uxth	r0, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	88ba      	ldrh	r2, [r7, #4]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	883a      	ldrh	r2, [r7, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f7ff ff2a 	bl	8000ba8 <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	ddea      	ble.n	8000d38 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbe0      	blt.n	8000d32 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
	...

08000d7c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	460a      	mov	r2, r1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10e      	bne.n	8000db0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e007      	b.n	8000da8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d98:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <LCD_Clear+0x40>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000dae:	d3f3      	bcc.n	8000d98 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	2000037c 	.word	0x2000037c

08000dc0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <LCD_SetTextColor+0x1c>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	8013      	strh	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000000 	.word	0x20000000

08000de0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000de8:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <LCD_SetFont+0x1c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000378 	.word	0x20000378

08000e00 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	603a      	str	r2, [r7, #0]
 8000e0a:	80fb      	strh	r3, [r7, #6]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e04c      	b.n	8000eb8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	e03f      	b.n	8000ea4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <LCD_Draw_Char+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	4a27      	ldr	r2, [pc, #156]	@ (8000ed4 <LCD_Draw_Char+0xd4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	409a      	lsls	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	fa42 f303 	asr.w	r3, r2, r3
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <LCD_Draw_Char+0x5c>
 8000e52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <LCD_Draw_Char+0xd0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2b0c      	cmp	r3, #12
 8000e5a:	d920      	bls.n	8000e9e <LCD_Draw_Char+0x9e>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	fa42 f303 	asr.w	r3, r2, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <LCD_Draw_Char+0x80>
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <LCD_Draw_Char+0xd0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	889b      	ldrh	r3, [r3, #4]
 8000e7c:	2b0c      	cmp	r3, #12
 8000e7e:	d80e      	bhi.n	8000e9e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4413      	add	r3, r2
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <LCD_Draw_Char+0xd8>)
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fe85 	bl	8000ba8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <LCD_Draw_Char+0xd0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	889b      	ldrh	r3, [r3, #4]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d3b8      	bcc.n	8000e24 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <LCD_Draw_Char+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	88db      	ldrh	r3, [r3, #6]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d3ab      	bcc.n	8000e1e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000378 	.word	0x20000378
 8000ed4:	aaaaaaab 	.word	0xaaaaaaab
 8000ed8:	20000000 	.word	0x20000000

08000edc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	3b20      	subs	r3, #32
 8000ef2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <LCD_DisplayChar+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <LCD_DisplayChar+0x40>)
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	88c9      	ldrh	r1, [r1, #6]
 8000f02:	fb01 f303 	mul.w	r3, r1, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	441a      	add	r2, r3
 8000f0a:	88b9      	ldrh	r1, [r7, #4]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff76 	bl	8000e00 <LCD_Draw_Char>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000378 	.word	0x20000378

08000f20 <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	e011      	b.n	8000f5e <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	b299      	uxth	r1, r3
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f7ff ffc6 	bl	8000edc <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1e7      	bne.n	8000f3a <LCD_DisplayString+0x1a>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <LCD_Error_Handler+0x8>

08000f80 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f84:	f002 faa2 	bl	80034cc <STMPE811_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d001      	beq.n	8000f92 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f8e:	bf00      	nop
 8000f90:	e7fd      	b.n	8000f8e <InitializeLCDTouch+0xe>
  }
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f002 fb7e 	bl	80036a0 <STMPE811_DetermineTouchPosition>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fb4e 	bl	800365a <STMPE811_Read>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000fd8:	79ba      	ldrb	r2, [r7, #6]
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fb4c 	bl	800367c <STMPE811_Write>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00c      	b.n	800102a <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	b29a      	uxth	r2, r3
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	b299      	uxth	r1, r3
 800101a:	883a      	ldrh	r2, [r7, #0]
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fdc2 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbee      	blt.n	8001010 <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	e01e      	b.n	8001076 <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	b29b      	uxth	r3, r3
 800103c:	88fa      	ldrh	r2, [r7, #6]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b298      	uxth	r0, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	b29a      	uxth	r2, r3
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	883a      	ldrh	r2, [r7, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fdaa 	bl	8000ba8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	b29a      	uxth	r2, r3
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4413      	add	r3, r2
 800105c:	b298      	uxth	r0, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	b29a      	uxth	r2, r3
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	b29b      	uxth	r3, r3
 8001068:	883a      	ldrh	r2, [r7, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd9c 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3301      	adds	r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	085b      	lsrs	r3, r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4293      	cmp	r3, r2
 8001082:	dbd9      	blt.n	8001038 <Draw_Arrow_Up+0x4c>
    }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}

0800108e <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	4604      	mov	r4, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4611      	mov	r1, r2
 800109a:	461a      	mov	r2, r3
 800109c:	4623      	mov	r3, r4
 800109e:	80fb      	strh	r3, [r7, #6]
 80010a0:	4603      	mov	r3, r0
 80010a2:	80bb      	strh	r3, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e00c      	b.n	80010cc <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop - i, color);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	88ba      	ldrh	r2, [r7, #4]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b299      	uxth	r1, r3
 80010bc:	883a      	ldrh	r2, [r7, #0]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fd71 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbee      	blt.n	80010b2 <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	e01e      	b.n	8001118 <Draw_Arrow_Down+0x8a>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i , color); // Left diagonal
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	4413      	add	r3, r2
 80010e2:	b298      	uxth	r0, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	88ba      	ldrh	r2, [r7, #4]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	883a      	ldrh	r2, [r7, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd59 	bl	8000ba8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i, color); // Right diagonal
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b298      	uxth	r0, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	b29b      	uxth	r3, r3
 8001104:	88ba      	ldrh	r2, [r7, #4]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	883a      	ldrh	r2, [r7, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd4b 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4293      	cmp	r3, r2
 8001124:	dbd9      	blt.n	80010da <Draw_Arrow_Down+0x4c>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}

08001130 <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e00c      	b.n	800116e <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	b29a      	uxth	r2, r3
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4413      	add	r3, r2
 800115c:	b29b      	uxth	r3, r3
 800115e:	883a      	ldrh	r2, [r7, #0]
 8001160:	88b9      	ldrh	r1, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd20 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbee      	blt.n	8001154 <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	e01e      	b.n	80011ba <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	b298      	uxth	r0, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	b29b      	uxth	r3, r3
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	883a      	ldrh	r2, [r7, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd08 	bl	8000ba8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	b29a      	uxth	r2, r3
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4413      	add	r3, r2
 80011a0:	b298      	uxth	r0, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	883a      	ldrh	r2, [r7, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fcfa 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	dbd9      	blt.n	800117c <Draw_Arrow_Left+0x4c>
    }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}

080011d2 <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80011d2:	b590      	push	{r4, r7, lr}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4604      	mov	r4, r0
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4623      	mov	r3, r4
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4603      	mov	r3, r0
 80011e6:	80bb      	strh	r3, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e00c      	b.n	8001210 <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	88fa      	ldrh	r2, [r7, #6]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	883a      	ldrh	r2, [r7, #0]
 8001202:	88b9      	ldrh	r1, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fccf 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbee      	blt.n	80011f6 <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	e01e      	b.n	800125c <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	b29b      	uxth	r3, r3
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b298      	uxth	r0, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	b29b      	uxth	r3, r3
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	883a      	ldrh	r2, [r7, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcb7 	bl	8000ba8 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	b29b      	uxth	r3, r3
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b298      	uxth	r0, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	b29a      	uxth	r2, r3
 8001248:	88bb      	ldrh	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	b29b      	uxth	r3, r3
 800124e:	883a      	ldrh	r2, [r7, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fca9 	bl	8000ba8 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3301      	adds	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	085b      	lsrs	r3, r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4293      	cmp	r3, r2
 8001268:	dbd9      	blt.n	800121e <Draw_Arrow_Right+0x4c>
    }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}

08001274 <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <Draw_Arrows_On_Screen+0x16>
 8001284:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001288:	e001      	b.n	800128e <Draw_Arrows_On_Screen+0x1a>
 800128a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128e:	2214      	movs	r2, #20
 8001290:	210a      	movs	r1, #10
 8001292:	2078      	movs	r0, #120	@ 0x78
 8001294:	f7ff feaa 	bl	8000fec <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d102      	bne.n	80012a4 <Draw_Arrows_On_Screen+0x30>
 800129e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012a2:	e001      	b.n	80012a8 <Draw_Arrows_On_Screen+0x34>
 80012a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a8:	2214      	movs	r2, #20
 80012aa:	21a0      	movs	r1, #160	@ 0xa0
 80012ac:	20e6      	movs	r0, #230	@ 0xe6
 80012ae:	f7ff ff90 	bl	80011d2 <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d102      	bne.n	80012be <Draw_Arrows_On_Screen+0x4a>
 80012b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012bc:	e001      	b.n	80012c2 <Draw_Arrows_On_Screen+0x4e>
 80012be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c2:	2214      	movs	r2, #20
 80012c4:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f7ff fee0 	bl	800108e <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d102      	bne.n	80012da <Draw_Arrows_On_Screen+0x66>
 80012d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012d8:	e001      	b.n	80012de <Draw_Arrows_On_Screen+0x6a>
 80012da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012de:	2214      	movs	r2, #20
 80012e0:	21a0      	movs	r1, #160	@ 0xa0
 80012e2:	200a      	movs	r0, #10
 80012e4:	f7ff ff24 	bl	8001130 <Draw_Arrow_Left>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4604      	mov	r4, r0
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	80fb      	strh	r3, [r7, #6]
 8001302:	4603      	mov	r3, r0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
 800130a:	4613      	mov	r3, r2
 800130c:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	4a33      	ldr	r2, [pc, #204]	@ (80013e0 <Draw_Tetris_Block+0xf0>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 800131a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800131e:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001322:	88b9      	ldrh	r1, [r7, #4]
 8001324:	88f8      	ldrh	r0, [r7, #6]
 8001326:	883b      	ldrh	r3, [r7, #0]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4623      	mov	r3, r4
 800132c:	f7ff fcb3 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 8001330:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001334:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001338:	88b9      	ldrh	r1, [r7, #4]
 800133a:	88f8      	ldrh	r0, [r7, #6]
 800133c:	8c3b      	ldrh	r3, [r7, #32]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4623      	mov	r3, r4
 8001342:	f7ff fca8 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 8001346:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800134a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800134e:	88b9      	ldrh	r1, [r7, #4]
 8001350:	88f8      	ldrh	r0, [r7, #6]
 8001352:	8c3b      	ldrh	r3, [r7, #32]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	4623      	mov	r3, r4
 8001358:	f7ff fc9d 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 800135c:	88ba      	ldrh	r2, [r7, #4]
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	4413      	add	r3, r2
 8001362:	b29a      	uxth	r2, r3
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b299      	uxth	r1, r3
 800136a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800136e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001372:	88f8      	ldrh	r0, [r7, #6]
 8001374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4623      	mov	r3, r4
 800137a:	f7ff fc8c 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 800137e:	88fa      	ldrh	r2, [r7, #6]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4413      	add	r3, r2
 8001384:	b29a      	uxth	r2, r3
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b298      	uxth	r0, r3
 800138c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001390:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001394:	88b9      	ldrh	r1, [r7, #4]
 8001396:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4623      	mov	r3, r4
 800139c:	f7ff fc7b 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b299      	uxth	r1, r3
 80013ac:	8c3b      	ldrh	r3, [r7, #32]
 80013ae:	89fa      	ldrh	r2, [r7, #14]
 80013b0:	88f8      	ldrh	r0, [r7, #6]
 80013b2:	f7ff fcac 	bl	8000d0e <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b298      	uxth	r0, r3
 80013c4:	88ba      	ldrh	r2, [r7, #4]
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4413      	add	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b299      	uxth	r1, r3
 80013d0:	8c3b      	ldrh	r3, [r7, #32]
 80013d2:	89fa      	ldrh	r2, [r7, #14]
 80013d4:	f7ff fc9b 	bl	8000d0e <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	aaaaaaab 	.word	0xaaaaaaab

080013e4 <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	@ 0x34
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013f8:	e047      	b.n	800148a <Fill_Tetris_Board+0xa6>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013fe:	e03e      	b.n	800147e <Fill_Tetris_Board+0x9a>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001402:	461a      	mov	r2, r3
 8001404:	0052      	lsls	r2, r2, #1
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	b29a      	uxth	r2, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	4413      	add	r3, r2
 8001410:	b29a      	uxth	r2, r3
 8001412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001414:	4413      	add	r3, r2
 8001416:	82bb      	strh	r3, [r7, #20]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001418:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800141a:	461a      	mov	r2, r3
 800141c:	0052      	lsls	r2, r2, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	b29a      	uxth	r2, r3
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800142c:	4413      	add	r3, r2
 800142e:	827b      	strh	r3, [r7, #18]

            // Get the colors for this position
            int index = board->grid[row][col];
 8001430:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001432:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001444:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d015      	beq.n	8001478 <Fill_Tetris_Board+0x94>
				uint16_t * colors = piceIndexToColors(index-1);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3b01      	subs	r3, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fbe7 	bl	8002c24 <piceIndexToColors>
 8001456:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	881c      	ldrh	r4, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3302      	adds	r3, #2
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	3204      	adds	r2, #4
 8001466:	8812      	ldrh	r2, [r2, #0]
 8001468:	8a79      	ldrh	r1, [r7, #18]
 800146a:	8ab8      	ldrh	r0, [r7, #20]
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4623      	mov	r3, r4
 8001472:	220c      	movs	r2, #12
 8001474:	f7ff ff3c 	bl	80012f0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 8001478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800147e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001480:	2b09      	cmp	r3, #9
 8001482:	d9bd      	bls.n	8001400 <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001484:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001486:	3301      	adds	r3, #1
 8001488:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800148a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800148c:	2b13      	cmp	r3, #19
 800148e:	d9b4      	bls.n	80013fa <Fill_Tetris_Board+0x16>
            }
        }
    }

    // Draw grey squares around the board's borders
    uint16_t greyColor = 0x73AE;
 8001490:	f247 33ae 	movw	r3, #29614	@ 0x73ae
 8001494:	83fb      	strh	r3, [r7, #30]
    uint16_t greyColorHilight = 0x9CD3;
 8001496:	f649 43d3 	movw	r3, #40147	@ 0x9cd3
 800149a:	83bb      	strh	r3, [r7, #28]
    uint16_t greyColorShadow = 0x3186;
 800149c:	f243 1386 	movw	r3, #12678	@ 0x3186
 80014a0:	837b      	strh	r3, [r7, #26]
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80014a6:	e02b      	b.n	8001500 <Fill_Tetris_Board+0x11c>
        uint16_t xPos = startX - BLOCK_SIZE + col * BLOCK_SIZE + col - 1;
 80014a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014aa:	461a      	mov	r2, r3
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b0d      	subs	r3, #13
 80014c2:	82fb      	strh	r3, [r7, #22]

        // Top border
        Draw_Tetris_Block(xPos, startY - BLOCK_SIZE - 1, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	3b0d      	subs	r3, #13
 80014c8:	b299      	uxth	r1, r3
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	8af8      	ldrh	r0, [r7, #22]
 80014ce:	8b7b      	ldrh	r3, [r7, #26]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	8bbb      	ldrh	r3, [r7, #28]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	220c      	movs	r2, #12
 80014da:	f7ff ff09 	bl	80012f0 <Draw_Tetris_Block>

        // Bottom border
        Draw_Tetris_Block(xPos, startY + BOARD_HEIGHT * BLOCK_SIZE + BOARD_HEIGHT, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014de:	883b      	ldrh	r3, [r7, #0]
 80014e0:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80014e4:	b299      	uxth	r1, r3
 80014e6:	8bfa      	ldrh	r2, [r7, #30]
 80014e8:	8af8      	ldrh	r0, [r7, #22]
 80014ea:	8b7b      	ldrh	r3, [r7, #26]
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	8bbb      	ldrh	r3, [r7, #28]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	220c      	movs	r2, #12
 80014f6:	f7ff fefb 	bl	80012f0 <Draw_Tetris_Block>
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 80014fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014fc:	3301      	adds	r3, #1
 80014fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001500:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001502:	2b0b      	cmp	r3, #11
 8001504:	d9d0      	bls.n	80014a8 <Fill_Tetris_Board+0xc4>
    }
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001506:	2300      	movs	r3, #0
 8001508:	843b      	strh	r3, [r7, #32]
 800150a:	e028      	b.n	800155e <Fill_Tetris_Board+0x17a>
        uint16_t yPos = startY + row * BLOCK_SIZE + row;
 800150c:	8c3b      	ldrh	r3, [r7, #32]
 800150e:	461a      	mov	r2, r3
 8001510:	0052      	lsls	r2, r2, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	b29a      	uxth	r2, r3
 8001518:	883b      	ldrh	r3, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	b29a      	uxth	r2, r3
 800151e:	8c3b      	ldrh	r3, [r7, #32]
 8001520:	4413      	add	r3, r2
 8001522:	833b      	strh	r3, [r7, #24]

        // Left border
        Draw_Tetris_Block(startX - BLOCK_SIZE - 1, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	3b0d      	subs	r3, #13
 8001528:	b298      	uxth	r0, r3
 800152a:	8bfa      	ldrh	r2, [r7, #30]
 800152c:	8b39      	ldrh	r1, [r7, #24]
 800152e:	8b7b      	ldrh	r3, [r7, #26]
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	8bbb      	ldrh	r3, [r7, #28]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4613      	mov	r3, r2
 8001538:	220c      	movs	r2, #12
 800153a:	f7ff fed9 	bl	80012f0 <Draw_Tetris_Block>

        // Right border
        Draw_Tetris_Block(startX + BOARD_WIDTH * BLOCK_SIZE + BOARD_WIDTH, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	3382      	adds	r3, #130	@ 0x82
 8001542:	b298      	uxth	r0, r3
 8001544:	8bfa      	ldrh	r2, [r7, #30]
 8001546:	8b39      	ldrh	r1, [r7, #24]
 8001548:	8b7b      	ldrh	r3, [r7, #26]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	8bbb      	ldrh	r3, [r7, #28]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	220c      	movs	r2, #12
 8001554:	f7ff fecc 	bl	80012f0 <Draw_Tetris_Block>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	3301      	adds	r3, #1
 800155c:	843b      	strh	r3, [r7, #32]
 800155e:	8c3b      	ldrh	r3, [r7, #32]
 8001560:	2b13      	cmp	r3, #19
 8001562:	d9d3      	bls.n	800150c <Fill_Tetris_Board+0x128>
    }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	372c      	adds	r7, #44	@ 0x2c
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
	...

08001570 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	460b      	mov	r3, r1
 800157c:	80bb      	strh	r3, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001582:	2300      	movs	r3, #0
 8001584:	82fb      	strh	r3, [r7, #22]
 8001586:	e047      	b.n	8001618 <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001588:	2300      	movs	r3, #0
 800158a:	82bb      	strh	r3, [r7, #20]
 800158c:	e03e      	b.n	800160c <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 800158e:	8abb      	ldrh	r3, [r7, #20]
 8001590:	461a      	mov	r2, r3
 8001592:	0052      	lsls	r2, r2, #1
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	b29a      	uxth	r2, r3
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	8abb      	ldrh	r3, [r7, #20]
 80015a2:	4413      	add	r3, r2
 80015a4:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	461a      	mov	r2, r3
 80015aa:	0052      	lsls	r2, r2, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	4413      	add	r3, r2
 80015bc:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 80015be:	79f9      	ldrb	r1, [r7, #7]
 80015c0:	8afa      	ldrh	r2, [r7, #22]
 80015c2:	8abb      	ldrh	r3, [r7, #20]
 80015c4:	4818      	ldr	r0, [pc, #96]	@ (8001628 <DrawTetrominoByIndex+0xb8>)
 80015c6:	0089      	lsls	r1, r1, #2
 80015c8:	440a      	add	r2, r1
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015d2:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d015      	beq.n	8001606 <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fb20 	bl	8002c24 <piceIndexToColors>
 80015e4:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	881c      	ldrh	r4, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3302      	adds	r3, #2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	3204      	adds	r2, #4
 80015f4:	8812      	ldrh	r2, [r2, #0]
 80015f6:	8a39      	ldrh	r1, [r7, #16]
 80015f8:	8a78      	ldrh	r0, [r7, #18]
 80015fa:	9201      	str	r2, [sp, #4]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4623      	mov	r3, r4
 8001600:	220c      	movs	r2, #12
 8001602:	f7ff fe75 	bl	80012f0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	82bb      	strh	r3, [r7, #20]
 800160c:	8abb      	ldrh	r3, [r7, #20]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d9bd      	bls.n	800158e <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	3301      	adds	r3, #1
 8001616:	82fb      	strh	r3, [r7, #22]
 8001618:	8afb      	ldrh	r3, [r7, #22]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d9b4      	bls.n	8001588 <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	20000010 	.word	0x20000010

0800162c <DrawTetromino>:
void DrawTetromino(Piece * piece, uint16_t startX, uint16_t startY)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 800163c:	2300      	movs	r3, #0
 800163e:	82fb      	strh	r3, [r7, #22]
 8001640:	e044      	b.n	80016cc <DrawTetromino+0xa0>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001642:	2300      	movs	r3, #0
 8001644:	82bb      	strh	r3, [r7, #20]
 8001646:	e03b      	b.n	80016c0 <DrawTetromino+0x94>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001648:	8abb      	ldrh	r3, [r7, #20]
 800164a:	461a      	mov	r2, r3
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	b29a      	uxth	r2, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4413      	add	r3, r2
 8001658:	b29a      	uxth	r2, r3
 800165a:	8abb      	ldrh	r3, [r7, #20]
 800165c:	4413      	add	r3, r2
 800165e:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001660:	8afb      	ldrh	r3, [r7, #22]
 8001662:	461a      	mov	r2, r3
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	b29a      	uxth	r2, r3
 800166c:	883b      	ldrh	r3, [r7, #0]
 800166e:	4413      	add	r3, r2
 8001670:	b29a      	uxth	r2, r3
 8001672:	8afb      	ldrh	r3, [r7, #22]
 8001674:	4413      	add	r3, r2
 8001676:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = piece->matrix[row][col];
 8001678:	8af9      	ldrh	r1, [r7, #22]
 800167a:	8aba      	ldrh	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0089      	lsls	r1, r1, #2
 8001680:	440a      	add	r2, r1
 8001682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001686:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <DrawTetromino+0x8e>
				uint16_t * colors = piceIndexToColors(index-1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fac6 	bl	8002c24 <piceIndexToColors>
 8001698:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	881c      	ldrh	r4, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	3302      	adds	r3, #2
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	3204      	adds	r2, #4
 80016a8:	8812      	ldrh	r2, [r2, #0]
 80016aa:	8a39      	ldrh	r1, [r7, #16]
 80016ac:	8a78      	ldrh	r0, [r7, #18]
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4623      	mov	r3, r4
 80016b4:	220c      	movs	r2, #12
 80016b6:	f7ff fe1b 	bl	80012f0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80016ba:	8abb      	ldrh	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	82bb      	strh	r3, [r7, #20]
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d9c0      	bls.n	8001648 <DrawTetromino+0x1c>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80016c6:	8afb      	ldrh	r3, [r7, #22]
 80016c8:	3301      	adds	r3, #1
 80016ca:	82fb      	strh	r3, [r7, #22]
 80016cc:	8afb      	ldrh	r3, [r7, #22]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d9b7      	bls.n	8001642 <DrawTetromino+0x16>
            }
        }
    }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <LCD_Draw_Rounded_Rectangle_Fill>:

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b085      	sub	sp, #20
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	4604      	mov	r4, r0
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	4623      	mov	r3, r4
 80016ec:	80fb      	strh	r3, [r7, #6]
 80016ee:	4603      	mov	r3, r0
 80016f0:	80bb      	strh	r3, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	807b      	strh	r3, [r7, #2]
 80016f6:	4613      	mov	r3, r2
 80016f8:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	8b3b      	ldrh	r3, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	b298      	uxth	r0, r3
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	8b3b      	ldrh	r3, [r7, #24]
 8001706:	4413      	add	r3, r2
 8001708:	b299      	uxth	r1, r3
 800170a:	8b3b      	ldrh	r3, [r7, #24]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b29b      	uxth	r3, r3
 8001716:	b21c      	sxth	r4, r3
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	883a      	ldrh	r2, [r7, #0]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	b21a      	sxth	r2, r3
 8001726:	8bbb      	ldrh	r3, [r7, #28]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	4622      	mov	r2, r4
 800172e:	f7ff fab2 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	8b3b      	ldrh	r3, [r7, #24]
 8001736:	4413      	add	r3, r2
 8001738:	b298      	uxth	r0, r3
 800173a:	8b3b      	ldrh	r3, [r7, #24]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	887a      	ldrh	r2, [r7, #2]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21a      	sxth	r2, r3
 8001748:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800174c:	88b9      	ldrh	r1, [r7, #4]
 800174e:	8bbb      	ldrh	r3, [r7, #28]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4623      	mov	r3, r4
 8001754:	f7ff fa9f 	bl	8000c96 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	8b3b      	ldrh	r3, [r7, #24]
 800175c:	4413      	add	r3, r2
 800175e:	b298      	uxth	r0, r3
 8001760:	88ba      	ldrh	r2, [r7, #4]
 8001762:	883b      	ldrh	r3, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	b29a      	uxth	r2, r3
 8001768:	8b3b      	ldrh	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b299      	uxth	r1, r3
 800176e:	8b3b      	ldrh	r3, [r7, #24]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	b21a      	sxth	r2, r3
 800177c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	4623      	mov	r3, r4
 8001786:	f7ff fa86 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 800178a:	88ba      	ldrh	r2, [r7, #4]
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	b299      	uxth	r1, r3
 8001792:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001796:	8b3b      	ldrh	r3, [r7, #24]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	883a      	ldrh	r2, [r7, #0]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	88f8      	ldrh	r0, [r7, #6]
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	4622      	mov	r2, r4
 80017ae:	f7ff fa72 	bl	8000c96 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4413      	add	r3, r2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	8b3b      	ldrh	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b298      	uxth	r0, r3
 80017c0:	88ba      	ldrh	r2, [r7, #4]
 80017c2:	8b3b      	ldrh	r3, [r7, #24]
 80017c4:	4413      	add	r3, r2
 80017c6:	b299      	uxth	r1, r3
 80017c8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80017cc:	8b3b      	ldrh	r3, [r7, #24]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b21a      	sxth	r2, r3
 80017da:	8bbb      	ldrh	r3, [r7, #28]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4613      	mov	r3, r2
 80017e0:	4622      	mov	r2, r4
 80017e2:	f7ff fa58 	bl	8000c96 <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	8b3b      	ldrh	r3, [r7, #24]
 80017ea:	4413      	add	r3, r2
 80017ec:	b298      	uxth	r0, r3
 80017ee:	88ba      	ldrh	r2, [r7, #4]
 80017f0:	8b3b      	ldrh	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	b299      	uxth	r1, r3
 80017f6:	8bbb      	ldrh	r3, [r7, #28]
 80017f8:	8b3a      	ldrh	r2, [r7, #24]
 80017fa:	f7ff f9f9 	bl	8000bf0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 80017fe:	88fa      	ldrh	r2, [r7, #6]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4413      	add	r3, r2
 8001804:	b29a      	uxth	r2, r3
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b298      	uxth	r0, r3
 800180c:	88ba      	ldrh	r2, [r7, #4]
 800180e:	8b3b      	ldrh	r3, [r7, #24]
 8001810:	4413      	add	r3, r2
 8001812:	b299      	uxth	r1, r3
 8001814:	8bbb      	ldrh	r3, [r7, #28]
 8001816:	8b3a      	ldrh	r2, [r7, #24]
 8001818:	f7ff f9ea 	bl	8000bf0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	8b3b      	ldrh	r3, [r7, #24]
 8001820:	4413      	add	r3, r2
 8001822:	b298      	uxth	r0, r3
 8001824:	88ba      	ldrh	r2, [r7, #4]
 8001826:	883b      	ldrh	r3, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	b29a      	uxth	r2, r3
 800182c:	8b3b      	ldrh	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b299      	uxth	r1, r3
 8001832:	8bbb      	ldrh	r3, [r7, #28]
 8001834:	8b3a      	ldrh	r2, [r7, #24]
 8001836:	f7ff f9db 	bl	8000bf0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	4413      	add	r3, r2
 8001840:	b29a      	uxth	r2, r3
 8001842:	8b3b      	ldrh	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b298      	uxth	r0, r3
 8001848:	88ba      	ldrh	r2, [r7, #4]
 800184a:	883b      	ldrh	r3, [r7, #0]
 800184c:	4413      	add	r3, r2
 800184e:	b29a      	uxth	r2, r3
 8001850:	8b3b      	ldrh	r3, [r7, #24]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b299      	uxth	r1, r3
 8001856:	8bbb      	ldrh	r3, [r7, #28]
 8001858:	8b3a      	ldrh	r2, [r7, #24]
 800185a:	f7ff f9c9 	bl	8000bf0 <LCD_Draw_Circle_Fill>
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
	...

08001868 <initGame>:
Board board;
Piece currentPiece;
Piece nextPiece;
uint32_t pointsScored;

void initGame() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 800186c:	4806      	ldr	r0, [pc, #24]	@ (8001888 <initGame+0x20>)
 800186e:	f000 fa63 	bl	8001d38 <initializeBoard>
	initializeRandomPiece(& currentPiece);
 8001872:	4806      	ldr	r0, [pc, #24]	@ (800188c <initGame+0x24>)
 8001874:	f001 f992 	bl	8002b9c <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <initGame+0x28>)
 800187a:	f001 f98f 	bl	8002b9c <initializeRandomPiece>
	pointsScored = 0;
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <initGame+0x2c>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20025b7c 	.word	0x20025b7c
 800188c:	20025e9c 	.word	0x20025e9c
 8001890:	20025ee4 	.word	0x20025ee4
 8001894:	20025f2c 	.word	0x20025f2c

08001898 <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
    piece->y++;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f921 	bl	8001af6 <collision>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <movePieceDown+0x38>
        piece->y--;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44
        lockPiece(board, piece);
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f81a 	bl	8001900 <lockPiece>
        return false;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <movePieceDown+0x3a>
    }
    return true;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <dropPiece>:
void dropPiece(Board *board, Piece *piece) {
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 80018e4:	bf00      	nop
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffd5 	bl	8001898 <movePieceDown>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f8      	bne.n	80018e6 <dropPiece+0xc>
    }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e03b      	b.n	8001988 <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e032      	b.n	800197c <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	0091      	lsls	r1, r2, #2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	440a      	add	r2, r1
 8001920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d026      	beq.n	8001976 <lockPiece+0x76>
                int x = piece->x + j;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db19      	blt.n	8001976 <lockPiece+0x76>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b13      	cmp	r3, #19
 8001946:	dc16      	bgt.n	8001976 <lockPiece+0x76>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db13      	blt.n	8001976 <lockPiece+0x76>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b09      	cmp	r3, #9
 8001952:	dc10      	bgt.n	8001976 <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	0091      	lsls	r1, r2, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	440a      	add	r2, r1
 800195e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b03      	cmp	r3, #3
 8001980:	ddc9      	ble.n	8001916 <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b03      	cmp	r3, #3
 800198c:	ddc0      	ble.n	8001910 <lockPiece+0x10>
                }
            }
        }
    }

    if (isGameOver(board)){
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f9b6 	bl	8001d00 <isGameOver>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <lockPiece+0xa2>
    	showEndScreen();
 800199a:	f001 fa2f 	bl	8002dfc <showEndScreen>
    	Error_Handler();
 800199e:	f001 f8f7 	bl	8002b90 <Error_Handler>
    }


    currentPiece = nextPiece;
 80019a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <lockPiece+0x114>)
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <lockPiece+0x118>)
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	2348      	movs	r3, #72	@ 0x48
 80019ac:	461a      	mov	r2, r3
 80019ae:	f006 fd14 	bl	80083da <memcpy>
    initializeRandomPiece( & nextPiece);
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <lockPiece+0x118>)
 80019b4:	f001 f8f2 	bl	8002b9c <initializeRandomPiece>
    switch (clearCompletedRows(board)){
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f831 	bl	8001a20 <clearCompletedRows>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d823      	bhi.n	8001a0c <lockPiece+0x10c>
 80019c4:	a201      	add	r2, pc, #4	@ (adr r2, 80019cc <lockPiece+0xcc>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	08001a0b 	.word	0x08001a0b
 80019d0:	08001a01 	.word	0x08001a01
 80019d4:	080019f7 	.word	0x080019f7
 80019d8:	080019ed 	.word	0x080019ed
 80019dc:	080019e1 	.word	0x080019e1
		case 4:
			pointsScored+=300;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <lockPiece+0x11c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <lockPiece+0x11c>)
 80019ea:	6013      	str	r3, [r2, #0]
		case 3:
			pointsScored+=200;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <lockPiece+0x11c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	33c8      	adds	r3, #200	@ 0xc8
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <lockPiece+0x11c>)
 80019f4:	6013      	str	r3, [r2, #0]
		case 2:
			pointsScored+=200;
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <lockPiece+0x11c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	33c8      	adds	r3, #200	@ 0xc8
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <lockPiece+0x11c>)
 80019fe:	6013      	str	r3, [r2, #0]
		case 1:
			pointsScored+=100;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <lockPiece+0x11c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3364      	adds	r3, #100	@ 0x64
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <lockPiece+0x11c>)
 8001a08:	6013      	str	r3, [r2, #0]
		case 0:
			break;
 8001a0a:	bf00      	nop
    }
}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20025e9c 	.word	0x20025e9c
 8001a18:	20025ee4 	.word	0x20025ee4
 8001a1c:	20025f2c 	.word	0x20025f2c

08001a20 <clearCompletedRows>:
uint16_t clearCompletedRows(Board *board) {
 8001a20:	b480      	push	{r7}
 8001a22:	b08b      	sub	sp, #44	@ 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint16_t clearedRows = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	e057      	b.n	8001ae2 <clearCompletedRows+0xc2>
        int isComplete = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e011      	b.n	8001a60 <clearCompletedRows+0x40>
            if (board->grid[i][j] == 0) {
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <clearCompletedRows+0x3a>
                isComplete = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
                break;
 8001a58:	e005      	b.n	8001a66 <clearCompletedRows+0x46>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	ddea      	ble.n	8001a3c <clearCompletedRows+0x1c>
            }
        }

        if (isComplete) {
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d037      	beq.n	8001adc <clearCompletedRows+0xbc>
            clearedRows++;
 8001a6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a6e:	3301      	adds	r3, #1
 8001a70:	84fb      	strh	r3, [r7, #38]	@ 0x26
            for (int k = i; k > 0; k--) {
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e020      	b.n	8001aba <clearCompletedRows+0x9a>
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e017      	b.n	8001aae <clearCompletedRows+0x8e>
                    board->grid[k][j] = board->grid[k - 1][j];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	dde4      	ble.n	8001a7e <clearCompletedRows+0x5e>
            for (int k = i; k > 0; k--) {
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dcdb      	bgt.n	8001a78 <clearCompletedRows+0x58>
                }
            }

            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e007      	b.n	8001ad6 <clearCompletedRows+0xb6>
                board->grid[0][j] = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	2100      	movs	r1, #0
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	ddf4      	ble.n	8001ac6 <clearCompletedRows+0xa6>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2b13      	cmp	r3, #19
 8001ae6:	dda4      	ble.n	8001a32 <clearCompletedRows+0x12>
            }
        }
    }
    return clearedRows;
 8001ae8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	372c      	adds	r7, #44	@ 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <collision>:

bool collision(Board *board, Piece *piece) {
 8001af6:	b480      	push	{r7}
 8001af8:	b087      	sub	sp, #28
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e03a      	b.n	8001b7c <collision+0x86>
        for (int j = 0; j < 4; j++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e031      	b.n	8001b70 <collision+0x7a>
            if (piece->matrix[i][j]) {
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	0091      	lsls	r1, r2, #2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	440a      	add	r2, r1
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d025      	beq.n	8001b6a <collision+0x74>
                int x = piece->x + j;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db05      	blt.n	8001b44 <collision+0x4e>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	dc02      	bgt.n	8001b44 <collision+0x4e>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b13      	cmp	r3, #19
 8001b42:	dd01      	ble.n	8001b48 <collision+0x52>
                    return true;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e01d      	b.n	8001b84 <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0d      	blt.n	8001b6a <collision+0x74>
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <collision+0x74>
                    return true;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00c      	b.n	8001b84 <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	ddca      	ble.n	8001b0c <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	ddc1      	ble.n	8001b06 <collision+0x10>
                }
            }
        }
    }
    return false;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <rotatePiece>:

void rotatePiece(Piece *piece) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b096      	sub	sp, #88	@ 0x58
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2240      	movs	r2, #64	@ 0x40
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 fb9f 	bl	80082e4 <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001baa:	e01d      	b.n	8001be8 <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bb0:	e014      	b.n	8001bdc <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	f1c3 0303 	rsb	r3, r3, #3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bbc:	0088      	lsls	r0, r1, #2
 8001bbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001bc0:	4401      	add	r1, r0
 8001bc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001bc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001bc8:	0089      	lsls	r1, r1, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3358      	adds	r3, #88	@ 0x58
 8001bd0:	443b      	add	r3, r7
 8001bd2:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 8001bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd8:	3301      	adds	r3, #1
 8001bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	dde7      	ble.n	8001bb2 <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	3301      	adds	r3, #1
 8001be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	ddde      	ble.n	8001bac <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf2:	e01b      	b.n	8001c2c <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bf8:	e012      	b.n	8001c20 <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bfc:	009a      	lsls	r2, r3, #2
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	3358      	adds	r3, #88	@ 0x58
 8001c06:	443b      	add	r3, r7
 8001c08:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c10:	0090      	lsls	r0, r2, #2
 8001c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c14:	4402      	add	r2, r0
 8001c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	dde9      	ble.n	8001bfa <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c28:	3301      	adds	r3, #1
 8001c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	dde0      	ble.n	8001bf4 <rotatePiece+0x64>
        }
    }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3758      	adds	r7, #88	@ 0x58
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d83b      	bhi.n	8001cc8 <handleInput+0x8c>
 8001c50:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <handleInput+0x1c>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c85 	.word	0x08001c85
 8001c5c:	08001c79 	.word	0x08001c79
 8001c60:	08001cb3 	.word	0x08001cb3
 8001c64:	08001c6d 	.word	0x08001c6d
 8001c68:	08001cbd 	.word	0x08001cbd
        case 3: // Move left
            piece->x--;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c76:	e027      	b.n	8001cc8 <handleInput+0x8c>
        case 1: // Move right
            piece->x++;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c82:	e021      	b.n	8001cc8 <handleInput+0x8c>
        case 0: // Rotate
            rotatePiece(piece);
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f7ff ff83 	bl	8001b90 <rotatePiece>
            if (collision(board, piece)) {
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff ff32 	bl	8001af6 <collision>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d016      	beq.n	8001cc6 <handleInput+0x8a>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e005      	b.n	8001caa <handleInput+0x6e>
                    rotatePiece(piece);
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7ff ff76 	bl	8001b90 <rotatePiece>
                for (int i = 0; i < 3; i++) {
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	ddf6      	ble.n	8001c9e <handleInput+0x62>
                }
            }
            break;
 8001cb0:	e009      	b.n	8001cc6 <handleInput+0x8a>
        case 2: // Soft drop
        	movePieceDown(board, piece);
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fdef 	bl	8001898 <movePieceDown>
            break;
 8001cba:	e005      	b.n	8001cc8 <handleInput+0x8c>
        case 4: // Hard drop
            dropPiece(board, piece);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fe0b 	bl	80018da <dropPiece>
            break;
 8001cc4:	e000      	b.n	8001cc8 <handleInput+0x8c>
            break;
 8001cc6:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ff13 	bl	8001af6 <collision>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <handleInput+0xbc>
        switch (command) {
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d007      	beq.n	8001cec <handleInput+0xb0>
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d10b      	bne.n	8001cf8 <handleInput+0xbc>
            case 3: piece->x++; break;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cea:	e005      	b.n	8001cf8 <handleInput+0xbc>
            case 1: piece->x--; break;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf6:	bf00      	nop
        }
    }
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <isGameOver>:

bool isGameOver(Board *board) {
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e00a      	b.n	8001d24 <isGameOver+0x24>
        if (board->grid[0][i] != 0) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <isGameOver+0x1e>
            return true;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e006      	b.n	8001d2c <isGameOver+0x2c>
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b09      	cmp	r3, #9
 8001d28:	ddf1      	ble.n	8001d0e <isGameOver+0xe>
        }
    }
    return false;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e016      	b.n	8001d74 <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	e00d      	b.n	8001d68 <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b09      	cmp	r3, #9
 8001d6c:	ddee      	ble.n	8001d4c <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b13      	cmp	r3, #19
 8001d78:	dde5      	ble.n	8001d46 <initializeBoard+0xe>
        }
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <boardWithPiece>:

Board boardWithPiece(Board *board, Piece *piece) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d94:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001d98:	6018      	str	r0, [r3, #0]
 8001d9a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d9e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001da2:	6019      	str	r1, [r3, #0]
 8001da4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001da8:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001dac:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001db4:	e030      	b.n	8001e18 <boardWithPiece+0x90>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001dbc:	e023      	b.n	8001e06 <boardWithPiece+0x7e>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001dbe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001dc2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001dd8:	4413      	add	r3, r2
 8001dda:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001dde:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001de2:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001de6:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001df6:	4413      	add	r3, r2
 8001df8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001dfc:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001e00:	3301      	adds	r3, #1
 8001e02:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001e06:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	ddd7      	ble.n	8001dbe <boardWithPiece+0x36>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001e0e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001e12:	3301      	adds	r3, #1
 8001e14:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001e18:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001e1c:	2b13      	cmp	r3, #19
 8001e1e:	ddca      	ble.n	8001db6 <boardWithPiece+0x2e>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e26:	e052      	b.n	8001ece <boardWithPiece+0x146>
        for (int pj = 0; pj < 4; pj++) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e2e:	e045      	b.n	8001ebc <boardWithPiece+0x134>
            int px = piece->x + pj;
 8001e30:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e34:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e40:	4413      	add	r3, r2
 8001e42:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int py = piece->y + pi;
 8001e46:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e4a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e56:	4413      	add	r3, r2
 8001e58:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001e5c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e60:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e6a:	0091      	lsls	r1, r2, #2
 8001e6c:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e70:	440a      	add	r2, r1
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01b      	beq.n	8001eb2 <boardWithPiece+0x12a>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001e7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e7e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e88:	0091      	lsls	r1, r2, #2
 8001e8a:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e8e:	440a      	add	r2, r1
 8001e90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e94:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e98:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001e9c:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001eac:	4413      	add	r3, r2
 8001eae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001eb2:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001ebc:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	ddb5      	ble.n	8001e30 <boardWithPiece+0xa8>
    for (int pi = 0; pi < 4; pi++) {
 8001ec4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001ece:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	dda8      	ble.n	8001e28 <boardWithPiece+0xa0>
//            }
        }
    }

    return tempBoard;
 8001ed6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001eda:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ee4:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f006 fa72 	bl	80083da <memcpy>
}
 8001ef6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001efa:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f0c:	f000 f9fe 	bl	800230c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f10:	20ca      	movs	r0, #202	@ 0xca
 8001f12:	f000 f943 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f16:	20c3      	movs	r0, #195	@ 0xc3
 8001f18:	f000 f94d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f1c:	2008      	movs	r0, #8
 8001f1e:	f000 f94a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f22:	2050      	movs	r0, #80	@ 0x50
 8001f24:	f000 f947 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f28:	20cf      	movs	r0, #207	@ 0xcf
 8001f2a:	f000 f937 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f941 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f34:	20c1      	movs	r0, #193	@ 0xc1
 8001f36:	f000 f93e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f3a:	2030      	movs	r0, #48	@ 0x30
 8001f3c:	f000 f93b 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f40:	20ed      	movs	r0, #237	@ 0xed
 8001f42:	f000 f92b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f46:	2064      	movs	r0, #100	@ 0x64
 8001f48:	f000 f935 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f932 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f52:	2012      	movs	r0, #18
 8001f54:	f000 f92f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f58:	2081      	movs	r0, #129	@ 0x81
 8001f5a:	f000 f92c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f5e:	20e8      	movs	r0, #232	@ 0xe8
 8001f60:	f000 f91c 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f64:	2085      	movs	r0, #133	@ 0x85
 8001f66:	f000 f926 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f923 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f70:	2078      	movs	r0, #120	@ 0x78
 8001f72:	f000 f920 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f76:	20cb      	movs	r0, #203	@ 0xcb
 8001f78:	f000 f910 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f7c:	2039      	movs	r0, #57	@ 0x39
 8001f7e:	f000 f91a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f82:	202c      	movs	r0, #44	@ 0x2c
 8001f84:	f000 f917 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f914 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f8e:	2034      	movs	r0, #52	@ 0x34
 8001f90:	f000 f911 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f000 f90e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f9a:	20f7      	movs	r0, #247	@ 0xf7
 8001f9c:	f000 f8fe 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001fa0:	2020      	movs	r0, #32
 8001fa2:	f000 f908 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001fa6:	20ea      	movs	r0, #234	@ 0xea
 8001fa8:	f000 f8f8 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 f902 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f8ff 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001fb8:	20b1      	movs	r0, #177	@ 0xb1
 8001fba:	f000 f8ef 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f8f9 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fc4:	201b      	movs	r0, #27
 8001fc6:	f000 f8f6 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fca:	20b6      	movs	r0, #182	@ 0xb6
 8001fcc:	f000 f8e6 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fd0:	200a      	movs	r0, #10
 8001fd2:	f000 f8f0 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fd6:	20a2      	movs	r0, #162	@ 0xa2
 8001fd8:	f000 f8ed 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fdc:	20c0      	movs	r0, #192	@ 0xc0
 8001fde:	f000 f8dd 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fe2:	2010      	movs	r0, #16
 8001fe4:	f000 f8e7 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fe8:	20c1      	movs	r0, #193	@ 0xc1
 8001fea:	f000 f8d7 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f000 f8e1 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ff4:	20c5      	movs	r0, #197	@ 0xc5
 8001ff6:	f000 f8d1 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ffa:	2045      	movs	r0, #69	@ 0x45
 8001ffc:	f000 f8db 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002000:	2015      	movs	r0, #21
 8002002:	f000 f8d8 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002006:	20c7      	movs	r0, #199	@ 0xc7
 8002008:	f000 f8c8 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800200c:	2090      	movs	r0, #144	@ 0x90
 800200e:	f000 f8d2 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002012:	2036      	movs	r0, #54	@ 0x36
 8002014:	f000 f8c2 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002018:	20c8      	movs	r0, #200	@ 0xc8
 800201a:	f000 f8cc 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800201e:	20f2      	movs	r0, #242	@ 0xf2
 8002020:	f000 f8bc 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f8c6 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800202a:	20b0      	movs	r0, #176	@ 0xb0
 800202c:	f000 f8b6 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002030:	20c2      	movs	r0, #194	@ 0xc2
 8002032:	f000 f8c0 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002036:	20b6      	movs	r0, #182	@ 0xb6
 8002038:	f000 f8b0 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 f8ba 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002042:	20a7      	movs	r0, #167	@ 0xa7
 8002044:	f000 f8b7 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002048:	2027      	movs	r0, #39	@ 0x27
 800204a:	f000 f8b4 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800204e:	2004      	movs	r0, #4
 8002050:	f000 f8b1 	bl	80021b6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002054:	202a      	movs	r0, #42	@ 0x2a
 8002056:	f000 f8a1 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f8ab 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002060:	2000      	movs	r0, #0
 8002062:	f000 f8a8 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f000 f8a5 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800206c:	20ef      	movs	r0, #239	@ 0xef
 800206e:	f000 f8a2 	bl	80021b6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002072:	202b      	movs	r0, #43	@ 0x2b
 8002074:	f000 f892 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f89c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f000 f899 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002084:	2001      	movs	r0, #1
 8002086:	f000 f896 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800208a:	203f      	movs	r0, #63	@ 0x3f
 800208c:	f000 f893 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002090:	20f6      	movs	r0, #246	@ 0xf6
 8002092:	f000 f883 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 f88d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800209c:	2000      	movs	r0, #0
 800209e:	f000 f88a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80020a2:	2006      	movs	r0, #6
 80020a4:	f000 f887 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80020a8:	202c      	movs	r0, #44	@ 0x2c
 80020aa:	f000 f877 	bl	800219c <ili9341_Write_Reg>
  LCD_Delay(200);
 80020ae:	20c8      	movs	r0, #200	@ 0xc8
 80020b0:	f000 f9e8 	bl	8002484 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80020b4:	2026      	movs	r0, #38	@ 0x26
 80020b6:	f000 f871 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 f87b 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020c0:	20e0      	movs	r0, #224	@ 0xe0
 80020c2:	f000 f86b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f875 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020cc:	2029      	movs	r0, #41	@ 0x29
 80020ce:	f000 f872 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020d2:	2024      	movs	r0, #36	@ 0x24
 80020d4:	f000 f86f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020d8:	200c      	movs	r0, #12
 80020da:	f000 f86c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020de:	200e      	movs	r0, #14
 80020e0:	f000 f869 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020e4:	2009      	movs	r0, #9
 80020e6:	f000 f866 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020ea:	204e      	movs	r0, #78	@ 0x4e
 80020ec:	f000 f863 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020f0:	2078      	movs	r0, #120	@ 0x78
 80020f2:	f000 f860 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020f6:	203c      	movs	r0, #60	@ 0x3c
 80020f8:	f000 f85d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020fc:	2009      	movs	r0, #9
 80020fe:	f000 f85a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002102:	2013      	movs	r0, #19
 8002104:	f000 f857 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002108:	2005      	movs	r0, #5
 800210a:	f000 f854 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800210e:	2017      	movs	r0, #23
 8002110:	f000 f851 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002114:	2011      	movs	r0, #17
 8002116:	f000 f84e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f84b 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002120:	20e1      	movs	r0, #225	@ 0xe1
 8002122:	f000 f83b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f845 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800212c:	2016      	movs	r0, #22
 800212e:	f000 f842 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002132:	201b      	movs	r0, #27
 8002134:	f000 f83f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002138:	2004      	movs	r0, #4
 800213a:	f000 f83c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800213e:	2011      	movs	r0, #17
 8002140:	f000 f839 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002144:	2007      	movs	r0, #7
 8002146:	f000 f836 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800214a:	2031      	movs	r0, #49	@ 0x31
 800214c:	f000 f833 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002150:	2033      	movs	r0, #51	@ 0x33
 8002152:	f000 f830 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002156:	2042      	movs	r0, #66	@ 0x42
 8002158:	f000 f82d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800215c:	2005      	movs	r0, #5
 800215e:	f000 f82a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002162:	200c      	movs	r0, #12
 8002164:	f000 f827 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002168:	200a      	movs	r0, #10
 800216a:	f000 f824 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800216e:	2028      	movs	r0, #40	@ 0x28
 8002170:	f000 f821 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002174:	202f      	movs	r0, #47	@ 0x2f
 8002176:	f000 f81e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f81b 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002180:	2011      	movs	r0, #17
 8002182:	f000 f80b 	bl	800219c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002186:	20c8      	movs	r0, #200	@ 0xc8
 8002188:	f000 f97c 	bl	8002484 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800218c:	2029      	movs	r0, #41	@ 0x29
 800218e:	f000 f805 	bl	800219c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002192:	202c      	movs	r0, #44	@ 0x2c
 8002194:	f000 f802 	bl	800219c <ili9341_Write_Reg>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f949 	bl	8002440 <LCD_IO_WriteReg>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f91a 	bl	80023fc <LCD_IO_WriteData>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021d4:	4819      	ldr	r0, [pc, #100]	@ (800223c <SPI_Init+0x6c>)
 80021d6:	f004 fde8 	bl	8006daa <HAL_SPI_GetState>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d12b      	bne.n	8002238 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <SPI_Init+0x6c>)
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <SPI_Init+0x70>)
 80021e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <SPI_Init+0x6c>)
 80021e8:	2218      	movs	r2, #24
 80021ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <SPI_Init+0x6c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <SPI_Init+0x6c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <SPI_Init+0x6c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <SPI_Init+0x6c>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <SPI_Init+0x6c>)
 8002206:	2207      	movs	r2, #7
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <SPI_Init+0x6c>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <SPI_Init+0x6c>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <SPI_Init+0x6c>)
 8002218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <SPI_Init+0x6c>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <SPI_Init+0x6c>)
 8002226:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800222a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <SPI_Init+0x6c>)
 800222e:	f000 f833 	bl	8002298 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002232:	4802      	ldr	r0, [pc, #8]	@ (800223c <SPI_Init+0x6c>)
 8002234:	f004 fbc4 	bl	80069c0 <HAL_SPI_Init>
  }
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20025f30 	.word	0x20025f30
 8002240:	40015000 	.word	0x40015000

08002244 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <SPI_Write+0x34>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1db9      	adds	r1, r7, #6
 8002258:	2201      	movs	r2, #1
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <SPI_Write+0x38>)
 800225c:	f004 fc61 	bl	8006b22 <HAL_SPI_Transmit>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800226a:	f000 f809 	bl	8002280 <SPI_Error>
  }
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20025f30 	.word	0x20025f30

08002280 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SPI_Error+0x14>)
 8002286:	f004 fc24 	bl	8006ad2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800228a:	f7ff ffa1 	bl	80021d0 <SPI_Init>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20025f30 	.word	0x20025f30

08002298 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <SPI_MspInit+0x6c>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <SPI_MspInit+0x6c>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <SPI_MspInit+0x6c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c6:	f043 0320 	orr.w	r3, r3, #32
 80022ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <SPI_MspInit+0x6c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022d8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ea:	2305      	movs	r3, #5
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <SPI_MspInit+0x70>)
 80022f6:	f001 fed1 	bl	800409c <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40021400 	.word	0x40021400

0800230c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002312:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <LCD_IO_Init+0xe0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d164      	bne.n	80023e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <LCD_IO_Init+0xe0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	4a31      	ldr	r2, [pc, #196]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800233c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002356:	f001 fea1 	bl	800409c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002390:	f001 fe84 	bl	800409c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <LCD_IO_Init+0xe4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80023b0:	2304      	movs	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023c8:	f001 fe68 	bl	800409c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023cc:	2200      	movs	r2, #0
 80023ce:	2104      	movs	r1, #4
 80023d0:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023d2:	f002 f91b 	bl	800460c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023d6:	2201      	movs	r2, #1
 80023d8:	2104      	movs	r1, #4
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023dc:	f002 f916 	bl	800460c <HAL_GPIO_WritePin>

    SPI_Init();
 80023e0:	f7ff fef6 	bl	80021d0 <SPI_Init>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20025f88 	.word	0x20025f88
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40020800 	.word	0x40020800

080023fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <LCD_IO_WriteData+0x3c>)
 800240e:	f002 f8fd 	bl	800460c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002412:	2200      	movs	r2, #0
 8002414:	2104      	movs	r1, #4
 8002416:	4809      	ldr	r0, [pc, #36]	@ (800243c <LCD_IO_WriteData+0x40>)
 8002418:	f002 f8f8 	bl	800460c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff10 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002424:	2201      	movs	r2, #1
 8002426:	2104      	movs	r1, #4
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <LCD_IO_WriteData+0x40>)
 800242a:	f002 f8ef 	bl	800460c <HAL_GPIO_WritePin>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40020800 	.word	0x40020800

08002440 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002450:	480a      	ldr	r0, [pc, #40]	@ (800247c <LCD_IO_WriteReg+0x3c>)
 8002452:	f002 f8db 	bl	800460c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	4809      	ldr	r0, [pc, #36]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 800245c:	f002 f8d6 	bl	800460c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff feed 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800246a:	2201      	movs	r2, #1
 800246c:	2104      	movs	r1, #4
 800246e:	4804      	ldr	r0, [pc, #16]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 8002470:	f002 f8cc 	bl	800460c <HAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40020800 	.word	0x40020800

08002484 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f001 fc59 	bl	8003d44 <HAL_Delay>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80024a0:	f005 fc64 	bl	8007d6c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a4:	f001 fbdc 	bl	8003c60 <HAL_Init>
  /* USER CODE BEGIN Init */
//#ifdef DONTDEFINE
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a8:	f000 f81e 	bl	80024e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
//#endif
  ApplicationInit(); // Initializes the LCD functionality
 80024ac:	f7fe f870 	bl	8000590 <ApplicationInit>
  showStartScreen();
 80024b0:	f000 fbdc 	bl	8002c6c <showStartScreen>
  MX_TIM5_Init();
  MX_TIM2_Init();
  MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 80024b4:	f000 f932 	bl	800271c <MX_GPIO_Init>
  MX_RNG_Init();
 80024b8:	f000 f880 	bl	80025bc <MX_RNG_Init>
  MX_TIM5_Init();
 80024bc:	f000 f8e0 	bl	8002680 <MX_TIM5_Init>
  MX_TIM2_Init();
 80024c0:	f000 f890 	bl	80025e4 <MX_TIM2_Init>

//  HAL_TIM_Base_Start_IT(& htim2);
//  HAL_TIM_Base_Start(& htim5);

  ApplicationInit(); // Initializes the LCD functionality
 80024c4:	f7fe f864 	bl	8000590 <ApplicationInit>

//  printf("Hi!\n");

HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024cc:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <main+0x48>)
 80024ce:	f002 f8b6 	bl	800463e <HAL_GPIO_TogglePin>


  showStartScreen();
 80024d2:	f000 fbcb 	bl	8002c6c <showStartScreen>

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024da:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <main+0x48>)
 80024dc:	f002 f8af 	bl	800463e <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <main+0x44>
 80024e4:	40021800 	.word	0x40021800

080024e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b094      	sub	sp, #80	@ 0x50
 80024ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ee:	f107 0320 	add.w	r3, r7, #32
 80024f2:	2230      	movs	r2, #48	@ 0x30
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 fef4 	bl	80082e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <SystemClock_Config+0xcc>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	4a27      	ldr	r2, [pc, #156]	@ (80025b4 <SystemClock_Config+0xcc>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6413      	str	r3, [r2, #64]	@ 0x40
 800251c:	4b25      	ldr	r3, [pc, #148]	@ (80025b4 <SystemClock_Config+0xcc>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <SystemClock_Config+0xd0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <SystemClock_Config+0xd0>)
 8002532:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <SystemClock_Config+0xd0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002544:	2301      	movs	r3, #1
 8002546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254e:	2302      	movs	r3, #2
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002552:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002558:	2308      	movs	r3, #8
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 335;
 800255c:	f240 134f 	movw	r3, #335	@ 0x14f
 8002560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002562:	2302      	movs	r3, #2
 8002564:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002566:	2307      	movs	r3, #7
 8002568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256a:	f107 0320 	add.w	r3, r7, #32
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fb62 	bl	8005c38 <HAL_RCC_OscConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800257a:	f000 fb09 	bl	8002b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257e:	230f      	movs	r3, #15
 8002580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002582:	2302      	movs	r3, #2
 8002584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800258a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800258e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2105      	movs	r1, #5
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fdc3 	bl	8006128 <HAL_RCC_ClockConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025a8:	f000 faf2 	bl	8002b90 <Error_Handler>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3750      	adds	r7, #80	@ 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000

080025bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <MX_RNG_Init+0x20>)
 80025c2:	4a07      	ldr	r2, [pc, #28]	@ (80025e0 <MX_RNG_Init+0x24>)
 80025c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	@ (80025dc <MX_RNG_Init+0x20>)
 80025c8:	f004 f97a 	bl	80068c0 <HAL_RNG_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025d2:	f000 fadd 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20025f8c 	.word	0x20025f8c
 80025e0:	50060800 	.word	0x50060800

080025e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002600:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <MX_TIM2_Init+0x98>)
 8002602:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16750 - 1;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <MX_TIM2_Init+0x98>)
 800260a:	f244 126d 	movw	r2, #16749	@ 0x416d
 800260e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <MX_TIM2_Init+0x98>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (500) - 1;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_TIM2_Init+0x98>)
 8002618:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800261c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <MX_TIM2_Init+0x98>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b15      	ldr	r3, [pc, #84]	@ (800267c <MX_TIM2_Init+0x98>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800262a:	4814      	ldr	r0, [pc, #80]	@ (800267c <MX_TIM2_Init+0x98>)
 800262c:	f004 fca8 	bl	8006f80 <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002636:	f000 faab 	bl	8002b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	4619      	mov	r1, r3
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_TIM2_Init+0x98>)
 8002648:	f004 feb2 	bl	80073b0 <HAL_TIM_ConfigClockSource>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002652:	f000 fa9d 	bl	8002b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800265e:	463b      	mov	r3, r7
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <MX_TIM2_Init+0x98>)
 8002664:	f005 f8da 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800266e:	f000 fa8f 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20025f9c 	.word	0x20025f9c

08002680 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	463b      	mov	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <MX_TIM5_Init+0x94>)
 800269e:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <MX_TIM5_Init+0x98>)
 80026a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16750 - 1;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026a4:	f244 126d 	movw	r2, #16749	@ 0x416d
 80026a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80026b0:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295
 80026b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026c4:	4813      	ldr	r0, [pc, #76]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026c6:	f004 fc5b 	bl	8006f80 <HAL_TIM_Base_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026d0:	f000 fa5e 	bl	8002b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4619      	mov	r1, r3
 80026e0:	480c      	ldr	r0, [pc, #48]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026e2:	f004 fe65 	bl	80073b0 <HAL_TIM_ConfigClockSource>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026ec:	f000 fa50 	bl	8002b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026f8:	463b      	mov	r3, r7
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	@ (8002714 <MX_TIM5_Init+0x94>)
 80026fe:	f005 f88d 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002708:	f000 fa42 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20025fe4 	.word	0x20025fe4
 8002718:	40000c00 	.word	0x40000c00

0800271c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	@ 0x38
 8002720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	4bb3      	ldr	r3, [pc, #716]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4ab2      	ldr	r2, [pc, #712]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4bb0      	ldr	r3, [pc, #704]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	4bac      	ldr	r3, [pc, #688]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	4aab      	ldr	r2, [pc, #684]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002758:	f043 0320 	orr.w	r3, r3, #32
 800275c:	6313      	str	r3, [r2, #48]	@ 0x30
 800275e:	4ba9      	ldr	r3, [pc, #676]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4ba5      	ldr	r3, [pc, #660]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4aa4      	ldr	r2, [pc, #656]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4ba2      	ldr	r3, [pc, #648]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b9e      	ldr	r3, [pc, #632]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a9d      	ldr	r2, [pc, #628]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b9b      	ldr	r3, [pc, #620]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b97      	ldr	r3, [pc, #604]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a96      	ldr	r2, [pc, #600]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b94      	ldr	r3, [pc, #592]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b90      	ldr	r3, [pc, #576]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a8f      	ldr	r2, [pc, #572]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b89      	ldr	r3, [pc, #548]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a88      	ldr	r2, [pc, #544]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b86      	ldr	r3, [pc, #536]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b82      	ldr	r3, [pc, #520]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a81      	ldr	r2, [pc, #516]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <MX_GPIO_Init+0x2e8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	2116      	movs	r1, #22
 8002816:	487c      	ldr	r0, [pc, #496]	@ (8002a08 <MX_GPIO_Init+0x2ec>)
 8002818:	f001 fef8 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	487a      	ldr	r0, [pc, #488]	@ (8002a0c <MX_GPIO_Init+0x2f0>)
 8002822:	f001 fef3 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800282c:	4878      	ldr	r0, [pc, #480]	@ (8002a10 <MX_GPIO_Init+0x2f4>)
 800282e:	f001 feed 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002838:	4876      	ldr	r0, [pc, #472]	@ (8002a14 <MX_GPIO_Init+0x2f8>)
 800283a:	f001 fee7 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800283e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002850:	230c      	movs	r3, #12
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	486f      	ldr	r0, [pc, #444]	@ (8002a18 <MX_GPIO_Init+0x2fc>)
 800285c:	f001 fc1e 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002870:	230c      	movs	r3, #12
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	4863      	ldr	r0, [pc, #396]	@ (8002a08 <MX_GPIO_Init+0x2ec>)
 800287c:	f001 fc0e 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002880:	2316      	movs	r3, #22
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	485c      	ldr	r0, [pc, #368]	@ (8002a08 <MX_GPIO_Init+0x2ec>)
 8002898:	f001 fc00 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ae:	4619      	mov	r1, r3
 80028b0:	4856      	ldr	r0, [pc, #344]	@ (8002a0c <MX_GPIO_Init+0x2f0>)
 80028b2:	f001 fbf3 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80028b6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ca:	4619      	mov	r1, r3
 80028cc:	484f      	ldr	r0, [pc, #316]	@ (8002a0c <MX_GPIO_Init+0x2f0>)
 80028ce:	f001 fbe5 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e6:	4619      	mov	r1, r3
 80028e8:	4848      	ldr	r0, [pc, #288]	@ (8002a0c <MX_GPIO_Init+0x2f0>)
 80028ea:	f001 fbd7 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80028ee:	2320      	movs	r3, #32
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	4841      	ldr	r0, [pc, #260]	@ (8002a08 <MX_GPIO_Init+0x2ec>)
 8002904:	f001 fbca 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002908:	2304      	movs	r3, #4
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	4840      	ldr	r0, [pc, #256]	@ (8002a1c <MX_GPIO_Init+0x300>)
 800291c:	f001 fbbe 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002920:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002932:	230c      	movs	r3, #12
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4835      	ldr	r0, [pc, #212]	@ (8002a14 <MX_GPIO_Init+0x2f8>)
 800293e:	f001 fbad 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002942:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002954:	230c      	movs	r3, #12
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	4830      	ldr	r0, [pc, #192]	@ (8002a20 <MX_GPIO_Init+0x304>)
 8002960:	f001 fb9c 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002964:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002976:	230c      	movs	r3, #12
 8002978:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <MX_GPIO_Init+0x300>)
 8002982:	f001 fb8b 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002998:	4619      	mov	r1, r3
 800299a:	4820      	ldr	r0, [pc, #128]	@ (8002a1c <MX_GPIO_Init+0x300>)
 800299c:	f001 fb7e 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80029a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	2303      	movs	r3, #3
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029b2:	230c      	movs	r3, #12
 80029b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	4814      	ldr	r0, [pc, #80]	@ (8002a10 <MX_GPIO_Init+0x2f4>)
 80029be:	f001 fb6d 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80029c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	480e      	ldr	r0, [pc, #56]	@ (8002a10 <MX_GPIO_Init+0x2f4>)
 80029d8:	f001 fb60 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80029dc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f2:	4619      	mov	r1, r3
 80029f4:	4806      	ldr	r0, [pc, #24]	@ (8002a10 <MX_GPIO_Init+0x2f4>)
 80029f6:	f001 fb51 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a00:	e010      	b.n	8002a24 <MX_GPIO_Init+0x308>
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021800 	.word	0x40021800
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a30:	2307      	movs	r3, #7
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4817      	ldr	r0, [pc, #92]	@ (8002a98 <MX_GPIO_Init+0x37c>)
 8002a3c:	f001 fb2e 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002a40:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4810      	ldr	r0, [pc, #64]	@ (8002a9c <MX_GPIO_Init+0x380>)
 8002a5a:	f001 fb1f 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002a5e:	2360      	movs	r3, #96	@ 0x60
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a6e:	230c      	movs	r3, #12
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4809      	ldr	r0, [pc, #36]	@ (8002aa0 <MX_GPIO_Init+0x384>)
 8002a7a:	f001 fb0f 	bl	800409c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2006      	movs	r0, #6
 8002a84:	f001 fa9f 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a88:	2006      	movs	r0, #6
 8002a8a:	f001 fab8 	bl	8003ffe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a8e:	bf00      	nop
 8002a90:	3738      	adds	r7, #56	@ 0x38
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40020400 	.word	0x40020400

08002aa4 <startTimers>:

/* USER CODE BEGIN 4 */
void startTimers(){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(& htim2);
 8002aa8:	4803      	ldr	r0, [pc, #12]	@ (8002ab8 <startTimers+0x14>)
 8002aaa:	f004 fb21 	bl	80070f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(& htim5);
 8002aae:	4803      	ldr	r0, [pc, #12]	@ (8002abc <startTimers+0x18>)
 8002ab0:	f004 fab6 	bl	8007020 <HAL_TIM_Base_Start>
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20025f9c 	.word	0x20025f9c
 8002abc:	20025fe4 	.word	0x20025fe4

08002ac0 <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t tim2CallCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
//	printf("TIMERCALLED\n");
	if (htim == &htim2) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d123      	bne.n	8002b18 <HAL_TIM_PeriodElapsedCallback+0x58>
		tim2CallCounter++;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002adc:	701a      	strb	r2, [r3, #0]
//		printf("Counter: %u\n", tim2CallCounter);
//		printf("1/10 of a second\n");
		if (tim2CallCounter >= 10 * BLOCK_FALL_TIME){
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b09      	cmp	r3, #9
 8002ae6:	d917      	bls.n	8002b18 <HAL_TIM_PeriodElapsedCallback+0x58>
			printf("1 second\n");
 8002ae8:	480f      	ldr	r0, [pc, #60]	@ (8002b28 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002aea:	f005 fae7 	bl	80080bc <puts>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8002aee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002af2:	480e      	ldr	r0, [pc, #56]	@ (8002b2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002af4:	f001 fda3 	bl	800463e <HAL_GPIO_TogglePin>
			movePieceDown(& board,& currentPiece);
 8002af8:	490d      	ldr	r1, [pc, #52]	@ (8002b30 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002afa:	480e      	ldr	r0, [pc, #56]	@ (8002b34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002afc:	f7fe fecc 	bl	8001898 <movePieceDown>
			LCD_Clear(0,LCD_COLOR_BLACK);
 8002b00:	2100      	movs	r1, #0
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f93a 	bl	8000d7c <LCD_Clear>
			showGameScreen();
 8002b08:	f000 f93c 	bl	8002d84 <showGameScreen>
			Draw_Arrows_On_Screen(-1);
 8002b0c:	20ff      	movs	r0, #255	@ 0xff
 8002b0e:	f7fe fbb1 	bl	8001274 <Draw_Arrows_On_Screen>
			tim2CallCounter = 0;
 8002b12:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20025f9c 	.word	0x20025f9c
 8002b24:	2002602c 	.word	0x2002602c
 8002b28:	080091b0 	.word	0x080091b0
 8002b2c:	40021800 	.word	0x40021800
 8002b30:	20025e9c 	.word	0x20025e9c
 8002b34:	20025b7c 	.word	0x20025b7c

08002b38 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b46:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <HAL_GPIO_EXTI_Callback+0x44>)
 8002b48:	f001 fd79 	bl	800463e <HAL_GPIO_TogglePin>
	static volatile uint32_t last;
	uint32_t current = __HAL_TIM_GET_COUNTER(&htim5);
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <HAL_GPIO_EXTI_Callback+0x48>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	60fb      	str	r3, [r7, #12]
	printf("Pushed after %u\n", (unsigned int) (current - last)/5000);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <HAL_GPIO_EXTI_Callback+0x50>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0b1b      	lsrs	r3, r3, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <HAL_GPIO_EXTI_Callback+0x54>)
 8002b68:	f005 fa40 	bl	8007fec <iprintf>
	last = current;
 8002b6c:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	20025fe4 	.word	0x20025fe4
 8002b84:	20026030 	.word	0x20026030
 8002b88:	d1b71759 	.word	0xd1b71759
 8002b8c:	080091bc 	.word	0x080091bc

08002b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
}
 8002b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <Error_Handler+0x8>

08002b9c <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 8002ba4:	f000 f852 	bl	8002c4c <rand>
 8002ba8:	4601      	mov	r1, r0
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <initializeRandomPiece+0x80>)
 8002bac:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb0:	1aca      	subs	r2, r1, r3
 8002bb2:	0852      	lsrs	r2, r2, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	089a      	lsrs	r2, r3, #2
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	1aca      	subs	r2, r1, r3
 8002bc0:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e01c      	b.n	8002c02 <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e013      	b.n	8002bf6 <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 8002bce:	4914      	ldr	r1, [pc, #80]	@ (8002c20 <initializeRandomPiece+0x84>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009a      	lsls	r2, r3, #2
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	0090      	lsls	r0, r2, #2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4402      	add	r2, r0
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	dde8      	ble.n	8002bce <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	dddf      	ble.n	8002bc8 <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	24924925 	.word	0x24924925
 8002c20:	20000010 	.word	0x20000010

08002c24 <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <piceIndexToColors+0x24>)
 8002c38:	4413      	add	r3, r2
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200001d0 	.word	0x200001d0

08002c4c <rand>:
 *
 *  Created on: Dec 7, 2024
 *      Author: user
 */
#include "rand.h"
uint32_t rand(){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(& hrng, &rand);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <rand+0x1c>)
 8002c58:	f003 fe5c 	bl	8006914 <HAL_RNG_GenerateRandomNumber>
	return rand;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20025f8c 	.word	0x20025f8c

08002c6c <showStartScreen>:
void shadingDemo(){
	LCD_Clear(0, LCD_COLOR_BLACK);

	Draw_Tetris_Block(40,40,80,0xCB20, 0xFC40, 0x9A20);
}
void showStartScreen(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c72:	2100      	movs	r1, #0
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe f881 	bl	8000d7c <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002c7a:	4823      	ldr	r0, [pc, #140]	@ (8002d08 <showStartScreen+0x9c>)
 8002c7c:	f7fe f8b0 	bl	8000de0 <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002c80:	2228      	movs	r2, #40	@ 0x28
 8002c82:	2114      	movs	r1, #20
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe fc73 	bl	8001570 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002c8a:	2246      	movs	r2, #70	@ 0x46
 8002c8c:	2114      	movs	r1, #20
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe fc6e 	bl	8001570 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 8002c94:	2228      	movs	r2, #40	@ 0x28
 8002c96:	215a      	movs	r1, #90	@ 0x5a
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f7fe fc69 	bl	8001570 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 8002c9e:	2228      	movs	r2, #40	@ 0x28
 8002ca0:	218c      	movs	r1, #140	@ 0x8c
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f7fe fc64 	bl	8001570 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 8002ca8:	2250      	movs	r2, #80	@ 0x50
 8002caa:	2141      	movs	r1, #65	@ 0x41
 8002cac:	2004      	movs	r0, #4
 8002cae:	f7fe fc5f 	bl	8001570 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 8002cb2:	2250      	movs	r2, #80	@ 0x50
 8002cb4:	2164      	movs	r1, #100	@ 0x64
 8002cb6:	2005      	movs	r0, #5
 8002cb8:	f7fe fc5a 	bl	8001570 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 8002cbc:	228c      	movs	r2, #140	@ 0x8c
 8002cbe:	2132      	movs	r1, #50	@ 0x32
 8002cc0:	2006      	movs	r0, #6
 8002cc2:	f7fe fc55 	bl	8001570 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8002cc6:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002cca:	f7fe f879 	bl	8000dc0 <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 8002cce:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <showStartScreen+0xa0>)
 8002cd0:	2198      	movs	r1, #152	@ 0x98
 8002cd2:	2064      	movs	r0, #100	@ 0x64
 8002cd4:	f7fe f924 	bl	8000f20 <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 8002cd8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	230f      	movs	r3, #15
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2330      	movs	r3, #48	@ 0x30
 8002ce4:	22b4      	movs	r2, #180	@ 0xb4
 8002ce6:	21f2      	movs	r1, #242	@ 0xf2
 8002ce8:	201e      	movs	r0, #30
 8002cea:	f7fe fcf7 	bl	80016dc <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fe f866 	bl	8000dc0 <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 8002cf4:	4a06      	ldr	r2, [pc, #24]	@ (8002d10 <showStartScreen+0xa4>)
 8002cf6:	f240 1101 	movw	r1, #257	@ 0x101
 8002cfa:	2054      	movs	r0, #84	@ 0x54
 8002cfc:	f7fe f910 	bl	8000f20 <LCD_DisplayString>
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	080091d0 	.word	0x080091d0
 8002d10:	080091d8 	.word	0x080091d8

08002d14 <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	80fb      	strh	r3, [r7, #6]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	2b1d      	cmp	r3, #29
 8002d28:	d90b      	bls.n	8002d42 <startClicked+0x2e>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2bd2      	cmp	r3, #210	@ 0xd2
 8002d2e:	d808      	bhi.n	8002d42 <startClicked+0x2e>
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	2bf1      	cmp	r3, #241	@ 0xf1
 8002d34:	d905      	bls.n	8002d42 <startClicked+0x2e>
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002d3c:	d801      	bhi.n	8002d42 <startClicked+0x2e>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <startClicked+0x30>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <uint32_to_string>:

void uint32_to_string(uint32_t value, char *buffer, size_t buffer_size) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
    // Ensure the buffer is large enough to hold the maximum uint32_t value and a null terminator
    if (buffer_size < 11) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b0a      	cmp	r3, #10
 8002d68:	d906      	bls.n	8002d78 <uint32_to_string+0x20>
        // Handle error: buffer too small
        return;
    }
    // Format the uint32_t value as a string and store it in the buffer
    snprintf(buffer, buffer_size, "%u", (unsigned int) value);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <uint32_to_string+0x28>)
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68b8      	ldr	r0, [r7, #8]
 8002d72:	f005 f9ab 	bl	80080cc <sniprintf>
 8002d76:	e000      	b.n	8002d7a <uint32_to_string+0x22>
        return;
 8002d78:	bf00      	nop
}
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	080091e0 	.word	0x080091e0

08002d84 <showGameScreen>:

void showGameScreen(){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8002d8a:	af00      	add	r7, sp, #0
	LCD_SetFont(&Font16x24);
 8002d8c:	4816      	ldr	r0, [pc, #88]	@ (8002de8 <showGameScreen+0x64>)
 8002d8e:	f7fe f827 	bl	8000de0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d92:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d96:	f7fe f813 	bl	8000dc0 <LCD_SetTextColor>

	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 8002d9a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002d9e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002da2:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <showGameScreen+0x68>)
 8002da4:	4912      	ldr	r1, [pc, #72]	@ (8002df0 <showGameScreen+0x6c>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe ffee 	bl	8001d88 <boardWithPiece>
	Fill_Tetris_Board(
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	2216      	movs	r2, #22
 8002db2:	2137      	movs	r1, #55	@ 0x37
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe fb15 	bl	80013e4 <Fill_Tetris_Board>
			LCD_PIXEL_WIDTH /2 - BOARD_WIDTH*(BLOCK_SIZE + 1)/2 ,
			BLOCK_SIZE + 10
			);

	// Next Piece
	DrawTetromino(& nextPiece, 190, 10);
 8002dba:	220a      	movs	r2, #10
 8002dbc:	21be      	movs	r1, #190	@ 0xbe
 8002dbe:	480d      	ldr	r0, [pc, #52]	@ (8002df4 <showGameScreen+0x70>)
 8002dc0:	f7fe fc34 	bl	800162c <DrawTetromino>

	// Score
	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <showGameScreen+0x74>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1d39      	adds	r1, r7, #4
 8002dca:	220b      	movs	r2, #11
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ffc3 	bl	8002d58 <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	210a      	movs	r1, #10
 8002dd8:	200a      	movs	r0, #10
 8002dda:	f7fe f8a1 	bl	8000f20 <LCD_DisplayString>
}
 8002dde:	bf00      	nop
 8002de0:	f507 774c 	add.w	r7, r7, #816	@ 0x330
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000004 	.word	0x20000004
 8002dec:	20025e9c 	.word	0x20025e9c
 8002df0:	20025b7c 	.word	0x20025b7c
 8002df4:	20025ee4 	.word	0x20025ee4
 8002df8:	20025f2c 	.word	0x20025f2c

08002dfc <showEndScreen>:

void showEndScreen(){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
	LCD_SetFont(&Font16x24);
 8002e02:	483c      	ldr	r0, [pc, #240]	@ (8002ef4 <showEndScreen+0xf8>)
 8002e04:	f7fd ffec 	bl	8000de0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002e08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e0c:	f7fd ffd8 	bl	8000dc0 <LCD_SetTextColor>

	LCD_Clear(0,0x2800); // DARK RED
 8002e10:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd ffb1 	bl	8000d7c <LCD_Clear>
	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <showEndScreen+0xfc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1d39      	adds	r1, r7, #4
 8002e20:	220b      	movs	r2, #11
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff98 	bl	8002d58 <uint32_to_string>
	LCD_DisplayString(10,200,scoreStr);
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	21c8      	movs	r1, #200	@ 0xc8
 8002e2e:	200a      	movs	r0, #10
 8002e30:	f7fe f876 	bl	8000f20 <LCD_DisplayString>
	LCD_DisplayString(10,170,"You Scored:");
 8002e34:	4a31      	ldr	r2, [pc, #196]	@ (8002efc <showEndScreen+0x100>)
 8002e36:	21aa      	movs	r1, #170	@ 0xaa
 8002e38:	200a      	movs	r0, #10
 8002e3a:	f7fe f871 	bl	8000f20 <LCD_DisplayString>

	LCD_DisplayString(10,10,"You Lasted:");
 8002e3e:	4a30      	ldr	r2, [pc, #192]	@ (8002f00 <showEndScreen+0x104>)
 8002e40:	210a      	movs	r1, #10
 8002e42:	200a      	movs	r0, #10
 8002e44:	f7fe f86c 	bl	8000f20 <LCD_DisplayString>
	uint32_t timeLasted = __HAL_TIM_GET_COUNTER(&htim5)/5000;
 8002e48:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <showEndScreen+0x108>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f08 <showEndScreen+0x10c>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0b1b      	lsrs	r3, r3, #12
 8002e56:	61fb      	str	r3, [r7, #28]
	uint32_t timeLastedSec = timeLasted % 60;
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <showEndScreen+0x110>)
 8002e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e60:	0959      	lsrs	r1, r3, #5
 8002e62:	460b      	mov	r3, r1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a5b      	subs	r3, r3, r1
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
	uint32_t timeLastedMin = timeLasted / 60;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4a26      	ldr	r2, [pc, #152]	@ (8002f0c <showEndScreen+0x110>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	617b      	str	r3, [r7, #20]
	uint32_t timeLastedHour = (timeLasted / 60) / 60;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <showEndScreen+0x114>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0adb      	lsrs	r3, r3, #11
 8002e84:	613b      	str	r3, [r7, #16]

	uint32_to_string(timeLastedHour, (char *)&scoreStr,11);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	220b      	movs	r2, #11
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6938      	ldr	r0, [r7, #16]
 8002e8e:	f7ff ff63 	bl	8002d58 <uint32_to_string>
	LCD_DisplayString(40,40,scoreStr);
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	461a      	mov	r2, r3
 8002e96:	2128      	movs	r1, #40	@ 0x28
 8002e98:	2028      	movs	r0, #40	@ 0x28
 8002e9a:	f7fe f841 	bl	8000f20 <LCD_DisplayString>
	LCD_DisplayChar(10,40,'H');
 8002e9e:	2248      	movs	r2, #72	@ 0x48
 8002ea0:	2128      	movs	r1, #40	@ 0x28
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f7fe f81a 	bl	8000edc <LCD_DisplayChar>
	uint32_to_string(timeLastedMin, (char *)&scoreStr,11);
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	220b      	movs	r2, #11
 8002eac:	4619      	mov	r1, r3
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff52 	bl	8002d58 <uint32_to_string>
	LCD_DisplayString(40,70,scoreStr);
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2146      	movs	r1, #70	@ 0x46
 8002eba:	2028      	movs	r0, #40	@ 0x28
 8002ebc:	f7fe f830 	bl	8000f20 <LCD_DisplayString>
	LCD_DisplayChar(10,70,'M');
 8002ec0:	224d      	movs	r2, #77	@ 0x4d
 8002ec2:	2146      	movs	r1, #70	@ 0x46
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f7fe f809 	bl	8000edc <LCD_DisplayChar>
	uint32_to_string(timeLastedSec, (char *)&scoreStr,11);
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	220b      	movs	r2, #11
 8002ece:	4619      	mov	r1, r3
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f7ff ff41 	bl	8002d58 <uint32_to_string>
	LCD_DisplayString(40,100,scoreStr);
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2164      	movs	r1, #100	@ 0x64
 8002edc:	2028      	movs	r0, #40	@ 0x28
 8002ede:	f7fe f81f 	bl	8000f20 <LCD_DisplayString>
	LCD_DisplayChar(10,100,'S');
 8002ee2:	2253      	movs	r2, #83	@ 0x53
 8002ee4:	2164      	movs	r1, #100	@ 0x64
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f7fd fff8 	bl	8000edc <LCD_DisplayChar>
}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	20025f2c 	.word	0x20025f2c
 8002efc:	080091e4 	.word	0x080091e4
 8002f00:	080091f0 	.word	0x080091f0
 8002f04:	20025fe4 	.word	0x20025fe4
 8002f08:	d1b71759 	.word	0xd1b71759
 8002f0c:	88888889 	.word	0x88888889
 8002f10:	91a2b3c5 	.word	0x91a2b3c5

08002f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	4a0f      	ldr	r2, [pc, #60]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_MspInit+0x4c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f52:	2007      	movs	r0, #7
 8002f54:	f001 f82c 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800

08002f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a29      	ldr	r2, [pc, #164]	@ (8003028 <HAL_I2C_MspInit+0xc4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d14b      	bne.n	800301e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a27      	ldr	r2, [pc, #156]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b25      	ldr	r3, [pc, #148]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4815      	ldr	r0, [pc, #84]	@ (8003030 <HAL_I2C_MspInit+0xcc>)
 8002fdc:	f001 f85e 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe6:	2312      	movs	r3, #18
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480d      	ldr	r0, [pc, #52]	@ (8003034 <HAL_I2C_MspInit+0xd0>)
 8002ffe:	f001 f84d 	bl	800409c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 800300c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_I2C_MspInit+0xc8>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	@ 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40005c00 	.word	0x40005c00
 800302c:	40023800 	.word	0x40023800
 8003030:	40020800 	.word	0x40020800
 8003034:	40020000 	.word	0x40020000

08003038 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b09a      	sub	sp, #104	@ 0x68
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003054:	2230      	movs	r2, #48	@ 0x30
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f005 f943 	bl	80082e4 <memset>
  if(hltdc->Instance==LTDC)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a81      	ldr	r2, [pc, #516]	@ (8003268 <HAL_LTDC_MspInit+0x230>)
 8003064:	4293      	cmp	r3, r2
 8003066:	f040 80fb 	bne.w	8003260 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800306a:	2308      	movs	r3, #8
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800306e:	2364      	movs	r3, #100	@ 0x64
 8003070:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003072:	2302      	movs	r3, #2
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003080:	4618      	mov	r0, r3
 8003082:	f003 fa5d 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800308c:	f7ff fd80 	bl	8002b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	4b75      	ldr	r3, [pc, #468]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003098:	4a74      	ldr	r2, [pc, #464]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 800309a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800309e:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a0:	4b72      	ldr	r3, [pc, #456]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	4b6e      	ldr	r3, [pc, #440]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	4a6d      	ldr	r2, [pc, #436]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030b6:	f043 0320 	orr.w	r3, r3, #32
 80030ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80030bc:	4b6b      	ldr	r3, [pc, #428]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	4b67      	ldr	r3, [pc, #412]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a66      	ldr	r2, [pc, #408]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b64      	ldr	r3, [pc, #400]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	4b60      	ldr	r3, [pc, #384]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	4a5f      	ldr	r2, [pc, #380]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f4:	4b5d      	ldr	r3, [pc, #372]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	4b59      	ldr	r3, [pc, #356]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	4a58      	ldr	r2, [pc, #352]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 800310a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003110:	4b56      	ldr	r3, [pc, #344]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	4b52      	ldr	r3, [pc, #328]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	4a51      	ldr	r2, [pc, #324]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6313      	str	r3, [r2, #48]	@ 0x30
 800312c:	4b4f      	ldr	r3, [pc, #316]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	4b4b      	ldr	r3, [pc, #300]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	4a4a      	ldr	r2, [pc, #296]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 8003142:	f043 0308 	orr.w	r3, r3, #8
 8003146:	6313      	str	r3, [r2, #48]	@ 0x30
 8003148:	4b48      	ldr	r3, [pc, #288]	@ (800326c <HAL_LTDC_MspInit+0x234>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003158:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003166:	230e      	movs	r3, #14
 8003168:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800316e:	4619      	mov	r1, r3
 8003170:	483f      	ldr	r0, [pc, #252]	@ (8003270 <HAL_LTDC_MspInit+0x238>)
 8003172:	f000 ff93 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003176:	f641 0358 	movw	r3, #6232	@ 0x1858
 800317a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003188:	230e      	movs	r3, #14
 800318a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003190:	4619      	mov	r1, r3
 8003192:	4838      	ldr	r0, [pc, #224]	@ (8003274 <HAL_LTDC_MspInit+0x23c>)
 8003194:	f000 ff82 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003198:	2303      	movs	r3, #3
 800319a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031a8:	2309      	movs	r3, #9
 80031aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031b0:	4619      	mov	r1, r3
 80031b2:	4831      	ldr	r0, [pc, #196]	@ (8003278 <HAL_LTDC_MspInit+0x240>)
 80031b4:	f000 ff72 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80031b8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031ca:	230e      	movs	r3, #14
 80031cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031d2:	4619      	mov	r1, r3
 80031d4:	4828      	ldr	r0, [pc, #160]	@ (8003278 <HAL_LTDC_MspInit+0x240>)
 80031d6:	f000 ff61 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80031da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80031de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e8:	2300      	movs	r3, #0
 80031ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031ec:	230e      	movs	r3, #14
 80031ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031f4:	4619      	mov	r1, r3
 80031f6:	4821      	ldr	r0, [pc, #132]	@ (800327c <HAL_LTDC_MspInit+0x244>)
 80031f8:	f000 ff50 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80031fc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003200:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800320e:	230e      	movs	r3, #14
 8003210:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003212:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003216:	4619      	mov	r1, r3
 8003218:	4819      	ldr	r0, [pc, #100]	@ (8003280 <HAL_LTDC_MspInit+0x248>)
 800321a:	f000 ff3f 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800321e:	2348      	movs	r3, #72	@ 0x48
 8003220:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2300      	movs	r3, #0
 800322c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800322e:	230e      	movs	r3, #14
 8003230:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003236:	4619      	mov	r1, r3
 8003238:	4812      	ldr	r0, [pc, #72]	@ (8003284 <HAL_LTDC_MspInit+0x24c>)
 800323a:	f000 ff2f 	bl	800409c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800323e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003242:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003250:	2309      	movs	r3, #9
 8003252:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003258:	4619      	mov	r1, r3
 800325a:	4808      	ldr	r0, [pc, #32]	@ (800327c <HAL_LTDC_MspInit+0x244>)
 800325c:	f000 ff1e 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003260:	bf00      	nop
 8003262:	3768      	adds	r7, #104	@ 0x68
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40016800 	.word	0x40016800
 800326c:	40023800 	.word	0x40023800
 8003270:	40021400 	.word	0x40021400
 8003274:	40020000 	.word	0x40020000
 8003278:	40020400 	.word	0x40020400
 800327c:	40021800 	.word	0x40021800
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00

08003288 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0b      	ldr	r2, [pc, #44]	@ (80032c4 <HAL_RNG_MspInit+0x3c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10d      	bne.n	80032b6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_RNG_MspInit+0x40>)
 80032a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a2:	4a09      	ldr	r2, [pc, #36]	@ (80032c8 <HAL_RNG_MspInit+0x40>)
 80032a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <HAL_RNG_MspInit+0x40>)
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	50060800 	.word	0x50060800
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_SPI_MspInit+0x84>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d12c      	bne.n	8003348 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 80032f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_SPI_MspInit+0x88>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003326:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800332a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003338:	2305      	movs	r3, #5
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	4805      	ldr	r0, [pc, #20]	@ (8003358 <HAL_SPI_MspInit+0x8c>)
 8003344:	f000 feaa 	bl	800409c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003348:	bf00      	nop
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40015000 	.word	0x40015000
 8003354:	40023800 	.word	0x40023800
 8003358:	40021400 	.word	0x40021400

0800335c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a08      	ldr	r2, [pc, #32]	@ (800338c <HAL_SPI_MspDeInit+0x30>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10a      	bne.n	8003384 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_SPI_MspDeInit+0x34>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	4a07      	ldr	r2, [pc, #28]	@ (8003390 <HAL_SPI_MspDeInit+0x34>)
 8003374:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800337a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <HAL_SPI_MspDeInit+0x38>)
 8003380:	f001 f838 	bl	80043f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40015000 	.word	0x40015000
 8003390:	40023800 	.word	0x40023800
 8003394:	40021400 	.word	0x40021400

08003398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a8:	d116      	bne.n	80033d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	201c      	movs	r0, #28
 80033cc:	f000 fdfb 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033d0:	201c      	movs	r0, #28
 80033d2:	f000 fe14 	bl	8003ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033d6:	e012      	b.n	80033fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <HAL_TIM_Base_MspInit+0x74>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a07      	ldr	r2, [pc, #28]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_TIM_Base_MspInit+0x70>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40000c00 	.word	0x40000c00

08003410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <NMI_Handler+0x4>

08003418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <HardFault_Handler+0x4>

08003420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <MemManage_Handler+0x4>

08003428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <BusFault_Handler+0x4>

08003430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <UsageFault_Handler+0x4>

08003438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003466:	f000 fc4d 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}

0800346e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003472:	2001      	movs	r0, #1
 8003474:	f001 f8fe 	bl	8004674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}

0800347c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <TIM2_IRQHandler+0x10>)
 8003482:	f003 fea5 	bl	80071d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20025f9c 	.word	0x20025f9c

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	@ (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80034d2:	f000 f9dd 	bl	8003890 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80034d6:	f000 f99d 	bl	8003814 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80034da:	2202      	movs	r2, #2
 80034dc:	2103      	movs	r1, #3
 80034de:	2082      	movs	r0, #130	@ 0x82
 80034e0:	f000 fa2a 	bl	8003938 <I2C3_Write>
    HAL_Delay(5);
 80034e4:	2005      	movs	r0, #5
 80034e6:	f000 fc2d 	bl	8003d44 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80034ea:	2200      	movs	r2, #0
 80034ec:	2103      	movs	r1, #3
 80034ee:	2082      	movs	r0, #130	@ 0x82
 80034f0:	f000 fa22 	bl	8003938 <I2C3_Write>
    HAL_Delay(2);
 80034f4:	2002      	movs	r0, #2
 80034f6:	f000 fc25 	bl	8003d44 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80034fa:	1cba      	adds	r2, r7, #2
 80034fc:	2302      	movs	r3, #2
 80034fe:	2100      	movs	r1, #0
 8003500:	2082      	movs	r0, #130	@ 0x82
 8003502:	f000 fa69 	bl	80039d8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	b29a      	uxth	r2, r3
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	4313      	orrs	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	f640 0211 	movw	r2, #2065	@ 0x811
 800351e:	4293      	cmp	r3, r2
 8003520:	d001      	beq.n	8003526 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003522:	2303      	movs	r3, #3
 8003524:	e095      	b.n	8003652 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003526:	2202      	movs	r2, #2
 8003528:	2103      	movs	r1, #3
 800352a:	2082      	movs	r0, #130	@ 0x82
 800352c:	f000 fa04 	bl	8003938 <I2C3_Write>
    HAL_Delay(5);
 8003530:	2005      	movs	r0, #5
 8003532:	f000 fc07 	bl	8003d44 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003536:	2200      	movs	r2, #0
 8003538:	2103      	movs	r1, #3
 800353a:	2082      	movs	r0, #130	@ 0x82
 800353c:	f000 f9fc 	bl	8003938 <I2C3_Write>
    HAL_Delay(2);
 8003540:	2002      	movs	r0, #2
 8003542:	f000 fbff 	bl	8003d44 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003546:	2004      	movs	r0, #4
 8003548:	f000 f887 	bl	800365a <STMPE811_Read>
 800354c:	4603      	mov	r3, r0
 800354e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003550:	797b      	ldrb	r3, [r7, #5]
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003558:	797b      	ldrb	r3, [r7, #5]
 800355a:	461a      	mov	r2, r3
 800355c:	2104      	movs	r1, #4
 800355e:	2082      	movs	r0, #130	@ 0x82
 8003560:	f000 f9ea 	bl	8003938 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003564:	2004      	movs	r0, #4
 8003566:	f000 f878 	bl	800365a <STMPE811_Read>
 800356a:	4603      	mov	r3, r0
 800356c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800356e:	797b      	ldrb	r3, [r7, #5]
 8003570:	f023 0302 	bic.w	r3, r3, #2
 8003574:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003576:	797b      	ldrb	r3, [r7, #5]
 8003578:	461a      	mov	r2, r3
 800357a:	2104      	movs	r1, #4
 800357c:	2082      	movs	r0, #130	@ 0x82
 800357e:	f000 f9db 	bl	8003938 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003582:	2249      	movs	r2, #73	@ 0x49
 8003584:	2120      	movs	r1, #32
 8003586:	2082      	movs	r0, #130	@ 0x82
 8003588:	f000 f9d6 	bl	8003938 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800358c:	2002      	movs	r0, #2
 800358e:	f000 fbd9 	bl	8003d44 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003592:	2201      	movs	r2, #1
 8003594:	2121      	movs	r1, #33	@ 0x21
 8003596:	2082      	movs	r0, #130	@ 0x82
 8003598:	f000 f9ce 	bl	8003938 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800359c:	2017      	movs	r0, #23
 800359e:	f000 f85c 	bl	800365a <STMPE811_Read>
 80035a2:	4603      	mov	r3, r0
 80035a4:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80035a6:	797b      	ldrb	r3, [r7, #5]
 80035a8:	f043 031e 	orr.w	r3, r3, #30
 80035ac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80035ae:	797b      	ldrb	r3, [r7, #5]
 80035b0:	461a      	mov	r2, r3
 80035b2:	2117      	movs	r1, #23
 80035b4:	2082      	movs	r0, #130	@ 0x82
 80035b6:	f000 f9bf 	bl	8003938 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80035ba:	229a      	movs	r2, #154	@ 0x9a
 80035bc:	2141      	movs	r1, #65	@ 0x41
 80035be:	2082      	movs	r0, #130	@ 0x82
 80035c0:	f000 f9ba 	bl	8003938 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80035c4:	2201      	movs	r2, #1
 80035c6:	214a      	movs	r1, #74	@ 0x4a
 80035c8:	2082      	movs	r0, #130	@ 0x82
 80035ca:	f000 f9b5 	bl	8003938 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80035ce:	2201      	movs	r2, #1
 80035d0:	214b      	movs	r1, #75	@ 0x4b
 80035d2:	2082      	movs	r0, #130	@ 0x82
 80035d4:	f000 f9b0 	bl	8003938 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80035d8:	2200      	movs	r2, #0
 80035da:	214b      	movs	r1, #75	@ 0x4b
 80035dc:	2082      	movs	r0, #130	@ 0x82
 80035de:	f000 f9ab 	bl	8003938 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80035e2:	2201      	movs	r2, #1
 80035e4:	2156      	movs	r1, #86	@ 0x56
 80035e6:	2082      	movs	r0, #130	@ 0x82
 80035e8:	f000 f9a6 	bl	8003938 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80035ec:	2201      	movs	r2, #1
 80035ee:	2158      	movs	r1, #88	@ 0x58
 80035f0:	2082      	movs	r0, #130	@ 0x82
 80035f2:	f000 f9a1 	bl	8003938 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80035f6:	2203      	movs	r2, #3
 80035f8:	2140      	movs	r1, #64	@ 0x40
 80035fa:	2082      	movs	r0, #130	@ 0x82
 80035fc:	f000 f99c 	bl	8003938 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003600:	22ff      	movs	r2, #255	@ 0xff
 8003602:	210b      	movs	r1, #11
 8003604:	2082      	movs	r0, #130	@ 0x82
 8003606:	f000 f997 	bl	8003938 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800360a:	f000 f8c1 	bl	8003790 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800360e:	2009      	movs	r0, #9
 8003610:	f000 f823 	bl	800365a <STMPE811_Read>
 8003614:	4603      	mov	r3, r0
 8003616:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003618:	797b      	ldrb	r3, [r7, #5]
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003620:	797b      	ldrb	r3, [r7, #5]
 8003622:	461a      	mov	r2, r3
 8003624:	2109      	movs	r1, #9
 8003626:	2082      	movs	r0, #130	@ 0x82
 8003628:	f000 f986 	bl	8003938 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 800362c:	200a      	movs	r0, #10
 800362e:	f000 f814 	bl	800365a <STMPE811_Read>
 8003632:	4603      	mov	r3, r0
 8003634:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003636:	797b      	ldrb	r3, [r7, #5]
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800363e:	797b      	ldrb	r3, [r7, #5]
 8003640:	461a      	mov	r2, r3
 8003642:	210a      	movs	r1, #10
 8003644:	2082      	movs	r0, #130	@ 0x82
 8003646:	f000 f977 	bl	8003938 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800364a:	20c8      	movs	r0, #200	@ 0xc8
 800364c:	f000 fb7a 	bl	8003d44 <HAL_Delay>

    return STMPE811_State_Ok;
 8003650:	2302      	movs	r3, #2

}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003664:	f107 020f 	add.w	r2, r7, #15
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	4619      	mov	r1, r3
 800366c:	2082      	movs	r0, #130	@ 0x82
 800366e:	f000 f98d 	bl	800398c <I2C3_Read>

    return readData;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	71fb      	strb	r3, [r7, #7]
 8003688:	4613      	mov	r3, r2
 800368a:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 800368c:	79ba      	ldrb	r2, [r7, #6]
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	4619      	mov	r1, r3
 8003692:	2082      	movs	r0, #130	@ 0x82
 8003694:	f000 f950 	bl	8003938 <I2C3_Write>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	799b      	ldrb	r3, [r3, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d117      	bne.n	80036e0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f9b1 	bl	8003a1c <TM_STMPE811_ReadX>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	885b      	ldrh	r3, [r3, #2]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa04 	bl	8003ad8 <TM_STMPE811_ReadY>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80036d6:	3301      	adds	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	805a      	strh	r2, [r3, #2]
 80036de:	e048      	b.n	8003772 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	799b      	ldrb	r3, [r3, #6]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d112      	bne.n	800370e <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f995 	bl	8003a1c <TM_STMPE811_ReadX>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	885b      	ldrh	r3, [r3, #2]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f9ea 	bl	8003ad8 <TM_STMPE811_ReadY>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	805a      	strh	r2, [r3, #2]
 800370c:	e031      	b.n	8003772 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	799b      	ldrb	r3, [r3, #6]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d115      	bne.n	8003742 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	885b      	ldrh	r3, [r3, #2]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f97e 	bl	8003a1c <TM_STMPE811_ReadX>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f9d3 	bl	8003ad8 <TM_STMPE811_ReadY>
 8003732:	4603      	mov	r3, r0
 8003734:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003738:	3301      	adds	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	801a      	strh	r2, [r3, #0]
 8003740:	e017      	b.n	8003772 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	799b      	ldrb	r3, [r3, #6]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d113      	bne.n	8003772 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f964 	bl	8003a1c <TM_STMPE811_ReadX>
 8003754:	4603      	mov	r3, r0
 8003756:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f9b7 	bl	8003ad8 <TM_STMPE811_ReadY>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003772:	2201      	movs	r2, #1
 8003774:	214b      	movs	r1, #75	@ 0x4b
 8003776:	2082      	movs	r0, #130	@ 0x82
 8003778:	f000 f8de 	bl	8003938 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800377c:	2200      	movs	r2, #0
 800377e:	214b      	movs	r1, #75	@ 0x4b
 8003780:	2082      	movs	r0, #130	@ 0x82
 8003782:	f000 f8d9 	bl	8003938 <I2C3_Write>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <enableInterruptSupportForTouch+0x5c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <enableInterruptSupportForTouch+0x5c>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a6:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <enableInterruptSupportForTouch+0x5c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80037c6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80037ca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037d0:	2302      	movs	r3, #2
 80037d2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4805      	ldr	r0, [pc, #20]	@ (80037f0 <enableInterruptSupportForTouch+0x60>)
 80037da:	f000 fc5f 	bl	800409c <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037de:	2028      	movs	r0, #40	@ 0x28
 80037e0:	f7ff fe56 	bl	8003490 <__NVIC_EnableIRQ>

}
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020000 	.word	0x40020000

080037f4 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2002608c 	.word	0x2002608c

08003814 <I2C3_Init>:

static void I2C3_Init()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <I2C3_Init+0x6c>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <I2C3_Init+0x6c>)
 8003824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003828:	6413      	str	r3, [r2, #64]	@ 0x40
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <I2C3_Init+0x6c>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003836:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <I2C3_Init+0x70>)
 8003838:	4a13      	ldr	r2, [pc, #76]	@ (8003888 <I2C3_Init+0x74>)
 800383a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <I2C3_Init+0x70>)
 800383e:	4a13      	ldr	r2, [pc, #76]	@ (800388c <I2C3_Init+0x78>)
 8003840:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <I2C3_Init+0x70>)
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003848:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <I2C3_Init+0x70>)
 800384a:	2200      	movs	r2, #0
 800384c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <I2C3_Init+0x70>)
 8003850:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003854:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <I2C3_Init+0x70>)
 8003858:	2200      	movs	r2, #0
 800385a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800385c:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <I2C3_Init+0x70>)
 800385e:	2200      	movs	r2, #0
 8003860:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003862:	4808      	ldr	r0, [pc, #32]	@ (8003884 <I2C3_Init+0x70>)
 8003864:	f000 ff1e 	bl	80046a4 <HAL_I2C_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <I2C3_Init+0x5e>
    }
    return;
 8003876:	bf00      	nop
}
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	20026038 	.word	0x20026038
 8003888:	40005c00 	.word	0x40005c00
 800388c:	000186a0 	.word	0x000186a0

08003890 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003896:	f107 030c 	add.w	r3, r7, #12
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <I2C3_MspInit+0x9c>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <I2C3_MspInit+0x9c>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <I2C3_MspInit+0x9c>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	4b19      	ldr	r3, [pc, #100]	@ (800392c <I2C3_MspInit+0x9c>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	4a18      	ldr	r2, [pc, #96]	@ (800392c <I2C3_MspInit+0x9c>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d2:	4b16      	ldr	r3, [pc, #88]	@ (800392c <I2C3_MspInit+0x9c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038e4:	2312      	movs	r3, #18
 80038e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038f0:	2304      	movs	r3, #4
 80038f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	4619      	mov	r1, r3
 80038fa:	480d      	ldr	r0, [pc, #52]	@ (8003930 <I2C3_MspInit+0xa0>)
 80038fc:	f000 fbce 	bl	800409c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003904:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003906:	2312      	movs	r3, #18
 8003908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003912:	2304      	movs	r3, #4
 8003914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	@ (8003934 <I2C3_MspInit+0xa4>)
 800391e:	f000 fbbd 	bl	800409c <HAL_GPIO_Init>
    
}
 8003922:	bf00      	nop
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40020800 	.word	0x40020800
 8003934:	40020000 	.word	0x40020000

08003938 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af04      	add	r7, sp, #16
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
 8003942:	460b      	mov	r3, r1
 8003944:	717b      	strb	r3, [r7, #5]
 8003946:	4613      	mov	r3, r2
 8003948:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800394a:	793b      	ldrb	r3, [r7, #4]
 800394c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800394e:	797b      	ldrb	r3, [r7, #5]
 8003950:	b29a      	uxth	r2, r3
 8003952:	88f9      	ldrh	r1, [r7, #6]
 8003954:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <I2C3_Write+0x48>)
 8003956:	9302      	str	r3, [sp, #8]
 8003958:	2301      	movs	r3, #1
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	f107 030f 	add.w	r3, r7, #15
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2301      	movs	r3, #1
 8003964:	4807      	ldr	r0, [pc, #28]	@ (8003984 <I2C3_Write+0x4c>)
 8003966:	f000 ffe1 	bl	800492c <HAL_I2C_Mem_Write>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <I2C3_Write+0x50>)
 8003970:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003972:	f7ff ff3f 	bl	80037f4 <verifyHAL_I2C_IS_OKAY>
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	0003d090 	.word	0x0003d090
 8003984:	20026038 	.word	0x20026038
 8003988:	2002608c 	.word	0x2002608c

0800398c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af04      	add	r7, sp, #16
 8003992:	4603      	mov	r3, r0
 8003994:	603a      	str	r2, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
 8003998:	460b      	mov	r3, r1
 800399a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	b299      	uxth	r1, r3
 80039a0:	79bb      	ldrb	r3, [r7, #6]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <I2C3_Read+0x40>)
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	2301      	movs	r3, #1
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2301      	movs	r3, #1
 80039b2:	4807      	ldr	r0, [pc, #28]	@ (80039d0 <I2C3_Read+0x44>)
 80039b4:	f001 f8b4 	bl	8004b20 <HAL_I2C_Mem_Read>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <I2C3_Read+0x48>)
 80039be:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80039c0:	f7ff ff18 	bl	80037f4 <verifyHAL_I2C_IS_OKAY>
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	0003d090 	.word	0x0003d090
 80039d0:	20026038 	.word	0x20026038
 80039d4:	2002608c 	.word	0x2002608c

080039d8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af04      	add	r7, sp, #16
 80039de:	603a      	str	r2, [r7, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
 80039e6:	460b      	mov	r3, r1
 80039e8:	71bb      	strb	r3, [r7, #6]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	b299      	uxth	r1, r3
 80039f2:	79bb      	ldrb	r3, [r7, #6]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <I2C3_MulitByteRead+0x3c>)
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2301      	movs	r3, #1
 8003a04:	4804      	ldr	r0, [pc, #16]	@ (8003a18 <I2C3_MulitByteRead+0x40>)
 8003a06:	f001 f88b 	bl	8004b20 <HAL_I2C_Mem_Read>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	0003d090 	.word	0x0003d090
 8003a18:	20026038 	.word	0x20026038

08003a1c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003a26:	204d      	movs	r0, #77	@ 0x4d
 8003a28:	f7ff fe17 	bl	800365a <STMPE811_Read>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003a30:	204e      	movs	r0, #78	@ 0x4e
 8003a32:	f7ff fe12 	bl	800365a <STMPE811_Read>
 8003a36:	4603      	mov	r3, r0
 8003a38:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003a3a:	7a7b      	ldrb	r3, [r7, #9]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	7a3b      	ldrb	r3, [r7, #8]
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a4c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a50:	4293      	cmp	r3, r2
 8003a52:	dc06      	bgt.n	8003a62 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	81fb      	strh	r3, [r7, #14]
 8003a60:	e005      	b.n	8003a6e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003a68:	3308      	adds	r3, #8
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <TM_STMPE811_ReadX+0xb8>)
 8003a74:	fb82 1203 	smull	r1, r2, r2, r3
 8003a78:	441a      	add	r2, r3
 8003a7a:	10d2      	asrs	r2, r2, #3
 8003a7c:	17db      	asrs	r3, r3, #31
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a86:	2bef      	cmp	r3, #239	@ 0xef
 8003a88:	dd02      	ble.n	8003a90 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003a8a:	23ef      	movs	r3, #239	@ 0xef
 8003a8c:	81fb      	strh	r3, [r7, #14]
 8003a8e:	e005      	b.n	8003a9c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da01      	bge.n	8003a9c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003a9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dd05      	ble.n	8003ab2 <TM_STMPE811_ReadX+0x96>
 8003aa6:	89fa      	ldrh	r2, [r7, #14]
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	e004      	b.n	8003abc <TM_STMPE811_ReadX+0xa0>
 8003ab2:	89fb      	ldrh	r3, [r7, #14]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b21b      	sxth	r3, r3
 8003abc:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003abe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	dd01      	ble.n	8003aca <TM_STMPE811_ReadX+0xae>
        return val;
 8003ac6:	89fb      	ldrh	r3, [r7, #14]
 8003ac8:	e000      	b.n	8003acc <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003aca:	88fb      	ldrh	r3, [r7, #6]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	88888889 	.word	0x88888889

08003ad8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003ae2:	204f      	movs	r0, #79	@ 0x4f
 8003ae4:	f7ff fdb9 	bl	800365a <STMPE811_Read>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003aec:	2050      	movs	r0, #80	@ 0x50
 8003aee:	f7ff fdb4 	bl	800365a <STMPE811_Read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003af6:	7a7b      	ldrb	r3, [r7, #9]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	b21a      	sxth	r2, r3
 8003afc:	7a3b      	ldrb	r3, [r7, #8]
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b12:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <TM_STMPE811_ReadY+0xa0>)
 8003b14:	fb82 1203 	smull	r1, r2, r2, r3
 8003b18:	1052      	asrs	r2, r2, #1
 8003b1a:	17db      	asrs	r3, r3, #31
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dc02      	bgt.n	8003b2e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	81fb      	strh	r3, [r7, #14]
 8003b2c:	e007      	b.n	8003b3e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b36:	db02      	blt.n	8003b3e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003b38:	f240 133f 	movw	r3, #319	@ 0x13f
 8003b3c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003b3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dd05      	ble.n	8003b54 <TM_STMPE811_ReadY+0x7c>
 8003b48:	89fa      	ldrh	r2, [r7, #14]
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	e004      	b.n	8003b5e <TM_STMPE811_ReadY+0x86>
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003b60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	dd01      	ble.n	8003b6c <TM_STMPE811_ReadY+0x94>
        return val;
 8003b68:	89fb      	ldrh	r3, [r7, #14]
 8003b6a:	e000      	b.n	8003b6e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2e8ba2e9 	.word	0x2e8ba2e9

08003b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b84:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <_sbrk+0x5c>)
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <_sbrk+0x60>)
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <_sbrk+0x64>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <_sbrk+0x64>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <_sbrk+0x68>)
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d207      	bcs.n	8003bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bac:	f004 fbe8 	bl	8008380 <__errno>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	e009      	b.n	8003bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <_sbrk+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bc2:	4b07      	ldr	r3, [pc, #28]	@ (8003be0 <_sbrk+0x64>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	4a05      	ldr	r2, [pc, #20]	@ (8003be0 <_sbrk+0x64>)
 8003bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bce:	68fb      	ldr	r3, [r7, #12]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20030000 	.word	0x20030000
 8003bdc:	00000400 	.word	0x00000400
 8003be0:	20026090 	.word	0x20026090
 8003be4:	20026290 	.word	0x20026290

08003be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <SystemInit+0x20>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <SystemInit+0x20>)
 8003bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c10:	f7ff ffea 	bl	8003be8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c16:	490d      	ldr	r1, [pc, #52]	@ (8003c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c1c:	e002      	b.n	8003c24 <LoopCopyDataInit>

08003c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c22:	3304      	adds	r3, #4

08003c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c28:	d3f9      	bcc.n	8003c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c30:	e001      	b.n	8003c36 <LoopFillZerobss>

08003c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c34:	3204      	adds	r2, #4

08003c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c38:	d3fb      	bcc.n	8003c32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f004 fba7 	bl	800838c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3e:	f7fe fc2d 	bl	800249c <main>
  bx  lr    
 8003c42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c4c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8003c50:	0800a444 	.word	0x0800a444
  ldr r2, =_sbss
 8003c54:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8003c58:	20026290 	.word	0x20026290

08003c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c5c:	e7fe      	b.n	8003c5c <ADC_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca0 <HAL_Init+0x40>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_Init+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_Init+0x40>)
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_Init+0x40>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <HAL_Init+0x40>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 f991 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f808 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c94:	f7ff f93e 	bl	8002f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <HAL_InitTick+0x54>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_InitTick+0x58>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f9b7 	bl	8004036 <HAL_SYSTICK_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00e      	b.n	8003cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d80a      	bhi.n	8003cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f000 f971 	bl	8003fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <HAL_InitTick+0x5c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200001fc 	.word	0x200001fc
 8003cfc:	20000204 	.word	0x20000204
 8003d00:	20000200 	.word	0x20000200

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x20>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <HAL_IncTick+0x24>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000204 	.word	0x20000204
 8003d28:	20026094 	.word	0x20026094

08003d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_GetTick+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20026094 	.word	0x20026094

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff ffee 	bl	8003d2c <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_Delay+0x44>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6a:	bf00      	nop
 8003d6c:	f7ff ffde 	bl	8003d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000204 	.word	0x20000204

08003d8c <__NVIC_SetPriorityGrouping>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_GetPriorityGrouping>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <__NVIC_GetPriorityGrouping+0x18>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 0307 	and.w	r3, r3, #7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_EnableIRQ>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db0b      	blt.n	8003e1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	4907      	ldr	r1, [pc, #28]	@ (8003e28 <__NVIC_EnableIRQ+0x38>)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2001      	movs	r0, #1
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db12      	blt.n	8003e64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	490a      	ldr	r1, [pc, #40]	@ (8003e70 <__NVIC_DisableIRQ+0x44>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	3320      	adds	r3, #32
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e58:	f3bf 8f4f 	dsb	sy
}
 8003e5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e5e:	f3bf 8f6f 	isb	sy
}
 8003e62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0c      	blt.n	8003ea0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4907      	ldr	r1, [pc, #28]	@ (8003eac <__NVIC_ClearPendingIRQ+0x38>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2001      	movs	r0, #1
 8003e96:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9a:	3360      	adds	r3, #96	@ 0x60
 8003e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	@ (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	@ (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf28      	it	cs
 8003f22:	2304      	movcs	r3, #4
 8003f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d902      	bls.n	8003f34 <NVIC_EncodePriority+0x30>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3b03      	subs	r3, #3
 8003f32:	e000      	b.n	8003f36 <NVIC_EncodePriority+0x32>
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	401a      	ands	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	4313      	orrs	r3, r2
         );
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	@ 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7c:	d301      	bcc.n	8003f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <SysTick_Config+0x40>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f7ff ff8e 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <SysTick_Config+0x40>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9a:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <SysTick_Config+0x40>)
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff fee7 	bl	8003d8c <__NVIC_SetPriorityGrouping>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd8:	f7ff fefc 	bl	8003dd4 <__NVIC_GetPriorityGrouping>
 8003fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff8e 	bl	8003f04 <NVIC_EncodePriority>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff5d 	bl	8003eb0 <__NVIC_SetPriority>
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff feef 	bl	8003df0 <__NVIC_EnableIRQ>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff feff 	bl	8003e2c <__NVIC_DisableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff94 	bl	8003f6c <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff09 	bl	8003e74 <__NVIC_ClearPendingIRQ>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004086:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_EXTI_ClearPending+0x2c>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6153      	str	r3, [r2, #20]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40013c00 	.word	0x40013c00

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	@ 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e177      	b.n	80043a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b8:	2201      	movs	r2, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	f040 8166 	bne.w	80043a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d005      	beq.n	80040ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d130      	bne.n	8004150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0201 	and.w	r2, r3, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d017      	beq.n	800418c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	2203      	movs	r2, #3
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d123      	bne.n	80041e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	08da      	lsrs	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80c0 	beq.w	80043a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	4b66      	ldr	r3, [pc, #408]	@ (80043c0 <HAL_GPIO_Init+0x324>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_GPIO_Init+0x324>)
 800422c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004230:	6453      	str	r3, [r2, #68]	@ 0x44
 8004232:	4b63      	ldr	r3, [pc, #396]	@ (80043c0 <HAL_GPIO_Init+0x324>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423e:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <HAL_GPIO_Init+0x328>)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a58      	ldr	r2, [pc, #352]	@ (80043c8 <HAL_GPIO_Init+0x32c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d037      	beq.n	80042da <HAL_GPIO_Init+0x23e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a57      	ldr	r2, [pc, #348]	@ (80043cc <HAL_GPIO_Init+0x330>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_GPIO_Init+0x23a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a56      	ldr	r2, [pc, #344]	@ (80043d0 <HAL_GPIO_Init+0x334>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <HAL_GPIO_Init+0x236>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a55      	ldr	r2, [pc, #340]	@ (80043d4 <HAL_GPIO_Init+0x338>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d025      	beq.n	80042ce <HAL_GPIO_Init+0x232>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a54      	ldr	r2, [pc, #336]	@ (80043d8 <HAL_GPIO_Init+0x33c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <HAL_GPIO_Init+0x22e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a53      	ldr	r2, [pc, #332]	@ (80043dc <HAL_GPIO_Init+0x340>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d019      	beq.n	80042c6 <HAL_GPIO_Init+0x22a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a52      	ldr	r2, [pc, #328]	@ (80043e0 <HAL_GPIO_Init+0x344>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_GPIO_Init+0x226>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a51      	ldr	r2, [pc, #324]	@ (80043e4 <HAL_GPIO_Init+0x348>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00d      	beq.n	80042be <HAL_GPIO_Init+0x222>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a50      	ldr	r2, [pc, #320]	@ (80043e8 <HAL_GPIO_Init+0x34c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <HAL_GPIO_Init+0x21e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4f      	ldr	r2, [pc, #316]	@ (80043ec <HAL_GPIO_Init+0x350>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_GPIO_Init+0x21a>
 80042b2:	2309      	movs	r3, #9
 80042b4:	e012      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042b6:	230a      	movs	r3, #10
 80042b8:	e010      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ba:	2308      	movs	r3, #8
 80042bc:	e00e      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042be:	2307      	movs	r3, #7
 80042c0:	e00c      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e00a      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042c6:	2305      	movs	r3, #5
 80042c8:	e008      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ca:	2304      	movs	r3, #4
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e004      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_GPIO_Init+0x240>
 80042da:	2300      	movs	r3, #0
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	f002 0203 	and.w	r2, r2, #3
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	4093      	lsls	r3, r2
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ec:	4935      	ldr	r1, [pc, #212]	@ (80043c4 <HAL_GPIO_Init+0x328>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	3302      	adds	r3, #2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fa:	4b3d      	ldr	r3, [pc, #244]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800431e:	4a34      	ldr	r2, [pc, #208]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004324:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004348:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800434e:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004372:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <HAL_GPIO_Init+0x354>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	f67f ae84 	bls.w	80040b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020400 	.word	0x40020400
 80043d0:	40020800 	.word	0x40020800
 80043d4:	40020c00 	.word	0x40020c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40021400 	.word	0x40021400
 80043e0:	40021800 	.word	0x40021800
 80043e4:	40021c00 	.word	0x40021c00
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40022400 	.word	0x40022400
 80043f0:	40013c00 	.word	0x40013c00

080043f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e0d9      	b.n	80045c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004410:	2201      	movs	r2, #1
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	f040 80c9 	bne.w	80045be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800442c:	4a6b      	ldr	r2, [pc, #428]	@ (80045dc <HAL_GPIO_DeInit+0x1e8>)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a63      	ldr	r2, [pc, #396]	@ (80045e0 <HAL_GPIO_DeInit+0x1ec>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d037      	beq.n	80044c6 <HAL_GPIO_DeInit+0xd2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a62      	ldr	r2, [pc, #392]	@ (80045e4 <HAL_GPIO_DeInit+0x1f0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_GPIO_DeInit+0xce>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a61      	ldr	r2, [pc, #388]	@ (80045e8 <HAL_GPIO_DeInit+0x1f4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02b      	beq.n	80044be <HAL_GPIO_DeInit+0xca>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a60      	ldr	r2, [pc, #384]	@ (80045ec <HAL_GPIO_DeInit+0x1f8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d025      	beq.n	80044ba <HAL_GPIO_DeInit+0xc6>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a5f      	ldr	r2, [pc, #380]	@ (80045f0 <HAL_GPIO_DeInit+0x1fc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01f      	beq.n	80044b6 <HAL_GPIO_DeInit+0xc2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a5e      	ldr	r2, [pc, #376]	@ (80045f4 <HAL_GPIO_DeInit+0x200>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d019      	beq.n	80044b2 <HAL_GPIO_DeInit+0xbe>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a5d      	ldr	r2, [pc, #372]	@ (80045f8 <HAL_GPIO_DeInit+0x204>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_GPIO_DeInit+0xba>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a5c      	ldr	r2, [pc, #368]	@ (80045fc <HAL_GPIO_DeInit+0x208>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00d      	beq.n	80044aa <HAL_GPIO_DeInit+0xb6>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a5b      	ldr	r2, [pc, #364]	@ (8004600 <HAL_GPIO_DeInit+0x20c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <HAL_GPIO_DeInit+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a5a      	ldr	r2, [pc, #360]	@ (8004604 <HAL_GPIO_DeInit+0x210>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_GPIO_DeInit+0xae>
 800449e:	2309      	movs	r3, #9
 80044a0:	e012      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044a2:	230a      	movs	r3, #10
 80044a4:	e010      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044a6:	2308      	movs	r3, #8
 80044a8:	e00e      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044aa:	2307      	movs	r3, #7
 80044ac:	e00c      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e00a      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044b2:	2305      	movs	r3, #5
 80044b4:	e008      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e006      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e004      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044be:	2302      	movs	r3, #2
 80044c0:	e002      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_GPIO_DeInit+0xd4>
 80044c6:	2300      	movs	r3, #0
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	f002 0203 	and.w	r2, r2, #3
 80044ce:	0092      	lsls	r2, r2, #2
 80044d0:	4093      	lsls	r3, r2
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d132      	bne.n	800453e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80044d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	43db      	mvns	r3, r3
 80044e0:	4949      	ldr	r1, [pc, #292]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80044e6:	4b48      	ldr	r3, [pc, #288]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	4946      	ldr	r1, [pc, #280]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80044f4:	4b44      	ldr	r3, [pc, #272]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	4942      	ldr	r1, [pc, #264]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004502:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43db      	mvns	r3, r3
 800450a:	493f      	ldr	r1, [pc, #252]	@ (8004608 <HAL_GPIO_DeInit+0x214>)
 800450c:	4013      	ands	r3, r2
 800450e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004520:	4a2e      	ldr	r2, [pc, #184]	@ (80045dc <HAL_GPIO_DeInit+0x1e8>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	43da      	mvns	r2, r3
 8004530:	482a      	ldr	r0, [pc, #168]	@ (80045dc <HAL_GPIO_DeInit+0x1e8>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	400a      	ands	r2, r1
 8004538:	3302      	adds	r3, #2
 800453a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2103      	movs	r1, #3
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	08d2      	lsrs	r2, r2, #3
 8004574:	4019      	ands	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3208      	adds	r2, #8
 800457a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2103      	movs	r1, #3
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	401a      	ands	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	2101      	movs	r1, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2103      	movs	r1, #3
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	f67f af22 	bls.w	8004410 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40013800 	.word	0x40013800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020400 	.word	0x40020400
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020c00 	.word	0x40020c00
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40021800 	.word	0x40021800
 80045fc:	40021c00 	.word	0x40021c00
 8004600:	40022000 	.word	0x40022000
 8004604:	40022400 	.word	0x40022400
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4013      	ands	r3, r2
 8004656:	041a      	lsls	r2, r3, #16
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	43d9      	mvns	r1, r3
 800465c:	887b      	ldrh	r3, [r7, #2]
 800465e:	400b      	ands	r3, r1
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800467e:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fa50 	bl	8002b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e12b      	b.n	800490e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe fc4a 	bl	8002f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	@ 0x24
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004708:	f001 ff06 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a81      	ldr	r2, [pc, #516]	@ (8004918 <HAL_I2C_Init+0x274>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d807      	bhi.n	8004728 <HAL_I2C_Init+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a80      	ldr	r2, [pc, #512]	@ (800491c <HAL_I2C_Init+0x278>)
 800471c:	4293      	cmp	r3, r2
 800471e:	bf94      	ite	ls
 8004720:	2301      	movls	r3, #1
 8004722:	2300      	movhi	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e006      	b.n	8004736 <HAL_I2C_Init+0x92>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a7d      	ldr	r2, [pc, #500]	@ (8004920 <HAL_I2C_Init+0x27c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0e7      	b.n	800490e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a78      	ldr	r2, [pc, #480]	@ (8004924 <HAL_I2C_Init+0x280>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a6a      	ldr	r2, [pc, #424]	@ (8004918 <HAL_I2C_Init+0x274>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d802      	bhi.n	8004778 <HAL_I2C_Init+0xd4>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3301      	adds	r3, #1
 8004776:	e009      	b.n	800478c <HAL_I2C_Init+0xe8>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a69      	ldr	r2, [pc, #420]	@ (8004928 <HAL_I2C_Init+0x284>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	430b      	orrs	r3, r1
 8004792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800479e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	495c      	ldr	r1, [pc, #368]	@ (8004918 <HAL_I2C_Init+0x274>)
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d819      	bhi.n	80047e0 <HAL_I2C_Init+0x13c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e59      	subs	r1, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047c0:	400b      	ands	r3, r1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_I2C_Init+0x138>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e59      	subs	r1, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047da:	e051      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047dc:	2304      	movs	r3, #4
 80047de:	e04f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d111      	bne.n	800480c <HAL_I2C_Init+0x168>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e012      	b.n	8004832 <HAL_I2C_Init+0x18e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	0099      	lsls	r1, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Init+0x196>
 8004836:	2301      	movs	r3, #1
 8004838:	e022      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10e      	bne.n	8004860 <HAL_I2C_Init+0x1bc>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e58      	subs	r0, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	fbb0 f3f3 	udiv	r3, r0, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485e:	e00f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e58      	subs	r0, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	0099      	lsls	r1, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	6809      	ldr	r1, [r1, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6911      	ldr	r1, [r2, #16]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	000186a0 	.word	0x000186a0
 800491c:	001e847f 	.word	0x001e847f
 8004920:	003d08ff 	.word	0x003d08ff
 8004924:	431bde83 	.word	0x431bde83
 8004928:	10624dd3 	.word	0x10624dd3

0800492c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	461a      	mov	r2, r3
 800493a:	4603      	mov	r3, r0
 800493c:	817b      	strh	r3, [r7, #10]
 800493e:	460b      	mov	r3, r1
 8004940:	813b      	strh	r3, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004946:	f7ff f9f1 	bl	8003d2c <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	f040 80d9 	bne.w	8004b0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2319      	movs	r3, #25
 8004960:	2201      	movs	r2, #1
 8004962:	496d      	ldr	r1, [pc, #436]	@ (8004b18 <HAL_I2C_Mem_Write+0x1ec>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fc8b 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	e0cc      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_I2C_Mem_Write+0x56>
 800497e:	2302      	movs	r3, #2
 8004980:	e0c5      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d007      	beq.n	80049a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2221      	movs	r2, #33	@ 0x21
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2240      	movs	r2, #64	@ 0x40
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a3a      	ldr	r2, [r7, #32]
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a4d      	ldr	r2, [pc, #308]	@ (8004b1c <HAL_I2C_Mem_Write+0x1f0>)
 80049e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ea:	88f8      	ldrh	r0, [r7, #6]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	8979      	ldrh	r1, [r7, #10]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4603      	mov	r3, r0
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fac2 	bl	8004f84 <I2C_RequestMemoryWrite>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d052      	beq.n	8004aac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e081      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fd50 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d107      	bne.n	8004a32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06b      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11b      	bne.n	8004aac <HAL_I2C_Mem_Write+0x180>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d017      	beq.n	8004aac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1aa      	bne.n	8004a0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fd43 	bl	8005544 <I2C_WaitOnBTFFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d107      	bne.n	8004adc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ada:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e016      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	00100002 	.word	0x00100002
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	@ 0x30
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	817b      	strh	r3, [r7, #10]
 8004b32:	460b      	mov	r3, r1
 8004b34:	813b      	strh	r3, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b3a:	f7ff f8f7 	bl	8003d2c <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	f040 8214 	bne.w	8004f76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2319      	movs	r3, #25
 8004b54:	2201      	movs	r2, #1
 8004b56:	497b      	ldr	r1, [pc, #492]	@ (8004d44 <HAL_I2C_Mem_Read+0x224>)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fb91 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	e207      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x56>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e200      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d007      	beq.n	8004b9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2222      	movs	r2, #34	@ 0x22
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2240      	movs	r2, #64	@ 0x40
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a5b      	ldr	r2, [pc, #364]	@ (8004d48 <HAL_I2C_Mem_Read+0x228>)
 8004bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bde:	88f8      	ldrh	r0, [r7, #6]
 8004be0:	893a      	ldrh	r2, [r7, #8]
 8004be2:	8979      	ldrh	r1, [r7, #10]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4603      	mov	r3, r0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fa5e 	bl	80050b0 <I2C_RequestMemoryRead>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e1bc      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d113      	bne.n	8004c2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e190      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d11b      	bne.n	8004c6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e170      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d11b      	bne.n	8004cae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	e150      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cc4:	e144      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	f200 80f1 	bhi.w	8004eb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d123      	bne.n	8004d20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fc79 	bl	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e145      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d1e:	e117      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d14e      	bne.n	8004dc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4906      	ldr	r1, [pc, #24]	@ (8004d4c <HAL_I2C_Mem_Read+0x22c>)
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 faa4 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e11a      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
 8004d42:	bf00      	nop
 8004d44:	00100002 	.word	0x00100002
 8004d48:	ffff0000 	.word	0xffff0000
 8004d4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dc4:	e0c4      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	2200      	movs	r2, #0
 8004dce:	496c      	ldr	r1, [pc, #432]	@ (8004f80 <HAL_I2C_Mem_Read+0x460>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fa55 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0cb      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4955      	ldr	r1, [pc, #340]	@ (8004f80 <HAL_I2C_Mem_Read+0x460>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fa27 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e09d      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004eb0:	e04e      	b.n	8004f50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fb8c 	bl	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e058      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d124      	bne.n	8004f50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d107      	bne.n	8004f1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f aeb6 	bne.w	8004cc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
  }
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3728      	adds	r7, #40	@ 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	00010004 	.word	0x00010004

08004f84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	817b      	strh	r3, [r7, #10]
 8004f96:	460b      	mov	r3, r1
 8004f98:	813b      	strh	r3, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f960 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00d      	beq.n	8004fe2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd4:	d103      	bne.n	8004fde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e05f      	b.n	80050a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	492d      	ldr	r1, [pc, #180]	@ (80050ac <I2C_RequestMemoryWrite+0x128>)
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f9bb 	bl	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e04c      	b.n	80050a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa46 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	2b04      	cmp	r3, #4
 8005034:	d107      	bne.n	8005046 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e02b      	b.n	80050a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d105      	bne.n	800505c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005050:	893b      	ldrh	r3, [r7, #8]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]
 800505a:	e021      	b.n	80050a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800505c:	893b      	ldrh	r3, [r7, #8]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	6a39      	ldr	r1, [r7, #32]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fa20 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	2b04      	cmp	r3, #4
 8005080:	d107      	bne.n	8005092 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e005      	b.n	80050a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	00010002 	.word	0x00010002

080050b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	460b      	mov	r3, r1
 80050c4:	813b      	strh	r3, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f8c2 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005110:	d103      	bne.n	800511a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005118:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0aa      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800512c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	4952      	ldr	r1, [pc, #328]	@ (800527c <I2C_RequestMemoryRead+0x1cc>)
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f91d 	bl	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e097      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f9a8 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	2b04      	cmp	r3, #4
 8005170:	d107      	bne.n	8005182 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e076      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	611a      	str	r2, [r3, #16]
 8005196:	e021      	b.n	80051dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b29b      	uxth	r3, r3
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	6a39      	ldr	r1, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f982 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d107      	bne.n	80051ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e050      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d2:	893b      	ldrh	r3, [r7, #8]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051de:	6a39      	ldr	r1, [r7, #32]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f967 	bl	80054b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d107      	bne.n	8005204 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005202:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e035      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005216:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2200      	movs	r2, #0
 8005220:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f82b 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00d      	beq.n	800524c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523e:	d103      	bne.n	8005248 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e013      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800524c:	897b      	ldrh	r3, [r7, #10]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	4906      	ldr	r1, [pc, #24]	@ (800527c <I2C_RequestMemoryRead+0x1cc>)
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f886 	bl	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	00010002 	.word	0x00010002

08005280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005290:	e048      	b.n	8005324 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d044      	beq.n	8005324 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fe fd47 	bl	8003d2c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d139      	bne.n	8005324 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10d      	bne.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	43da      	mvns	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	e00c      	b.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	43da      	mvns	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d116      	bne.n	8005324 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e023      	b.n	800536c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d10d      	bne.n	800534a <I2C_WaitOnFlagUntilTimeout+0xca>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	43da      	mvns	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	e00c      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	43da      	mvns	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	429a      	cmp	r2, r3
 8005368:	d093      	beq.n	8005292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005382:	e071      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005392:	d123      	bne.n	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e067      	b.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d041      	beq.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e4:	f7fe fca2 	bl	8003d2c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d136      	bne.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10c      	bne.n	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e00b      	b.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	43da      	mvns	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf14      	ite	ne
 8005430:	2301      	movne	r3, #1
 8005432:	2300      	moveq	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e021      	b.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10c      	bne.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	43da      	mvns	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e00b      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	43da      	mvns	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af6d 	bne.w	8005384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c0:	e034      	b.n	800552c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f8e3 	bl	800568e <I2C_IsAcknowledgeFailed>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e034      	b.n	800553c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d028      	beq.n	800552c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054da:	f7fe fc27 	bl	8003d2c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d302      	bcc.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d11d      	bne.n	800552c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fa:	2b80      	cmp	r3, #128	@ 0x80
 80054fc:	d016      	beq.n	800552c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e007      	b.n	800553c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d1c3      	bne.n	80054c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005550:	e034      	b.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f89b 	bl	800568e <I2C_IsAcknowledgeFailed>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e034      	b.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d028      	beq.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fe fbdf 	bl	8003d2c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11d      	bne.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d016      	beq.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e007      	b.n	80055cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d1c3      	bne.n	8005552 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055e0:	e049      	b.n	8005676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d119      	bne.n	8005624 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0210 	mvn.w	r2, #16
 80055f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e030      	b.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005624:	f7fe fb82 	bl	8003d2c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d016      	beq.n	8005676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e007      	b.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d1ae      	bne.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a4:	d11b      	bne.n	80056de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0bf      	b.n	800587e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fd fc90 	bl	8003038 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800572e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005744:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b4a      	ldr	r3, [pc, #296]	@ (8005888 <HAL_LTDC_Init+0x19c>)
 8005760:	400b      	ands	r3, r1
 8005762:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6899      	ldr	r1, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68d9      	ldr	r1, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b3e      	ldr	r3, [pc, #248]	@ (8005888 <HAL_LTDC_Init+0x19c>)
 800578e:	400b      	ands	r3, r1
 8005790:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	041b      	lsls	r3, r3, #16
 8005798:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68d9      	ldr	r1, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6919      	ldr	r1, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b33      	ldr	r3, [pc, #204]	@ (8005888 <HAL_LTDC_Init+0x19c>)
 80057bc:	400b      	ands	r3, r1
 80057be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6919      	ldr	r1, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6959      	ldr	r1, [r3, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b27      	ldr	r3, [pc, #156]	@ (8005888 <HAL_LTDC_Init+0x19c>)
 80057ea:	400b      	ands	r3, r1
 80057ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6959      	ldr	r1, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800582e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0206 	orr.w	r2, r2, #6
 800585a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	f000f800 	.word	0xf000f800

0800588c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_LTDC_ConfigLayer+0x1a>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e02c      	b.n	8005900 <HAL_LTDC_ConfigLayer+0x74>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2134      	movs	r1, #52	@ 0x34
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f811 	bl	8005908 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bdb0      	pop	{r4, r5, r7, pc}

08005908 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	@ 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	4413      	add	r3, r2
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	01db      	lsls	r3, r3, #7
 8005934:	4413      	add	r3, r2
 8005936:	3384      	adds	r3, #132	@ 0x84
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	4611      	mov	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	01d2      	lsls	r2, r2, #7
 8005944:	440a      	add	r2, r1
 8005946:	3284      	adds	r2, #132	@ 0x84
 8005948:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800594c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800595e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005960:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4619      	mov	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	01db      	lsls	r3, r3, #7
 800596c:	440b      	add	r3, r1
 800596e:	3384      	adds	r3, #132	@ 0x84
 8005970:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005976:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005986:	4413      	add	r3, r2
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	01db      	lsls	r3, r3, #7
 8005996:	4413      	add	r3, r2
 8005998:	3384      	adds	r3, #132	@ 0x84
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	4611      	mov	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	01d2      	lsls	r2, r2, #7
 80059a6:	440a      	add	r2, r1
 80059a8:	3284      	adds	r2, #132	@ 0x84
 80059aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80059ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059be:	4413      	add	r3, r2
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	01db      	lsls	r3, r3, #7
 80059cc:	440b      	add	r3, r1
 80059ce:	3384      	adds	r3, #132	@ 0x84
 80059d0:	4619      	mov	r1, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	01db      	lsls	r3, r3, #7
 80059e2:	4413      	add	r3, r2
 80059e4:	3384      	adds	r3, #132	@ 0x84
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	4611      	mov	r1, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	01d2      	lsls	r2, r2, #7
 80059f2:	440a      	add	r2, r1
 80059f4:	3284      	adds	r2, #132	@ 0x84
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	01db      	lsls	r3, r3, #7
 8005a06:	4413      	add	r3, r2
 8005a08:	3384      	adds	r3, #132	@ 0x84
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	01db      	lsls	r3, r3, #7
 8005a38:	4413      	add	r3, r2
 8005a3a:	3384      	adds	r3, #132	@ 0x84
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	4413      	add	r3, r2
 8005a4a:	3384      	adds	r3, #132	@ 0x84
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a58:	461a      	mov	r2, r3
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	01db      	lsls	r3, r3, #7
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3384      	adds	r3, #132	@ 0x84
 8005a70:	4619      	mov	r1, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	01db      	lsls	r3, r3, #7
 8005a82:	4413      	add	r3, r2
 8005a84:	3384      	adds	r3, #132	@ 0x84
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	01d2      	lsls	r2, r2, #7
 8005a92:	440a      	add	r2, r1
 8005a94:	3284      	adds	r2, #132	@ 0x84
 8005a96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3384      	adds	r3, #132	@ 0x84
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	3384      	adds	r3, #132	@ 0x84
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	01d2      	lsls	r2, r2, #7
 8005acc:	440a      	add	r2, r1
 8005ace:	3284      	adds	r2, #132	@ 0x84
 8005ad0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ad4:	f023 0307 	bic.w	r3, r3, #7
 8005ad8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6809      	ldr	r1, [r1, #0]
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	01c9      	lsls	r1, r1, #7
 8005aec:	4401      	add	r1, r0
 8005aee:	3184      	adds	r1, #132	@ 0x84
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	3384      	adds	r3, #132	@ 0x84
 8005b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	01db      	lsls	r3, r3, #7
 8005b0e:	4413      	add	r3, r2
 8005b10:	3384      	adds	r3, #132	@ 0x84
 8005b12:	461a      	mov	r2, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	01db      	lsls	r3, r3, #7
 8005b22:	4413      	add	r3, r2
 8005b24:	3384      	adds	r3, #132	@ 0x84
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005b36:	2304      	movs	r3, #4
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e01b      	b.n	8005b74 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005b44:	2303      	movs	r3, #3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e014      	b.n	8005b74 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d00b      	beq.n	8005b6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d007      	beq.n	8005b6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d003      	beq.n	8005b6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b66:	2b07      	cmp	r3, #7
 8005b68:	d102      	bne.n	8005b70 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e001      	b.n	8005b74 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	4413      	add	r3, r2
 8005b80:	3384      	adds	r3, #132	@ 0x84
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	01d2      	lsls	r2, r2, #7
 8005b8e:	440a      	add	r2, r1
 8005b90:	3284      	adds	r2, #132	@ 0x84
 8005b92:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	1acb      	subs	r3, r1, r3
 8005bae:	69f9      	ldr	r1, [r7, #28]
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	6809      	ldr	r1, [r1, #0]
 8005bba:	4608      	mov	r0, r1
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	01c9      	lsls	r1, r1, #7
 8005bc0:	4401      	add	r1, r0
 8005bc2:	3184      	adds	r1, #132	@ 0x84
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	01db      	lsls	r3, r3, #7
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3384      	adds	r3, #132	@ 0x84
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	01d2      	lsls	r2, r2, #7
 8005be2:	440a      	add	r2, r1
 8005be4:	3284      	adds	r2, #132	@ 0x84
 8005be6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	01db      	lsls	r3, r3, #7
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3384      	adds	r3, #132	@ 0x84
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	01db      	lsls	r3, r3, #7
 8005c10:	4413      	add	r3, r2
 8005c12:	3384      	adds	r3, #132	@ 0x84
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	01d2      	lsls	r2, r2, #7
 8005c20:	440a      	add	r2, r1
 8005c22:	3284      	adds	r2, #132	@ 0x84
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6013      	str	r3, [r2, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3724      	adds	r7, #36	@ 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e267      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d075      	beq.n	8005d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c56:	4b88      	ldr	r3, [pc, #544]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d00c      	beq.n	8005c7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c62:	4b85      	ldr	r3, [pc, #532]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d112      	bne.n	8005c94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6e:	4b82      	ldr	r3, [pc, #520]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7a:	d10b      	bne.n	8005c94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05b      	beq.n	8005d40 <HAL_RCC_OscConfig+0x108>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d157      	bne.n	8005d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e242      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9c:	d106      	bne.n	8005cac <HAL_RCC_OscConfig+0x74>
 8005c9e:	4b76      	ldr	r3, [pc, #472]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a75      	ldr	r2, [pc, #468]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e01d      	b.n	8005ce8 <HAL_RCC_OscConfig+0xb0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x98>
 8005cb6:	4b70      	ldr	r3, [pc, #448]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6f      	ldr	r2, [pc, #444]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0xb0>
 8005cd0:	4b69      	ldr	r3, [pc, #420]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a68      	ldr	r2, [pc, #416]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b66      	ldr	r3, [pc, #408]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a65      	ldr	r2, [pc, #404]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf0:	f7fe f81c 	bl	8003d2c <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fe f818 	bl	8003d2c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	@ 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e207      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xc0>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fe f808 	bl	8003d2c <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d20:	f7fe f804 	bl	8003d2c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	@ 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e1f3      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	4b51      	ldr	r3, [pc, #324]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0xe8>
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5a:	4b47      	ldr	r3, [pc, #284]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d11c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d66:	4b44      	ldr	r3, [pc, #272]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	4b41      	ldr	r3, [pc, #260]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_RCC_OscConfig+0x152>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e1c7      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4937      	ldr	r1, [pc, #220]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	e03a      	b.n	8005e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d020      	beq.n	8005dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da8:	4b34      	ldr	r3, [pc, #208]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fd ffbd 	bl	8003d2c <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fd ffb9 	bl	8003d2c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e1a8      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd4:	4b28      	ldr	r3, [pc, #160]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4925      	ldr	r1, [pc, #148]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	e015      	b.n	8005e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dea:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <HAL_RCC_OscConfig+0x244>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fd ff9c 	bl	8003d2c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fd ff98 	bl	8003d2c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e187      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d036      	beq.n	8005e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2a:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <HAL_RCC_OscConfig+0x248>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fd ff7c 	bl	8003d2c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e38:	f7fd ff78 	bl	8003d2c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e167      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x200>
 8005e56:	e01b      	b.n	8005e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e58:	4b09      	ldr	r3, [pc, #36]	@ (8005e80 <HAL_RCC_OscConfig+0x248>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5e:	f7fd ff65 	bl	8003d2c <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e64:	e00e      	b.n	8005e84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e66:	f7fd ff61 	bl	8003d2c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d907      	bls.n	8005e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e150      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	42470000 	.word	0x42470000
 8005e80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e84:	4b88      	ldr	r3, [pc, #544]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ea      	bne.n	8005e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8097 	beq.w	8005fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea2:	4b81      	ldr	r3, [pc, #516]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ebe:	4b7a      	ldr	r3, [pc, #488]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec6:	60bb      	str	r3, [r7, #8]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	4b77      	ldr	r3, [pc, #476]	@ (80060ac <HAL_RCC_OscConfig+0x474>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d118      	bne.n	8005f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eda:	4b74      	ldr	r3, [pc, #464]	@ (80060ac <HAL_RCC_OscConfig+0x474>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a73      	ldr	r2, [pc, #460]	@ (80060ac <HAL_RCC_OscConfig+0x474>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee6:	f7fd ff21 	bl	8003d2c <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eee:	f7fd ff1d 	bl	8003d2c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e10c      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	4b6a      	ldr	r3, [pc, #424]	@ (80060ac <HAL_RCC_OscConfig+0x474>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x2ea>
 8005f14:	4b64      	ldr	r3, [pc, #400]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	4a63      	ldr	r2, [pc, #396]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f20:	e01c      	b.n	8005f5c <HAL_RCC_OscConfig+0x324>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x30c>
 8005f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	4a5e      	ldr	r2, [pc, #376]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f36:	4b5c      	ldr	r3, [pc, #368]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	4a5b      	ldr	r2, [pc, #364]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f42:	e00b      	b.n	8005f5c <HAL_RCC_OscConfig+0x324>
 8005f44:	4b58      	ldr	r3, [pc, #352]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f48:	4a57      	ldr	r2, [pc, #348]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f50:	4b55      	ldr	r3, [pc, #340]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f54:	4a54      	ldr	r2, [pc, #336]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f56:	f023 0304 	bic.w	r3, r3, #4
 8005f5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d015      	beq.n	8005f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fd fee2 	bl	8003d2c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6c:	f7fd fede 	bl	8003d2c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e0cb      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f82:	4b49      	ldr	r3, [pc, #292]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ee      	beq.n	8005f6c <HAL_RCC_OscConfig+0x334>
 8005f8e:	e014      	b.n	8005fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f90:	f7fd fecc 	bl	8003d2c <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fd fec8 	bl	8003d2c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0b5      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fae:	4b3e      	ldr	r3, [pc, #248]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1ee      	bne.n	8005f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d105      	bne.n	8005fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc0:	4b39      	ldr	r3, [pc, #228]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	4a38      	ldr	r2, [pc, #224]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a1 	beq.w	8006118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fd6:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d05c      	beq.n	800609c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d141      	bne.n	800606e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fea:	4b31      	ldr	r3, [pc, #196]	@ (80060b0 <HAL_RCC_OscConfig+0x478>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff0:	f7fd fe9c 	bl	8003d2c <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fd fe98 	bl	8003d2c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e087      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	4b27      	ldr	r3, [pc, #156]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f0      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	019b      	lsls	r3, r3, #6
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	3b01      	subs	r3, #1
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006038:	061b      	lsls	r3, r3, #24
 800603a:	491b      	ldr	r1, [pc, #108]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x478>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006046:	f7fd fe71 	bl	8003d2c <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800604e:	f7fd fe6d 	bl	8003d2c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e05c      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006060:	4b11      	ldr	r3, [pc, #68]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x416>
 800606c:	e054      	b.n	8006118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606e:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <HAL_RCC_OscConfig+0x478>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fd fe5a 	bl	8003d2c <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607c:	f7fd fe56 	bl	8003d2c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e045      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_RCC_OscConfig+0x470>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x444>
 800609a:	e03d      	b.n	8006118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e038      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
 80060a8:	40023800 	.word	0x40023800
 80060ac:	40007000 	.word	0x40007000
 80060b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006124 <HAL_RCC_OscConfig+0x4ec>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d028      	beq.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d121      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d11a      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d111      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	3b01      	subs	r3, #1
 80060fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006110:	429a      	cmp	r2, r3
 8006112:	d001      	beq.n	8006118 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40023800 	.word	0x40023800

08006128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0cc      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800613c:	4b68      	ldr	r3, [pc, #416]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d90c      	bls.n	8006164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614a:	4b65      	ldr	r3, [pc, #404]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006152:	4b63      	ldr	r3, [pc, #396]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0b8      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d020      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800617c:	4b59      	ldr	r3, [pc, #356]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a58      	ldr	r2, [pc, #352]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006186:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006194:	4b53      	ldr	r3, [pc, #332]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4a52      	ldr	r2, [pc, #328]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800619e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a0:	4b50      	ldr	r3, [pc, #320]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	494d      	ldr	r1, [pc, #308]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d044      	beq.n	8006248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d107      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c6:	4b47      	ldr	r3, [pc, #284]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d119      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e07f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d003      	beq.n	80061e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e6:	4b3f      	ldr	r3, [pc, #252]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e06f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f6:	4b3b      	ldr	r3, [pc, #236]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e067      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006206:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f023 0203 	bic.w	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4934      	ldr	r1, [pc, #208]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	4313      	orrs	r3, r2
 8006216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006218:	f7fd fd88 	bl	8003d2c <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	e00a      	b.n	8006236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006220:	f7fd fd84 	bl	8003d2c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e04f      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006236:	4b2b      	ldr	r3, [pc, #172]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 020c 	and.w	r2, r3, #12
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	429a      	cmp	r2, r3
 8006246:	d1eb      	bne.n	8006220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006248:	4b25      	ldr	r3, [pc, #148]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d20c      	bcs.n	8006270 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b22      	ldr	r3, [pc, #136]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e032      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800627c:	4b19      	ldr	r3, [pc, #100]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4916      	ldr	r1, [pc, #88]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800629a:	4b12      	ldr	r3, [pc, #72]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	490e      	ldr	r1, [pc, #56]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ae:	f000 f821 	bl	80062f4 <HAL_RCC_GetSysClockFreq>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	490a      	ldr	r1, [pc, #40]	@ (80062e8 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	5ccb      	ldrb	r3, [r1, r3]
 80062c2:	fa22 f303 	lsr.w	r3, r2, r3
 80062c6:	4a09      	ldr	r2, [pc, #36]	@ (80062ec <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062ca:	4b09      	ldr	r3, [pc, #36]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fd fce8 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023c00 	.word	0x40023c00
 80062e4:	40023800 	.word	0x40023800
 80062e8:	0800a3cc 	.word	0x0800a3cc
 80062ec:	200001fc 	.word	0x200001fc
 80062f0:	20000200 	.word	0x20000200

080062f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f8:	b094      	sub	sp, #80	@ 0x50
 80062fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800630c:	4b79      	ldr	r3, [pc, #484]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 030c 	and.w	r3, r3, #12
 8006314:	2b08      	cmp	r3, #8
 8006316:	d00d      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0x40>
 8006318:	2b08      	cmp	r3, #8
 800631a:	f200 80e1 	bhi.w	80064e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_RCC_GetSysClockFreq+0x34>
 8006322:	2b04      	cmp	r3, #4
 8006324:	d003      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0x3a>
 8006326:	e0db      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006328:	4b73      	ldr	r3, [pc, #460]	@ (80064f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800632a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800632c:	e0db      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800632e:	4b73      	ldr	r3, [pc, #460]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x208>)
 8006330:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006332:	e0d8      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006334:	4b6f      	ldr	r3, [pc, #444]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800633e:	4b6d      	ldr	r3, [pc, #436]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d063      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	099b      	lsrs	r3, r3, #6
 8006350:	2200      	movs	r2, #0
 8006352:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006354:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635c:	633b      	str	r3, [r7, #48]	@ 0x30
 800635e:	2300      	movs	r3, #0
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	f04f 0000 	mov.w	r0, #0
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	0159      	lsls	r1, r3, #5
 8006374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006378:	0150      	lsls	r0, r2, #5
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4621      	mov	r1, r4
 8006380:	1a51      	subs	r1, r2, r1
 8006382:	6139      	str	r1, [r7, #16]
 8006384:	4629      	mov	r1, r5
 8006386:	eb63 0301 	sbc.w	r3, r3, r1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006398:	4659      	mov	r1, fp
 800639a:	018b      	lsls	r3, r1, #6
 800639c:	4651      	mov	r1, sl
 800639e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063a2:	4651      	mov	r1, sl
 80063a4:	018a      	lsls	r2, r1, #6
 80063a6:	4651      	mov	r1, sl
 80063a8:	ebb2 0801 	subs.w	r8, r2, r1
 80063ac:	4659      	mov	r1, fp
 80063ae:	eb63 0901 	sbc.w	r9, r3, r1
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c6:	4690      	mov	r8, r2
 80063c8:	4699      	mov	r9, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	eb18 0303 	adds.w	r3, r8, r3
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	462b      	mov	r3, r5
 80063d4:	eb49 0303 	adc.w	r3, r9, r3
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063e6:	4629      	mov	r1, r5
 80063e8:	024b      	lsls	r3, r1, #9
 80063ea:	4621      	mov	r1, r4
 80063ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063f0:	4621      	mov	r1, r4
 80063f2:	024a      	lsls	r2, r1, #9
 80063f4:	4610      	mov	r0, r2
 80063f6:	4619      	mov	r1, r3
 80063f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fa:	2200      	movs	r2, #0
 80063fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006404:	f7f9 ff4c 	bl	80002a0 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4613      	mov	r3, r2
 800640e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006410:	e058      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006412:	4b38      	ldr	r3, [pc, #224]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	2200      	movs	r2, #0
 800641a:	4618      	mov	r0, r3
 800641c:	4611      	mov	r1, r2
 800641e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	2300      	movs	r3, #0
 8006426:	627b      	str	r3, [r7, #36]	@ 0x24
 8006428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	f04f 0000 	mov.w	r0, #0
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800643e:	0150      	lsls	r0, r2, #5
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4641      	mov	r1, r8
 8006446:	ebb2 0a01 	subs.w	sl, r2, r1
 800644a:	4649      	mov	r1, r9
 800644c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800645c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006464:	ebb2 040a 	subs.w	r4, r2, sl
 8006468:	eb63 050b 	sbc.w	r5, r3, fp
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	00eb      	lsls	r3, r5, #3
 8006476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800647a:	00e2      	lsls	r2, r4, #3
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	4643      	mov	r3, r8
 8006482:	18e3      	adds	r3, r4, r3
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	464b      	mov	r3, r9
 8006488:	eb45 0303 	adc.w	r3, r5, r3
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800649a:	4629      	mov	r1, r5
 800649c:	028b      	lsls	r3, r1, #10
 800649e:	4621      	mov	r1, r4
 80064a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064a4:	4621      	mov	r1, r4
 80064a6:	028a      	lsls	r2, r1, #10
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ae:	2200      	movs	r2, #0
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	61fa      	str	r2, [r7, #28]
 80064b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b8:	f7f9 fef2 	bl	80002a0 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4613      	mov	r3, r2
 80064c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064c4:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	3301      	adds	r3, #1
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064de:	e002      	b.n	80064e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3750      	adds	r7, #80	@ 0x50
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f2:	bf00      	nop
 80064f4:	40023800 	.word	0x40023800
 80064f8:	00f42400 	.word	0x00f42400
 80064fc:	007a1200 	.word	0x007a1200

08006500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006504:	4b03      	ldr	r3, [pc, #12]	@ (8006514 <HAL_RCC_GetHCLKFreq+0x14>)
 8006506:	681b      	ldr	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200001fc 	.word	0x200001fc

08006518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800651c:	f7ff fff0 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	0a9b      	lsrs	r3, r3, #10
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4903      	ldr	r1, [pc, #12]	@ (800653c <HAL_RCC_GetPCLK1Freq+0x24>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40023800 	.word	0x40023800
 800653c:	0800a3dc 	.word	0x0800a3dc

08006540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006570:	2b00      	cmp	r3, #0
 8006572:	d075      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006574:	4b91      	ldr	r3, [pc, #580]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800657a:	f7fd fbd7 	bl	8003d2c <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006580:	e008      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006582:	f7fd fbd3 	bl	8003d2c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e189      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006594:	4b8a      	ldr	r3, [pc, #552]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f0      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	019a      	lsls	r2, r3, #6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	071b      	lsls	r3, r3, #28
 80065b8:	4981      	ldr	r1, [pc, #516]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01f      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065cc:	4b7c      	ldr	r3, [pc, #496]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d2:	0f1b      	lsrs	r3, r3, #28
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	019a      	lsls	r2, r3, #6
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	431a      	orrs	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	071b      	lsls	r3, r3, #28
 80065ec:	4974      	ldr	r1, [pc, #464]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065f4:	4b72      	ldr	r3, [pc, #456]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065fa:	f023 021f 	bic.w	r2, r3, #31
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	3b01      	subs	r3, #1
 8006604:	496e      	ldr	r1, [pc, #440]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00d      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	019a      	lsls	r2, r3, #6
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	061b      	lsls	r3, r3, #24
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	071b      	lsls	r3, r3, #28
 800662c:	4964      	ldr	r1, [pc, #400]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006634:	4b61      	ldr	r3, [pc, #388]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800663a:	f7fd fb77 	bl	8003d2c <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006640:	e008      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006642:	f7fd fb73 	bl	8003d2c <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e129      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006654:	4b5a      	ldr	r3, [pc, #360]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006674:	2b00      	cmp	r3, #0
 8006676:	d079      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006678:	4b52      	ldr	r3, [pc, #328]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667e:	f7fd fb55 	bl	8003d2c <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006686:	f7fd fb51 	bl	8003d2c <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e107      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006698:	4b49      	ldr	r3, [pc, #292]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a4:	d0ef      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d020      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066b2:	4b43      	ldr	r3, [pc, #268]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	0f1b      	lsrs	r3, r3, #28
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	019a      	lsls	r2, r3, #6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	061b      	lsls	r3, r3, #24
 80066cc:	431a      	orrs	r2, r3
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	071b      	lsls	r3, r3, #28
 80066d2:	493b      	ldr	r1, [pc, #236]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066da:	4b39      	ldr	r3, [pc, #228]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	4934      	ldr	r1, [pc, #208]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01e      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006700:	4b2f      	ldr	r3, [pc, #188]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	0e1b      	lsrs	r3, r3, #24
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	019a      	lsls	r2, r3, #6
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	071b      	lsls	r3, r3, #28
 8006720:	4927      	ldr	r1, [pc, #156]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006728:	4b25      	ldr	r3, [pc, #148]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800672e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	4922      	ldr	r1, [pc, #136]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800673e:	4b21      	ldr	r3, [pc, #132]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006744:	f7fd faf2 	bl	8003d2c <HAL_GetTick>
 8006748:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800674c:	f7fd faee 	bl	8003d2c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e0a4      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800675e:	4b18      	ldr	r3, [pc, #96]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800676a:	d1ef      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 808b 	beq.w	8006890 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006782:	4a0f      	ldr	r2, [pc, #60]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006788:	6413      	str	r3, [r2, #64]	@ 0x40
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006796:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a0b      	ldr	r2, [pc, #44]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800679c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067a2:	f7fd fac3 	bl	8003d2c <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067a8:	e010      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067aa:	f7fd fabf 	bl	8003d2c <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d909      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e075      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80067bc:	42470068 	.word	0x42470068
 80067c0:	40023800 	.word	0x40023800
 80067c4:	42470070 	.word	0x42470070
 80067c8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067cc:	4b38      	ldr	r3, [pc, #224]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0e8      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067d8:	4b36      	ldr	r3, [pc, #216]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067e0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02f      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d028      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067f6:	4b2f      	ldr	r3, [pc, #188]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006800:	4b2d      	ldr	r3, [pc, #180]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006806:	4b2c      	ldr	r3, [pc, #176]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800680c:	4a29      	ldr	r2, [pc, #164]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006812:	4b28      	ldr	r3, [pc, #160]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b01      	cmp	r3, #1
 800681c:	d114      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800681e:	f7fd fa85 	bl	8003d2c <HAL_GetTick>
 8006822:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006824:	e00a      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f7fd fa81 	bl	8003d2c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e035      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683c:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0ee      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006854:	d10d      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006856:	4b17      	ldr	r3, [pc, #92]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686a:	4912      	ldr	r1, [pc, #72]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800686c:	4313      	orrs	r3, r2
 800686e:	608b      	str	r3, [r1, #8]
 8006870:	e005      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006872:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4a0f      	ldr	r2, [pc, #60]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006878:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800687c:	6093      	str	r3, [r2, #8]
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006880:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800688a:	490a      	ldr	r1, [pc, #40]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800688c:	4313      	orrs	r3, r2
 800688e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80068a2:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80068a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40007000 	.word	0x40007000
 80068b4:	40023800 	.word	0x40023800
 80068b8:	42470e40 	.word	0x42470e40
 80068bc:	424711e0 	.word	0x424711e0

080068c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e01c      	b.n	800690c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	795b      	ldrb	r3, [r3, #5]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fc fcd0 	bl	8003288 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0204 	orr.w	r2, r2, #4
 80068fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	791b      	ldrb	r3, [r3, #4]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_RNG_GenerateRandomNumber+0x1a>
 800692a:	2302      	movs	r3, #2
 800692c:	e044      	b.n	80069b8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	795b      	ldrb	r3, [r3, #5]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	d133      	bne.n	80069a6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006944:	f7fd f9f2 	bl	8003d2c <HAL_GetTick>
 8006948:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800694a:	e018      	b.n	800697e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800694c:	f7fd f9ee 	bl	8003d2c <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d911      	bls.n	800697e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d00a      	beq.n	800697e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e01c      	b.n	80069b8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b01      	cmp	r3, #1
 800698a:	d1df      	bne.n	800694c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	715a      	strb	r2, [r3, #5]
 80069a4:	e004      	b.n	80069b0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	711a      	strb	r2, [r3, #4]

  return status;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e07b      	b.n	8006aca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d108      	bne.n	80069ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069e2:	d009      	beq.n	80069f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	61da      	str	r2, [r3, #28]
 80069ea:	e005      	b.n	80069f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fc fc5a 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7c:	ea42 0103 	orr.w	r1, r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	f003 0104 	and.w	r1, r3, #4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	f003 0210 	and.w	r2, r3, #16
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ab8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e01a      	b.n	8006b1a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fc fc2d 	bl	800335c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b088      	sub	sp, #32
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b32:	f7fd f8fb 	bl	8003d2c <HAL_GetTick>
 8006b36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d001      	beq.n	8006b4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e12a      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_Transmit+0x36>
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e122      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_SPI_Transmit+0x48>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e11b      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2203      	movs	r2, #3
 8006b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb8:	d10f      	bne.n	8006bda <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be4:	2b40      	cmp	r3, #64	@ 0x40
 8006be6:	d007      	beq.n	8006bf8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c00:	d152      	bne.n	8006ca8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <HAL_SPI_Transmit+0xee>
 8006c0a:	8b7b      	ldrh	r3, [r7, #26]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d145      	bne.n	8006c9c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c34:	e032      	b.n	8006c9c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d112      	bne.n	8006c6a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c48:	881a      	ldrh	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c54:	1c9a      	adds	r2, r3, #2
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c68:	e018      	b.n	8006c9c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c6a:	f7fd f85f 	bl	8003d2c <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d803      	bhi.n	8006c82 <HAL_SPI_Transmit+0x160>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c80:	d102      	bne.n	8006c88 <HAL_SPI_Transmit+0x166>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e082      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1c7      	bne.n	8006c36 <HAL_SPI_Transmit+0x114>
 8006ca6:	e053      	b.n	8006d50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_Transmit+0x194>
 8006cb0:	8b7b      	ldrh	r3, [r7, #26]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d147      	bne.n	8006d46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cdc:	e033      	b.n	8006d46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d113      	bne.n	8006d14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d12:	e018      	b.n	8006d46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d14:	f7fd f80a 	bl	8003d2c <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d803      	bhi.n	8006d2c <HAL_SPI_Transmit+0x20a>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	d102      	bne.n	8006d32 <HAL_SPI_Transmit+0x210>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e02d      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1c6      	bne.n	8006cde <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f8bf 	bl	8006ed8 <SPI_EndRxTxTransaction>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db8:	b2db      	uxtb	r3, r3
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd8:	f7fc ffa8 	bl	8003d2c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de8:	f7fc ffa0 	bl	8003d2c <HAL_GetTick>
 8006dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dee:	4b39      	ldr	r3, [pc, #228]	@ (8006ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	015b      	lsls	r3, r3, #5
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfe:	e054      	b.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d050      	beq.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e08:	f7fc ff90 	bl	8003d2c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d902      	bls.n	8006e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d13d      	bne.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e36:	d111      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e40:	d004      	beq.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d107      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e64:	d10f      	bne.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e017      	b.n	8006eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	bf0c      	ite	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d19b      	bne.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200001fc 	.word	0x200001fc

08006ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2201      	movs	r2, #1
 8006eec:	2102      	movs	r1, #2
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff ff6a 	bl	8006dc8 <SPI_WaitFlagStateUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efe:	f043 0220 	orr.w	r2, r3, #32
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e032      	b.n	8006f70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f78 <SPI_EndRxTxTransaction+0xa0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f7c <SPI_EndRxTxTransaction+0xa4>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	0d5b      	lsrs	r3, r3, #21
 8006f16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f28:	d112      	bne.n	8006f50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2180      	movs	r1, #128	@ 0x80
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff ff47 	bl	8006dc8 <SPI_WaitFlagStateUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d016      	beq.n	8006f6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e00f      	b.n	8006f70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f66:	2b80      	cmp	r3, #128	@ 0x80
 8006f68:	d0f2      	beq.n	8006f50 <SPI_EndRxTxTransaction+0x78>
 8006f6a:	e000      	b.n	8006f6e <SPI_EndRxTxTransaction+0x96>
        break;
 8006f6c:	bf00      	nop
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200001fc 	.word	0x200001fc
 8006f7c:	165e9f81 	.word	0x165e9f81

08006f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e041      	b.n	8007016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fc f9f6 	bl	8003398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f000 fae6 	bl	8007590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d001      	beq.n	8007038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e046      	b.n	80070c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a23      	ldr	r2, [pc, #140]	@ (80070d4 <HAL_TIM_Base_Start+0xb4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007052:	d01d      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1f      	ldr	r2, [pc, #124]	@ (80070d8 <HAL_TIM_Base_Start+0xb8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1e      	ldr	r2, [pc, #120]	@ (80070dc <HAL_TIM_Base_Start+0xbc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1c      	ldr	r2, [pc, #112]	@ (80070e0 <HAL_TIM_Base_Start+0xc0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1b      	ldr	r2, [pc, #108]	@ (80070e4 <HAL_TIM_Base_Start+0xc4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <HAL_TIM_Base_Start+0xc8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIM_Base_Start+0x70>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a18      	ldr	r2, [pc, #96]	@ (80070ec <HAL_TIM_Base_Start+0xcc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d111      	bne.n	80070b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d010      	beq.n	80070c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b2:	e007      	b.n	80070c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	40010400 	.word	0x40010400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40001800 	.word	0x40001800

080070f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d001      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e04e      	b.n	80071a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a23      	ldr	r2, [pc, #140]	@ (80071b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d022      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007132:	d01d      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1f      	ldr	r2, [pc, #124]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d018      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1e      	ldr	r2, [pc, #120]	@ (80071bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d013      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1c      	ldr	r2, [pc, #112]	@ (80071c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00e      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1b      	ldr	r2, [pc, #108]	@ (80071c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d009      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x80>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a18      	ldr	r2, [pc, #96]	@ (80071cc <HAL_TIM_Base_Start_IT+0xdc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d111      	bne.n	8007194 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b06      	cmp	r3, #6
 8007180:	d010      	beq.n	80071a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0201 	orr.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007192:	e007      	b.n	80071a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40010400 	.word	0x40010400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	40001800 	.word	0x40001800

080071d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d020      	beq.n	8007234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01b      	beq.n	8007234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0202 	mvn.w	r2, #2
 8007204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f999 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f98b 	bl	800753e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f99c 	bl	8007566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d020      	beq.n	8007280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01b      	beq.n	8007280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0204 	mvn.w	r2, #4
 8007250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f973 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 800726c:	e005      	b.n	800727a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f965 	bl	800753e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f976 	bl	8007566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01b      	beq.n	80072cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0208 	mvn.w	r2, #8
 800729c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2204      	movs	r2, #4
 80072a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f94d 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f93f 	bl	800753e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f950 	bl	8007566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d020      	beq.n	8007318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01b      	beq.n	8007318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0210 	mvn.w	r2, #16
 80072e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2208      	movs	r2, #8
 80072ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f927 	bl	8007552 <HAL_TIM_IC_CaptureCallback>
 8007304:	e005      	b.n	8007312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f919 	bl	800753e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f92a 	bl	8007566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0201 	mvn.w	r2, #1
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fb fbc2 	bl	8002ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00c      	beq.n	8007360 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fae4 	bl	8007928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800737c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8fb 	bl	800757a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0220 	mvn.w	r2, #32
 80073a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fab6 	bl	8007914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_ConfigClockSource+0x1c>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e0b4      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x186>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007404:	d03e      	beq.n	8007484 <HAL_TIM_ConfigClockSource+0xd4>
 8007406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740a:	f200 8087 	bhi.w	800751c <HAL_TIM_ConfigClockSource+0x16c>
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007412:	f000 8086 	beq.w	8007522 <HAL_TIM_ConfigClockSource+0x172>
 8007416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741a:	d87f      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 800741c:	2b70      	cmp	r3, #112	@ 0x70
 800741e:	d01a      	beq.n	8007456 <HAL_TIM_ConfigClockSource+0xa6>
 8007420:	2b70      	cmp	r3, #112	@ 0x70
 8007422:	d87b      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 8007424:	2b60      	cmp	r3, #96	@ 0x60
 8007426:	d050      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x11a>
 8007428:	2b60      	cmp	r3, #96	@ 0x60
 800742a:	d877      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 800742c:	2b50      	cmp	r3, #80	@ 0x50
 800742e:	d03c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0xfa>
 8007430:	2b50      	cmp	r3, #80	@ 0x50
 8007432:	d873      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 8007434:	2b40      	cmp	r3, #64	@ 0x40
 8007436:	d058      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x13a>
 8007438:	2b40      	cmp	r3, #64	@ 0x40
 800743a:	d86f      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 800743c:	2b30      	cmp	r3, #48	@ 0x30
 800743e:	d064      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x15a>
 8007440:	2b30      	cmp	r3, #48	@ 0x30
 8007442:	d86b      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 8007444:	2b20      	cmp	r3, #32
 8007446:	d060      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x15a>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d867      	bhi.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d05c      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x15a>
 8007450:	2b10      	cmp	r3, #16
 8007452:	d05a      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x15a>
 8007454:	e062      	b.n	800751c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007466:	f000 f9b9 	bl	80077dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	609a      	str	r2, [r3, #8]
      break;
 8007482:	e04f      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007494:	f000 f9a2 	bl	80077dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074a6:	609a      	str	r2, [r3, #8]
      break;
 80074a8:	e03c      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 f916 	bl	80076e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2150      	movs	r1, #80	@ 0x50
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f96f 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 80074c8:	e02c      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074d6:	461a      	mov	r2, r3
 80074d8:	f000 f935 	bl	8007746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2160      	movs	r1, #96	@ 0x60
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 f95f 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 80074e8:	e01c      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074f6:	461a      	mov	r2, r3
 80074f8:	f000 f8f6 	bl	80076e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2140      	movs	r1, #64	@ 0x40
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f94f 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 8007508:	e00c      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f000 f946 	bl	80077a6 <TIM_ITRx_SetConfig>
      break;
 800751a:	e003      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
      break;
 8007520:	e000      	b.n	8007524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a46      	ldr	r2, [pc, #280]	@ (80076bc <TIM_Base_SetConfig+0x12c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a43      	ldr	r2, [pc, #268]	@ (80076c0 <TIM_Base_SetConfig+0x130>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a42      	ldr	r2, [pc, #264]	@ (80076c4 <TIM_Base_SetConfig+0x134>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a41      	ldr	r2, [pc, #260]	@ (80076c8 <TIM_Base_SetConfig+0x138>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a40      	ldr	r2, [pc, #256]	@ (80076cc <TIM_Base_SetConfig+0x13c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d108      	bne.n	80075e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a35      	ldr	r2, [pc, #212]	@ (80076bc <TIM_Base_SetConfig+0x12c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d02b      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f0:	d027      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a32      	ldr	r2, [pc, #200]	@ (80076c0 <TIM_Base_SetConfig+0x130>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d023      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a31      	ldr	r2, [pc, #196]	@ (80076c4 <TIM_Base_SetConfig+0x134>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01f      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a30      	ldr	r2, [pc, #192]	@ (80076c8 <TIM_Base_SetConfig+0x138>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01b      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2f      	ldr	r2, [pc, #188]	@ (80076cc <TIM_Base_SetConfig+0x13c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d017      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2e      	ldr	r2, [pc, #184]	@ (80076d0 <TIM_Base_SetConfig+0x140>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d013      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2d      	ldr	r2, [pc, #180]	@ (80076d4 <TIM_Base_SetConfig+0x144>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00f      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2c      	ldr	r2, [pc, #176]	@ (80076d8 <TIM_Base_SetConfig+0x148>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00b      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2b      	ldr	r2, [pc, #172]	@ (80076dc <TIM_Base_SetConfig+0x14c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2a      	ldr	r2, [pc, #168]	@ (80076e0 <TIM_Base_SetConfig+0x150>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a29      	ldr	r2, [pc, #164]	@ (80076e4 <TIM_Base_SetConfig+0x154>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d108      	bne.n	8007654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a10      	ldr	r2, [pc, #64]	@ (80076bc <TIM_Base_SetConfig+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_Base_SetConfig+0xf8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a12      	ldr	r2, [pc, #72]	@ (80076cc <TIM_Base_SetConfig+0x13c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d103      	bne.n	8007690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	611a      	str	r2, [r3, #16]
  }
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40010400 	.word	0x40010400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400
 80076d8:	40014800 	.word	0x40014800
 80076dc:	40001800 	.word	0x40001800
 80076e0:	40001c00 	.word	0x40001c00
 80076e4:	40002000 	.word	0x40002000

080076e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 030a 	bic.w	r3, r3, #10
 8007724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007746:	b480      	push	{r7}
 8007748:	b087      	sub	sp, #28
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	f023 0210 	bic.w	r2, r3, #16
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	031b      	lsls	r3, r3, #12
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f043 0307 	orr.w	r3, r3, #7
 80077c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	609a      	str	r2, [r3, #8]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	021a      	lsls	r2, r3, #8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	431a      	orrs	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4313      	orrs	r3, r2
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	609a      	str	r2, [r3, #8]
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007830:	2302      	movs	r3, #2
 8007832:	e05a      	b.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d022      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007880:	d01d      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1b      	ldr	r2, [pc, #108]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a18      	ldr	r2, [pc, #96]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a17      	ldr	r2, [pc, #92]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d10c      	bne.n	80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40001800 	.word	0x40001800

08007914 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <findslot>:
 800793c:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <findslot+0x2c>)
 800793e:	b510      	push	{r4, lr}
 8007940:	4604      	mov	r4, r0
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	b118      	cbz	r0, 800794e <findslot+0x12>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <findslot+0x12>
 800794a:	f000 fb19 	bl	8007f80 <__sinit>
 800794e:	2c13      	cmp	r4, #19
 8007950:	d807      	bhi.n	8007962 <findslot+0x26>
 8007952:	4806      	ldr	r0, [pc, #24]	@ (800796c <findslot+0x30>)
 8007954:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007958:	3201      	adds	r2, #1
 800795a:	d002      	beq.n	8007962 <findslot+0x26>
 800795c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007960:	bd10      	pop	{r4, pc}
 8007962:	2000      	movs	r0, #0
 8007964:	e7fc      	b.n	8007960 <findslot+0x24>
 8007966:	bf00      	nop
 8007968:	2000021c 	.word	0x2000021c
 800796c:	200260a4 	.word	0x200260a4

08007970 <error>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	4604      	mov	r4, r0
 8007974:	f000 fd04 	bl	8008380 <__errno>
 8007978:	2613      	movs	r6, #19
 800797a:	4605      	mov	r5, r0
 800797c:	2700      	movs	r7, #0
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	beab      	bkpt	0x00ab
 8007984:	4606      	mov	r6, r0
 8007986:	602e      	str	r6, [r5, #0]
 8007988:	4620      	mov	r0, r4
 800798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800798c <checkerror>:
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d101      	bne.n	8007994 <checkerror+0x8>
 8007990:	f7ff bfee 	b.w	8007970 <error>
 8007994:	4770      	bx	lr

08007996 <_swiread>:
 8007996:	b530      	push	{r4, r5, lr}
 8007998:	b085      	sub	sp, #20
 800799a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800799e:	9203      	str	r2, [sp, #12]
 80079a0:	2406      	movs	r4, #6
 80079a2:	ad01      	add	r5, sp, #4
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	beab      	bkpt	0x00ab
 80079aa:	4604      	mov	r4, r0
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff ffed 	bl	800798c <checkerror>
 80079b2:	b005      	add	sp, #20
 80079b4:	bd30      	pop	{r4, r5, pc}

080079b6 <_read>:
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	460e      	mov	r6, r1
 80079ba:	4614      	mov	r4, r2
 80079bc:	f7ff ffbe 	bl	800793c <findslot>
 80079c0:	4605      	mov	r5, r0
 80079c2:	b930      	cbnz	r0, 80079d2 <_read+0x1c>
 80079c4:	f000 fcdc 	bl	8008380 <__errno>
 80079c8:	2309      	movs	r3, #9
 80079ca:	6003      	str	r3, [r0, #0]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	6800      	ldr	r0, [r0, #0]
 80079d4:	4622      	mov	r2, r4
 80079d6:	4631      	mov	r1, r6
 80079d8:	f7ff ffdd 	bl	8007996 <_swiread>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d0f5      	beq.n	80079cc <_read+0x16>
 80079e0:	686b      	ldr	r3, [r5, #4]
 80079e2:	1a20      	subs	r0, r4, r0
 80079e4:	4403      	add	r3, r0
 80079e6:	606b      	str	r3, [r5, #4]
 80079e8:	e7f2      	b.n	80079d0 <_read+0x1a>

080079ea <_swilseek>:
 80079ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	4616      	mov	r6, r2
 80079f0:	f7ff ffa4 	bl	800793c <findslot>
 80079f4:	4605      	mov	r5, r0
 80079f6:	b940      	cbnz	r0, 8007a0a <_swilseek+0x20>
 80079f8:	f000 fcc2 	bl	8008380 <__errno>
 80079fc:	2309      	movs	r3, #9
 80079fe:	6003      	str	r3, [r0, #0]
 8007a00:	f04f 34ff 	mov.w	r4, #4294967295
 8007a04:	4620      	mov	r0, r4
 8007a06:	b003      	add	sp, #12
 8007a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0a:	2e02      	cmp	r6, #2
 8007a0c:	d903      	bls.n	8007a16 <_swilseek+0x2c>
 8007a0e:	f000 fcb7 	bl	8008380 <__errno>
 8007a12:	2316      	movs	r3, #22
 8007a14:	e7f3      	b.n	80079fe <_swilseek+0x14>
 8007a16:	2e01      	cmp	r6, #1
 8007a18:	d112      	bne.n	8007a40 <_swilseek+0x56>
 8007a1a:	6843      	ldr	r3, [r0, #4]
 8007a1c:	18e4      	adds	r4, r4, r3
 8007a1e:	d4f6      	bmi.n	8007a0e <_swilseek+0x24>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	260a      	movs	r6, #10
 8007a24:	e9cd 3400 	strd	r3, r4, [sp]
 8007a28:	466f      	mov	r7, sp
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	beab      	bkpt	0x00ab
 8007a30:	4606      	mov	r6, r0
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ffaa 	bl	800798c <checkerror>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	dbe1      	blt.n	8007a00 <_swilseek+0x16>
 8007a3c:	606c      	str	r4, [r5, #4]
 8007a3e:	e7e1      	b.n	8007a04 <_swilseek+0x1a>
 8007a40:	2e02      	cmp	r6, #2
 8007a42:	6803      	ldr	r3, [r0, #0]
 8007a44:	d1ec      	bne.n	8007a20 <_swilseek+0x36>
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	260c      	movs	r6, #12
 8007a4a:	466f      	mov	r7, sp
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	beab      	bkpt	0x00ab
 8007a52:	4606      	mov	r6, r0
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7ff ff99 	bl	800798c <checkerror>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d0d0      	beq.n	8007a00 <_swilseek+0x16>
 8007a5e:	4404      	add	r4, r0
 8007a60:	e7de      	b.n	8007a20 <_swilseek+0x36>

08007a62 <_lseek>:
 8007a62:	f7ff bfc2 	b.w	80079ea <_swilseek>

08007a66 <_swiwrite>:
 8007a66:	b530      	push	{r4, r5, lr}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007a6e:	9203      	str	r2, [sp, #12]
 8007a70:	2405      	movs	r4, #5
 8007a72:	ad01      	add	r5, sp, #4
 8007a74:	4620      	mov	r0, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	beab      	bkpt	0x00ab
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f7ff ff85 	bl	800798c <checkerror>
 8007a82:	b005      	add	sp, #20
 8007a84:	bd30      	pop	{r4, r5, pc}

08007a86 <_write>:
 8007a86:	b570      	push	{r4, r5, r6, lr}
 8007a88:	460e      	mov	r6, r1
 8007a8a:	4615      	mov	r5, r2
 8007a8c:	f7ff ff56 	bl	800793c <findslot>
 8007a90:	4604      	mov	r4, r0
 8007a92:	b930      	cbnz	r0, 8007aa2 <_write+0x1c>
 8007a94:	f000 fc74 	bl	8008380 <__errno>
 8007a98:	2309      	movs	r3, #9
 8007a9a:	6003      	str	r3, [r0, #0]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	6800      	ldr	r0, [r0, #0]
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	f7ff ffdd 	bl	8007a66 <_swiwrite>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	dbf5      	blt.n	8007a9c <_write+0x16>
 8007ab0:	6862      	ldr	r2, [r4, #4]
 8007ab2:	1ae8      	subs	r0, r5, r3
 8007ab4:	4402      	add	r2, r0
 8007ab6:	42ab      	cmp	r3, r5
 8007ab8:	6062      	str	r2, [r4, #4]
 8007aba:	d1f1      	bne.n	8007aa0 <_write+0x1a>
 8007abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7ff bf55 	b.w	8007970 <error>

08007ac6 <_swiclose>:
 8007ac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac8:	2402      	movs	r4, #2
 8007aca:	9001      	str	r0, [sp, #4]
 8007acc:	ad01      	add	r5, sp, #4
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	beab      	bkpt	0x00ab
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff ff58 	bl	800798c <checkerror>
 8007adc:	b003      	add	sp, #12
 8007ade:	bd30      	pop	{r4, r5, pc}

08007ae0 <_close>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	f7ff ff2a 	bl	800793c <findslot>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	b930      	cbnz	r0, 8007afa <_close+0x1a>
 8007aec:	f000 fc48 	bl	8008380 <__errno>
 8007af0:	2309      	movs	r3, #9
 8007af2:	6003      	str	r3, [r0, #0]
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	3d01      	subs	r5, #1
 8007afc:	2d01      	cmp	r5, #1
 8007afe:	d809      	bhi.n	8007b14 <_close+0x34>
 8007b00:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <_close+0x40>)
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d104      	bne.n	8007b14 <_close+0x34>
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	2000      	movs	r0, #0
 8007b12:	e7f1      	b.n	8007af8 <_close+0x18>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	f7ff ffd6 	bl	8007ac6 <_swiclose>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d0f5      	beq.n	8007b0a <_close+0x2a>
 8007b1e:	e7eb      	b.n	8007af8 <_close+0x18>
 8007b20:	200260a4 	.word	0x200260a4

08007b24 <_swistat>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	460c      	mov	r4, r1
 8007b28:	f7ff ff08 	bl	800793c <findslot>
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	b930      	cbnz	r0, 8007b3e <_swistat+0x1a>
 8007b30:	f000 fc26 	bl	8008380 <__errno>
 8007b34:	2309      	movs	r3, #9
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b4a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007b4c:	260c      	movs	r6, #12
 8007b4e:	4630      	mov	r0, r6
 8007b50:	4629      	mov	r1, r5
 8007b52:	beab      	bkpt	0x00ab
 8007b54:	4605      	mov	r5, r0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7ff ff18 	bl	800798c <checkerror>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d0eb      	beq.n	8007b38 <_swistat+0x14>
 8007b60:	6120      	str	r0, [r4, #16]
 8007b62:	2000      	movs	r0, #0
 8007b64:	e7ea      	b.n	8007b3c <_swistat+0x18>

08007b66 <_fstat>:
 8007b66:	460b      	mov	r3, r1
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	2258      	movs	r2, #88	@ 0x58
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fbb7 	bl	80082e4 <memset>
 8007b76:	4601      	mov	r1, r0
 8007b78:	4620      	mov	r0, r4
 8007b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b7e:	f7ff bfd1 	b.w	8007b24 <_swistat>

08007b82 <_stat>:
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	460d      	mov	r5, r1
 8007b86:	4604      	mov	r4, r0
 8007b88:	2258      	movs	r2, #88	@ 0x58
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 fba9 	bl	80082e4 <memset>
 8007b92:	4620      	mov	r0, r4
 8007b94:	2100      	movs	r1, #0
 8007b96:	f000 f811 	bl	8007bbc <_swiopen>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	d00b      	beq.n	8007bb8 <_stat+0x36>
 8007ba0:	686b      	ldr	r3, [r5, #4]
 8007ba2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ba6:	606b      	str	r3, [r5, #4]
 8007ba8:	4629      	mov	r1, r5
 8007baa:	f7ff ffbb 	bl	8007b24 <_swistat>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7ff ff95 	bl	8007ae0 <_close>
 8007bb6:	462c      	mov	r4, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd38      	pop	{r3, r4, r5, pc}

08007bbc <_swiopen>:
 8007bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc0:	4f29      	ldr	r7, [pc, #164]	@ (8007c68 <_swiopen+0xac>)
 8007bc2:	b096      	sub	sp, #88	@ 0x58
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	2400      	movs	r4, #0
 8007bca:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007bd4:	d00c      	beq.n	8007bf0 <_swiopen+0x34>
 8007bd6:	3401      	adds	r4, #1
 8007bd8:	2c14      	cmp	r4, #20
 8007bda:	d1f6      	bne.n	8007bca <_swiopen+0xe>
 8007bdc:	f000 fbd0 	bl	8008380 <__errno>
 8007be0:	2318      	movs	r3, #24
 8007be2:	6003      	str	r3, [r0, #0]
 8007be4:	f04f 34ff 	mov.w	r4, #4294967295
 8007be8:	4620      	mov	r0, r4
 8007bea:	b016      	add	sp, #88	@ 0x58
 8007bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007bf4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007bf8:	46e9      	mov	r9, sp
 8007bfa:	d109      	bne.n	8007c10 <_swiopen+0x54>
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4650      	mov	r0, sl
 8007c00:	f7ff ffbf 	bl	8007b82 <_stat>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d003      	beq.n	8007c10 <_swiopen+0x54>
 8007c08:	f000 fbba 	bl	8008380 <__errno>
 8007c0c:	2311      	movs	r3, #17
 8007c0e:	e7e8      	b.n	8007be2 <_swiopen+0x26>
 8007c10:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007c14:	f240 6301 	movw	r3, #1537	@ 0x601
 8007c18:	07b2      	lsls	r2, r6, #30
 8007c1a:	bf48      	it	mi
 8007c1c:	f045 0502 	orrmi.w	r5, r5, #2
 8007c20:	421e      	tst	r6, r3
 8007c22:	bf18      	it	ne
 8007c24:	f045 0504 	orrne.w	r5, r5, #4
 8007c28:	0733      	lsls	r3, r6, #28
 8007c2a:	bf48      	it	mi
 8007c2c:	f025 0504 	bicmi.w	r5, r5, #4
 8007c30:	4650      	mov	r0, sl
 8007c32:	bf48      	it	mi
 8007c34:	f045 0508 	orrmi.w	r5, r5, #8
 8007c38:	f8cd a000 	str.w	sl, [sp]
 8007c3c:	f7f8 fad8 	bl	80001f0 <strlen>
 8007c40:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007c44:	2501      	movs	r5, #1
 8007c46:	4628      	mov	r0, r5
 8007c48:	4649      	mov	r1, r9
 8007c4a:	beab      	bkpt	0x00ab
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	2d00      	cmp	r5, #0
 8007c50:	db05      	blt.n	8007c5e <_swiopen+0xa2>
 8007c52:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007c56:	4447      	add	r7, r8
 8007c58:	2300      	movs	r3, #0
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e7c4      	b.n	8007be8 <_swiopen+0x2c>
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f7ff fe86 	bl	8007970 <error>
 8007c64:	4604      	mov	r4, r0
 8007c66:	e7bf      	b.n	8007be8 <_swiopen+0x2c>
 8007c68:	200260a4 	.word	0x200260a4

08007c6c <_get_semihosting_exts>:
 8007c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4606      	mov	r6, r0
 8007c72:	460f      	mov	r7, r1
 8007c74:	4829      	ldr	r0, [pc, #164]	@ (8007d1c <_get_semihosting_exts+0xb0>)
 8007c76:	2100      	movs	r1, #0
 8007c78:	4615      	mov	r5, r2
 8007c7a:	f7ff ff9f 	bl	8007bbc <_swiopen>
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4604      	mov	r4, r0
 8007c82:	2100      	movs	r1, #0
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 fb2d 	bl	80082e4 <memset>
 8007c8a:	1c63      	adds	r3, r4, #1
 8007c8c:	d014      	beq.n	8007cb8 <_get_semihosting_exts+0x4c>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7ff fe54 	bl	800793c <findslot>
 8007c94:	f04f 080c 	mov.w	r8, #12
 8007c98:	4681      	mov	r9, r0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	beab      	bkpt	0x00ab
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fe72 	bl	800798c <checkerror>
 8007ca8:	2803      	cmp	r0, #3
 8007caa:	dd02      	ble.n	8007cb2 <_get_semihosting_exts+0x46>
 8007cac:	1ec3      	subs	r3, r0, #3
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	dc07      	bgt.n	8007cc2 <_get_semihosting_exts+0x56>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff ff14 	bl	8007ae0 <_close>
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	b003      	add	sp, #12
 8007cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	eb0d 0102 	add.w	r1, sp, r2
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff fe74 	bl	80079b6 <_read>
 8007cce:	2803      	cmp	r0, #3
 8007cd0:	ddef      	ble.n	8007cb2 <_get_semihosting_exts+0x46>
 8007cd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007cd6:	2b53      	cmp	r3, #83	@ 0x53
 8007cd8:	d1eb      	bne.n	8007cb2 <_get_semihosting_exts+0x46>
 8007cda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007cde:	2b48      	cmp	r3, #72	@ 0x48
 8007ce0:	d1e7      	bne.n	8007cb2 <_get_semihosting_exts+0x46>
 8007ce2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ce6:	2b46      	cmp	r3, #70	@ 0x46
 8007ce8:	d1e3      	bne.n	8007cb2 <_get_semihosting_exts+0x46>
 8007cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cee:	2b42      	cmp	r3, #66	@ 0x42
 8007cf0:	d1df      	bne.n	8007cb2 <_get_semihosting_exts+0x46>
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f7ff fe77 	bl	80079ea <_swilseek>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	dbd8      	blt.n	8007cb2 <_get_semihosting_exts+0x46>
 8007d00:	462a      	mov	r2, r5
 8007d02:	4631      	mov	r1, r6
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff fe56 	bl	80079b6 <_read>
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f7ff fee7 	bl	8007ae0 <_close>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff fe3a 	bl	800798c <checkerror>
 8007d18:	e7d0      	b.n	8007cbc <_get_semihosting_exts+0x50>
 8007d1a:	bf00      	nop
 8007d1c:	0800a3e4 	.word	0x0800a3e4

08007d20 <initialise_semihosting_exts>:
 8007d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d22:	4d0a      	ldr	r5, [pc, #40]	@ (8007d4c <initialise_semihosting_exts+0x2c>)
 8007d24:	4c0a      	ldr	r4, [pc, #40]	@ (8007d50 <initialise_semihosting_exts+0x30>)
 8007d26:	2100      	movs	r1, #0
 8007d28:	2201      	movs	r2, #1
 8007d2a:	a801      	add	r0, sp, #4
 8007d2c:	6029      	str	r1, [r5, #0]
 8007d2e:	6022      	str	r2, [r4, #0]
 8007d30:	f7ff ff9c 	bl	8007c6c <_get_semihosting_exts>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	dd07      	ble.n	8007d48 <initialise_semihosting_exts+0x28>
 8007d38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d3c:	f003 0201 	and.w	r2, r3, #1
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	b003      	add	sp, #12
 8007d4a:	bd30      	pop	{r4, r5, pc}
 8007d4c:	2000020c 	.word	0x2000020c
 8007d50:	20000208 	.word	0x20000208

08007d54 <_has_ext_stdout_stderr>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4c04      	ldr	r4, [pc, #16]	@ (8007d68 <_has_ext_stdout_stderr+0x14>)
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da01      	bge.n	8007d62 <_has_ext_stdout_stderr+0xe>
 8007d5e:	f7ff ffdf 	bl	8007d20 <initialise_semihosting_exts>
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	20000208 	.word	0x20000208

08007d6c <initialise_monitor_handles>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b085      	sub	sp, #20
 8007d72:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007e24 <initialise_monitor_handles+0xb8>
 8007d76:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	af01      	add	r7, sp, #4
 8007d82:	9402      	str	r4, [sp, #8]
 8007d84:	2501      	movs	r5, #1
 8007d86:	4628      	mov	r0, r5
 8007d88:	4639      	mov	r1, r7
 8007d8a:	beab      	bkpt	0x00ab
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007e28 <initialise_monitor_handles+0xbc>
 8007d92:	4623      	mov	r3, r4
 8007d94:	4c20      	ldr	r4, [pc, #128]	@ (8007e18 <initialise_monitor_handles+0xac>)
 8007d96:	f8c8 5000 	str.w	r5, [r8]
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007da2:	3301      	adds	r3, #1
 8007da4:	2b14      	cmp	r3, #20
 8007da6:	d1fa      	bne.n	8007d9e <initialise_monitor_handles+0x32>
 8007da8:	f7ff ffd4 	bl	8007d54 <_has_ext_stdout_stderr>
 8007dac:	4d1b      	ldr	r5, [pc, #108]	@ (8007e1c <initialise_monitor_handles+0xb0>)
 8007dae:	b1d0      	cbz	r0, 8007de6 <initialise_monitor_handles+0x7a>
 8007db0:	f04f 0a03 	mov.w	sl, #3
 8007db4:	2304      	movs	r3, #4
 8007db6:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dba:	2601      	movs	r6, #1
 8007dbc:	f8cd a00c 	str.w	sl, [sp, #12]
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	beab      	bkpt	0x00ab
 8007dc8:	4683      	mov	fp, r0
 8007dca:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <initialise_monitor_handles+0xb4>)
 8007dcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dd0:	f8c3 b000 	str.w	fp, [r3]
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f8cd a00c 	str.w	sl, [sp, #12]
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4639      	mov	r1, r7
 8007de0:	beab      	bkpt	0x00ab
 8007de2:	4606      	mov	r6, r0
 8007de4:	602e      	str	r6, [r5, #0]
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	bf02      	ittt	eq
 8007dec:	4b0c      	ldreq	r3, [pc, #48]	@ (8007e20 <initialise_monitor_handles+0xb4>)
 8007dee:	681b      	ldreq	r3, [r3, #0]
 8007df0:	602b      	streq	r3, [r5, #0]
 8007df2:	2600      	movs	r6, #0
 8007df4:	f8d8 3000 	ldr.w	r3, [r8]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	6066      	str	r6, [r4, #4]
 8007dfc:	f7ff ffaa 	bl	8007d54 <_has_ext_stdout_stderr>
 8007e00:	b130      	cbz	r0, 8007e10 <initialise_monitor_handles+0xa4>
 8007e02:	4b07      	ldr	r3, [pc, #28]	@ (8007e20 <initialise_monitor_handles+0xb4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007e10:	b005      	add	sp, #20
 8007e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e16:	bf00      	nop
 8007e18:	200260a4 	.word	0x200260a4
 8007e1c:	20026098 	.word	0x20026098
 8007e20:	2002609c 	.word	0x2002609c
 8007e24:	0800a3fa 	.word	0x0800a3fa
 8007e28:	200260a0 	.word	0x200260a0

08007e2c <_isatty>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	f7ff fd85 	bl	800793c <findslot>
 8007e32:	2409      	movs	r4, #9
 8007e34:	4605      	mov	r5, r0
 8007e36:	b920      	cbnz	r0, 8007e42 <_isatty+0x16>
 8007e38:	f000 faa2 	bl	8008380 <__errno>
 8007e3c:	6004      	str	r4, [r0, #0]
 8007e3e:	2000      	movs	r0, #0
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	beab      	bkpt	0x00ab
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2c01      	cmp	r4, #1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	d0f7      	beq.n	8007e40 <_isatty+0x14>
 8007e50:	f000 fa96 	bl	8008380 <__errno>
 8007e54:	2513      	movs	r5, #19
 8007e56:	4604      	mov	r4, r0
 8007e58:	2600      	movs	r6, #0
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	beab      	bkpt	0x00ab
 8007e60:	4605      	mov	r5, r0
 8007e62:	6025      	str	r5, [r4, #0]
 8007e64:	e7eb      	b.n	8007e3e <_isatty+0x12>
	...

08007e68 <std>:
 8007e68:	2300      	movs	r3, #0
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e76:	6083      	str	r3, [r0, #8]
 8007e78:	8181      	strh	r1, [r0, #12]
 8007e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e7c:	81c2      	strh	r2, [r0, #14]
 8007e7e:	6183      	str	r3, [r0, #24]
 8007e80:	4619      	mov	r1, r3
 8007e82:	2208      	movs	r2, #8
 8007e84:	305c      	adds	r0, #92	@ 0x5c
 8007e86:	f000 fa2d 	bl	80082e4 <memset>
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec0 <std+0x58>)
 8007e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <std+0x5c>)
 8007e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <std+0x60>)
 8007e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <std+0x64>)
 8007e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <std+0x68>)
 8007e9c:	6224      	str	r4, [r4, #32]
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d006      	beq.n	8007eb0 <std+0x48>
 8007ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ea6:	4294      	cmp	r4, r2
 8007ea8:	d002      	beq.n	8007eb0 <std+0x48>
 8007eaa:	33d0      	adds	r3, #208	@ 0xd0
 8007eac:	429c      	cmp	r4, r3
 8007eae:	d105      	bne.n	8007ebc <std+0x54>
 8007eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb8:	f000 ba8c 	b.w	80083d4 <__retarget_lock_init_recursive>
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	bf00      	nop
 8007ec0:	08008135 	.word	0x08008135
 8007ec4:	08008157 	.word	0x08008157
 8007ec8:	0800818f 	.word	0x0800818f
 8007ecc:	080081b3 	.word	0x080081b3
 8007ed0:	20026144 	.word	0x20026144

08007ed4 <stdio_exit_handler>:
 8007ed4:	4a02      	ldr	r2, [pc, #8]	@ (8007ee0 <stdio_exit_handler+0xc>)
 8007ed6:	4903      	ldr	r1, [pc, #12]	@ (8007ee4 <stdio_exit_handler+0x10>)
 8007ed8:	4803      	ldr	r0, [pc, #12]	@ (8007ee8 <stdio_exit_handler+0x14>)
 8007eda:	f000 b869 	b.w	8007fb0 <_fwalk_sglue>
 8007ede:	bf00      	nop
 8007ee0:	20000210 	.word	0x20000210
 8007ee4:	08008f41 	.word	0x08008f41
 8007ee8:	20000220 	.word	0x20000220

08007eec <cleanup_stdio>:
 8007eec:	6841      	ldr	r1, [r0, #4]
 8007eee:	4b0c      	ldr	r3, [pc, #48]	@ (8007f20 <cleanup_stdio+0x34>)
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	d001      	beq.n	8007efc <cleanup_stdio+0x10>
 8007ef8:	f001 f822 	bl	8008f40 <_fflush_r>
 8007efc:	68a1      	ldr	r1, [r4, #8]
 8007efe:	4b09      	ldr	r3, [pc, #36]	@ (8007f24 <cleanup_stdio+0x38>)
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <cleanup_stdio+0x1e>
 8007f04:	4620      	mov	r0, r4
 8007f06:	f001 f81b 	bl	8008f40 <_fflush_r>
 8007f0a:	68e1      	ldr	r1, [r4, #12]
 8007f0c:	4b06      	ldr	r3, [pc, #24]	@ (8007f28 <cleanup_stdio+0x3c>)
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	d004      	beq.n	8007f1c <cleanup_stdio+0x30>
 8007f12:	4620      	mov	r0, r4
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f001 b812 	b.w	8008f40 <_fflush_r>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	20026144 	.word	0x20026144
 8007f24:	200261ac 	.word	0x200261ac
 8007f28:	20026214 	.word	0x20026214

08007f2c <global_stdio_init.part.0>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <global_stdio_init.part.0+0x30>)
 8007f30:	4c0b      	ldr	r4, [pc, #44]	@ (8007f60 <global_stdio_init.part.0+0x34>)
 8007f32:	4a0c      	ldr	r2, [pc, #48]	@ (8007f64 <global_stdio_init.part.0+0x38>)
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	4620      	mov	r0, r4
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2104      	movs	r1, #4
 8007f3c:	f7ff ff94 	bl	8007e68 <std>
 8007f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f44:	2201      	movs	r2, #1
 8007f46:	2109      	movs	r1, #9
 8007f48:	f7ff ff8e 	bl	8007e68 <std>
 8007f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f50:	2202      	movs	r2, #2
 8007f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f56:	2112      	movs	r1, #18
 8007f58:	f7ff bf86 	b.w	8007e68 <std>
 8007f5c:	2002627c 	.word	0x2002627c
 8007f60:	20026144 	.word	0x20026144
 8007f64:	08007ed5 	.word	0x08007ed5

08007f68 <__sfp_lock_acquire>:
 8007f68:	4801      	ldr	r0, [pc, #4]	@ (8007f70 <__sfp_lock_acquire+0x8>)
 8007f6a:	f000 ba34 	b.w	80083d6 <__retarget_lock_acquire_recursive>
 8007f6e:	bf00      	nop
 8007f70:	20026285 	.word	0x20026285

08007f74 <__sfp_lock_release>:
 8007f74:	4801      	ldr	r0, [pc, #4]	@ (8007f7c <__sfp_lock_release+0x8>)
 8007f76:	f000 ba2f 	b.w	80083d8 <__retarget_lock_release_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20026285 	.word	0x20026285

08007f80 <__sinit>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff fff0 	bl	8007f68 <__sfp_lock_acquire>
 8007f88:	6a23      	ldr	r3, [r4, #32]
 8007f8a:	b11b      	cbz	r3, 8007f94 <__sinit+0x14>
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f90:	f7ff bff0 	b.w	8007f74 <__sfp_lock_release>
 8007f94:	4b04      	ldr	r3, [pc, #16]	@ (8007fa8 <__sinit+0x28>)
 8007f96:	6223      	str	r3, [r4, #32]
 8007f98:	4b04      	ldr	r3, [pc, #16]	@ (8007fac <__sinit+0x2c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f5      	bne.n	8007f8c <__sinit+0xc>
 8007fa0:	f7ff ffc4 	bl	8007f2c <global_stdio_init.part.0>
 8007fa4:	e7f2      	b.n	8007f8c <__sinit+0xc>
 8007fa6:	bf00      	nop
 8007fa8:	08007eed 	.word	0x08007eed
 8007fac:	2002627c 	.word	0x2002627c

08007fb0 <_fwalk_sglue>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	4688      	mov	r8, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fc4:	d505      	bpl.n	8007fd2 <_fwalk_sglue+0x22>
 8007fc6:	6824      	ldr	r4, [r4, #0]
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d1f7      	bne.n	8007fbc <_fwalk_sglue+0xc>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d907      	bls.n	8007fe8 <_fwalk_sglue+0x38>
 8007fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	d003      	beq.n	8007fe8 <_fwalk_sglue+0x38>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c0      	blx	r8
 8007fe6:	4306      	orrs	r6, r0
 8007fe8:	3568      	adds	r5, #104	@ 0x68
 8007fea:	e7e9      	b.n	8007fc0 <_fwalk_sglue+0x10>

08007fec <iprintf>:
 8007fec:	b40f      	push	{r0, r1, r2, r3}
 8007fee:	b507      	push	{r0, r1, r2, lr}
 8007ff0:	4906      	ldr	r1, [pc, #24]	@ (800800c <iprintf+0x20>)
 8007ff2:	ab04      	add	r3, sp, #16
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffa:	6881      	ldr	r1, [r0, #8]
 8007ffc:	9301      	str	r3, [sp, #4]
 8007ffe:	f000 fc75 	bl	80088ec <_vfiprintf_r>
 8008002:	b003      	add	sp, #12
 8008004:	f85d eb04 	ldr.w	lr, [sp], #4
 8008008:	b004      	add	sp, #16
 800800a:	4770      	bx	lr
 800800c:	2000021c 	.word	0x2000021c

08008010 <_puts_r>:
 8008010:	6a03      	ldr	r3, [r0, #32]
 8008012:	b570      	push	{r4, r5, r6, lr}
 8008014:	6884      	ldr	r4, [r0, #8]
 8008016:	4605      	mov	r5, r0
 8008018:	460e      	mov	r6, r1
 800801a:	b90b      	cbnz	r3, 8008020 <_puts_r+0x10>
 800801c:	f7ff ffb0 	bl	8007f80 <__sinit>
 8008020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008022:	07db      	lsls	r3, r3, #31
 8008024:	d405      	bmi.n	8008032 <_puts_r+0x22>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d402      	bmi.n	8008032 <_puts_r+0x22>
 800802c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802e:	f000 f9d2 	bl	80083d6 <__retarget_lock_acquire_recursive>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0719      	lsls	r1, r3, #28
 8008036:	d502      	bpl.n	800803e <_puts_r+0x2e>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d135      	bne.n	80080aa <_puts_r+0x9a>
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f8f9 	bl	8008238 <__swsetup_r>
 8008046:	b380      	cbz	r0, 80080aa <_puts_r+0x9a>
 8008048:	f04f 35ff 	mov.w	r5, #4294967295
 800804c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800804e:	07da      	lsls	r2, r3, #31
 8008050:	d405      	bmi.n	800805e <_puts_r+0x4e>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	059b      	lsls	r3, r3, #22
 8008056:	d402      	bmi.n	800805e <_puts_r+0x4e>
 8008058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800805a:	f000 f9bd 	bl	80083d8 <__retarget_lock_release_recursive>
 800805e:	4628      	mov	r0, r5
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	2b00      	cmp	r3, #0
 8008064:	da04      	bge.n	8008070 <_puts_r+0x60>
 8008066:	69a2      	ldr	r2, [r4, #24]
 8008068:	429a      	cmp	r2, r3
 800806a:	dc17      	bgt.n	800809c <_puts_r+0x8c>
 800806c:	290a      	cmp	r1, #10
 800806e:	d015      	beq.n	800809c <_puts_r+0x8c>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	6022      	str	r2, [r4, #0]
 8008076:	7019      	strb	r1, [r3, #0]
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800807e:	3b01      	subs	r3, #1
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	2900      	cmp	r1, #0
 8008084:	d1ed      	bne.n	8008062 <_puts_r+0x52>
 8008086:	2b00      	cmp	r3, #0
 8008088:	da11      	bge.n	80080ae <_puts_r+0x9e>
 800808a:	4622      	mov	r2, r4
 800808c:	210a      	movs	r1, #10
 800808e:	4628      	mov	r0, r5
 8008090:	f000 f893 	bl	80081ba <__swbuf_r>
 8008094:	3001      	adds	r0, #1
 8008096:	d0d7      	beq.n	8008048 <_puts_r+0x38>
 8008098:	250a      	movs	r5, #10
 800809a:	e7d7      	b.n	800804c <_puts_r+0x3c>
 800809c:	4622      	mov	r2, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f88b 	bl	80081ba <__swbuf_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d1e7      	bne.n	8008078 <_puts_r+0x68>
 80080a8:	e7ce      	b.n	8008048 <_puts_r+0x38>
 80080aa:	3e01      	subs	r6, #1
 80080ac:	e7e4      	b.n	8008078 <_puts_r+0x68>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	220a      	movs	r2, #10
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e7ee      	b.n	8008098 <_puts_r+0x88>
	...

080080bc <puts>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	@ (80080c8 <puts+0xc>)
 80080be:	4601      	mov	r1, r0
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f7ff bfa5 	b.w	8008010 <_puts_r>
 80080c6:	bf00      	nop
 80080c8:	2000021c 	.word	0x2000021c

080080cc <sniprintf>:
 80080cc:	b40c      	push	{r2, r3}
 80080ce:	b530      	push	{r4, r5, lr}
 80080d0:	4b17      	ldr	r3, [pc, #92]	@ (8008130 <sniprintf+0x64>)
 80080d2:	1e0c      	subs	r4, r1, #0
 80080d4:	681d      	ldr	r5, [r3, #0]
 80080d6:	b09d      	sub	sp, #116	@ 0x74
 80080d8:	da08      	bge.n	80080ec <sniprintf+0x20>
 80080da:	238b      	movs	r3, #139	@ 0x8b
 80080dc:	602b      	str	r3, [r5, #0]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	b01d      	add	sp, #116	@ 0x74
 80080e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e8:	b002      	add	sp, #8
 80080ea:	4770      	bx	lr
 80080ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080f4:	bf14      	ite	ne
 80080f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080fa:	4623      	moveq	r3, r4
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	9307      	str	r3, [sp, #28]
 8008100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008104:	9002      	str	r0, [sp, #8]
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800810c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800810e:	ab21      	add	r3, sp, #132	@ 0x84
 8008110:	a902      	add	r1, sp, #8
 8008112:	4628      	mov	r0, r5
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f000 fac3 	bl	80086a0 <_svfiprintf_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	bfbc      	itt	lt
 800811e:	238b      	movlt	r3, #139	@ 0x8b
 8008120:	602b      	strlt	r3, [r5, #0]
 8008122:	2c00      	cmp	r4, #0
 8008124:	d0dd      	beq.n	80080e2 <sniprintf+0x16>
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	e7d9      	b.n	80080e2 <sniprintf+0x16>
 800812e:	bf00      	nop
 8008130:	2000021c 	.word	0x2000021c

08008134 <__sread>:
 8008134:	b510      	push	{r4, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813c:	f000 f8fc 	bl	8008338 <_read_r>
 8008140:	2800      	cmp	r0, #0
 8008142:	bfab      	itete	ge
 8008144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008146:	89a3      	ldrhlt	r3, [r4, #12]
 8008148:	181b      	addge	r3, r3, r0
 800814a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800814e:	bfac      	ite	ge
 8008150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008152:	81a3      	strhlt	r3, [r4, #12]
 8008154:	bd10      	pop	{r4, pc}

08008156 <__swrite>:
 8008156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815a:	461f      	mov	r7, r3
 800815c:	898b      	ldrh	r3, [r1, #12]
 800815e:	05db      	lsls	r3, r3, #23
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	4616      	mov	r6, r2
 8008166:	d505      	bpl.n	8008174 <__swrite+0x1e>
 8008168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816c:	2302      	movs	r3, #2
 800816e:	2200      	movs	r2, #0
 8008170:	f000 f8d0 	bl	8008314 <_lseek_r>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	4632      	mov	r2, r6
 8008182:	463b      	mov	r3, r7
 8008184:	4628      	mov	r0, r5
 8008186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	f000 b8e7 	b.w	800835c <_write_r>

0800818e <__sseek>:
 800818e:	b510      	push	{r4, lr}
 8008190:	460c      	mov	r4, r1
 8008192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008196:	f000 f8bd 	bl	8008314 <_lseek_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	bf15      	itete	ne
 80081a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081aa:	81a3      	strheq	r3, [r4, #12]
 80081ac:	bf18      	it	ne
 80081ae:	81a3      	strhne	r3, [r4, #12]
 80081b0:	bd10      	pop	{r4, pc}

080081b2 <__sclose>:
 80081b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b6:	f000 b89d 	b.w	80082f4 <_close_r>

080081ba <__swbuf_r>:
 80081ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081bc:	460e      	mov	r6, r1
 80081be:	4614      	mov	r4, r2
 80081c0:	4605      	mov	r5, r0
 80081c2:	b118      	cbz	r0, 80081cc <__swbuf_r+0x12>
 80081c4:	6a03      	ldr	r3, [r0, #32]
 80081c6:	b90b      	cbnz	r3, 80081cc <__swbuf_r+0x12>
 80081c8:	f7ff feda 	bl	8007f80 <__sinit>
 80081cc:	69a3      	ldr	r3, [r4, #24]
 80081ce:	60a3      	str	r3, [r4, #8]
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	071a      	lsls	r2, r3, #28
 80081d4:	d501      	bpl.n	80081da <__swbuf_r+0x20>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	b943      	cbnz	r3, 80081ec <__swbuf_r+0x32>
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f82b 	bl	8008238 <__swsetup_r>
 80081e2:	b118      	cbz	r0, 80081ec <__swbuf_r+0x32>
 80081e4:	f04f 37ff 	mov.w	r7, #4294967295
 80081e8:	4638      	mov	r0, r7
 80081ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	6922      	ldr	r2, [r4, #16]
 80081f0:	1a98      	subs	r0, r3, r2
 80081f2:	6963      	ldr	r3, [r4, #20]
 80081f4:	b2f6      	uxtb	r6, r6
 80081f6:	4283      	cmp	r3, r0
 80081f8:	4637      	mov	r7, r6
 80081fa:	dc05      	bgt.n	8008208 <__swbuf_r+0x4e>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fe9e 	bl	8008f40 <_fflush_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d1ed      	bne.n	80081e4 <__swbuf_r+0x2a>
 8008208:	68a3      	ldr	r3, [r4, #8]
 800820a:	3b01      	subs	r3, #1
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	6022      	str	r2, [r4, #0]
 8008214:	701e      	strb	r6, [r3, #0]
 8008216:	6962      	ldr	r2, [r4, #20]
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	429a      	cmp	r2, r3
 800821c:	d004      	beq.n	8008228 <__swbuf_r+0x6e>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	07db      	lsls	r3, r3, #31
 8008222:	d5e1      	bpl.n	80081e8 <__swbuf_r+0x2e>
 8008224:	2e0a      	cmp	r6, #10
 8008226:	d1df      	bne.n	80081e8 <__swbuf_r+0x2e>
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	f000 fe88 	bl	8008f40 <_fflush_r>
 8008230:	2800      	cmp	r0, #0
 8008232:	d0d9      	beq.n	80081e8 <__swbuf_r+0x2e>
 8008234:	e7d6      	b.n	80081e4 <__swbuf_r+0x2a>
	...

08008238 <__swsetup_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4b29      	ldr	r3, [pc, #164]	@ (80082e0 <__swsetup_r+0xa8>)
 800823c:	4605      	mov	r5, r0
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	460c      	mov	r4, r1
 8008242:	b118      	cbz	r0, 800824c <__swsetup_r+0x14>
 8008244:	6a03      	ldr	r3, [r0, #32]
 8008246:	b90b      	cbnz	r3, 800824c <__swsetup_r+0x14>
 8008248:	f7ff fe9a 	bl	8007f80 <__sinit>
 800824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008250:	0719      	lsls	r1, r3, #28
 8008252:	d422      	bmi.n	800829a <__swsetup_r+0x62>
 8008254:	06da      	lsls	r2, r3, #27
 8008256:	d407      	bmi.n	8008268 <__swsetup_r+0x30>
 8008258:	2209      	movs	r2, #9
 800825a:	602a      	str	r2, [r5, #0]
 800825c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	e033      	b.n	80082d0 <__swsetup_r+0x98>
 8008268:	0758      	lsls	r0, r3, #29
 800826a:	d512      	bpl.n	8008292 <__swsetup_r+0x5a>
 800826c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800826e:	b141      	cbz	r1, 8008282 <__swsetup_r+0x4a>
 8008270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008274:	4299      	cmp	r1, r3
 8008276:	d002      	beq.n	800827e <__swsetup_r+0x46>
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f8bd 	bl	80083f8 <_free_r>
 800827e:	2300      	movs	r3, #0
 8008280:	6363      	str	r3, [r4, #52]	@ 0x34
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	2300      	movs	r3, #0
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f043 0308 	orr.w	r3, r3, #8
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	b94b      	cbnz	r3, 80082b2 <__swsetup_r+0x7a>
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a8:	d003      	beq.n	80082b2 <__swsetup_r+0x7a>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 fe95 	bl	8008fdc <__smakebuf_r>
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	f013 0201 	ands.w	r2, r3, #1
 80082ba:	d00a      	beq.n	80082d2 <__swsetup_r+0x9a>
 80082bc:	2200      	movs	r2, #0
 80082be:	60a2      	str	r2, [r4, #8]
 80082c0:	6962      	ldr	r2, [r4, #20]
 80082c2:	4252      	negs	r2, r2
 80082c4:	61a2      	str	r2, [r4, #24]
 80082c6:	6922      	ldr	r2, [r4, #16]
 80082c8:	b942      	cbnz	r2, 80082dc <__swsetup_r+0xa4>
 80082ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ce:	d1c5      	bne.n	800825c <__swsetup_r+0x24>
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	0799      	lsls	r1, r3, #30
 80082d4:	bf58      	it	pl
 80082d6:	6962      	ldrpl	r2, [r4, #20]
 80082d8:	60a2      	str	r2, [r4, #8]
 80082da:	e7f4      	b.n	80082c6 <__swsetup_r+0x8e>
 80082dc:	2000      	movs	r0, #0
 80082de:	e7f7      	b.n	80082d0 <__swsetup_r+0x98>
 80082e0:	2000021c 	.word	0x2000021c

080082e4 <memset>:
 80082e4:	4402      	add	r2, r0
 80082e6:	4603      	mov	r3, r0
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d100      	bne.n	80082ee <memset+0xa>
 80082ec:	4770      	bx	lr
 80082ee:	f803 1b01 	strb.w	r1, [r3], #1
 80082f2:	e7f9      	b.n	80082e8 <memset+0x4>

080082f4 <_close_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	@ (8008310 <_close_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7ff fbee 	bl	8007ae0 <_close>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_close_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_close_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20026280 	.word	0x20026280

08008314 <_lseek_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	@ (8008334 <_lseek_r+0x20>)
 8008318:	4604      	mov	r4, r0
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	2200      	movs	r2, #0
 8008320:	602a      	str	r2, [r5, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f7ff fb9d 	bl	8007a62 <_lseek>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_lseek_r+0x1e>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_lseek_r+0x1e>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20026280 	.word	0x20026280

08008338 <_read_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	@ (8008358 <_read_r+0x20>)
 800833c:	4604      	mov	r4, r0
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	2200      	movs	r2, #0
 8008344:	602a      	str	r2, [r5, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f7ff fb35 	bl	80079b6 <_read>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_read_r+0x1e>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_read_r+0x1e>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20026280 	.word	0x20026280

0800835c <_write_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	@ (800837c <_write_r+0x20>)
 8008360:	4604      	mov	r4, r0
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	2200      	movs	r2, #0
 8008368:	602a      	str	r2, [r5, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	f7ff fb8b 	bl	8007a86 <_write>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_write_r+0x1e>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_write_r+0x1e>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20026280 	.word	0x20026280

08008380 <__errno>:
 8008380:	4b01      	ldr	r3, [pc, #4]	@ (8008388 <__errno+0x8>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	2000021c 	.word	0x2000021c

0800838c <__libc_init_array>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4d0d      	ldr	r5, [pc, #52]	@ (80083c4 <__libc_init_array+0x38>)
 8008390:	4c0d      	ldr	r4, [pc, #52]	@ (80083c8 <__libc_init_array+0x3c>)
 8008392:	1b64      	subs	r4, r4, r5
 8008394:	10a4      	asrs	r4, r4, #2
 8008396:	2600      	movs	r6, #0
 8008398:	42a6      	cmp	r6, r4
 800839a:	d109      	bne.n	80083b0 <__libc_init_array+0x24>
 800839c:	4d0b      	ldr	r5, [pc, #44]	@ (80083cc <__libc_init_array+0x40>)
 800839e:	4c0c      	ldr	r4, [pc, #48]	@ (80083d0 <__libc_init_array+0x44>)
 80083a0:	f000 feda 	bl	8009158 <_init>
 80083a4:	1b64      	subs	r4, r4, r5
 80083a6:	10a4      	asrs	r4, r4, #2
 80083a8:	2600      	movs	r6, #0
 80083aa:	42a6      	cmp	r6, r4
 80083ac:	d105      	bne.n	80083ba <__libc_init_array+0x2e>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b4:	4798      	blx	r3
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7ee      	b.n	8008398 <__libc_init_array+0xc>
 80083ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80083be:	4798      	blx	r3
 80083c0:	3601      	adds	r6, #1
 80083c2:	e7f2      	b.n	80083aa <__libc_init_array+0x1e>
 80083c4:	0800a43c 	.word	0x0800a43c
 80083c8:	0800a43c 	.word	0x0800a43c
 80083cc:	0800a43c 	.word	0x0800a43c
 80083d0:	0800a440 	.word	0x0800a440

080083d4 <__retarget_lock_init_recursive>:
 80083d4:	4770      	bx	lr

080083d6 <__retarget_lock_acquire_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <__retarget_lock_release_recursive>:
 80083d8:	4770      	bx	lr

080083da <memcpy>:
 80083da:	440a      	add	r2, r1
 80083dc:	4291      	cmp	r1, r2
 80083de:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e2:	d100      	bne.n	80083e6 <memcpy+0xc>
 80083e4:	4770      	bx	lr
 80083e6:	b510      	push	{r4, lr}
 80083e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f0:	4291      	cmp	r1, r2
 80083f2:	d1f9      	bne.n	80083e8 <memcpy+0xe>
 80083f4:	bd10      	pop	{r4, pc}
	...

080083f8 <_free_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d041      	beq.n	8008484 <_free_r+0x8c>
 8008400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008404:	1f0c      	subs	r4, r1, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfb8      	it	lt
 800840a:	18e4      	addlt	r4, r4, r3
 800840c:	f000 f8e0 	bl	80085d0 <__malloc_lock>
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <_free_r+0x90>)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	b933      	cbnz	r3, 8008424 <_free_r+0x2c>
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008420:	f000 b8dc 	b.w	80085dc <__malloc_unlock>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x42>
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	1821      	adds	r1, r4, r0
 800842c:	428b      	cmp	r3, r1
 800842e:	bf01      	itttt	eq
 8008430:	6819      	ldreq	r1, [r3, #0]
 8008432:	685b      	ldreq	r3, [r3, #4]
 8008434:	1809      	addeq	r1, r1, r0
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	e7ed      	b.n	8008416 <_free_r+0x1e>
 800843a:	461a      	mov	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b10b      	cbz	r3, 8008444 <_free_r+0x4c>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x42>
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	1850      	adds	r0, r2, r1
 8008448:	42a0      	cmp	r0, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x6c>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	4401      	add	r1, r0
 8008450:	1850      	adds	r0, r2, r1
 8008452:	4283      	cmp	r3, r0
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	d1e0      	bne.n	800841a <_free_r+0x22>
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	4408      	add	r0, r1
 8008460:	6010      	str	r0, [r2, #0]
 8008462:	e7da      	b.n	800841a <_free_r+0x22>
 8008464:	d902      	bls.n	800846c <_free_r+0x74>
 8008466:	230c      	movs	r3, #12
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	e7d6      	b.n	800841a <_free_r+0x22>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	1821      	adds	r1, r4, r0
 8008470:	428b      	cmp	r3, r1
 8008472:	bf04      	itt	eq
 8008474:	6819      	ldreq	r1, [r3, #0]
 8008476:	685b      	ldreq	r3, [r3, #4]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	6054      	str	r4, [r2, #4]
 8008482:	e7ca      	b.n	800841a <_free_r+0x22>
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	2002628c 	.word	0x2002628c

0800848c <sbrk_aligned>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4e0f      	ldr	r6, [pc, #60]	@ (80084cc <sbrk_aligned+0x40>)
 8008490:	460c      	mov	r4, r1
 8008492:	6831      	ldr	r1, [r6, #0]
 8008494:	4605      	mov	r5, r0
 8008496:	b911      	cbnz	r1, 800849e <sbrk_aligned+0x12>
 8008498:	f000 fe18 	bl	80090cc <_sbrk_r>
 800849c:	6030      	str	r0, [r6, #0]
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 fe13 	bl	80090cc <_sbrk_r>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d103      	bne.n	80084b2 <sbrk_aligned+0x26>
 80084aa:	f04f 34ff 	mov.w	r4, #4294967295
 80084ae:	4620      	mov	r0, r4
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	1cc4      	adds	r4, r0, #3
 80084b4:	f024 0403 	bic.w	r4, r4, #3
 80084b8:	42a0      	cmp	r0, r4
 80084ba:	d0f8      	beq.n	80084ae <sbrk_aligned+0x22>
 80084bc:	1a21      	subs	r1, r4, r0
 80084be:	4628      	mov	r0, r5
 80084c0:	f000 fe04 	bl	80090cc <_sbrk_r>
 80084c4:	3001      	adds	r0, #1
 80084c6:	d1f2      	bne.n	80084ae <sbrk_aligned+0x22>
 80084c8:	e7ef      	b.n	80084aa <sbrk_aligned+0x1e>
 80084ca:	bf00      	nop
 80084cc:	20026288 	.word	0x20026288

080084d0 <_malloc_r>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	1ccd      	adds	r5, r1, #3
 80084d6:	f025 0503 	bic.w	r5, r5, #3
 80084da:	3508      	adds	r5, #8
 80084dc:	2d0c      	cmp	r5, #12
 80084de:	bf38      	it	cc
 80084e0:	250c      	movcc	r5, #12
 80084e2:	2d00      	cmp	r5, #0
 80084e4:	4606      	mov	r6, r0
 80084e6:	db01      	blt.n	80084ec <_malloc_r+0x1c>
 80084e8:	42a9      	cmp	r1, r5
 80084ea:	d904      	bls.n	80084f6 <_malloc_r+0x26>
 80084ec:	230c      	movs	r3, #12
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	2000      	movs	r0, #0
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085cc <_malloc_r+0xfc>
 80084fa:	f000 f869 	bl	80085d0 <__malloc_lock>
 80084fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008502:	461c      	mov	r4, r3
 8008504:	bb44      	cbnz	r4, 8008558 <_malloc_r+0x88>
 8008506:	4629      	mov	r1, r5
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff ffbf 	bl	800848c <sbrk_aligned>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	4604      	mov	r4, r0
 8008512:	d158      	bne.n	80085c6 <_malloc_r+0xf6>
 8008514:	f8d8 4000 	ldr.w	r4, [r8]
 8008518:	4627      	mov	r7, r4
 800851a:	2f00      	cmp	r7, #0
 800851c:	d143      	bne.n	80085a6 <_malloc_r+0xd6>
 800851e:	2c00      	cmp	r4, #0
 8008520:	d04b      	beq.n	80085ba <_malloc_r+0xea>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	4639      	mov	r1, r7
 8008526:	4630      	mov	r0, r6
 8008528:	eb04 0903 	add.w	r9, r4, r3
 800852c:	f000 fdce 	bl	80090cc <_sbrk_r>
 8008530:	4581      	cmp	r9, r0
 8008532:	d142      	bne.n	80085ba <_malloc_r+0xea>
 8008534:	6821      	ldr	r1, [r4, #0]
 8008536:	1a6d      	subs	r5, r5, r1
 8008538:	4629      	mov	r1, r5
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ffa6 	bl	800848c <sbrk_aligned>
 8008540:	3001      	adds	r0, #1
 8008542:	d03a      	beq.n	80085ba <_malloc_r+0xea>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	442b      	add	r3, r5
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	f8d8 3000 	ldr.w	r3, [r8]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	bb62      	cbnz	r2, 80085ac <_malloc_r+0xdc>
 8008552:	f8c8 7000 	str.w	r7, [r8]
 8008556:	e00f      	b.n	8008578 <_malloc_r+0xa8>
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	1b52      	subs	r2, r2, r5
 800855c:	d420      	bmi.n	80085a0 <_malloc_r+0xd0>
 800855e:	2a0b      	cmp	r2, #11
 8008560:	d917      	bls.n	8008592 <_malloc_r+0xc2>
 8008562:	1961      	adds	r1, r4, r5
 8008564:	42a3      	cmp	r3, r4
 8008566:	6025      	str	r5, [r4, #0]
 8008568:	bf18      	it	ne
 800856a:	6059      	strne	r1, [r3, #4]
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	bf08      	it	eq
 8008570:	f8c8 1000 	streq.w	r1, [r8]
 8008574:	5162      	str	r2, [r4, r5]
 8008576:	604b      	str	r3, [r1, #4]
 8008578:	4630      	mov	r0, r6
 800857a:	f000 f82f 	bl	80085dc <__malloc_unlock>
 800857e:	f104 000b 	add.w	r0, r4, #11
 8008582:	1d23      	adds	r3, r4, #4
 8008584:	f020 0007 	bic.w	r0, r0, #7
 8008588:	1ac2      	subs	r2, r0, r3
 800858a:	bf1c      	itt	ne
 800858c:	1a1b      	subne	r3, r3, r0
 800858e:	50a3      	strne	r3, [r4, r2]
 8008590:	e7af      	b.n	80084f2 <_malloc_r+0x22>
 8008592:	6862      	ldr	r2, [r4, #4]
 8008594:	42a3      	cmp	r3, r4
 8008596:	bf0c      	ite	eq
 8008598:	f8c8 2000 	streq.w	r2, [r8]
 800859c:	605a      	strne	r2, [r3, #4]
 800859e:	e7eb      	b.n	8008578 <_malloc_r+0xa8>
 80085a0:	4623      	mov	r3, r4
 80085a2:	6864      	ldr	r4, [r4, #4]
 80085a4:	e7ae      	b.n	8008504 <_malloc_r+0x34>
 80085a6:	463c      	mov	r4, r7
 80085a8:	687f      	ldr	r7, [r7, #4]
 80085aa:	e7b6      	b.n	800851a <_malloc_r+0x4a>
 80085ac:	461a      	mov	r2, r3
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d1fb      	bne.n	80085ac <_malloc_r+0xdc>
 80085b4:	2300      	movs	r3, #0
 80085b6:	6053      	str	r3, [r2, #4]
 80085b8:	e7de      	b.n	8008578 <_malloc_r+0xa8>
 80085ba:	230c      	movs	r3, #12
 80085bc:	6033      	str	r3, [r6, #0]
 80085be:	4630      	mov	r0, r6
 80085c0:	f000 f80c 	bl	80085dc <__malloc_unlock>
 80085c4:	e794      	b.n	80084f0 <_malloc_r+0x20>
 80085c6:	6005      	str	r5, [r0, #0]
 80085c8:	e7d6      	b.n	8008578 <_malloc_r+0xa8>
 80085ca:	bf00      	nop
 80085cc:	2002628c 	.word	0x2002628c

080085d0 <__malloc_lock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	@ (80085d8 <__malloc_lock+0x8>)
 80085d2:	f7ff bf00 	b.w	80083d6 <__retarget_lock_acquire_recursive>
 80085d6:	bf00      	nop
 80085d8:	20026284 	.word	0x20026284

080085dc <__malloc_unlock>:
 80085dc:	4801      	ldr	r0, [pc, #4]	@ (80085e4 <__malloc_unlock+0x8>)
 80085de:	f7ff befb 	b.w	80083d8 <__retarget_lock_release_recursive>
 80085e2:	bf00      	nop
 80085e4:	20026284 	.word	0x20026284

080085e8 <__ssputs_r>:
 80085e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	688e      	ldr	r6, [r1, #8]
 80085ee:	461f      	mov	r7, r3
 80085f0:	42be      	cmp	r6, r7
 80085f2:	680b      	ldr	r3, [r1, #0]
 80085f4:	4682      	mov	sl, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	4690      	mov	r8, r2
 80085fa:	d82d      	bhi.n	8008658 <__ssputs_r+0x70>
 80085fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008600:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008604:	d026      	beq.n	8008654 <__ssputs_r+0x6c>
 8008606:	6965      	ldr	r5, [r4, #20]
 8008608:	6909      	ldr	r1, [r1, #16]
 800860a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800860e:	eba3 0901 	sub.w	r9, r3, r1
 8008612:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008616:	1c7b      	adds	r3, r7, #1
 8008618:	444b      	add	r3, r9
 800861a:	106d      	asrs	r5, r5, #1
 800861c:	429d      	cmp	r5, r3
 800861e:	bf38      	it	cc
 8008620:	461d      	movcc	r5, r3
 8008622:	0553      	lsls	r3, r2, #21
 8008624:	d527      	bpl.n	8008676 <__ssputs_r+0x8e>
 8008626:	4629      	mov	r1, r5
 8008628:	f7ff ff52 	bl	80084d0 <_malloc_r>
 800862c:	4606      	mov	r6, r0
 800862e:	b360      	cbz	r0, 800868a <__ssputs_r+0xa2>
 8008630:	6921      	ldr	r1, [r4, #16]
 8008632:	464a      	mov	r2, r9
 8008634:	f7ff fed1 	bl	80083da <memcpy>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800863e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	6126      	str	r6, [r4, #16]
 8008646:	6165      	str	r5, [r4, #20]
 8008648:	444e      	add	r6, r9
 800864a:	eba5 0509 	sub.w	r5, r5, r9
 800864e:	6026      	str	r6, [r4, #0]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	463e      	mov	r6, r7
 8008654:	42be      	cmp	r6, r7
 8008656:	d900      	bls.n	800865a <__ssputs_r+0x72>
 8008658:	463e      	mov	r6, r7
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	4632      	mov	r2, r6
 800865e:	4641      	mov	r1, r8
 8008660:	f000 fcf8 	bl	8009054 <memmove>
 8008664:	68a3      	ldr	r3, [r4, #8]
 8008666:	1b9b      	subs	r3, r3, r6
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	4433      	add	r3, r6
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	2000      	movs	r0, #0
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	462a      	mov	r2, r5
 8008678:	f000 fd38 	bl	80090ec <_realloc_r>
 800867c:	4606      	mov	r6, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	d1e0      	bne.n	8008644 <__ssputs_r+0x5c>
 8008682:	6921      	ldr	r1, [r4, #16]
 8008684:	4650      	mov	r0, sl
 8008686:	f7ff feb7 	bl	80083f8 <_free_r>
 800868a:	230c      	movs	r3, #12
 800868c:	f8ca 3000 	str.w	r3, [sl]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e7e9      	b.n	8008672 <__ssputs_r+0x8a>
	...

080086a0 <_svfiprintf_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4698      	mov	r8, r3
 80086a6:	898b      	ldrh	r3, [r1, #12]
 80086a8:	061b      	lsls	r3, r3, #24
 80086aa:	b09d      	sub	sp, #116	@ 0x74
 80086ac:	4607      	mov	r7, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	d510      	bpl.n	80086d6 <_svfiprintf_r+0x36>
 80086b4:	690b      	ldr	r3, [r1, #16]
 80086b6:	b973      	cbnz	r3, 80086d6 <_svfiprintf_r+0x36>
 80086b8:	2140      	movs	r1, #64	@ 0x40
 80086ba:	f7ff ff09 	bl	80084d0 <_malloc_r>
 80086be:	6028      	str	r0, [r5, #0]
 80086c0:	6128      	str	r0, [r5, #16]
 80086c2:	b930      	cbnz	r0, 80086d2 <_svfiprintf_r+0x32>
 80086c4:	230c      	movs	r3, #12
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	b01d      	add	sp, #116	@ 0x74
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	2340      	movs	r3, #64	@ 0x40
 80086d4:	616b      	str	r3, [r5, #20]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	2320      	movs	r3, #32
 80086dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e4:	2330      	movs	r3, #48	@ 0x30
 80086e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008884 <_svfiprintf_r+0x1e4>
 80086ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ee:	f04f 0901 	mov.w	r9, #1
 80086f2:	4623      	mov	r3, r4
 80086f4:	469a      	mov	sl, r3
 80086f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fa:	b10a      	cbz	r2, 8008700 <_svfiprintf_r+0x60>
 80086fc:	2a25      	cmp	r2, #37	@ 0x25
 80086fe:	d1f9      	bne.n	80086f4 <_svfiprintf_r+0x54>
 8008700:	ebba 0b04 	subs.w	fp, sl, r4
 8008704:	d00b      	beq.n	800871e <_svfiprintf_r+0x7e>
 8008706:	465b      	mov	r3, fp
 8008708:	4622      	mov	r2, r4
 800870a:	4629      	mov	r1, r5
 800870c:	4638      	mov	r0, r7
 800870e:	f7ff ff6b 	bl	80085e8 <__ssputs_r>
 8008712:	3001      	adds	r0, #1
 8008714:	f000 80a7 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800871a:	445a      	add	r2, fp
 800871c:	9209      	str	r2, [sp, #36]	@ 0x24
 800871e:	f89a 3000 	ldrb.w	r3, [sl]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 809f 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008728:	2300      	movs	r3, #0
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008732:	f10a 0a01 	add.w	sl, sl, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9307      	str	r3, [sp, #28]
 800873a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800873e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008740:	4654      	mov	r4, sl
 8008742:	2205      	movs	r2, #5
 8008744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008748:	484e      	ldr	r0, [pc, #312]	@ (8008884 <_svfiprintf_r+0x1e4>)
 800874a:	f7f7 fd59 	bl	8000200 <memchr>
 800874e:	9a04      	ldr	r2, [sp, #16]
 8008750:	b9d8      	cbnz	r0, 800878a <_svfiprintf_r+0xea>
 8008752:	06d0      	lsls	r0, r2, #27
 8008754:	bf44      	itt	mi
 8008756:	2320      	movmi	r3, #32
 8008758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800875c:	0711      	lsls	r1, r2, #28
 800875e:	bf44      	itt	mi
 8008760:	232b      	movmi	r3, #43	@ 0x2b
 8008762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008766:	f89a 3000 	ldrb.w	r3, [sl]
 800876a:	2b2a      	cmp	r3, #42	@ 0x2a
 800876c:	d015      	beq.n	800879a <_svfiprintf_r+0xfa>
 800876e:	9a07      	ldr	r2, [sp, #28]
 8008770:	4654      	mov	r4, sl
 8008772:	2000      	movs	r0, #0
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4621      	mov	r1, r4
 800877a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877e:	3b30      	subs	r3, #48	@ 0x30
 8008780:	2b09      	cmp	r3, #9
 8008782:	d94b      	bls.n	800881c <_svfiprintf_r+0x17c>
 8008784:	b1b0      	cbz	r0, 80087b4 <_svfiprintf_r+0x114>
 8008786:	9207      	str	r2, [sp, #28]
 8008788:	e014      	b.n	80087b4 <_svfiprintf_r+0x114>
 800878a:	eba0 0308 	sub.w	r3, r0, r8
 800878e:	fa09 f303 	lsl.w	r3, r9, r3
 8008792:	4313      	orrs	r3, r2
 8008794:	9304      	str	r3, [sp, #16]
 8008796:	46a2      	mov	sl, r4
 8008798:	e7d2      	b.n	8008740 <_svfiprintf_r+0xa0>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	1d19      	adds	r1, r3, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	9103      	str	r1, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfbb      	ittet	lt
 80087a6:	425b      	neglt	r3, r3
 80087a8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ac:	9307      	strge	r3, [sp, #28]
 80087ae:	9307      	strlt	r3, [sp, #28]
 80087b0:	bfb8      	it	lt
 80087b2:	9204      	strlt	r2, [sp, #16]
 80087b4:	7823      	ldrb	r3, [r4, #0]
 80087b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b8:	d10a      	bne.n	80087d0 <_svfiprintf_r+0x130>
 80087ba:	7863      	ldrb	r3, [r4, #1]
 80087bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80087be:	d132      	bne.n	8008826 <_svfiprintf_r+0x186>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	1d1a      	adds	r2, r3, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	9203      	str	r2, [sp, #12]
 80087c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087cc:	3402      	adds	r4, #2
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008894 <_svfiprintf_r+0x1f4>
 80087d4:	7821      	ldrb	r1, [r4, #0]
 80087d6:	2203      	movs	r2, #3
 80087d8:	4650      	mov	r0, sl
 80087da:	f7f7 fd11 	bl	8000200 <memchr>
 80087de:	b138      	cbz	r0, 80087f0 <_svfiprintf_r+0x150>
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	eba0 000a 	sub.w	r0, r0, sl
 80087e6:	2240      	movs	r2, #64	@ 0x40
 80087e8:	4082      	lsls	r2, r0
 80087ea:	4313      	orrs	r3, r2
 80087ec:	3401      	adds	r4, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f4:	4824      	ldr	r0, [pc, #144]	@ (8008888 <_svfiprintf_r+0x1e8>)
 80087f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087fa:	2206      	movs	r2, #6
 80087fc:	f7f7 fd00 	bl	8000200 <memchr>
 8008800:	2800      	cmp	r0, #0
 8008802:	d036      	beq.n	8008872 <_svfiprintf_r+0x1d2>
 8008804:	4b21      	ldr	r3, [pc, #132]	@ (800888c <_svfiprintf_r+0x1ec>)
 8008806:	bb1b      	cbnz	r3, 8008850 <_svfiprintf_r+0x1b0>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	3307      	adds	r3, #7
 800880c:	f023 0307 	bic.w	r3, r3, #7
 8008810:	3308      	adds	r3, #8
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008816:	4433      	add	r3, r6
 8008818:	9309      	str	r3, [sp, #36]	@ 0x24
 800881a:	e76a      	b.n	80086f2 <_svfiprintf_r+0x52>
 800881c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008820:	460c      	mov	r4, r1
 8008822:	2001      	movs	r0, #1
 8008824:	e7a8      	b.n	8008778 <_svfiprintf_r+0xd8>
 8008826:	2300      	movs	r3, #0
 8008828:	3401      	adds	r4, #1
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	4619      	mov	r1, r3
 800882e:	f04f 0c0a 	mov.w	ip, #10
 8008832:	4620      	mov	r0, r4
 8008834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008838:	3a30      	subs	r2, #48	@ 0x30
 800883a:	2a09      	cmp	r2, #9
 800883c:	d903      	bls.n	8008846 <_svfiprintf_r+0x1a6>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c6      	beq.n	80087d0 <_svfiprintf_r+0x130>
 8008842:	9105      	str	r1, [sp, #20]
 8008844:	e7c4      	b.n	80087d0 <_svfiprintf_r+0x130>
 8008846:	fb0c 2101 	mla	r1, ip, r1, r2
 800884a:	4604      	mov	r4, r0
 800884c:	2301      	movs	r3, #1
 800884e:	e7f0      	b.n	8008832 <_svfiprintf_r+0x192>
 8008850:	ab03      	add	r3, sp, #12
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	462a      	mov	r2, r5
 8008856:	4b0e      	ldr	r3, [pc, #56]	@ (8008890 <_svfiprintf_r+0x1f0>)
 8008858:	a904      	add	r1, sp, #16
 800885a:	4638      	mov	r0, r7
 800885c:	f3af 8000 	nop.w
 8008860:	1c42      	adds	r2, r0, #1
 8008862:	4606      	mov	r6, r0
 8008864:	d1d6      	bne.n	8008814 <_svfiprintf_r+0x174>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	065b      	lsls	r3, r3, #25
 800886a:	f53f af2d 	bmi.w	80086c8 <_svfiprintf_r+0x28>
 800886e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008870:	e72c      	b.n	80086cc <_svfiprintf_r+0x2c>
 8008872:	ab03      	add	r3, sp, #12
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	462a      	mov	r2, r5
 8008878:	4b05      	ldr	r3, [pc, #20]	@ (8008890 <_svfiprintf_r+0x1f0>)
 800887a:	a904      	add	r1, sp, #16
 800887c:	4638      	mov	r0, r7
 800887e:	f000 f9bb 	bl	8008bf8 <_printf_i>
 8008882:	e7ed      	b.n	8008860 <_svfiprintf_r+0x1c0>
 8008884:	0800a3fe 	.word	0x0800a3fe
 8008888:	0800a408 	.word	0x0800a408
 800888c:	00000000 	.word	0x00000000
 8008890:	080085e9 	.word	0x080085e9
 8008894:	0800a404 	.word	0x0800a404

08008898 <__sfputc_r>:
 8008898:	6893      	ldr	r3, [r2, #8]
 800889a:	3b01      	subs	r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	b410      	push	{r4}
 80088a0:	6093      	str	r3, [r2, #8]
 80088a2:	da08      	bge.n	80088b6 <__sfputc_r+0x1e>
 80088a4:	6994      	ldr	r4, [r2, #24]
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	db01      	blt.n	80088ae <__sfputc_r+0x16>
 80088aa:	290a      	cmp	r1, #10
 80088ac:	d103      	bne.n	80088b6 <__sfputc_r+0x1e>
 80088ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b2:	f7ff bc82 	b.w	80081ba <__swbuf_r>
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	1c58      	adds	r0, r3, #1
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	7019      	strb	r1, [r3, #0]
 80088be:	4608      	mov	r0, r1
 80088c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <__sfputs_r>:
 80088c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	18d5      	adds	r5, r2, r3
 80088d0:	42ac      	cmp	r4, r5
 80088d2:	d101      	bne.n	80088d8 <__sfputs_r+0x12>
 80088d4:	2000      	movs	r0, #0
 80088d6:	e007      	b.n	80088e8 <__sfputs_r+0x22>
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	463a      	mov	r2, r7
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ffda 	bl	8008898 <__sfputc_r>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d1f3      	bne.n	80088d0 <__sfputs_r+0xa>
 80088e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088ec <_vfiprintf_r>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	460d      	mov	r5, r1
 80088f2:	b09d      	sub	sp, #116	@ 0x74
 80088f4:	4614      	mov	r4, r2
 80088f6:	4698      	mov	r8, r3
 80088f8:	4606      	mov	r6, r0
 80088fa:	b118      	cbz	r0, 8008904 <_vfiprintf_r+0x18>
 80088fc:	6a03      	ldr	r3, [r0, #32]
 80088fe:	b90b      	cbnz	r3, 8008904 <_vfiprintf_r+0x18>
 8008900:	f7ff fb3e 	bl	8007f80 <__sinit>
 8008904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008906:	07d9      	lsls	r1, r3, #31
 8008908:	d405      	bmi.n	8008916 <_vfiprintf_r+0x2a>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	059a      	lsls	r2, r3, #22
 800890e:	d402      	bmi.n	8008916 <_vfiprintf_r+0x2a>
 8008910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008912:	f7ff fd60 	bl	80083d6 <__retarget_lock_acquire_recursive>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	071b      	lsls	r3, r3, #28
 800891a:	d501      	bpl.n	8008920 <_vfiprintf_r+0x34>
 800891c:	692b      	ldr	r3, [r5, #16]
 800891e:	b99b      	cbnz	r3, 8008948 <_vfiprintf_r+0x5c>
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff fc88 	bl	8008238 <__swsetup_r>
 8008928:	b170      	cbz	r0, 8008948 <_vfiprintf_r+0x5c>
 800892a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800892c:	07dc      	lsls	r4, r3, #31
 800892e:	d504      	bpl.n	800893a <_vfiprintf_r+0x4e>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	b01d      	add	sp, #116	@ 0x74
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	89ab      	ldrh	r3, [r5, #12]
 800893c:	0598      	lsls	r0, r3, #22
 800893e:	d4f7      	bmi.n	8008930 <_vfiprintf_r+0x44>
 8008940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008942:	f7ff fd49 	bl	80083d8 <__retarget_lock_release_recursive>
 8008946:	e7f3      	b.n	8008930 <_vfiprintf_r+0x44>
 8008948:	2300      	movs	r3, #0
 800894a:	9309      	str	r3, [sp, #36]	@ 0x24
 800894c:	2320      	movs	r3, #32
 800894e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008952:	f8cd 800c 	str.w	r8, [sp, #12]
 8008956:	2330      	movs	r3, #48	@ 0x30
 8008958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b08 <_vfiprintf_r+0x21c>
 800895c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008960:	f04f 0901 	mov.w	r9, #1
 8008964:	4623      	mov	r3, r4
 8008966:	469a      	mov	sl, r3
 8008968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800896c:	b10a      	cbz	r2, 8008972 <_vfiprintf_r+0x86>
 800896e:	2a25      	cmp	r2, #37	@ 0x25
 8008970:	d1f9      	bne.n	8008966 <_vfiprintf_r+0x7a>
 8008972:	ebba 0b04 	subs.w	fp, sl, r4
 8008976:	d00b      	beq.n	8008990 <_vfiprintf_r+0xa4>
 8008978:	465b      	mov	r3, fp
 800897a:	4622      	mov	r2, r4
 800897c:	4629      	mov	r1, r5
 800897e:	4630      	mov	r0, r6
 8008980:	f7ff ffa1 	bl	80088c6 <__sfputs_r>
 8008984:	3001      	adds	r0, #1
 8008986:	f000 80a7 	beq.w	8008ad8 <_vfiprintf_r+0x1ec>
 800898a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800898c:	445a      	add	r2, fp
 800898e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008990:	f89a 3000 	ldrb.w	r3, [sl]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 809f 	beq.w	8008ad8 <_vfiprintf_r+0x1ec>
 800899a:	2300      	movs	r3, #0
 800899c:	f04f 32ff 	mov.w	r2, #4294967295
 80089a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a4:	f10a 0a01 	add.w	sl, sl, #1
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	9307      	str	r3, [sp, #28]
 80089ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80089b2:	4654      	mov	r4, sl
 80089b4:	2205      	movs	r2, #5
 80089b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ba:	4853      	ldr	r0, [pc, #332]	@ (8008b08 <_vfiprintf_r+0x21c>)
 80089bc:	f7f7 fc20 	bl	8000200 <memchr>
 80089c0:	9a04      	ldr	r2, [sp, #16]
 80089c2:	b9d8      	cbnz	r0, 80089fc <_vfiprintf_r+0x110>
 80089c4:	06d1      	lsls	r1, r2, #27
 80089c6:	bf44      	itt	mi
 80089c8:	2320      	movmi	r3, #32
 80089ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ce:	0713      	lsls	r3, r2, #28
 80089d0:	bf44      	itt	mi
 80089d2:	232b      	movmi	r3, #43	@ 0x2b
 80089d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d8:	f89a 3000 	ldrb.w	r3, [sl]
 80089dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089de:	d015      	beq.n	8008a0c <_vfiprintf_r+0x120>
 80089e0:	9a07      	ldr	r2, [sp, #28]
 80089e2:	4654      	mov	r4, sl
 80089e4:	2000      	movs	r0, #0
 80089e6:	f04f 0c0a 	mov.w	ip, #10
 80089ea:	4621      	mov	r1, r4
 80089ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f0:	3b30      	subs	r3, #48	@ 0x30
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d94b      	bls.n	8008a8e <_vfiprintf_r+0x1a2>
 80089f6:	b1b0      	cbz	r0, 8008a26 <_vfiprintf_r+0x13a>
 80089f8:	9207      	str	r2, [sp, #28]
 80089fa:	e014      	b.n	8008a26 <_vfiprintf_r+0x13a>
 80089fc:	eba0 0308 	sub.w	r3, r0, r8
 8008a00:	fa09 f303 	lsl.w	r3, r9, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	46a2      	mov	sl, r4
 8008a0a:	e7d2      	b.n	80089b2 <_vfiprintf_r+0xc6>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	1d19      	adds	r1, r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	9103      	str	r1, [sp, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfbb      	ittet	lt
 8008a18:	425b      	neglt	r3, r3
 8008a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a1e:	9307      	strge	r3, [sp, #28]
 8008a20:	9307      	strlt	r3, [sp, #28]
 8008a22:	bfb8      	it	lt
 8008a24:	9204      	strlt	r2, [sp, #16]
 8008a26:	7823      	ldrb	r3, [r4, #0]
 8008a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a2a:	d10a      	bne.n	8008a42 <_vfiprintf_r+0x156>
 8008a2c:	7863      	ldrb	r3, [r4, #1]
 8008a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a30:	d132      	bne.n	8008a98 <_vfiprintf_r+0x1ac>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	1d1a      	adds	r2, r3, #4
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	9203      	str	r2, [sp, #12]
 8008a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a3e:	3402      	adds	r4, #2
 8008a40:	9305      	str	r3, [sp, #20]
 8008a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b18 <_vfiprintf_r+0x22c>
 8008a46:	7821      	ldrb	r1, [r4, #0]
 8008a48:	2203      	movs	r2, #3
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f7f7 fbd8 	bl	8000200 <memchr>
 8008a50:	b138      	cbz	r0, 8008a62 <_vfiprintf_r+0x176>
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	eba0 000a 	sub.w	r0, r0, sl
 8008a58:	2240      	movs	r2, #64	@ 0x40
 8008a5a:	4082      	lsls	r2, r0
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	3401      	adds	r4, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4829      	ldr	r0, [pc, #164]	@ (8008b0c <_vfiprintf_r+0x220>)
 8008a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	f7f7 fbc7 	bl	8000200 <memchr>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d03f      	beq.n	8008af6 <_vfiprintf_r+0x20a>
 8008a76:	4b26      	ldr	r3, [pc, #152]	@ (8008b10 <_vfiprintf_r+0x224>)
 8008a78:	bb1b      	cbnz	r3, 8008ac2 <_vfiprintf_r+0x1d6>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	3308      	adds	r3, #8
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a88:	443b      	add	r3, r7
 8008a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8c:	e76a      	b.n	8008964 <_vfiprintf_r+0x78>
 8008a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a92:	460c      	mov	r4, r1
 8008a94:	2001      	movs	r0, #1
 8008a96:	e7a8      	b.n	80089ea <_vfiprintf_r+0xfe>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f04f 0c0a 	mov.w	ip, #10
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aaa:	3a30      	subs	r2, #48	@ 0x30
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d903      	bls.n	8008ab8 <_vfiprintf_r+0x1cc>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0c6      	beq.n	8008a42 <_vfiprintf_r+0x156>
 8008ab4:	9105      	str	r1, [sp, #20]
 8008ab6:	e7c4      	b.n	8008a42 <_vfiprintf_r+0x156>
 8008ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008abc:	4604      	mov	r4, r0
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7f0      	b.n	8008aa4 <_vfiprintf_r+0x1b8>
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4b12      	ldr	r3, [pc, #72]	@ (8008b14 <_vfiprintf_r+0x228>)
 8008aca:	a904      	add	r1, sp, #16
 8008acc:	4630      	mov	r0, r6
 8008ace:	f3af 8000 	nop.w
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	1c78      	adds	r0, r7, #1
 8008ad6:	d1d6      	bne.n	8008a86 <_vfiprintf_r+0x19a>
 8008ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ada:	07d9      	lsls	r1, r3, #31
 8008adc:	d405      	bmi.n	8008aea <_vfiprintf_r+0x1fe>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	059a      	lsls	r2, r3, #22
 8008ae2:	d402      	bmi.n	8008aea <_vfiprintf_r+0x1fe>
 8008ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ae6:	f7ff fc77 	bl	80083d8 <__retarget_lock_release_recursive>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	065b      	lsls	r3, r3, #25
 8008aee:	f53f af1f 	bmi.w	8008930 <_vfiprintf_r+0x44>
 8008af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af4:	e71e      	b.n	8008934 <_vfiprintf_r+0x48>
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <_vfiprintf_r+0x228>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f879 	bl	8008bf8 <_printf_i>
 8008b06:	e7e4      	b.n	8008ad2 <_vfiprintf_r+0x1e6>
 8008b08:	0800a3fe 	.word	0x0800a3fe
 8008b0c:	0800a408 	.word	0x0800a408
 8008b10:	00000000 	.word	0x00000000
 8008b14:	080088c7 	.word	0x080088c7
 8008b18:	0800a404 	.word	0x0800a404

08008b1c <_printf_common>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4616      	mov	r6, r2
 8008b22:	4698      	mov	r8, r3
 8008b24:	688a      	ldr	r2, [r1, #8]
 8008b26:	690b      	ldr	r3, [r1, #16]
 8008b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfb8      	it	lt
 8008b30:	4613      	movlt	r3, r2
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b38:	4607      	mov	r7, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_printf_common+0x26>
 8008b3e:	3301      	adds	r3, #1
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	0699      	lsls	r1, r3, #26
 8008b46:	bf42      	ittt	mi
 8008b48:	6833      	ldrmi	r3, [r6, #0]
 8008b4a:	3302      	addmi	r3, #2
 8008b4c:	6033      	strmi	r3, [r6, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d106      	bne.n	8008b64 <_printf_common+0x48>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dc26      	bgt.n	8008bb2 <_printf_common+0x96>
 8008b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	3b00      	subs	r3, #0
 8008b6c:	bf18      	it	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	0692      	lsls	r2, r2, #26
 8008b72:	d42b      	bmi.n	8008bcc <_printf_common+0xb0>
 8008b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b78:	4641      	mov	r1, r8
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c8      	blx	r9
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d01e      	beq.n	8008bc0 <_printf_common+0xa4>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	f003 0306 	and.w	r3, r3, #6
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	bf02      	ittt	eq
 8008b8e:	68e5      	ldreq	r5, [r4, #12]
 8008b90:	6833      	ldreq	r3, [r6, #0]
 8008b92:	1aed      	subeq	r5, r5, r3
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	bf0c      	ite	eq
 8008b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b9c:	2500      	movne	r5, #0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bfc4      	itt	gt
 8008ba2:	1a9b      	subgt	r3, r3, r2
 8008ba4:	18ed      	addgt	r5, r5, r3
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	341a      	adds	r4, #26
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	d11a      	bne.n	8008be4 <_printf_common+0xc8>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e008      	b.n	8008bc4 <_printf_common+0xa8>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	4638      	mov	r0, r7
 8008bba:	47c8      	blx	r9
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_printf_common+0xac>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	e7c6      	b.n	8008b5a <_printf_common+0x3e>
 8008bcc:	18e1      	adds	r1, r4, r3
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	2030      	movs	r0, #48	@ 0x30
 8008bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bd6:	4422      	add	r2, r4
 8008bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008be0:	3302      	adds	r3, #2
 8008be2:	e7c7      	b.n	8008b74 <_printf_common+0x58>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4622      	mov	r2, r4
 8008be8:	4641      	mov	r1, r8
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c8      	blx	r9
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d0e6      	beq.n	8008bc0 <_printf_common+0xa4>
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7d9      	b.n	8008baa <_printf_common+0x8e>
	...

08008bf8 <_printf_i>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	7e0f      	ldrb	r7, [r1, #24]
 8008bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c00:	2f78      	cmp	r7, #120	@ 0x78
 8008c02:	4691      	mov	r9, r2
 8008c04:	4680      	mov	r8, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c0e:	d807      	bhi.n	8008c20 <_printf_i+0x28>
 8008c10:	2f62      	cmp	r7, #98	@ 0x62
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x32>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f000 80d2 	beq.w	8008dbe <_printf_i+0x1c6>
 8008c1a:	2f58      	cmp	r7, #88	@ 0x58
 8008c1c:	f000 80b9 	beq.w	8008d92 <_printf_i+0x19a>
 8008c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c28:	e03a      	b.n	8008ca0 <_printf_i+0xa8>
 8008c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c2e:	2b15      	cmp	r3, #21
 8008c30:	d8f6      	bhi.n	8008c20 <_printf_i+0x28>
 8008c32:	a101      	add	r1, pc, #4	@ (adr r1, 8008c38 <_printf_i+0x40>)
 8008c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008c21 	.word	0x08008c21
 8008c44:	08008c21 	.word	0x08008c21
 8008c48:	08008c21 	.word	0x08008c21
 8008c4c:	08008c21 	.word	0x08008c21
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008c21 	.word	0x08008c21
 8008c58:	08008c21 	.word	0x08008c21
 8008c5c:	08008c21 	.word	0x08008c21
 8008c60:	08008c21 	.word	0x08008c21
 8008c64:	08008da5 	.word	0x08008da5
 8008c68:	08008ccf 	.word	0x08008ccf
 8008c6c:	08008d5f 	.word	0x08008d5f
 8008c70:	08008c21 	.word	0x08008c21
 8008c74:	08008c21 	.word	0x08008c21
 8008c78:	08008dc7 	.word	0x08008dc7
 8008c7c:	08008c21 	.word	0x08008c21
 8008c80:	08008ccf 	.word	0x08008ccf
 8008c84:	08008c21 	.word	0x08008c21
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	08008d67 	.word	0x08008d67
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6032      	str	r2, [r6, #0]
 8008c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e09d      	b.n	8008de0 <_printf_i+0x1e8>
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	1d19      	adds	r1, r3, #4
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	0606      	lsls	r6, r0, #24
 8008cae:	d501      	bpl.n	8008cb4 <_printf_i+0xbc>
 8008cb0:	681d      	ldr	r5, [r3, #0]
 8008cb2:	e003      	b.n	8008cbc <_printf_i+0xc4>
 8008cb4:	0645      	lsls	r5, r0, #25
 8008cb6:	d5fb      	bpl.n	8008cb0 <_printf_i+0xb8>
 8008cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	da03      	bge.n	8008cc8 <_printf_i+0xd0>
 8008cc0:	232d      	movs	r3, #45	@ 0x2d
 8008cc2:	426d      	negs	r5, r5
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc8:	4859      	ldr	r0, [pc, #356]	@ (8008e30 <_printf_i+0x238>)
 8008cca:	230a      	movs	r3, #10
 8008ccc:	e011      	b.n	8008cf2 <_printf_i+0xfa>
 8008cce:	6821      	ldr	r1, [r4, #0]
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	0608      	lsls	r0, r1, #24
 8008cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cd8:	d402      	bmi.n	8008ce0 <_printf_i+0xe8>
 8008cda:	0649      	lsls	r1, r1, #25
 8008cdc:	bf48      	it	mi
 8008cde:	b2ad      	uxthmi	r5, r5
 8008ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ce2:	4853      	ldr	r0, [pc, #332]	@ (8008e30 <_printf_i+0x238>)
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	bf14      	ite	ne
 8008ce8:	230a      	movne	r3, #10
 8008cea:	2308      	moveq	r3, #8
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cf2:	6866      	ldr	r6, [r4, #4]
 8008cf4:	60a6      	str	r6, [r4, #8]
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90d      	cbnz	r5, 8008d08 <_printf_i+0x110>
 8008d04:	2e00      	cmp	r6, #0
 8008d06:	d04b      	beq.n	8008da0 <_printf_i+0x1a8>
 8008d08:	4616      	mov	r6, r2
 8008d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d18:	462f      	mov	r7, r5
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x112>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x144>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07df      	lsls	r7, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x144>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	@ 0x30
 8008d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d3c:	1b92      	subs	r2, r2, r6
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee6 	bl	8008b1c <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14a      	bne.n	8008dea <_printf_i+0x1f2>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	f043 0320 	orr.w	r3, r3, #32
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	4833      	ldr	r0, [pc, #204]	@ (8008e34 <_printf_i+0x23c>)
 8008d68:	2778      	movs	r7, #120	@ 0x78
 8008d6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	6831      	ldr	r1, [r6, #0]
 8008d72:	061f      	lsls	r7, r3, #24
 8008d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d78:	d402      	bmi.n	8008d80 <_printf_i+0x188>
 8008d7a:	065f      	lsls	r7, r3, #25
 8008d7c:	bf48      	it	mi
 8008d7e:	b2ad      	uxthmi	r5, r5
 8008d80:	6031      	str	r1, [r6, #0]
 8008d82:	07d9      	lsls	r1, r3, #31
 8008d84:	bf44      	itt	mi
 8008d86:	f043 0320 	orrmi.w	r3, r3, #32
 8008d8a:	6023      	strmi	r3, [r4, #0]
 8008d8c:	b11d      	cbz	r5, 8008d96 <_printf_i+0x19e>
 8008d8e:	2310      	movs	r3, #16
 8008d90:	e7ac      	b.n	8008cec <_printf_i+0xf4>
 8008d92:	4827      	ldr	r0, [pc, #156]	@ (8008e30 <_printf_i+0x238>)
 8008d94:	e7e9      	b.n	8008d6a <_printf_i+0x172>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	f023 0320 	bic.w	r3, r3, #32
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	e7f6      	b.n	8008d8e <_printf_i+0x196>
 8008da0:	4616      	mov	r6, r2
 8008da2:	e7bd      	b.n	8008d20 <_printf_i+0x128>
 8008da4:	6833      	ldr	r3, [r6, #0]
 8008da6:	6825      	ldr	r5, [r4, #0]
 8008da8:	6961      	ldr	r1, [r4, #20]
 8008daa:	1d18      	adds	r0, r3, #4
 8008dac:	6030      	str	r0, [r6, #0]
 8008dae:	062e      	lsls	r6, r5, #24
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0x1c0>
 8008db4:	6019      	str	r1, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <_printf_i+0x1c6>
 8008db8:	0668      	lsls	r0, r5, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0x1bc>
 8008dbc:	8019      	strh	r1, [r3, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	4616      	mov	r6, r2
 8008dc4:	e7bc      	b.n	8008d40 <_printf_i+0x148>
 8008dc6:	6833      	ldr	r3, [r6, #0]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	6032      	str	r2, [r6, #0]
 8008dcc:	681e      	ldr	r6, [r3, #0]
 8008dce:	6862      	ldr	r2, [r4, #4]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fa14 	bl	8000200 <memchr>
 8008dd8:	b108      	cbz	r0, 8008dde <_printf_i+0x1e6>
 8008dda:	1b80      	subs	r0, r0, r6
 8008ddc:	6060      	str	r0, [r4, #4]
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	2300      	movs	r3, #0
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008de8:	e7aa      	b.n	8008d40 <_printf_i+0x148>
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	4632      	mov	r2, r6
 8008dee:	4649      	mov	r1, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	47d0      	blx	sl
 8008df4:	3001      	adds	r0, #1
 8008df6:	d0ad      	beq.n	8008d54 <_printf_i+0x15c>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	d413      	bmi.n	8008e26 <_printf_i+0x22e>
 8008dfe:	68e0      	ldr	r0, [r4, #12]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	4298      	cmp	r0, r3
 8008e04:	bfb8      	it	lt
 8008e06:	4618      	movlt	r0, r3
 8008e08:	e7a6      	b.n	8008d58 <_printf_i+0x160>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4640      	mov	r0, r8
 8008e12:	47d0      	blx	sl
 8008e14:	3001      	adds	r0, #1
 8008e16:	d09d      	beq.n	8008d54 <_printf_i+0x15c>
 8008e18:	3501      	adds	r5, #1
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	9903      	ldr	r1, [sp, #12]
 8008e1e:	1a5b      	subs	r3, r3, r1
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dcf2      	bgt.n	8008e0a <_printf_i+0x212>
 8008e24:	e7eb      	b.n	8008dfe <_printf_i+0x206>
 8008e26:	2500      	movs	r5, #0
 8008e28:	f104 0619 	add.w	r6, r4, #25
 8008e2c:	e7f5      	b.n	8008e1a <_printf_i+0x222>
 8008e2e:	bf00      	nop
 8008e30:	0800a40f 	.word	0x0800a40f
 8008e34:	0800a420 	.word	0x0800a420

08008e38 <__sflush_r>:
 8008e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e40:	0716      	lsls	r6, r2, #28
 8008e42:	4605      	mov	r5, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	d454      	bmi.n	8008ef2 <__sflush_r+0xba>
 8008e48:	684b      	ldr	r3, [r1, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dc02      	bgt.n	8008e54 <__sflush_r+0x1c>
 8008e4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dd48      	ble.n	8008ee6 <__sflush_r+0xae>
 8008e54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e56:	2e00      	cmp	r6, #0
 8008e58:	d045      	beq.n	8008ee6 <__sflush_r+0xae>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e60:	682f      	ldr	r7, [r5, #0]
 8008e62:	6a21      	ldr	r1, [r4, #32]
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	d030      	beq.n	8008eca <__sflush_r+0x92>
 8008e68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	0759      	lsls	r1, r3, #29
 8008e6e:	d505      	bpl.n	8008e7c <__sflush_r+0x44>
 8008e70:	6863      	ldr	r3, [r4, #4]
 8008e72:	1ad2      	subs	r2, r2, r3
 8008e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e76:	b10b      	cbz	r3, 8008e7c <__sflush_r+0x44>
 8008e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e7a:	1ad2      	subs	r2, r2, r3
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e80:	6a21      	ldr	r1, [r4, #32]
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b0      	blx	r6
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	d106      	bne.n	8008e9a <__sflush_r+0x62>
 8008e8c:	6829      	ldr	r1, [r5, #0]
 8008e8e:	291d      	cmp	r1, #29
 8008e90:	d82b      	bhi.n	8008eea <__sflush_r+0xb2>
 8008e92:	4a2a      	ldr	r2, [pc, #168]	@ (8008f3c <__sflush_r+0x104>)
 8008e94:	410a      	asrs	r2, r1
 8008e96:	07d6      	lsls	r6, r2, #31
 8008e98:	d427      	bmi.n	8008eea <__sflush_r+0xb2>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	6062      	str	r2, [r4, #4]
 8008e9e:	04d9      	lsls	r1, r3, #19
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	d504      	bpl.n	8008eb0 <__sflush_r+0x78>
 8008ea6:	1c42      	adds	r2, r0, #1
 8008ea8:	d101      	bne.n	8008eae <__sflush_r+0x76>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b903      	cbnz	r3, 8008eb0 <__sflush_r+0x78>
 8008eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8008eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eb2:	602f      	str	r7, [r5, #0]
 8008eb4:	b1b9      	cbz	r1, 8008ee6 <__sflush_r+0xae>
 8008eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d002      	beq.n	8008ec4 <__sflush_r+0x8c>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f7ff fa9a 	bl	80083f8 <_free_r>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ec8:	e00d      	b.n	8008ee6 <__sflush_r+0xae>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b0      	blx	r6
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	1c50      	adds	r0, r2, #1
 8008ed4:	d1c9      	bne.n	8008e6a <__sflush_r+0x32>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c6      	beq.n	8008e6a <__sflush_r+0x32>
 8008edc:	2b1d      	cmp	r3, #29
 8008ede:	d001      	beq.n	8008ee4 <__sflush_r+0xac>
 8008ee0:	2b16      	cmp	r3, #22
 8008ee2:	d11e      	bne.n	8008f22 <__sflush_r+0xea>
 8008ee4:	602f      	str	r7, [r5, #0]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e022      	b.n	8008f30 <__sflush_r+0xf8>
 8008eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eee:	b21b      	sxth	r3, r3
 8008ef0:	e01b      	b.n	8008f2a <__sflush_r+0xf2>
 8008ef2:	690f      	ldr	r7, [r1, #16]
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	d0f6      	beq.n	8008ee6 <__sflush_r+0xae>
 8008ef8:	0793      	lsls	r3, r2, #30
 8008efa:	680e      	ldr	r6, [r1, #0]
 8008efc:	bf08      	it	eq
 8008efe:	694b      	ldreq	r3, [r1, #20]
 8008f00:	600f      	str	r7, [r1, #0]
 8008f02:	bf18      	it	ne
 8008f04:	2300      	movne	r3, #0
 8008f06:	eba6 0807 	sub.w	r8, r6, r7
 8008f0a:	608b      	str	r3, [r1, #8]
 8008f0c:	f1b8 0f00 	cmp.w	r8, #0
 8008f10:	dde9      	ble.n	8008ee6 <__sflush_r+0xae>
 8008f12:	6a21      	ldr	r1, [r4, #32]
 8008f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f16:	4643      	mov	r3, r8
 8008f18:	463a      	mov	r2, r7
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b0      	blx	r6
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	dc08      	bgt.n	8008f34 <__sflush_r+0xfc>
 8008f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	4407      	add	r7, r0
 8008f36:	eba8 0800 	sub.w	r8, r8, r0
 8008f3a:	e7e7      	b.n	8008f0c <__sflush_r+0xd4>
 8008f3c:	dfbffffe 	.word	0xdfbffffe

08008f40 <_fflush_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	690b      	ldr	r3, [r1, #16]
 8008f44:	4605      	mov	r5, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	b913      	cbnz	r3, 8008f50 <_fflush_r+0x10>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	b118      	cbz	r0, 8008f5a <_fflush_r+0x1a>
 8008f52:	6a03      	ldr	r3, [r0, #32]
 8008f54:	b90b      	cbnz	r3, 8008f5a <_fflush_r+0x1a>
 8008f56:	f7ff f813 	bl	8007f80 <__sinit>
 8008f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0f3      	beq.n	8008f4a <_fflush_r+0xa>
 8008f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f64:	07d0      	lsls	r0, r2, #31
 8008f66:	d404      	bmi.n	8008f72 <_fflush_r+0x32>
 8008f68:	0599      	lsls	r1, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_fflush_r+0x32>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6e:	f7ff fa32 	bl	80083d6 <__retarget_lock_acquire_recursive>
 8008f72:	4628      	mov	r0, r5
 8008f74:	4621      	mov	r1, r4
 8008f76:	f7ff ff5f 	bl	8008e38 <__sflush_r>
 8008f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f7c:	07da      	lsls	r2, r3, #31
 8008f7e:	4605      	mov	r5, r0
 8008f80:	d4e4      	bmi.n	8008f4c <_fflush_r+0xc>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	059b      	lsls	r3, r3, #22
 8008f86:	d4e1      	bmi.n	8008f4c <_fflush_r+0xc>
 8008f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8a:	f7ff fa25 	bl	80083d8 <__retarget_lock_release_recursive>
 8008f8e:	e7dd      	b.n	8008f4c <_fflush_r+0xc>

08008f90 <__swhatbuf_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	b096      	sub	sp, #88	@ 0x58
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	461e      	mov	r6, r3
 8008fa0:	da0d      	bge.n	8008fbe <__swhatbuf_r+0x2e>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fa8:	f04f 0100 	mov.w	r1, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2340      	movne	r3, #64	@ 0x40
 8008fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	6031      	str	r1, [r6, #0]
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	b016      	add	sp, #88	@ 0x58
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	466a      	mov	r2, sp
 8008fc0:	f000 f862 	bl	8009088 <_fstat_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	dbec      	blt.n	8008fa2 <__swhatbuf_r+0x12>
 8008fc8:	9901      	ldr	r1, [sp, #4]
 8008fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fd2:	4259      	negs	r1, r3
 8008fd4:	4159      	adcs	r1, r3
 8008fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fda:	e7eb      	b.n	8008fb4 <__swhatbuf_r+0x24>

08008fdc <__smakebuf_r>:
 8008fdc:	898b      	ldrh	r3, [r1, #12]
 8008fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe0:	079d      	lsls	r5, r3, #30
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	d507      	bpl.n	8008ff8 <__smakebuf_r+0x1c>
 8008fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	6163      	str	r3, [r4, #20]
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff8:	ab01      	add	r3, sp, #4
 8008ffa:	466a      	mov	r2, sp
 8008ffc:	f7ff ffc8 	bl	8008f90 <__swhatbuf_r>
 8009000:	9f00      	ldr	r7, [sp, #0]
 8009002:	4605      	mov	r5, r0
 8009004:	4639      	mov	r1, r7
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff fa62 	bl	80084d0 <_malloc_r>
 800900c:	b948      	cbnz	r0, 8009022 <__smakebuf_r+0x46>
 800900e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009012:	059a      	lsls	r2, r3, #22
 8009014:	d4ee      	bmi.n	8008ff4 <__smakebuf_r+0x18>
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	f043 0302 	orr.w	r3, r3, #2
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	e7e2      	b.n	8008fe8 <__smakebuf_r+0xc>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	6020      	str	r0, [r4, #0]
 8009026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009032:	b15b      	cbz	r3, 800904c <__smakebuf_r+0x70>
 8009034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f837 	bl	80090ac <_isatty_r>
 800903e:	b128      	cbz	r0, 800904c <__smakebuf_r+0x70>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	431d      	orrs	r5, r3
 8009050:	81a5      	strh	r5, [r4, #12]
 8009052:	e7cf      	b.n	8008ff4 <__smakebuf_r+0x18>

08009054 <memmove>:
 8009054:	4288      	cmp	r0, r1
 8009056:	b510      	push	{r4, lr}
 8009058:	eb01 0402 	add.w	r4, r1, r2
 800905c:	d902      	bls.n	8009064 <memmove+0x10>
 800905e:	4284      	cmp	r4, r0
 8009060:	4623      	mov	r3, r4
 8009062:	d807      	bhi.n	8009074 <memmove+0x20>
 8009064:	1e43      	subs	r3, r0, #1
 8009066:	42a1      	cmp	r1, r4
 8009068:	d008      	beq.n	800907c <memmove+0x28>
 800906a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009072:	e7f8      	b.n	8009066 <memmove+0x12>
 8009074:	4402      	add	r2, r0
 8009076:	4601      	mov	r1, r0
 8009078:	428a      	cmp	r2, r1
 800907a:	d100      	bne.n	800907e <memmove+0x2a>
 800907c:	bd10      	pop	{r4, pc}
 800907e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009086:	e7f7      	b.n	8009078 <memmove+0x24>

08009088 <_fstat_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d07      	ldr	r5, [pc, #28]	@ (80090a8 <_fstat_r+0x20>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	602b      	str	r3, [r5, #0]
 8009096:	f7fe fd66 	bl	8007b66 <_fstat>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d102      	bne.n	80090a4 <_fstat_r+0x1c>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	b103      	cbz	r3, 80090a4 <_fstat_r+0x1c>
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	20026280 	.word	0x20026280

080090ac <_isatty_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d06      	ldr	r5, [pc, #24]	@ (80090c8 <_isatty_r+0x1c>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	602b      	str	r3, [r5, #0]
 80090b8:	f7fe feb8 	bl	8007e2c <_isatty>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_isatty_r+0x1a>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_isatty_r+0x1a>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20026280 	.word	0x20026280

080090cc <_sbrk_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d06      	ldr	r5, [pc, #24]	@ (80090e8 <_sbrk_r+0x1c>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	f7fa fd50 	bl	8003b7c <_sbrk>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_sbrk_r+0x1a>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_sbrk_r+0x1a>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20026280 	.word	0x20026280

080090ec <_realloc_r>:
 80090ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f0:	4680      	mov	r8, r0
 80090f2:	4615      	mov	r5, r2
 80090f4:	460c      	mov	r4, r1
 80090f6:	b921      	cbnz	r1, 8009102 <_realloc_r+0x16>
 80090f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	4611      	mov	r1, r2
 80090fe:	f7ff b9e7 	b.w	80084d0 <_malloc_r>
 8009102:	b92a      	cbnz	r2, 8009110 <_realloc_r+0x24>
 8009104:	f7ff f978 	bl	80083f8 <_free_r>
 8009108:	2400      	movs	r4, #0
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	f000 f81a 	bl	8009148 <_malloc_usable_size_r>
 8009114:	4285      	cmp	r5, r0
 8009116:	4606      	mov	r6, r0
 8009118:	d802      	bhi.n	8009120 <_realloc_r+0x34>
 800911a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800911e:	d8f4      	bhi.n	800910a <_realloc_r+0x1e>
 8009120:	4629      	mov	r1, r5
 8009122:	4640      	mov	r0, r8
 8009124:	f7ff f9d4 	bl	80084d0 <_malloc_r>
 8009128:	4607      	mov	r7, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d0ec      	beq.n	8009108 <_realloc_r+0x1c>
 800912e:	42b5      	cmp	r5, r6
 8009130:	462a      	mov	r2, r5
 8009132:	4621      	mov	r1, r4
 8009134:	bf28      	it	cs
 8009136:	4632      	movcs	r2, r6
 8009138:	f7ff f94f 	bl	80083da <memcpy>
 800913c:	4621      	mov	r1, r4
 800913e:	4640      	mov	r0, r8
 8009140:	f7ff f95a 	bl	80083f8 <_free_r>
 8009144:	463c      	mov	r4, r7
 8009146:	e7e0      	b.n	800910a <_realloc_r+0x1e>

08009148 <_malloc_usable_size_r>:
 8009148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914c:	1f18      	subs	r0, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfbc      	itt	lt
 8009152:	580b      	ldrlt	r3, [r1, r0]
 8009154:	18c0      	addlt	r0, r0, r3
 8009156:	4770      	bx	lr

08009158 <_init>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr

08009164 <_fini>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr
