
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001268  08008be0  08008be0  00009be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e48  08009e48  0000b264  2**0
                  CONTENTS
  4 .ARM          00000008  08009e48  08009e48  0000ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e50  08009e50  0000b264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e50  08009e50  0000ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e54  08009e54  0000ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08009e58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b264  2**0
                  CONTENTS
 10 .bss          00025f78  20000264  20000264  0000b264  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200261dc  200261dc  0000b264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165fb  00000000  00000000  0000b294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a27  00000000  00000000  0002188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  000252b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  000267b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b5e  00000000  00000000  000277e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b84a  00000000  00000000  0004f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16e5  00000000  00000000  0006ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c26e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060b8  00000000  00000000  0014c2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0015236c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008bc8 	.word	0x08008bc8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	08008bc8 	.word	0x08008bc8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000584:	f000 faa2 	bl	8000acc <LTCD__Init>
    LTCD_Layer_Init(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fa5f 	bl	8000a4c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800058e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fbe2 	bl	8000d5c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000598:	f000 fce2 	bl	8000f60 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <ApplicationInit+0x2c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a2:	f000 f869 	bl	8000678 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000280 	.word	0x20000280

080005b0 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005b0:	b490      	push	{r4, r7}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4604      	mov	r4, r0
 80005b8:	4608      	mov	r0, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	461a      	mov	r2, r3
 80005be:	4623      	mov	r3, r4
 80005c0:	80fb      	strh	r3, [r7, #6]
 80005c2:	4603      	mov	r3, r0
 80005c4:	80bb      	strh	r3, [r7, #4]
 80005c6:	460b      	mov	r3, r1
 80005c8:	807b      	strh	r3, [r7, #2]
 80005ca:	4613      	mov	r3, r2
 80005cc:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	085b      	lsrs	r3, r3, #1
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	085b      	lsrs	r3, r3, #1
 80005da:	b29b      	uxth	r3, r3
 80005dc:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	88fa      	ldrh	r2, [r7, #6]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005e8:	89ba      	ldrh	r2, [r7, #12]
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 80005f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dd08      	ble.n	8000610 <Determine_Touch_Quadrant+0x60>
 80005fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000602:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000606:	425b      	negs	r3, r3
 8000608:	429a      	cmp	r2, r3
 800060a:	dd01      	ble.n	8000610 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 800060c:	2300      	movs	r3, #0
 800060e:	e02d      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000610:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000618:	429a      	cmp	r2, r3
 800061a:	dc08      	bgt.n	800062e <Determine_Touch_Quadrant+0x7e>
 800061c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000620:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000624:	425b      	negs	r3, r3
 8000626:	429a      	cmp	r2, r3
 8000628:	dd01      	ble.n	800062e <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800062a:	2301      	movs	r3, #1
 800062c:	e01e      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 800062e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000636:	429a      	cmp	r2, r3
 8000638:	dc08      	bgt.n	800064c <Determine_Touch_Quadrant+0x9c>
 800063a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800063e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000642:	425b      	negs	r3, r3
 8000644:	429a      	cmp	r2, r3
 8000646:	dc01      	bgt.n	800064c <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 8000648:	2302      	movs	r3, #2
 800064a:	e00f      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 800064c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000650:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000654:	429a      	cmp	r2, r3
 8000656:	dd08      	ble.n	800066a <Determine_Touch_Quadrant+0xba>
 8000658:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800065c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000660:	425b      	negs	r3, r3
 8000662:	429a      	cmp	r2, r3
 8000664:	dc01      	bgt.n	800066a <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 8000666:	2303      	movs	r3, #3
 8000668:	e000      	b.n	800066c <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800066a:	23ff      	movs	r3, #255	@ 0xff
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bc90      	pop	{r4, r7}
 8000674:	4770      	bx	lr
	...

08000678 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 800068c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000690:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000692:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000696:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006c2:	f003 fce7 	bl	8004094 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c6:	2028      	movs	r0, #40	@ 0x28
 80006c8:	f003 fc95 	bl	8003ff6 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006ce:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000288 	.word	0x20000288
 80006e8:	0600000f 	.word	0x0600000f

080006ec <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006f2:	2028      	movs	r0, #40	@ 0x28
 80006f4:	f003 fc8d 	bl	8004012 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80006fc:	4b64      	ldr	r3, [pc, #400]	@ (8000890 <EXTI15_10_IRQHandler+0x1a4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000702:	e006      	b.n	8000712 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000704:	204c      	movs	r0, #76	@ 0x4c
 8000706:	f002 ffa4 	bl	8003652 <STMPE811_Read>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b60      	ldr	r3, [pc, #384]	@ (8000890 <EXTI15_10_IRQHandler+0x1a4>)
 8000710:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000712:	4b5f      	ldr	r3, [pc, #380]	@ (8000890 <EXTI15_10_IRQHandler+0x1a4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f4      	beq.n	8000704 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800071a:	200a      	movs	r0, #10
 800071c:	f000 fc36 	bl	8000f8c <ReadRegisterFromTouchModule>
 8000720:	4603      	mov	r3, r0
 8000722:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000724:	2100      	movs	r1, #0
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fc3e 	bl	8000fa8 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800072c:	200b      	movs	r0, #11
 800072e:	f000 fc2d 	bl	8000f8c <ReadRegisterFromTouchModule>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b57      	ldr	r3, [pc, #348]	@ (8000894 <EXTI15_10_IRQHandler+0x1a8>)
 8000738:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800073a:	4b56      	ldr	r3, [pc, #344]	@ (8000894 <EXTI15_10_IRQHandler+0x1a8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	713b      	strb	r3, [r7, #4]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000744:	793b      	ldrb	r3, [r7, #4]
 8000746:	4619      	mov	r1, r3
 8000748:	200b      	movs	r0, #11
 800074a:	f000 fc2d 	bl	8000fa8 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800074e:	2040      	movs	r0, #64	@ 0x40
 8000750:	f000 fc1c 	bl	8000f8c <ReadRegisterFromTouchModule>
 8000754:	4603      	mov	r3, r0
 8000756:	70fb      	strb	r3, [r7, #3]
	if (ctrlReg & 0x80)
 8000758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da01      	bge.n	8000764 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000760:	2301      	movs	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d06a      	beq.n	8000840 <EXTI15_10_IRQHandler+0x154>
	{
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 800076a:	484b      	ldr	r0, [pc, #300]	@ (8000898 <EXTI15_10_IRQHandler+0x1ac>)
 800076c:	f000 fc03 	bl	8000f76 <DetermineTouchPosition>
//		printf("\nPressed\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
//		printf("Tim: %u", __HAL_TIM_GET_COUNTER(&htim2));

		if (activeScreen == 0) {
 8000770:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <EXTI15_10_IRQHandler+0x1b0>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d12a      	bne.n	80007ce <EXTI15_10_IRQHandler+0xe2>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000778:	4b47      	ldr	r3, [pc, #284]	@ (8000898 <EXTI15_10_IRQHandler+0x1ac>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b46      	ldr	r3, [pc, #280]	@ (8000898 <EXTI15_10_IRQHandler+0x1ac>)
 800077e:	885b      	ldrh	r3, [r3, #2]
 8000780:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000784:	b29b      	uxth	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4610      	mov	r0, r2
 800078a:	f002 fabf 	bl	8002d0c <startClicked>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d05c      	beq.n	800084e <EXTI15_10_IRQHandler+0x162>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 8000794:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000798:	f000 fb02 	bl	8000da0 <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 800079c:	4840      	ldr	r0, [pc, #256]	@ (80008a0 <EXTI15_10_IRQHandler+0x1b4>)
 800079e:	f000 fb0f 	bl	8000dc0 <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007a2:	4a40      	ldr	r2, [pc, #256]	@ (80008a4 <EXTI15_10_IRQHandler+0x1b8>)
 80007a4:	21be      	movs	r1, #190	@ 0xbe
 80007a6:	201e      	movs	r0, #30
 80007a8:	f000 fbaa 	bl	8000f00 <LCD_DisplayString>
#if USEDEBUG == 1
				printf("Starting...\n");
#endif
//				HAL_Delay(200);
				activeScreen = 1;
 80007ac:	4b3b      	ldr	r3, [pc, #236]	@ (800089c <EXTI15_10_IRQHandler+0x1b0>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	801a      	strh	r2, [r3, #0]
				initGame();
 80007b2:	f001 f849 	bl	8001848 <initGame>
//				HAL_Delay(2);
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 facf 	bl	8000d5c <LCD_Clear>
				showGameScreen();
 80007be:	f002 fadd 	bl	8002d7c <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007c2:	20ff      	movs	r0, #255	@ 0xff
 80007c4:	f000 fd46 	bl	8001254 <Draw_Arrows_On_Screen>

//				HAL_TIM_Base_Start_IT(& htim2);
//			    HAL_TIM_Base_Start(& htim5);
			    startTimers();
 80007c8:	f002 f95a 	bl	8002a80 <startTimers>
 80007cc:	e03f      	b.n	800084e <EXTI15_10_IRQHandler+0x162>
#if USEDEBUG == 1
			    printf("Started Timers\n");
#endif
			}
		} else if (activeScreen == 1) {
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <EXTI15_10_IRQHandler+0x1b0>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d13b      	bne.n	800084e <EXTI15_10_IRQHandler+0x162>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007d6:	2100      	movs	r1, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fabf 	bl	8000d5c <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007de:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <EXTI15_10_IRQHandler+0x1ac>)
 80007e0:	8818      	ldrh	r0, [r3, #0]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <EXTI15_10_IRQHandler+0x1ac>)
 80007e4:	885b      	ldrh	r3, [r3, #2]
 80007e6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80007ea:	b299      	uxth	r1, r3
 80007ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007f0:	22f0      	movs	r2, #240	@ 0xf0
 80007f2:	f7ff fedd 	bl	80005b0 <Determine_Touch_Quadrant>
 80007f6:	4603      	mov	r3, r0
 80007f8:	71bb      	strb	r3, [r7, #6]
			Draw_Arrows_On_Screen(activeArrow);
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fd29 	bl	8001254 <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			if (activeArrow == 2){
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d10e      	bne.n	8000826 <EXTI15_10_IRQHandler+0x13a>
				if (tim2CallCounter >= 3){
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <EXTI15_10_IRQHandler+0x1bc>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b02      	cmp	r3, #2
 8000810:	d907      	bls.n	8000822 <EXTI15_10_IRQHandler+0x136>
					tim2CallCounter = 0;
 8000812:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <EXTI15_10_IRQHandler+0x1bc>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <EXTI15_10_IRQHandler+0x1c0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000820:	e001      	b.n	8000826 <EXTI15_10_IRQHandler+0x13a>
				} else {
					activeArrow = -1;
 8000822:	23ff      	movs	r3, #255	@ 0xff
 8000824:	71bb      	strb	r3, [r7, #6]
				}

			}
			handleInput(& board, & currentPiece, activeArrow);
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	461a      	mov	r2, r3
 800082a:	4921      	ldr	r1, [pc, #132]	@ (80008b0 <EXTI15_10_IRQHandler+0x1c4>)
 800082c:	4821      	ldr	r0, [pc, #132]	@ (80008b4 <EXTI15_10_IRQHandler+0x1c8>)
 800082e:	f001 f9f5 	bl	8001c1c <handleInput>

			showGameScreen();
 8000832:	f002 faa3 	bl	8002d7c <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fd0b 	bl	8001254 <Draw_Arrows_On_Screen>
 800083e:	e006      	b.n	800084e <EXTI15_10_IRQHandler+0x162>
		}
	} else {
		/* Touch not pressed */
		if (activeScreen == 1) {
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <EXTI15_10_IRQHandler+0x1b0>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d102      	bne.n	800084e <EXTI15_10_IRQHandler+0x162>
			Draw_Arrows_On_Screen(-1);
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	f000 fd03 	bl	8001254 <Draw_Arrows_On_Screen>
		}
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800084e:	2101      	movs	r1, #1
 8000850:	204b      	movs	r0, #75	@ 0x4b
 8000852:	f002 ff0f 	bl	8003674 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000856:	2100      	movs	r1, #0
 8000858:	204b      	movs	r0, #75	@ 0x4b
 800085a:	f002 ff0b 	bl	8003674 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	4619      	mov	r1, r3
 8000862:	200a      	movs	r0, #10
 8000864:	f000 fba0 	bl	8000fa8 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000868:	2103      	movs	r1, #3
 800086a:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <EXTI15_10_IRQHandler+0x1cc>)
 800086c:	f003 fbfa 	bl	8004064 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000870:	2028      	movs	r0, #40	@ 0x28
 8000872:	f003 fbe8 	bl	8004046 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	@ 0x28
 8000878:	f003 fbbd 	bl	8003ff6 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800087c:	793b      	ldrb	r3, [r7, #4]
 800087e:	4619      	mov	r1, r3
 8000880:	200b      	movs	r0, #11
 8000882:	f000 fb91 	bl	8000fa8 <WriteDataToTouchModule>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000294 	.word	0x20000294
 8000894:	20000290 	.word	0x20000290
 8000898:	20000280 	.word	0x20000280
 800089c:	2002602c 	.word	0x2002602c
 80008a0:	20000004 	.word	0x20000004
 80008a4:	08008be0 	.word	0x08008be0
 80008a8:	20026024 	.word	0x20026024
 80008ac:	20025f94 	.word	0x20025f94
 80008b0:	20025e94 	.word	0x20025e94
 80008b4:	20025b74 	.word	0x20025b74
 80008b8:	20000288 	.word	0x20000288

080008bc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a59      	ldr	r2, [pc, #356]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b57      	ldr	r3, [pc, #348]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b53      	ldr	r3, [pc, #332]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a52      	ldr	r2, [pc, #328]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a4b      	ldr	r2, [pc, #300]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b49      	ldr	r3, [pc, #292]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a44      	ldr	r2, [pc, #272]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a36      	ldr	r2, [pc, #216]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000958:	f043 0320 	orr.w	r3, r3, #32
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0320 	and.w	r3, r3, #32
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <LCD_GPIO_Init+0x174>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000986:	f641 0358 	movw	r3, #6232	@ 0x1858
 800098a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000998:	230e      	movs	r3, #14
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4824      	ldr	r0, [pc, #144]	@ (8000a34 <LCD_GPIO_Init+0x178>)
 80009a4:	f003 fb76 	bl	8004094 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009a8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009ac:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4820      	ldr	r0, [pc, #128]	@ (8000a38 <LCD_GPIO_Init+0x17c>)
 80009b6:	f003 fb6d 	bl	8004094 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009ba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <LCD_GPIO_Init+0x180>)
 80009c8:	f003 fb64 	bl	8004094 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009cc:	2348      	movs	r3, #72	@ 0x48
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481a      	ldr	r0, [pc, #104]	@ (8000a40 <LCD_GPIO_Init+0x184>)
 80009d8:	f003 fb5c 	bl	8004094 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <LCD_GPIO_Init+0x188>)
 80009ea:	f003 fb53 	bl	8004094 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009ee:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009f2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <LCD_GPIO_Init+0x18c>)
 80009fc:	f003 fb4a 	bl	8004094 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a00:	2303      	movs	r3, #3
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a04:	2309      	movs	r3, #9
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <LCD_GPIO_Init+0x17c>)
 8000a10:	f003 fb40 	bl	8004094 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <LCD_GPIO_Init+0x18c>)
 8000a22:	f003 fb37 	bl	8004094 <HAL_GPIO_Init>
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40021800 	.word	0x40021800

08000a4c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	@ 0x40
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a5a:	23f0      	movs	r3, #240	@ 0xf0
 8000a5c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a62:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a66:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a6c:	23ff      	movs	r3, #255	@ 0xff
 8000a6e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <LTCD_Layer_Init+0x78>)
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a88:	23f0      	movs	r3, #240	@ 0xf0
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a8c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a90:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <LTCD_Layer_Init+0x7c>)
 8000aae:	f004 fee9 	bl	8005884 <HAL_LTDC_ConfigLayer>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ab8:	f000 fa4c 	bl	8000f54 <LCD_Error_Handler>
	}
}
 8000abc:	bf00      	nop
 8000abe:	3740      	adds	r7, #64	@ 0x40
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000374 	.word	0x20000374
 8000ac8:	20000298 	.word	0x20000298

08000acc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <LTCD__Init+0xb0>)
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b80 <LTCD__Init+0xb4>)
 8000ad4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <LTCD__Init+0xb0>)
 8000ad8:	2209      	movs	r2, #9
 8000ada:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <LTCD__Init+0xb0>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <LTCD__Init+0xb0>)
 8000ae4:	221d      	movs	r2, #29
 8000ae6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <LTCD__Init+0xb0>)
 8000aea:	2203      	movs	r2, #3
 8000aec:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <LTCD__Init+0xb0>)
 8000af0:	f240 120d 	movw	r2, #269	@ 0x10d
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000af6:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <LTCD__Init+0xb0>)
 8000af8:	f240 1243 	movw	r2, #323	@ 0x143
 8000afc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b00:	f240 1217 	movw	r2, #279	@ 0x117
 8000b04:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b08:	f240 1247 	movw	r2, #327	@ 0x147
 8000b0c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <LTCD__Init+0xb8>)
 8000b28:	2208      	movs	r2, #8
 8000b2a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <LTCD__Init+0xb8>)
 8000b2e:	22c0      	movs	r2, #192	@ 0xc0
 8000b30:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <LTCD__Init+0xb8>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <LTCD__Init+0xb8>)
 8000b3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b40:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <LTCD__Init+0xb8>)
 8000b42:	f005 fcf9 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b5e:	f7ff fead 	bl	80008bc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <LTCD__Init+0xb0>)
 8000b64:	f004 fdbe 	bl	80056e4 <HAL_LTDC_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b6e:	f000 f9f1 	bl	8000f54 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b72:	f001 f9b9 	bl	8001ee8 <ili9341_Init>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000298 	.word	0x20000298
 8000b80:	40016800 	.word	0x40016800
 8000b84:	20000340 	.word	0x20000340

08000b88 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	460b      	mov	r3, r1
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	807b      	strh	r3, [r7, #2]
		HAL_Delay(1);
		drawn = 0;
	}
#endif
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2bef      	cmp	r3, #239	@ 0xef
 8000b9e:	d80f      	bhi.n	8000bc0 <LCD_Draw_Pixel+0x38>
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ba6:	d20b      	bcs.n	8000bc0 <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000ba8:	88ba      	ldrh	r2, [r7, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4904      	ldr	r1, [pc, #16]	@ (8000bcc <LCD_Draw_Pixel+0x44>)
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000374 	.word	0x20000374

08000bd0 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	4603      	mov	r3, r0
 8000be4:	80bb      	strh	r3, [r7, #4]
 8000be6:	460b      	mov	r3, r1
 8000be8:	807b      	strh	r3, [r7, #2]
 8000bea:	4613      	mov	r3, r2
 8000bec:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	81fb      	strh	r3, [r7, #14]
 8000bf6:	e034      	b.n	8000c62 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	81bb      	strh	r3, [r7, #12]
 8000c00:	e024      	b.n	8000c4c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c0a:	fb03 f202 	mul.w	r2, r3, r2
 8000c0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c12:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	441a      	add	r2, r3
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	8879      	ldrh	r1, [r7, #2]
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dc0b      	bgt.n	8000c40 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c28:	89ba      	ldrh	r2, [r7, #12]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	89fa      	ldrh	r2, [r7, #14]
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	883a      	ldrh	r2, [r7, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f7ff ffa4 	bl	8000b88 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	81bb      	strh	r3, [r7, #12]
 8000c4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	ddd5      	ble.n	8000c02 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	81fb      	strh	r3, [r7, #14]
 8000c62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	ddc5      	ble.n	8000bf8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	4623      	mov	r3, r4
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4603      	mov	r3, r0
 8000c8a:	80bb      	strh	r3, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	81fb      	strh	r3, [r7, #14]
 8000c98:	e01c      	b.n	8000cd4 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	81bb      	strh	r3, [r7, #12]
 8000c9e:	e00b      	b.n	8000cb8 <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000ca0:	89bb      	ldrh	r3, [r7, #12]
 8000ca2:	89f9      	ldrh	r1, [r7, #14]
 8000ca4:	8c3a      	ldrh	r2, [r7, #32]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff6e 	bl	8000b88 <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000cac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	81bb      	strh	r3, [r7, #12]
 8000cb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cbc:	88f9      	ldrh	r1, [r7, #6]
 8000cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbeb      	blt.n	8000ca0 <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	81fb      	strh	r3, [r7, #14]
 8000cd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cd8:	88b9      	ldrh	r1, [r7, #4]
 8000cda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cde:	440b      	add	r3, r1
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbda      	blt.n	8000c9a <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}

08000cee <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000cee:	b590      	push	{r4, r7, lr}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	80fb      	strh	r3, [r7, #6]
 8000d00:	4603      	mov	r3, r0
 8000d02:	80bb      	strh	r3, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e01a      	b.n	8000d48 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	e010      	b.n	8000d3a <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b298      	uxth	r0, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	88ba      	ldrh	r2, [r7, #4]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff ff2a 	bl	8000b88 <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	ddea      	ble.n	8000d18 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbe0      	blt.n	8000d12 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
	...

08000d5c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10e      	bne.n	8000d90 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e007      	b.n	8000d88 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d78:	4908      	ldr	r1, [pc, #32]	@ (8000d9c <LCD_Clear+0x40>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d8e:	d3f3      	bcc.n	8000d78 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000374 	.word	0x20000374

08000da0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <LCD_SetTextColor+0x1c>)
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	8013      	strh	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <LCD_SetFont+0x1c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000370 	.word	0x20000370

08000de0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	603a      	str	r2, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	460b      	mov	r3, r1
 8000dee:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e04c      	b.n	8000e98 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	e03f      	b.n	8000e84 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <LCD_Draw_Char+0xd0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	889b      	ldrh	r3, [r3, #4]
 8000e16:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <LCD_Draw_Char+0xd4>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	409a      	lsls	r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	fa42 f303 	asr.w	r3, r2, r3
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <LCD_Draw_Char+0x5c>
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <LCD_Draw_Char+0xd0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	889b      	ldrh	r3, [r3, #4]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d920      	bls.n	8000e7e <LCD_Draw_Char+0x9e>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	fa42 f303 	asr.w	r3, r2, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <LCD_Draw_Char+0x80>
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <LCD_Draw_Char+0xd0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	889b      	ldrh	r3, [r3, #4]
 8000e5c:	2b0c      	cmp	r3, #12
 8000e5e:	d80e      	bhi.n	8000e7e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4413      	add	r3, r2
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	88bb      	ldrh	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <LCD_Draw_Char+0xd8>)
 8000e76:	8812      	ldrh	r2, [r2, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fe85 	bl	8000b88 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <LCD_Draw_Char+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	889b      	ldrh	r3, [r3, #4]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d3b8      	bcc.n	8000e04 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <LCD_Draw_Char+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	88db      	ldrh	r3, [r3, #6]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d3ab      	bcc.n	8000dfe <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000370 	.word	0x20000370
 8000eb4:	aaaaaaab 	.word	0xaaaaaaab
 8000eb8:	20000000 	.word	0x20000000

08000ebc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	80bb      	strh	r3, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	3b20      	subs	r3, #32
 8000ed2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <LCD_DisplayChar+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <LCD_DisplayChar+0x40>)
 8000ede:	6809      	ldr	r1, [r1, #0]
 8000ee0:	88c9      	ldrh	r1, [r1, #6]
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	441a      	add	r2, r3
 8000eea:	88b9      	ldrh	r1, [r7, #4]
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff76 	bl	8000de0 <LCD_Draw_Char>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000370 	.word	0x20000370

08000f00 <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	e011      	b.n	8000f3e <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f7ff ffc6 	bl	8000ebc <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	4413      	add	r3, r2
 8000f36:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1e7      	bne.n	8000f1a <LCD_DisplayString+0x1a>
    }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <LCD_Error_Handler+0x8>

08000f60 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f64:	f002 faae 	bl	80034c4 <STMPE811_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d001      	beq.n	8000f72 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <InitializeLCDTouch+0xe>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 fb8a 	bl	8003698 <STMPE811_DetermineTouchPosition>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fb5a 	bl	8003652 <STMPE811_Read>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000fb8:	79ba      	ldrb	r2, [r7, #6]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fb58 	bl	8003674 <STMPE811_Write>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e00c      	b.n	800100a <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	883a      	ldrh	r2, [r7, #0]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdc2 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbee      	blt.n	8000ff0 <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	e01e      	b.n	8001056 <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	b29b      	uxth	r3, r3
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	b298      	uxth	r0, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	b29a      	uxth	r2, r3
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	883a      	ldrh	r2, [r7, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdaa 	bl	8000b88 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	b29a      	uxth	r2, r3
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	b298      	uxth	r0, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	b29a      	uxth	r2, r3
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	883a      	ldrh	r2, [r7, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fd9c 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4293      	cmp	r3, r2
 8001062:	dbd9      	blt.n	8001018 <Draw_Arrow_Up+0x4c>
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}

0800106e <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 800106e:	b590      	push	{r4, r7, lr}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	4604      	mov	r4, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4611      	mov	r1, r2
 800107a:	461a      	mov	r2, r3
 800107c:	4623      	mov	r3, r4
 800107e:	80fb      	strh	r3, [r7, #6]
 8001080:	4603      	mov	r3, r0
 8001082:	80bb      	strh	r3, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e00c      	b.n	80010ac <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop - i, color);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b29b      	uxth	r3, r3
 8001096:	88ba      	ldrh	r2, [r7, #4]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b299      	uxth	r1, r3
 800109c:	883a      	ldrh	r2, [r7, #0]
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fd71 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbee      	blt.n	8001092 <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e01e      	b.n	80010f8 <Draw_Arrow_Down+0x8a>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i , color); // Left diagonal
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4413      	add	r3, r2
 80010c2:	b298      	uxth	r0, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	88ba      	ldrh	r2, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	883a      	ldrh	r2, [r7, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd59 	bl	8000b88 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i, color); // Right diagonal
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	88fa      	ldrh	r2, [r7, #6]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b298      	uxth	r0, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	88ba      	ldrh	r2, [r7, #4]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	883a      	ldrh	r2, [r7, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd4b 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4293      	cmp	r3, r2
 8001104:	dbd9      	blt.n	80010ba <Draw_Arrow_Down+0x4c>
    }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	4603      	mov	r3, r0
 8001124:	80bb      	strh	r3, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	807b      	strh	r3, [r7, #2]
 800112a:	4613      	mov	r3, r2
 800112c:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e00c      	b.n	800114e <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	b29a      	uxth	r2, r3
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	883a      	ldrh	r2, [r7, #0]
 8001140:	88b9      	ldrh	r1, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fd20 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbee      	blt.n	8001134 <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	e01e      	b.n	800119a <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	b29a      	uxth	r2, r3
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4413      	add	r3, r2
 8001164:	b298      	uxth	r0, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	b29b      	uxth	r3, r3
 800116a:	88ba      	ldrh	r2, [r7, #4]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	883a      	ldrh	r2, [r7, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd08 	bl	8000b88 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	b29a      	uxth	r2, r3
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	4413      	add	r3, r2
 8001180:	b298      	uxth	r0, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	b29a      	uxth	r2, r3
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	883a      	ldrh	r2, [r7, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fcfa 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	dbd9      	blt.n	800115c <Draw_Arrow_Left+0x4c>
    }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80011b2:	b590      	push	{r4, r7, lr}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4604      	mov	r4, r0
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	4623      	mov	r3, r4
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4603      	mov	r3, r0
 80011c6:	80bb      	strh	r3, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e00c      	b.n	80011f0 <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	88fa      	ldrh	r2, [r7, #6]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	883a      	ldrh	r2, [r7, #0]
 80011e2:	88b9      	ldrh	r1, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fccf 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbee      	blt.n	80011d6 <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	e01e      	b.n	800123c <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	b29b      	uxth	r3, r3
 8001202:	88fa      	ldrh	r2, [r7, #6]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b298      	uxth	r0, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	b29b      	uxth	r3, r3
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b29b      	uxth	r3, r3
 8001212:	883a      	ldrh	r2, [r7, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fcb7 	bl	8000b88 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	b29b      	uxth	r3, r3
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b298      	uxth	r0, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	b29a      	uxth	r2, r3
 8001228:	88bb      	ldrh	r3, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	883a      	ldrh	r2, [r7, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fca9 	bl	8000b88 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4293      	cmp	r3, r2
 8001248:	dbd9      	blt.n	80011fe <Draw_Arrow_Right+0x4c>
    }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <Draw_Arrows_On_Screen+0x16>
 8001264:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001268:	e001      	b.n	800126e <Draw_Arrows_On_Screen+0x1a>
 800126a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126e:	2214      	movs	r2, #20
 8001270:	210a      	movs	r1, #10
 8001272:	2078      	movs	r0, #120	@ 0x78
 8001274:	f7ff feaa 	bl	8000fcc <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <Draw_Arrows_On_Screen+0x30>
 800127e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001282:	e001      	b.n	8001288 <Draw_Arrows_On_Screen+0x34>
 8001284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001288:	2214      	movs	r2, #20
 800128a:	21a0      	movs	r1, #160	@ 0xa0
 800128c:	20e6      	movs	r0, #230	@ 0xe6
 800128e:	f7ff ff90 	bl	80011b2 <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d102      	bne.n	800129e <Draw_Arrows_On_Screen+0x4a>
 8001298:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800129c:	e001      	b.n	80012a2 <Draw_Arrows_On_Screen+0x4e>
 800129e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a2:	2214      	movs	r2, #20
 80012a4:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80012a8:	2078      	movs	r0, #120	@ 0x78
 80012aa:	f7ff fee0 	bl	800106e <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d102      	bne.n	80012ba <Draw_Arrows_On_Screen+0x66>
 80012b4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012b8:	e001      	b.n	80012be <Draw_Arrows_On_Screen+0x6a>
 80012ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012be:	2214      	movs	r2, #20
 80012c0:	21a0      	movs	r1, #160	@ 0xa0
 80012c2:	200a      	movs	r0, #10
 80012c4:	f7ff ff24 	bl	8001110 <Draw_Arrow_Left>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	4603      	mov	r3, r0
 80012e4:	80bb      	strh	r3, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
 80012ea:	4613      	mov	r3, r2
 80012ec:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	4a33      	ldr	r2, [pc, #204]	@ (80013c0 <Draw_Tetris_Block+0xf0>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 80012fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012fe:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001302:	88b9      	ldrh	r1, [r7, #4]
 8001304:	88f8      	ldrh	r0, [r7, #6]
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4623      	mov	r3, r4
 800130c:	f7ff fcb3 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 8001310:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001314:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001318:	88b9      	ldrh	r1, [r7, #4]
 800131a:	88f8      	ldrh	r0, [r7, #6]
 800131c:	8c3b      	ldrh	r3, [r7, #32]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4623      	mov	r3, r4
 8001322:	f7ff fca8 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 8001326:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800132a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800132e:	88b9      	ldrh	r1, [r7, #4]
 8001330:	88f8      	ldrh	r0, [r7, #6]
 8001332:	8c3b      	ldrh	r3, [r7, #32]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4623      	mov	r3, r4
 8001338:	f7ff fc9d 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 800133c:	88ba      	ldrh	r2, [r7, #4]
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	4413      	add	r3, r2
 8001342:	b29a      	uxth	r2, r3
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	b299      	uxth	r1, r3
 800134a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800134e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001352:	88f8      	ldrh	r0, [r7, #6]
 8001354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4623      	mov	r3, r4
 800135a:	f7ff fc8c 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b298      	uxth	r0, r3
 800136c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001370:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001374:	88b9      	ldrh	r1, [r7, #4]
 8001376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4623      	mov	r3, r4
 800137c:	f7ff fc7b 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	4413      	add	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b299      	uxth	r1, r3
 800138c:	8c3b      	ldrh	r3, [r7, #32]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	88f8      	ldrh	r0, [r7, #6]
 8001392:	f7ff fcac 	bl	8000cee <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	4413      	add	r3, r2
 800139c:	b29a      	uxth	r2, r3
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b298      	uxth	r0, r3
 80013a4:	88ba      	ldrh	r2, [r7, #4]
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b299      	uxth	r1, r3
 80013b0:	8c3b      	ldrh	r3, [r7, #32]
 80013b2:	89fa      	ldrh	r2, [r7, #14]
 80013b4:	f7ff fc9b 	bl	8000cee <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	aaaaaaab 	.word	0xaaaaaaab

080013c4 <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08d      	sub	sp, #52	@ 0x34
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013d8:	e047      	b.n	800146a <Fill_Tetris_Board+0xa6>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013de:	e03e      	b.n	800145e <Fill_Tetris_Board+0x9a>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 80013e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013e2:	461a      	mov	r2, r3
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	4413      	add	r3, r2
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013f4:	4413      	add	r3, r2
 80013f6:	82bb      	strh	r3, [r7, #20]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80013f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013fa:	461a      	mov	r2, r3
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	b29a      	uxth	r2, r3
 8001404:	883b      	ldrh	r3, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	b29a      	uxth	r2, r3
 800140a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800140c:	4413      	add	r3, r2
 800140e:	827b      	strh	r3, [r7, #18]

            // Get the colors for this position
            int index = board->grid[row][col];
 8001410:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001412:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4403      	add	r3, r0
 8001420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001424:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <Fill_Tetris_Board+0x94>
				uint16_t * colors = piceIndexToColors(index-1);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3b01      	subs	r3, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fbf3 	bl	8002c1c <piceIndexToColors>
 8001436:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	881c      	ldrh	r4, [r3, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3302      	adds	r3, #2
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	3204      	adds	r2, #4
 8001446:	8812      	ldrh	r2, [r2, #0]
 8001448:	8a79      	ldrh	r1, [r7, #18]
 800144a:	8ab8      	ldrh	r0, [r7, #20]
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4623      	mov	r3, r4
 8001452:	220c      	movs	r2, #12
 8001454:	f7ff ff3c 	bl	80012d0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 8001458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800145a:	3301      	adds	r3, #1
 800145c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800145e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001460:	2b09      	cmp	r3, #9
 8001462:	d9bd      	bls.n	80013e0 <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001464:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001466:	3301      	adds	r3, #1
 8001468:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800146a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800146c:	2b13      	cmp	r3, #19
 800146e:	d9b4      	bls.n	80013da <Fill_Tetris_Board+0x16>
            }
        }
    }

    // Draw grey squares around the board's borders
    uint16_t greyColor = 0x73AE;
 8001470:	f247 33ae 	movw	r3, #29614	@ 0x73ae
 8001474:	83fb      	strh	r3, [r7, #30]
    uint16_t greyColorHilight = 0x9CD3;
 8001476:	f649 43d3 	movw	r3, #40147	@ 0x9cd3
 800147a:	83bb      	strh	r3, [r7, #28]
    uint16_t greyColorShadow = 0x3186;
 800147c:	f243 1386 	movw	r3, #12678	@ 0x3186
 8001480:	837b      	strh	r3, [r7, #26]
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 8001482:	2300      	movs	r3, #0
 8001484:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001486:	e02b      	b.n	80014e0 <Fill_Tetris_Board+0x11c>
        uint16_t xPos = startX - BLOCK_SIZE + col * BLOCK_SIZE + col - 1;
 8001488:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800148a:	461a      	mov	r2, r3
 800148c:	0052      	lsls	r2, r2, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	b29a      	uxth	r2, r3
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4413      	add	r3, r2
 8001498:	b29a      	uxth	r2, r3
 800149a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800149c:	4413      	add	r3, r2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b0d      	subs	r3, #13
 80014a2:	82fb      	strh	r3, [r7, #22]

        // Top border
        Draw_Tetris_Block(xPos, startY - BLOCK_SIZE - 1, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014a4:	883b      	ldrh	r3, [r7, #0]
 80014a6:	3b0d      	subs	r3, #13
 80014a8:	b299      	uxth	r1, r3
 80014aa:	8bfa      	ldrh	r2, [r7, #30]
 80014ac:	8af8      	ldrh	r0, [r7, #22]
 80014ae:	8b7b      	ldrh	r3, [r7, #26]
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	8bbb      	ldrh	r3, [r7, #28]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	220c      	movs	r2, #12
 80014ba:	f7ff ff09 	bl	80012d0 <Draw_Tetris_Block>

        // Bottom border
        Draw_Tetris_Block(xPos, startY + BOARD_HEIGHT * BLOCK_SIZE + BOARD_HEIGHT, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 80014be:	883b      	ldrh	r3, [r7, #0]
 80014c0:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80014c4:	b299      	uxth	r1, r3
 80014c6:	8bfa      	ldrh	r2, [r7, #30]
 80014c8:	8af8      	ldrh	r0, [r7, #22]
 80014ca:	8b7b      	ldrh	r3, [r7, #26]
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	8bbb      	ldrh	r3, [r7, #28]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	220c      	movs	r2, #12
 80014d6:	f7ff fefb 	bl	80012d0 <Draw_Tetris_Block>
    for (uint16_t col = 0; col < BOARD_WIDTH + 2; col++) {
 80014da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014dc:	3301      	adds	r3, #1
 80014de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80014e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014e2:	2b0b      	cmp	r3, #11
 80014e4:	d9d0      	bls.n	8001488 <Fill_Tetris_Board+0xc4>
    }
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	843b      	strh	r3, [r7, #32]
 80014ea:	e028      	b.n	800153e <Fill_Tetris_Board+0x17a>
        uint16_t yPos = startY + row * BLOCK_SIZE + row;
 80014ec:	8c3b      	ldrh	r3, [r7, #32]
 80014ee:	461a      	mov	r2, r3
 80014f0:	0052      	lsls	r2, r2, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8c3b      	ldrh	r3, [r7, #32]
 8001500:	4413      	add	r3, r2
 8001502:	833b      	strh	r3, [r7, #24]

        // Left border
        Draw_Tetris_Block(startX - BLOCK_SIZE - 1, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	3b0d      	subs	r3, #13
 8001508:	b298      	uxth	r0, r3
 800150a:	8bfa      	ldrh	r2, [r7, #30]
 800150c:	8b39      	ldrh	r1, [r7, #24]
 800150e:	8b7b      	ldrh	r3, [r7, #26]
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	8bbb      	ldrh	r3, [r7, #28]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	220c      	movs	r2, #12
 800151a:	f7ff fed9 	bl	80012d0 <Draw_Tetris_Block>

        // Right border
        Draw_Tetris_Block(startX + BOARD_WIDTH * BLOCK_SIZE + BOARD_WIDTH, yPos, BLOCK_SIZE, greyColor, greyColorHilight, greyColorShadow);
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	3382      	adds	r3, #130	@ 0x82
 8001522:	b298      	uxth	r0, r3
 8001524:	8bfa      	ldrh	r2, [r7, #30]
 8001526:	8b39      	ldrh	r1, [r7, #24]
 8001528:	8b7b      	ldrh	r3, [r7, #26]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	8bbb      	ldrh	r3, [r7, #28]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	220c      	movs	r2, #12
 8001534:	f7ff fecc 	bl	80012d0 <Draw_Tetris_Block>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001538:	8c3b      	ldrh	r3, [r7, #32]
 800153a:	3301      	adds	r3, #1
 800153c:	843b      	strh	r3, [r7, #32]
 800153e:	8c3b      	ldrh	r3, [r7, #32]
 8001540:	2b13      	cmp	r3, #19
 8001542:	d9d3      	bls.n	80014ec <Fill_Tetris_Board+0x128>
    }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	372c      	adds	r7, #44	@ 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
	...

08001550 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af02      	add	r7, sp, #8
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	460b      	mov	r3, r1
 800155c:	80bb      	strh	r3, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 8001562:	2300      	movs	r3, #0
 8001564:	82fb      	strh	r3, [r7, #22]
 8001566:	e047      	b.n	80015f8 <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001568:	2300      	movs	r3, #0
 800156a:	82bb      	strh	r3, [r7, #20]
 800156c:	e03e      	b.n	80015ec <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 800156e:	8abb      	ldrh	r3, [r7, #20]
 8001570:	461a      	mov	r2, r3
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	b29a      	uxth	r2, r3
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	8abb      	ldrh	r3, [r7, #20]
 8001582:	4413      	add	r3, r2
 8001584:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001586:	8afb      	ldrh	r3, [r7, #22]
 8001588:	461a      	mov	r2, r3
 800158a:	0052      	lsls	r2, r2, #1
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	b29a      	uxth	r2, r3
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	4413      	add	r3, r2
 8001596:	b29a      	uxth	r2, r3
 8001598:	8afb      	ldrh	r3, [r7, #22]
 800159a:	4413      	add	r3, r2
 800159c:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 800159e:	79f9      	ldrb	r1, [r7, #7]
 80015a0:	8afa      	ldrh	r2, [r7, #22]
 80015a2:	8abb      	ldrh	r3, [r7, #20]
 80015a4:	4818      	ldr	r0, [pc, #96]	@ (8001608 <DrawTetrominoByIndex+0xb8>)
 80015a6:	0089      	lsls	r1, r1, #2
 80015a8:	440a      	add	r2, r1
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015b2:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fb2c 	bl	8002c1c <piceIndexToColors>
 80015c4:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	881c      	ldrh	r4, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	3302      	adds	r3, #2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	3204      	adds	r2, #4
 80015d4:	8812      	ldrh	r2, [r2, #0]
 80015d6:	8a39      	ldrh	r1, [r7, #16]
 80015d8:	8a78      	ldrh	r0, [r7, #18]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4623      	mov	r3, r4
 80015e0:	220c      	movs	r2, #12
 80015e2:	f7ff fe75 	bl	80012d0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80015e6:	8abb      	ldrh	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	82bb      	strh	r3, [r7, #20]
 80015ec:	8abb      	ldrh	r3, [r7, #20]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9bd      	bls.n	800156e <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80015f2:	8afb      	ldrh	r3, [r7, #22]
 80015f4:	3301      	adds	r3, #1
 80015f6:	82fb      	strh	r3, [r7, #22]
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d9b4      	bls.n	8001568 <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	20000010 	.word	0x20000010

0800160c <DrawTetromino>:
void DrawTetromino(Piece * piece, uint16_t startX, uint16_t startY)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 800161c:	2300      	movs	r3, #0
 800161e:	82fb      	strh	r3, [r7, #22]
 8001620:	e044      	b.n	80016ac <DrawTetromino+0xa0>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001622:	2300      	movs	r3, #0
 8001624:	82bb      	strh	r3, [r7, #20]
 8001626:	e03b      	b.n	80016a0 <DrawTetromino+0x94>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001628:	8abb      	ldrh	r3, [r7, #20]
 800162a:	461a      	mov	r2, r3
 800162c:	0052      	lsls	r2, r2, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	b29a      	uxth	r2, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	4413      	add	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	8abb      	ldrh	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 8001640:	8afb      	ldrh	r3, [r7, #22]
 8001642:	461a      	mov	r2, r3
 8001644:	0052      	lsls	r2, r2, #1
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	b29a      	uxth	r2, r3
 800164c:	883b      	ldrh	r3, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	b29a      	uxth	r2, r3
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	4413      	add	r3, r2
 8001656:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = piece->matrix[row][col];
 8001658:	8af9      	ldrh	r1, [r7, #22]
 800165a:	8aba      	ldrh	r2, [r7, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0089      	lsls	r1, r1, #2
 8001660:	440a      	add	r2, r1
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <DrawTetromino+0x8e>
				uint16_t * colors = piceIndexToColors(index-1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3b01      	subs	r3, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fad2 	bl	8002c1c <piceIndexToColors>
 8001678:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	881c      	ldrh	r4, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3302      	adds	r3, #2
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	3204      	adds	r2, #4
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	8a39      	ldrh	r1, [r7, #16]
 800168c:	8a78      	ldrh	r0, [r7, #18]
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	220c      	movs	r2, #12
 8001696:	f7ff fe1b 	bl	80012d0 <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 800169a:	8abb      	ldrh	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	82bb      	strh	r3, [r7, #20]
 80016a0:	8abb      	ldrh	r3, [r7, #20]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d9c0      	bls.n	8001628 <DrawTetromino+0x1c>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 80016a6:	8afb      	ldrh	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	82fb      	strh	r3, [r7, #22]
 80016ac:	8afb      	ldrh	r3, [r7, #22]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d9b7      	bls.n	8001622 <DrawTetromino+0x16>
            }
        }
    }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <LCD_Draw_Rounded_Rectangle_Fill>:

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	80fb      	strh	r3, [r7, #6]
 80016ce:	4603      	mov	r3, r0
 80016d0:	80bb      	strh	r3, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	807b      	strh	r3, [r7, #2]
 80016d6:	4613      	mov	r3, r2
 80016d8:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	4413      	add	r3, r2
 80016e0:	b298      	uxth	r0, r3
 80016e2:	88ba      	ldrh	r2, [r7, #4]
 80016e4:	8b3b      	ldrh	r3, [r7, #24]
 80016e6:	4413      	add	r3, r2
 80016e8:	b299      	uxth	r1, r3
 80016ea:	8b3b      	ldrh	r3, [r7, #24]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b21c      	sxth	r4, r3
 80016f8:	8b3b      	ldrh	r3, [r7, #24]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	883a      	ldrh	r2, [r7, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21a      	sxth	r2, r3
 8001706:	8bbb      	ldrh	r3, [r7, #28]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	4622      	mov	r2, r4
 800170e:	f7ff fab2 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 8001712:	88fa      	ldrh	r2, [r7, #6]
 8001714:	8b3b      	ldrh	r3, [r7, #24]
 8001716:	4413      	add	r3, r2
 8001718:	b298      	uxth	r0, r3
 800171a:	8b3b      	ldrh	r3, [r7, #24]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800172c:	88b9      	ldrh	r1, [r7, #4]
 800172e:	8bbb      	ldrh	r3, [r7, #28]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4623      	mov	r3, r4
 8001734:	f7ff fa9f 	bl	8000c76 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 8001738:	88fa      	ldrh	r2, [r7, #6]
 800173a:	8b3b      	ldrh	r3, [r7, #24]
 800173c:	4413      	add	r3, r2
 800173e:	b298      	uxth	r0, r3
 8001740:	88ba      	ldrh	r2, [r7, #4]
 8001742:	883b      	ldrh	r3, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	8b3b      	ldrh	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b299      	uxth	r1, r3
 800174e:	8b3b      	ldrh	r3, [r7, #24]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001760:	8bbb      	ldrh	r3, [r7, #28]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff fa86 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 800176a:	88ba      	ldrh	r2, [r7, #4]
 800176c:	8b3b      	ldrh	r3, [r7, #24]
 800176e:	4413      	add	r3, r2
 8001770:	b299      	uxth	r1, r3
 8001772:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001776:	8b3b      	ldrh	r3, [r7, #24]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	883a      	ldrh	r2, [r7, #0]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	b21a      	sxth	r2, r3
 8001784:	88f8      	ldrh	r0, [r7, #6]
 8001786:	8bbb      	ldrh	r3, [r7, #28]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	4622      	mov	r2, r4
 800178e:	f7ff fa72 	bl	8000c76 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4413      	add	r3, r2
 8001798:	b29a      	uxth	r2, r3
 800179a:	8b3b      	ldrh	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b298      	uxth	r0, r3
 80017a0:	88ba      	ldrh	r2, [r7, #4]
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	4413      	add	r3, r2
 80017a6:	b299      	uxth	r1, r3
 80017a8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80017ac:	8b3b      	ldrh	r3, [r7, #24]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	883a      	ldrh	r2, [r7, #0]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	8bbb      	ldrh	r3, [r7, #28]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	4622      	mov	r2, r4
 80017c2:	f7ff fa58 	bl	8000c76 <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	8b3b      	ldrh	r3, [r7, #24]
 80017ca:	4413      	add	r3, r2
 80017cc:	b298      	uxth	r0, r3
 80017ce:	88ba      	ldrh	r2, [r7, #4]
 80017d0:	8b3b      	ldrh	r3, [r7, #24]
 80017d2:	4413      	add	r3, r2
 80017d4:	b299      	uxth	r1, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	8b3a      	ldrh	r2, [r7, #24]
 80017da:	f7ff f9f9 	bl	8000bd0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 80017de:	88fa      	ldrh	r2, [r7, #6]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4413      	add	r3, r2
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	8b3b      	ldrh	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b298      	uxth	r0, r3
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	4413      	add	r3, r2
 80017f2:	b299      	uxth	r1, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	8b3a      	ldrh	r2, [r7, #24]
 80017f8:	f7ff f9ea 	bl	8000bd0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 80017fc:	88fa      	ldrh	r2, [r7, #6]
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	4413      	add	r3, r2
 8001802:	b298      	uxth	r0, r3
 8001804:	88ba      	ldrh	r2, [r7, #4]
 8001806:	883b      	ldrh	r3, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	b29a      	uxth	r2, r3
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b299      	uxth	r1, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	8b3a      	ldrh	r2, [r7, #24]
 8001816:	f7ff f9db 	bl	8000bd0 <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4413      	add	r3, r2
 8001820:	b29a      	uxth	r2, r3
 8001822:	8b3b      	ldrh	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b298      	uxth	r0, r3
 8001828:	88ba      	ldrh	r2, [r7, #4]
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	b29a      	uxth	r2, r3
 8001830:	8b3b      	ldrh	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b299      	uxth	r1, r3
 8001836:	8bbb      	ldrh	r3, [r7, #28]
 8001838:	8b3a      	ldrh	r2, [r7, #24]
 800183a:	f7ff f9c9 	bl	8000bd0 <LCD_Draw_Circle_Fill>
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
	...

08001848 <initGame>:
Board board;
Piece currentPiece;
Piece nextPiece;
uint32_t pointsScored;

void initGame() {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 800184c:	4806      	ldr	r0, [pc, #24]	@ (8001868 <initGame+0x20>)
 800184e:	f000 fa63 	bl	8001d18 <initializeBoard>
	initializeRandomPiece(& currentPiece);
 8001852:	4806      	ldr	r0, [pc, #24]	@ (800186c <initGame+0x24>)
 8001854:	f001 f99e 	bl	8002b94 <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 8001858:	4805      	ldr	r0, [pc, #20]	@ (8001870 <initGame+0x28>)
 800185a:	f001 f99b 	bl	8002b94 <initializeRandomPiece>
	pointsScored = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <initGame+0x2c>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20025b74 	.word	0x20025b74
 800186c:	20025e94 	.word	0x20025e94
 8001870:	20025edc 	.word	0x20025edc
 8001874:	20025f24 	.word	0x20025f24

08001878 <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    piece->y++;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f921 	bl	8001ad6 <collision>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <movePieceDown+0x38>
        piece->y--;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	645a      	str	r2, [r3, #68]	@ 0x44
        lockPiece(board, piece);
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f81a 	bl	80018e0 <lockPiece>
        return false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <movePieceDown+0x3a>
    }
    return true;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <dropPiece>:
void dropPiece(Board *board, Piece *piece) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 80018c4:	bf00      	nop
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffd5 	bl	8001878 <movePieceDown>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f8      	bne.n	80018c6 <dropPiece+0xc>
    }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e03b      	b.n	8001968 <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e032      	b.n	800195c <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	0091      	lsls	r1, r2, #2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	440a      	add	r2, r1
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d026      	beq.n	8001956 <lockPiece+0x76>
                int x = piece->x + j;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db19      	blt.n	8001956 <lockPiece+0x76>
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b13      	cmp	r3, #19
 8001926:	dc16      	bgt.n	8001956 <lockPiece+0x76>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db13      	blt.n	8001956 <lockPiece+0x76>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b09      	cmp	r3, #9
 8001932:	dc10      	bgt.n	8001956 <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	0091      	lsls	r1, r2, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	440a      	add	r2, r1
 800193e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3301      	adds	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b03      	cmp	r3, #3
 8001960:	ddc9      	ble.n	80018f6 <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b03      	cmp	r3, #3
 800196c:	ddc0      	ble.n	80018f0 <lockPiece+0x10>
                }
            }
        }
    }

    if (isGameOver(board)){
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9b6 	bl	8001ce0 <isGameOver>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <lockPiece+0xa2>
    	showEndScreen();
 800197a:	f001 fa3b 	bl	8002df4 <showEndScreen>
    	Error_Handler();
 800197e:	f001 f903 	bl	8002b88 <Error_Handler>
    }


    currentPiece = nextPiece;
 8001982:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <lockPiece+0x114>)
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <lockPiece+0x118>)
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	2348      	movs	r3, #72	@ 0x48
 800198c:	461a      	mov	r2, r3
 800198e:	f006 f998 	bl	8007cc2 <memcpy>
    initializeRandomPiece( & nextPiece);
 8001992:	4819      	ldr	r0, [pc, #100]	@ (80019f8 <lockPiece+0x118>)
 8001994:	f001 f8fe 	bl	8002b94 <initializeRandomPiece>
    switch (clearCompletedRows(board)){
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f831 	bl	8001a00 <clearCompletedRows>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d823      	bhi.n	80019ec <lockPiece+0x10c>
 80019a4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <lockPiece+0xcc>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019eb 	.word	0x080019eb
 80019b0:	080019e1 	.word	0x080019e1
 80019b4:	080019d7 	.word	0x080019d7
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019c1 	.word	0x080019c1
		case 4:
			pointsScored+=300;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <lockPiece+0x11c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80019c8:	4a0c      	ldr	r2, [pc, #48]	@ (80019fc <lockPiece+0x11c>)
 80019ca:	6013      	str	r3, [r2, #0]
		case 3:
			pointsScored+=200;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <lockPiece+0x11c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	33c8      	adds	r3, #200	@ 0xc8
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <lockPiece+0x11c>)
 80019d4:	6013      	str	r3, [r2, #0]
		case 2:
			pointsScored+=200;
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <lockPiece+0x11c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	33c8      	adds	r3, #200	@ 0xc8
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <lockPiece+0x11c>)
 80019de:	6013      	str	r3, [r2, #0]
		case 1:
			pointsScored+=100;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <lockPiece+0x11c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3364      	adds	r3, #100	@ 0x64
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <lockPiece+0x11c>)
 80019e8:	6013      	str	r3, [r2, #0]
		case 0:
			break;
 80019ea:	bf00      	nop
    }
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20025e94 	.word	0x20025e94
 80019f8:	20025edc 	.word	0x20025edc
 80019fc:	20025f24 	.word	0x20025f24

08001a00 <clearCompletedRows>:
uint16_t clearCompletedRows(Board *board) {
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	@ 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint16_t clearedRows = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	e057      	b.n	8001ac2 <clearCompletedRows+0xc2>
        int isComplete = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e011      	b.n	8001a40 <clearCompletedRows+0x40>
            if (board->grid[i][j] == 0) {
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <clearCompletedRows+0x3a>
                isComplete = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
                break;
 8001a38:	e005      	b.n	8001a46 <clearCompletedRows+0x46>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	ddea      	ble.n	8001a1c <clearCompletedRows+0x1c>
            }
        }

        if (isComplete) {
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d037      	beq.n	8001abc <clearCompletedRows+0xbc>
            clearedRows++;
 8001a4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a4e:	3301      	adds	r3, #1
 8001a50:	84fb      	strh	r3, [r7, #38]	@ 0x26
            for (int k = i; k > 0; k--) {
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e020      	b.n	8001a9a <clearCompletedRows+0x9a>
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e017      	b.n	8001a8e <clearCompletedRows+0x8e>
                    board->grid[k][j] = board->grid[k - 1][j];
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	dde4      	ble.n	8001a5e <clearCompletedRows+0x5e>
            for (int k = i; k > 0; k--) {
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dcdb      	bgt.n	8001a58 <clearCompletedRows+0x58>
                }
            }

            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e007      	b.n	8001ab6 <clearCompletedRows+0xb6>
                board->grid[0][j] = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	ddf4      	ble.n	8001aa6 <clearCompletedRows+0xa6>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	2b13      	cmp	r3, #19
 8001ac6:	dda4      	ble.n	8001a12 <clearCompletedRows+0x12>
            }
        }
    }
    return clearedRows;
 8001ac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	372c      	adds	r7, #44	@ 0x2c
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <collision>:

bool collision(Board *board, Piece *piece) {
 8001ad6:	b480      	push	{r7}
 8001ad8:	b087      	sub	sp, #28
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e03a      	b.n	8001b5c <collision+0x86>
        for (int j = 0; j < 4; j++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e031      	b.n	8001b50 <collision+0x7a>
            if (piece->matrix[i][j]) {
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	0091      	lsls	r1, r2, #2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	440a      	add	r2, r1
 8001af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d025      	beq.n	8001b4a <collision+0x74>
                int x = piece->x + j;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db05      	blt.n	8001b24 <collision+0x4e>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	dc02      	bgt.n	8001b24 <collision+0x4e>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b13      	cmp	r3, #19
 8001b22:	dd01      	ble.n	8001b28 <collision+0x52>
                    return true;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01d      	b.n	8001b64 <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0d      	blt.n	8001b4a <collision+0x74>
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <collision+0x74>
                    return true;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00c      	b.n	8001b64 <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	ddca      	ble.n	8001aec <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	ddc1      	ble.n	8001ae6 <collision+0x10>
                }
            }
        }
    }
    return false;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <rotatePiece>:

void rotatePiece(Piece *piece) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b096      	sub	sp, #88	@ 0x58
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 f822 	bl	8007bca <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b8a:	e01d      	b.n	8001bc8 <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b90:	e014      	b.n	8001bbc <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	f1c3 0303 	rsb	r3, r3, #3
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b9c:	0088      	lsls	r0, r1, #2
 8001b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ba0:	4401      	add	r1, r0
 8001ba2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ba6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ba8:	0089      	lsls	r1, r1, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3358      	adds	r3, #88	@ 0x58
 8001bb0:	443b      	add	r3, r7
 8001bb2:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 8001bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bb8:	3301      	adds	r3, #1
 8001bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	dde7      	ble.n	8001b92 <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	ddde      	ble.n	8001b8c <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd2:	e01b      	b.n	8001c0c <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bd8:	e012      	b.n	8001c00 <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 8001bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bdc:	009a      	lsls	r2, r3, #2
 8001bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3358      	adds	r3, #88	@ 0x58
 8001be6:	443b      	add	r3, r7
 8001be8:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bf0:	0090      	lsls	r0, r2, #2
 8001bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bf4:	4402      	add	r2, r0
 8001bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8001bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	dde9      	ble.n	8001bda <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	dde0      	ble.n	8001bd4 <rotatePiece+0x64>
        }
    }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3758      	adds	r7, #88	@ 0x58
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d83b      	bhi.n	8001ca8 <handleInput+0x8c>
 8001c30:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <handleInput+0x1c>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c65 	.word	0x08001c65
 8001c3c:	08001c59 	.word	0x08001c59
 8001c40:	08001c93 	.word	0x08001c93
 8001c44:	08001c4d 	.word	0x08001c4d
 8001c48:	08001c9d 	.word	0x08001c9d
        case 3: // Move left
            piece->x--;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c56:	e027      	b.n	8001ca8 <handleInput+0x8c>
        case 1: // Move right
            piece->x++;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001c62:	e021      	b.n	8001ca8 <handleInput+0x8c>
        case 0: // Rotate
            rotatePiece(piece);
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff ff83 	bl	8001b70 <rotatePiece>
            if (collision(board, piece)) {
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ff32 	bl	8001ad6 <collision>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d016      	beq.n	8001ca6 <handleInput+0x8a>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e005      	b.n	8001c8a <handleInput+0x6e>
                    rotatePiece(piece);
 8001c7e:	68b8      	ldr	r0, [r7, #8]
 8001c80:	f7ff ff76 	bl	8001b70 <rotatePiece>
                for (int i = 0; i < 3; i++) {
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	ddf6      	ble.n	8001c7e <handleInput+0x62>
                }
            }
            break;
 8001c90:	e009      	b.n	8001ca6 <handleInput+0x8a>
        case 2: // Soft drop
        	movePieceDown(board, piece);
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fdef 	bl	8001878 <movePieceDown>
            break;
 8001c9a:	e005      	b.n	8001ca8 <handleInput+0x8c>
        case 4: // Hard drop
            dropPiece(board, piece);
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff fe0b 	bl	80018ba <dropPiece>
            break;
 8001ca4:	e000      	b.n	8001ca8 <handleInput+0x8c>
            break;
 8001ca6:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f7ff ff13 	bl	8001ad6 <collision>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <handleInput+0xbc>
        switch (command) {
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d007      	beq.n	8001ccc <handleInput+0xb0>
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d10b      	bne.n	8001cd8 <handleInput+0xbc>
            case 3: piece->x++; break;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cca:	e005      	b.n	8001cd8 <handleInput+0xbc>
            case 1: piece->x--; break;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cd6:	bf00      	nop
        }
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <isGameOver>:

bool isGameOver(Board *board) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e00a      	b.n	8001d04 <isGameOver+0x24>
        if (board->grid[0][i] != 0) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <isGameOver+0x1e>
            return true;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e006      	b.n	8001d0c <isGameOver+0x2c>
    for (int i = 0; i < BOARD_WIDTH; i++) {
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	ddf1      	ble.n	8001cee <isGameOver+0xe>
        }
    }
    return false;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e016      	b.n	8001d54 <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	e00d      	b.n	8001d48 <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	ddee      	ble.n	8001d2c <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b13      	cmp	r3, #19
 8001d58:	dde5      	ble.n	8001d26 <initializeBoard+0xe>
        }
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <boardWithPiece>:

Board boardWithPiece(Board *board, Piece *piece) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d74:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001d78:	6018      	str	r0, [r3, #0]
 8001d7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d7e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001d82:	6019      	str	r1, [r3, #0]
 8001d84:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001d88:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001d8c:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001d94:	e030      	b.n	8001df8 <boardWithPiece+0x90>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001d9c:	e023      	b.n	8001de6 <boardWithPiece+0x7e>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001d9e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001da2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001db8:	4413      	add	r3, r2
 8001dba:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001dbe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001dc2:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001dc6:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ddc:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001de0:	3301      	adds	r3, #1
 8001de2:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001de6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	ddd7      	ble.n	8001d9e <boardWithPiece+0x36>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001dee:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001df8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001dfc:	2b13      	cmp	r3, #19
 8001dfe:	ddca      	ble.n	8001d96 <boardWithPiece+0x2e>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e06:	e052      	b.n	8001eae <boardWithPiece+0x146>
        for (int pj = 0; pj < 4; pj++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e0e:	e045      	b.n	8001e9c <boardWithPiece+0x134>
            int px = piece->x + pj;
 8001e10:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e14:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e20:	4413      	add	r3, r2
 8001e22:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int py = piece->y + pi;
 8001e26:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e2a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e36:	4413      	add	r3, r2
 8001e38:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001e3c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e40:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e4a:	0091      	lsls	r1, r2, #2
 8001e4c:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e50:	440a      	add	r2, r1
 8001e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01b      	beq.n	8001e92 <boardWithPiece+0x12a>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001e5a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e5e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e68:	0091      	lsls	r1, r2, #2
 8001e6a:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e6e:	440a      	add	r2, r1
 8001e70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e74:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001e78:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001e7c:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001e92:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e96:	3301      	adds	r3, #1
 8001e98:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e9c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	ddb5      	ble.n	8001e10 <boardWithPiece+0xa8>
    for (int pi = 0; pi < 4; pi++) {
 8001ea4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001eae:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	dda8      	ble.n	8001e08 <boardWithPiece+0xa0>
//            }
        }
    }

    return tempBoard;
 8001eb6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001eba:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ec4:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f005 fef6 	bl	8007cc2 <memcpy>
}
 8001ed6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001eda:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001eec:	f000 f9fe 	bl	80022ec <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001ef0:	20ca      	movs	r0, #202	@ 0xca
 8001ef2:	f000 f943 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001ef6:	20c3      	movs	r0, #195	@ 0xc3
 8001ef8:	f000 f94d 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001efc:	2008      	movs	r0, #8
 8001efe:	f000 f94a 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f02:	2050      	movs	r0, #80	@ 0x50
 8001f04:	f000 f947 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f08:	20cf      	movs	r0, #207	@ 0xcf
 8001f0a:	f000 f937 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f941 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f14:	20c1      	movs	r0, #193	@ 0xc1
 8001f16:	f000 f93e 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f1a:	2030      	movs	r0, #48	@ 0x30
 8001f1c:	f000 f93b 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f20:	20ed      	movs	r0, #237	@ 0xed
 8001f22:	f000 f92b 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f26:	2064      	movs	r0, #100	@ 0x64
 8001f28:	f000 f935 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f932 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f32:	2012      	movs	r0, #18
 8001f34:	f000 f92f 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f38:	2081      	movs	r0, #129	@ 0x81
 8001f3a:	f000 f92c 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f3e:	20e8      	movs	r0, #232	@ 0xe8
 8001f40:	f000 f91c 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f44:	2085      	movs	r0, #133	@ 0x85
 8001f46:	f000 f926 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f923 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f50:	2078      	movs	r0, #120	@ 0x78
 8001f52:	f000 f920 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f56:	20cb      	movs	r0, #203	@ 0xcb
 8001f58:	f000 f910 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f5c:	2039      	movs	r0, #57	@ 0x39
 8001f5e:	f000 f91a 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f62:	202c      	movs	r0, #44	@ 0x2c
 8001f64:	f000 f917 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f914 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f6e:	2034      	movs	r0, #52	@ 0x34
 8001f70:	f000 f911 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f74:	2002      	movs	r0, #2
 8001f76:	f000 f90e 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f7a:	20f7      	movs	r0, #247	@ 0xf7
 8001f7c:	f000 f8fe 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f80:	2020      	movs	r0, #32
 8001f82:	f000 f908 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001f86:	20ea      	movs	r0, #234	@ 0xea
 8001f88:	f000 f8f8 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 f902 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f8ff 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001f98:	20b1      	movs	r0, #177	@ 0xb1
 8001f9a:	f000 f8ef 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f8f9 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fa4:	201b      	movs	r0, #27
 8001fa6:	f000 f8f6 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001faa:	20b6      	movs	r0, #182	@ 0xb6
 8001fac:	f000 f8e6 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f000 f8f0 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fb6:	20a2      	movs	r0, #162	@ 0xa2
 8001fb8:	f000 f8ed 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fbc:	20c0      	movs	r0, #192	@ 0xc0
 8001fbe:	f000 f8dd 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fc2:	2010      	movs	r0, #16
 8001fc4:	f000 f8e7 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fc8:	20c1      	movs	r0, #193	@ 0xc1
 8001fca:	f000 f8d7 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fce:	2010      	movs	r0, #16
 8001fd0:	f000 f8e1 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001fd4:	20c5      	movs	r0, #197	@ 0xc5
 8001fd6:	f000 f8d1 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001fda:	2045      	movs	r0, #69	@ 0x45
 8001fdc:	f000 f8db 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001fe0:	2015      	movs	r0, #21
 8001fe2:	f000 f8d8 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001fe6:	20c7      	movs	r0, #199	@ 0xc7
 8001fe8:	f000 f8c8 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001fec:	2090      	movs	r0, #144	@ 0x90
 8001fee:	f000 f8d2 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ff2:	2036      	movs	r0, #54	@ 0x36
 8001ff4:	f000 f8c2 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ff8:	20c8      	movs	r0, #200	@ 0xc8
 8001ffa:	f000 f8cc 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ffe:	20f2      	movs	r0, #242	@ 0xf2
 8002000:	f000 f8bc 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f000 f8c6 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800200a:	20b0      	movs	r0, #176	@ 0xb0
 800200c:	f000 f8b6 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002010:	20c2      	movs	r0, #194	@ 0xc2
 8002012:	f000 f8c0 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002016:	20b6      	movs	r0, #182	@ 0xb6
 8002018:	f000 f8b0 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800201c:	200a      	movs	r0, #10
 800201e:	f000 f8ba 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002022:	20a7      	movs	r0, #167	@ 0xa7
 8002024:	f000 f8b7 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002028:	2027      	movs	r0, #39	@ 0x27
 800202a:	f000 f8b4 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800202e:	2004      	movs	r0, #4
 8002030:	f000 f8b1 	bl	8002196 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002034:	202a      	movs	r0, #42	@ 0x2a
 8002036:	f000 f8a1 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f8ab 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 f8a8 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 f8a5 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800204c:	20ef      	movs	r0, #239	@ 0xef
 800204e:	f000 f8a2 	bl	8002196 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002052:	202b      	movs	r0, #43	@ 0x2b
 8002054:	f000 f892 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f89c 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f899 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002064:	2001      	movs	r0, #1
 8002066:	f000 f896 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800206a:	203f      	movs	r0, #63	@ 0x3f
 800206c:	f000 f893 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002070:	20f6      	movs	r0, #246	@ 0xf6
 8002072:	f000 f883 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 f88d 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f000 f88a 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002082:	2006      	movs	r0, #6
 8002084:	f000 f887 	bl	8002196 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002088:	202c      	movs	r0, #44	@ 0x2c
 800208a:	f000 f877 	bl	800217c <ili9341_Write_Reg>
  LCD_Delay(200);
 800208e:	20c8      	movs	r0, #200	@ 0xc8
 8002090:	f000 f9e8 	bl	8002464 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002094:	2026      	movs	r0, #38	@ 0x26
 8002096:	f000 f871 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 f87b 	bl	8002196 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020a0:	20e0      	movs	r0, #224	@ 0xe0
 80020a2:	f000 f86b 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f875 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020ac:	2029      	movs	r0, #41	@ 0x29
 80020ae:	f000 f872 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020b2:	2024      	movs	r0, #36	@ 0x24
 80020b4:	f000 f86f 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020b8:	200c      	movs	r0, #12
 80020ba:	f000 f86c 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020be:	200e      	movs	r0, #14
 80020c0:	f000 f869 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020c4:	2009      	movs	r0, #9
 80020c6:	f000 f866 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020ca:	204e      	movs	r0, #78	@ 0x4e
 80020cc:	f000 f863 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020d0:	2078      	movs	r0, #120	@ 0x78
 80020d2:	f000 f860 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020d6:	203c      	movs	r0, #60	@ 0x3c
 80020d8:	f000 f85d 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020dc:	2009      	movs	r0, #9
 80020de:	f000 f85a 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80020e2:	2013      	movs	r0, #19
 80020e4:	f000 f857 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80020e8:	2005      	movs	r0, #5
 80020ea:	f000 f854 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80020ee:	2017      	movs	r0, #23
 80020f0:	f000 f851 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f000 f84e 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f84b 	bl	8002196 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002100:	20e1      	movs	r0, #225	@ 0xe1
 8002102:	f000 f83b 	bl	800217c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f845 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800210c:	2016      	movs	r0, #22
 800210e:	f000 f842 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002112:	201b      	movs	r0, #27
 8002114:	f000 f83f 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002118:	2004      	movs	r0, #4
 800211a:	f000 f83c 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800211e:	2011      	movs	r0, #17
 8002120:	f000 f839 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002124:	2007      	movs	r0, #7
 8002126:	f000 f836 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800212a:	2031      	movs	r0, #49	@ 0x31
 800212c:	f000 f833 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002130:	2033      	movs	r0, #51	@ 0x33
 8002132:	f000 f830 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002136:	2042      	movs	r0, #66	@ 0x42
 8002138:	f000 f82d 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800213c:	2005      	movs	r0, #5
 800213e:	f000 f82a 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002142:	200c      	movs	r0, #12
 8002144:	f000 f827 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002148:	200a      	movs	r0, #10
 800214a:	f000 f824 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800214e:	2028      	movs	r0, #40	@ 0x28
 8002150:	f000 f821 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002154:	202f      	movs	r0, #47	@ 0x2f
 8002156:	f000 f81e 	bl	8002196 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f81b 	bl	8002196 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002160:	2011      	movs	r0, #17
 8002162:	f000 f80b 	bl	800217c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002166:	20c8      	movs	r0, #200	@ 0xc8
 8002168:	f000 f97c 	bl	8002464 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800216c:	2029      	movs	r0, #41	@ 0x29
 800216e:	f000 f805 	bl	800217c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002172:	202c      	movs	r0, #44	@ 0x2c
 8002174:	f000 f802 	bl	800217c <ili9341_Write_Reg>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f949 	bl	8002420 <LCD_IO_WriteReg>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f91a 	bl	80023dc <LCD_IO_WriteData>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021b4:	4819      	ldr	r0, [pc, #100]	@ (800221c <SPI_Init+0x6c>)
 80021b6:	f004 fdf4 	bl	8006da2 <HAL_SPI_GetState>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d12b      	bne.n	8002218 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <SPI_Init+0x6c>)
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <SPI_Init+0x70>)
 80021c4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <SPI_Init+0x6c>)
 80021c8:	2218      	movs	r2, #24
 80021ca:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <SPI_Init+0x6c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <SPI_Init+0x6c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <SPI_Init+0x6c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <SPI_Init+0x6c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <SPI_Init+0x6c>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <SPI_Init+0x6c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <SPI_Init+0x6c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <SPI_Init+0x6c>)
 80021f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021fc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <SPI_Init+0x6c>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SPI_Init+0x6c>)
 8002206:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800220a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <SPI_Init+0x6c>)
 800220e:	f000 f833 	bl	8002278 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002212:	4802      	ldr	r0, [pc, #8]	@ (800221c <SPI_Init+0x6c>)
 8002214:	f004 fbd0 	bl	80069b8 <HAL_SPI_Init>
  }
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20025f28 	.word	0x20025f28
 8002220:	40015000 	.word	0x40015000

08002224 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <SPI_Write+0x34>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1db9      	adds	r1, r7, #6
 8002238:	2201      	movs	r2, #1
 800223a:	4808      	ldr	r0, [pc, #32]	@ (800225c <SPI_Write+0x38>)
 800223c:	f004 fc6d 	bl	8006b1a <HAL_SPI_Transmit>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800224a:	f000 f809 	bl	8002260 <SPI_Error>
  }
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000000c 	.word	0x2000000c
 800225c:	20025f28 	.word	0x20025f28

08002260 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002264:	4803      	ldr	r0, [pc, #12]	@ (8002274 <SPI_Error+0x14>)
 8002266:	f004 fc30 	bl	8006aca <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800226a:	f7ff ffa1 	bl	80021b0 <SPI_Init>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20025f28 	.word	0x20025f28

08002278 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <SPI_MspInit+0x6c>)
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <SPI_MspInit+0x6c>)
 800228a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800228e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <SPI_MspInit+0x6c>)
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	4a0f      	ldr	r2, [pc, #60]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <SPI_MspInit+0x6c>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022b8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ca:	2305      	movs	r3, #5
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	4804      	ldr	r0, [pc, #16]	@ (80022e8 <SPI_MspInit+0x70>)
 80022d6:	f001 fedd 	bl	8004094 <HAL_GPIO_Init>
}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40021400 	.word	0x40021400

080022ec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80022f2:	4b36      	ldr	r3, [pc, #216]	@ (80023cc <LCD_IO_Init+0xe0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d164      	bne.n	80023c4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <LCD_IO_Init+0xe0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002310:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800231c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002320:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	4619      	mov	r1, r3
 8002334:	4827      	ldr	r0, [pc, #156]	@ (80023d4 <LCD_IO_Init+0xe8>)
 8002336:	f001 fead 	bl	8004094 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	4819      	ldr	r0, [pc, #100]	@ (80023d4 <LCD_IO_Init+0xe8>)
 8002370:	f001 fe90 	bl	8004094 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <LCD_IO_Init+0xe4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6313      	str	r3, [r2, #48]	@ 0x30
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <LCD_IO_Init+0xe4>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002390:	2304      	movs	r3, #4
 8002392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023a8:	f001 fe74 	bl	8004094 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023ac:	2200      	movs	r2, #0
 80023ae:	2104      	movs	r1, #4
 80023b0:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023b2:	f002 f927 	bl	8004604 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023b6:	2201      	movs	r2, #1
 80023b8:	2104      	movs	r1, #4
 80023ba:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <LCD_IO_Init+0xec>)
 80023bc:	f002 f922 	bl	8004604 <HAL_GPIO_WritePin>

    SPI_Init();
 80023c0:	f7ff fef6 	bl	80021b0 <SPI_Init>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20025f80 	.word	0x20025f80
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40020800 	.word	0x40020800

080023dc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ec:	480a      	ldr	r0, [pc, #40]	@ (8002418 <LCD_IO_WriteData+0x3c>)
 80023ee:	f002 f909 	bl	8004604 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	4809      	ldr	r0, [pc, #36]	@ (800241c <LCD_IO_WriteData+0x40>)
 80023f8:	f002 f904 	bl	8004604 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff10 	bl	8002224 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002404:	2201      	movs	r2, #1
 8002406:	2104      	movs	r1, #4
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <LCD_IO_WriteData+0x40>)
 800240a:	f002 f8fb 	bl	8004604 <HAL_GPIO_WritePin>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020c00 	.word	0x40020c00
 800241c:	40020800 	.word	0x40020800

08002420 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002430:	480a      	ldr	r0, [pc, #40]	@ (800245c <LCD_IO_WriteReg+0x3c>)
 8002432:	f002 f8e7 	bl	8004604 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002436:	2200      	movs	r2, #0
 8002438:	2104      	movs	r1, #4
 800243a:	4809      	ldr	r0, [pc, #36]	@ (8002460 <LCD_IO_WriteReg+0x40>)
 800243c:	f002 f8e2 	bl	8004604 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff feed 	bl	8002224 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800244a:	2201      	movs	r2, #1
 800244c:	2104      	movs	r1, #4
 800244e:	4804      	ldr	r0, [pc, #16]	@ (8002460 <LCD_IO_WriteReg+0x40>)
 8002450:	f002 f8d8 	bl	8004604 <HAL_GPIO_WritePin>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40020800 	.word	0x40020800

08002464 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f001 fc65 	bl	8003d3c <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f001 fbea 	bl	8003c58 <HAL_Init>
  /* USER CODE BEGIN Init */
//#ifdef DONTDEFINE
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002484:	f000 f81e 	bl	80024c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
//#endif
  ApplicationInit(); // Initializes the LCD functionality
 8002488:	f7fe f87a 	bl	8000580 <ApplicationInit>
  showStartScreen();
 800248c:	f000 fbea 	bl	8002c64 <showStartScreen>
  MX_TIM5_Init();
  MX_TIM2_Init();
  MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 8002490:	f000 f932 	bl	80026f8 <MX_GPIO_Init>
  MX_RNG_Init();
 8002494:	f000 f880 	bl	8002598 <MX_RNG_Init>
  MX_TIM5_Init();
 8002498:	f000 f8e0 	bl	800265c <MX_TIM5_Init>
  MX_TIM2_Init();
 800249c:	f000 f890 	bl	80025c0 <MX_TIM2_Init>

//  HAL_TIM_Base_Start_IT(& htim2);
//  HAL_TIM_Base_Start(& htim5);

  ApplicationInit(); // Initializes the LCD functionality
 80024a0:	f7fe f86e 	bl	8000580 <ApplicationInit>

//  printf("Hi!\n");

HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <main+0x44>)
 80024aa:	f002 f8c4 	bl	8004636 <HAL_GPIO_TogglePin>


  showStartScreen();
 80024ae:	f000 fbd9 	bl	8002c64 <showStartScreen>

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80024b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024b6:	4802      	ldr	r0, [pc, #8]	@ (80024c0 <main+0x44>)
 80024b8:	f002 f8bd 	bl	8004636 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <main+0x40>
 80024c0:	40021800 	.word	0x40021800

080024c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b094      	sub	sp, #80	@ 0x50
 80024c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	2230      	movs	r2, #48	@ 0x30
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fb79 	bl	8007bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <SystemClock_Config+0xcc>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	4a27      	ldr	r2, [pc, #156]	@ (8002590 <SystemClock_Config+0xcc>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <SystemClock_Config+0xcc>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <SystemClock_Config+0xd0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <SystemClock_Config+0xd0>)
 800250e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <SystemClock_Config+0xd0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002520:	2301      	movs	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800252a:	2302      	movs	r3, #2
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800252e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002534:	2308      	movs	r3, #8
 8002536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 335;
 8002538:	f240 134f 	movw	r3, #335	@ 0x14f
 800253c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800253e:	2302      	movs	r3, #2
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002542:	2307      	movs	r3, #7
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fb70 	bl	8005c30 <HAL_RCC_OscConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002556:	f000 fb17 	bl	8002b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255a:	230f      	movs	r3, #15
 800255c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255e:	2302      	movs	r3, #2
 8002560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002566:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800256a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800256c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002570:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2105      	movs	r1, #5
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fdd1 	bl	8006120 <HAL_RCC_ClockConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002584:	f000 fb00 	bl	8002b88 <Error_Handler>
  }
}
 8002588:	bf00      	nop
 800258a:	3750      	adds	r7, #80	@ 0x50
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000

08002598 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <MX_RNG_Init+0x20>)
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <MX_RNG_Init+0x24>)
 80025a0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_RNG_Init+0x20>)
 80025a4:	f004 f988 	bl	80068b8 <HAL_RNG_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80025ae:	f000 faeb 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20025f84 	.word	0x20025f84
 80025bc:	50060800 	.word	0x50060800

080025c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <MX_TIM2_Init+0x98>)
 80025de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16750 - 1;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <MX_TIM2_Init+0x98>)
 80025e6:	f244 126d 	movw	r2, #16749	@ 0x416d
 80025ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <MX_TIM2_Init+0x98>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (500) - 1;
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <MX_TIM2_Init+0x98>)
 80025f4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80025f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <MX_TIM2_Init+0x98>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <MX_TIM2_Init+0x98>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002606:	4814      	ldr	r0, [pc, #80]	@ (8002658 <MX_TIM2_Init+0x98>)
 8002608:	f004 fcb6 	bl	8006f78 <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002612:	f000 fab9 	bl	8002b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4619      	mov	r1, r3
 8002622:	480d      	ldr	r0, [pc, #52]	@ (8002658 <MX_TIM2_Init+0x98>)
 8002624:	f004 fec0 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800262e:	f000 faab 	bl	8002b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800263a:	463b      	mov	r3, r7
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	@ (8002658 <MX_TIM2_Init+0x98>)
 8002640:	f005 f8e8 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800264a:	f000 fa9d 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20025f94 	.word	0x20025f94

0800265c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800267a:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <MX_TIM5_Init+0x98>)
 800267c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16750 - 1;
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002680:	f244 126d 	movw	r2, #16749	@ 0x416d
 8002684:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800268e:	f04f 32ff 	mov.w	r2, #4294967295
 8002692:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <MX_TIM5_Init+0x94>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <MX_TIM5_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026a0:	4813      	ldr	r0, [pc, #76]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026a2:	f004 fc69 	bl	8006f78 <HAL_TIM_Base_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80026ac:	f000 fa6c 	bl	8002b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026be:	f004 fe73 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026c8:	f000 fa5e 	bl	8002b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <MX_TIM5_Init+0x94>)
 80026da:	f005 f89b 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026e4:	f000 fa50 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20025fdc 	.word	0x20025fdc
 80026f4:	40000c00 	.word	0x40000c00

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	@ 0x38
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	4bb3      	ldr	r3, [pc, #716]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4ab2      	ldr	r2, [pc, #712]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4bb0      	ldr	r3, [pc, #704]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	4bac      	ldr	r3, [pc, #688]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4aab      	ldr	r2, [pc, #684]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002734:	f043 0320 	orr.w	r3, r3, #32
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4ba9      	ldr	r3, [pc, #676]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	4ba5      	ldr	r3, [pc, #660]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4aa4      	ldr	r2, [pc, #656]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4ba2      	ldr	r3, [pc, #648]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	4b9e      	ldr	r3, [pc, #632]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	4a9d      	ldr	r2, [pc, #628]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	@ 0x30
 8002772:	4b9b      	ldr	r3, [pc, #620]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b97      	ldr	r3, [pc, #604]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a96      	ldr	r2, [pc, #600]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b94      	ldr	r3, [pc, #592]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b90      	ldr	r3, [pc, #576]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a8f      	ldr	r2, [pc, #572]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b8d      	ldr	r3, [pc, #564]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b89      	ldr	r3, [pc, #548]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a88      	ldr	r2, [pc, #544]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027c0:	f043 0310 	orr.w	r3, r3, #16
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b86      	ldr	r3, [pc, #536]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4b82      	ldr	r3, [pc, #520]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a81      	ldr	r2, [pc, #516]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b7f      	ldr	r3, [pc, #508]	@ (80029e0 <MX_GPIO_Init+0x2e8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2116      	movs	r1, #22
 80027f2:	487c      	ldr	r0, [pc, #496]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 80027f4:	f001 ff06 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	487a      	ldr	r0, [pc, #488]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 80027fe:	f001 ff01 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002808:	4878      	ldr	r0, [pc, #480]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 800280a:	f001 fefb 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002814:	4876      	ldr	r0, [pc, #472]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 8002816:	f001 fef5 	bl	8004604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800281a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282c:	230c      	movs	r3, #12
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	486f      	ldr	r0, [pc, #444]	@ (80029f4 <MX_GPIO_Init+0x2fc>)
 8002838:	f001 fc2c 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800283c:	2301      	movs	r3, #1
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800284c:	230c      	movs	r3, #12
 800284e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	4863      	ldr	r0, [pc, #396]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 8002858:	f001 fc1c 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800285c:	2316      	movs	r3, #22
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	485c      	ldr	r0, [pc, #368]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 8002874:	f001 fc0e 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002878:	2301      	movs	r3, #1
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800287c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288a:	4619      	mov	r1, r3
 800288c:	4856      	ldr	r0, [pc, #344]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 800288e:	f001 fc01 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002892:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002898:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	484f      	ldr	r0, [pc, #316]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 80028aa:	f001 fbf3 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4848      	ldr	r0, [pc, #288]	@ (80029e8 <MX_GPIO_Init+0x2f0>)
 80028c6:	f001 fbe5 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80028ca:	2320      	movs	r3, #32
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028dc:	4619      	mov	r1, r3
 80028de:	4841      	ldr	r0, [pc, #260]	@ (80029e4 <MX_GPIO_Init+0x2ec>)
 80028e0:	f001 fbd8 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028e4:	2304      	movs	r3, #4
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f4:	4619      	mov	r1, r3
 80028f6:	4840      	ldr	r0, [pc, #256]	@ (80029f8 <MX_GPIO_Init+0x300>)
 80028f8:	f001 fbcc 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80028fc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800290e:	230c      	movs	r3, #12
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4835      	ldr	r0, [pc, #212]	@ (80029f0 <MX_GPIO_Init+0x2f8>)
 800291a:	f001 fbbb 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800291e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002930:	230c      	movs	r3, #12
 8002932:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4830      	ldr	r0, [pc, #192]	@ (80029fc <MX_GPIO_Init+0x304>)
 800293c:	f001 fbaa 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002940:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002952:	230c      	movs	r3, #12
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295a:	4619      	mov	r1, r3
 800295c:	4826      	ldr	r0, [pc, #152]	@ (80029f8 <MX_GPIO_Init+0x300>)
 800295e:	f001 fb99 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	4820      	ldr	r0, [pc, #128]	@ (80029f8 <MX_GPIO_Init+0x300>)
 8002978:	f001 fb8c 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800297c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800298e:	230c      	movs	r3, #12
 8002990:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	4814      	ldr	r0, [pc, #80]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 800299a:	f001 fb7b 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800299e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	480e      	ldr	r0, [pc, #56]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 80029b4:	f001 fb6e 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80029b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029be:	2301      	movs	r3, #1
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ce:	4619      	mov	r1, r3
 80029d0:	4806      	ldr	r0, [pc, #24]	@ (80029ec <MX_GPIO_Init+0x2f4>)
 80029d2:	f001 fb5f 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
 80029dc:	e010      	b.n	8002a00 <MX_GPIO_Init+0x308>
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020000 	.word	0x40020000
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021800 	.word	0x40021800
 80029f4:	40021400 	.word	0x40021400
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4817      	ldr	r0, [pc, #92]	@ (8002a74 <MX_GPIO_Init+0x37c>)
 8002a18:	f001 fb3c 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002a1c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a32:	4619      	mov	r1, r3
 8002a34:	4810      	ldr	r0, [pc, #64]	@ (8002a78 <MX_GPIO_Init+0x380>)
 8002a36:	f001 fb2d 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002a3a:	2360      	movs	r3, #96	@ 0x60
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	4809      	ldr	r0, [pc, #36]	@ (8002a7c <MX_GPIO_Init+0x384>)
 8002a56:	f001 fb1d 	bl	8004094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2006      	movs	r0, #6
 8002a60:	f001 faad 	bl	8003fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a64:	2006      	movs	r0, #6
 8002a66:	f001 fac6 	bl	8003ff6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a6a:	bf00      	nop
 8002a6c:	3738      	adds	r7, #56	@ 0x38
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40020400 	.word	0x40020400

08002a80 <startTimers>:

/* USER CODE BEGIN 4 */
void startTimers(){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(& htim2);
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <startTimers+0x14>)
 8002a86:	f004 fb2f 	bl	80070e8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(& htim5);
 8002a8a:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <startTimers+0x18>)
 8002a8c:	f004 fac4 	bl	8007018 <HAL_TIM_Base_Start>
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20025f94 	.word	0x20025f94
 8002a98:	20025fdc 	.word	0x20025fdc

08002a9c <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t tim2CallCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
//	printf("TIMERCALLED\n");
	if (htim == &htim2) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d120      	bne.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x52>
		tim2CallCounter++;
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ab8:	701a      	strb	r2, [r3, #0]
//		printf("Counter: %u\n", tim2CallCounter);
//		printf("1/10 of a second\n");
		if (tim2CallCounter >= 10 * BLOCK_FALL_TIME){
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d914      	bls.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x52>
#if USEDEBUG == 1
			printf("3 seconds\n");
#endif
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8002ac4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ac8:	480d      	ldr	r0, [pc, #52]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002aca:	f001 fdb4 	bl	8004636 <HAL_GPIO_TogglePin>
			movePieceDown(& board,& currentPiece);
 8002ace:	490d      	ldr	r1, [pc, #52]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002ad0:	480d      	ldr	r0, [pc, #52]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002ad2:	f7fe fed1 	bl	8001878 <movePieceDown>
			LCD_Clear(0,LCD_COLOR_BLACK);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f93f 	bl	8000d5c <LCD_Clear>
			showGameScreen();
 8002ade:	f000 f94d 	bl	8002d7c <showGameScreen>
			Draw_Arrows_On_Screen(-1);
 8002ae2:	20ff      	movs	r0, #255	@ 0xff
 8002ae4:	f7fe fbb6 	bl	8001254 <Draw_Arrows_On_Screen>
			tim2CallCounter = 0;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20025f94 	.word	0x20025f94
 8002afc:	20026024 	.word	0x20026024
 8002b00:	40021800 	.word	0x40021800
 8002b04:	20025e94 	.word	0x20025e94
 8002b08:	20025b74 	.word	0x20025b74

08002b0c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
	handleInput(&board,&currentPiece, BUTTONACTION);
 8002b16:	2204      	movs	r2, #4
 8002b18:	4914      	ldr	r1, [pc, #80]	@ (8002b6c <HAL_GPIO_EXTI_Callback+0x60>)
 8002b1a:	4815      	ldr	r0, [pc, #84]	@ (8002b70 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b1c:	f7ff f87e 	bl	8001c1c <handleInput>
	LCD_Clear(0,LCD_COLOR_BLACK);
 8002b20:	2100      	movs	r1, #0
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe f91a 	bl	8000d5c <LCD_Clear>
	showGameScreen();
 8002b28:	f000 f928 	bl	8002d7c <showGameScreen>
	Draw_Arrows_On_Screen(-1);
 8002b2c:	20ff      	movs	r0, #255	@ 0xff
 8002b2e:	f7fe fb91 	bl	8001254 <Draw_Arrows_On_Screen>

	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002b32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b36:	480f      	ldr	r0, [pc, #60]	@ (8002b74 <HAL_GPIO_EXTI_Callback+0x68>)
 8002b38:	f001 fd7d 	bl	8004636 <HAL_GPIO_TogglePin>
	static volatile uint32_t last;
	uint32_t current = __HAL_TIM_GET_COUNTER(&htim5);
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	60fb      	str	r3, [r7, #12]
	printf("Pushed after %u\n", (unsigned int) (current - last)/5000);
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_GPIO_EXTI_Callback+0x70>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b80 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0b1b      	lsrs	r3, r3, #12
 8002b54:	4619      	mov	r1, r3
 8002b56:	480b      	ldr	r0, [pc, #44]	@ (8002b84 <HAL_GPIO_EXTI_Callback+0x78>)
 8002b58:	f004 ffae 	bl	8007ab8 <iprintf>
	last = current;
 8002b5c:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <HAL_GPIO_EXTI_Callback+0x70>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6013      	str	r3, [r2, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20025e94 	.word	0x20025e94
 8002b70:	20025b74 	.word	0x20025b74
 8002b74:	40021800 	.word	0x40021800
 8002b78:	20025fdc 	.word	0x20025fdc
 8002b7c:	20026028 	.word	0x20026028
 8002b80:	d1b71759 	.word	0xd1b71759
 8002b84:	08008bec 	.word	0x08008bec

08002b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8c:	b672      	cpsid	i
}
 8002b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <Error_Handler+0x8>

08002b94 <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 8002b9c:	f000 f852 	bl	8002c44 <rand>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <initializeRandomPiece+0x80>)
 8002ba4:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba8:	1aca      	subs	r2, r1, r3
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	089a      	lsrs	r2, r3, #2
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	1aca      	subs	r2, r1, r3
 8002bb8:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e01c      	b.n	8002bfa <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	e013      	b.n	8002bee <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 8002bc6:	4914      	ldr	r1, [pc, #80]	@ (8002c18 <initializeRandomPiece+0x84>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4413      	add	r3, r2
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	0090      	lsls	r0, r2, #2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4402      	add	r2, r0
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3301      	adds	r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	dde8      	ble.n	8002bc6 <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	dddf      	ble.n	8002bc0 <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2204      	movs	r2, #4
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	24924925 	.word	0x24924925
 8002c18:	20000010 	.word	0x20000010

08002c1c <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <piceIndexToColors+0x24>)
 8002c30:	4413      	add	r3, r2
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200001d0 	.word	0x200001d0

08002c44 <rand>:
 *
 *  Created on: Dec 7, 2024
 *      Author: user
 */
#include "rand.h"
uint32_t rand(){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(& hrng, &rand);
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4804      	ldr	r0, [pc, #16]	@ (8002c60 <rand+0x1c>)
 8002c50:	f003 fe5c 	bl	800690c <HAL_RNG_GenerateRandomNumber>
	return rand;
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20025f84 	.word	0x20025f84

08002c64 <showStartScreen>:
void shadingDemo(){
	LCD_Clear(0, LCD_COLOR_BLACK);

	Draw_Tetris_Block(40,40,80,0xCB20, 0xFC40, 0x9A20);
}
void showStartScreen(){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe f875 	bl	8000d5c <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002c72:	4823      	ldr	r0, [pc, #140]	@ (8002d00 <showStartScreen+0x9c>)
 8002c74:	f7fe f8a4 	bl	8000dc0 <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002c78:	2228      	movs	r2, #40	@ 0x28
 8002c7a:	2114      	movs	r1, #20
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe fc67 	bl	8001550 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002c82:	2246      	movs	r2, #70	@ 0x46
 8002c84:	2114      	movs	r1, #20
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7fe fc62 	bl	8001550 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 8002c8c:	2228      	movs	r2, #40	@ 0x28
 8002c8e:	215a      	movs	r1, #90	@ 0x5a
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7fe fc5d 	bl	8001550 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 8002c96:	2228      	movs	r2, #40	@ 0x28
 8002c98:	218c      	movs	r1, #140	@ 0x8c
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	f7fe fc58 	bl	8001550 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 8002ca0:	2250      	movs	r2, #80	@ 0x50
 8002ca2:	2141      	movs	r1, #65	@ 0x41
 8002ca4:	2004      	movs	r0, #4
 8002ca6:	f7fe fc53 	bl	8001550 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 8002caa:	2250      	movs	r2, #80	@ 0x50
 8002cac:	2164      	movs	r1, #100	@ 0x64
 8002cae:	2005      	movs	r0, #5
 8002cb0:	f7fe fc4e 	bl	8001550 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 8002cb4:	228c      	movs	r2, #140	@ 0x8c
 8002cb6:	2132      	movs	r1, #50	@ 0x32
 8002cb8:	2006      	movs	r0, #6
 8002cba:	f7fe fc49 	bl	8001550 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8002cbe:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002cc2:	f7fe f86d 	bl	8000da0 <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <showStartScreen+0xa0>)
 8002cc8:	2198      	movs	r1, #152	@ 0x98
 8002cca:	2064      	movs	r0, #100	@ 0x64
 8002ccc:	f7fe f918 	bl	8000f00 <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 8002cd0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	230f      	movs	r3, #15
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2330      	movs	r3, #48	@ 0x30
 8002cdc:	22b4      	movs	r2, #180	@ 0xb4
 8002cde:	21f2      	movs	r1, #242	@ 0xf2
 8002ce0:	201e      	movs	r0, #30
 8002ce2:	f7fe fceb 	bl	80016bc <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe f85a 	bl	8000da0 <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 8002cec:	4a06      	ldr	r2, [pc, #24]	@ (8002d08 <showStartScreen+0xa4>)
 8002cee:	f240 1101 	movw	r1, #257	@ 0x101
 8002cf2:	2054      	movs	r0, #84	@ 0x54
 8002cf4:	f7fe f904 	bl	8000f00 <LCD_DisplayString>
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000004 	.word	0x20000004
 8002d04:	08008c00 	.word	0x08008c00
 8002d08:	08008c08 	.word	0x08008c08

08002d0c <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	460a      	mov	r2, r1
 8002d16:	80fb      	strh	r3, [r7, #6]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	2b1d      	cmp	r3, #29
 8002d20:	d90b      	bls.n	8002d3a <startClicked+0x2e>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2bd2      	cmp	r3, #210	@ 0xd2
 8002d26:	d808      	bhi.n	8002d3a <startClicked+0x2e>
 8002d28:	88bb      	ldrh	r3, [r7, #4]
 8002d2a:	2bf1      	cmp	r3, #241	@ 0xf1
 8002d2c:	d905      	bls.n	8002d3a <startClicked+0x2e>
 8002d2e:	88bb      	ldrh	r3, [r7, #4]
 8002d30:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002d34:	d801      	bhi.n	8002d3a <startClicked+0x2e>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <startClicked+0x30>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <uint32_to_string>:

void uint32_to_string(uint32_t value, char *buffer, size_t buffer_size) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
    // Ensure the buffer is large enough to hold the maximum uint32_t value and a null terminator
    if (buffer_size < 11) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d906      	bls.n	8002d70 <uint32_to_string+0x20>
        // Handle error: buffer too small
        return;
    }
    // Format the uint32_t value as a string and store it in the buffer
    snprintf(buffer, buffer_size, "%u", (unsigned int) value);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <uint32_to_string+0x28>)
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68b8      	ldr	r0, [r7, #8]
 8002d6a:	f004 feb7 	bl	8007adc <sniprintf>
 8002d6e:	e000      	b.n	8002d72 <uint32_to_string+0x22>
        return;
 8002d70:	bf00      	nop
}
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08008c10 	.word	0x08008c10

08002d7c <showGameScreen>:

void showGameScreen(){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8002d82:	af00      	add	r7, sp, #0
	LCD_SetFont(&Font16x24);
 8002d84:	4816      	ldr	r0, [pc, #88]	@ (8002de0 <showGameScreen+0x64>)
 8002d86:	f7fe f81b 	bl	8000dc0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d8e:	f7fe f807 	bl	8000da0 <LCD_SetTextColor>

	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 8002d92:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002d96:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <showGameScreen+0x68>)
 8002d9c:	4912      	ldr	r1, [pc, #72]	@ (8002de8 <showGameScreen+0x6c>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe ffe2 	bl	8001d68 <boardWithPiece>
	Fill_Tetris_Board(
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	2216      	movs	r2, #22
 8002daa:	2137      	movs	r1, #55	@ 0x37
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fb09 	bl	80013c4 <Fill_Tetris_Board>
			LCD_PIXEL_WIDTH /2 - BOARD_WIDTH*(BLOCK_SIZE + 1)/2 ,
			BLOCK_SIZE + 10
			);

	// Next Piece
	DrawTetromino(& nextPiece, 190, 10);
 8002db2:	220a      	movs	r2, #10
 8002db4:	21be      	movs	r1, #190	@ 0xbe
 8002db6:	480d      	ldr	r0, [pc, #52]	@ (8002dec <showGameScreen+0x70>)
 8002db8:	f7fe fc28 	bl	800160c <DrawTetromino>

	// Score
	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <showGameScreen+0x74>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1d39      	adds	r1, r7, #4
 8002dc2:	220b      	movs	r2, #11
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ffc3 	bl	8002d50 <uint32_to_string>
	LCD_DisplayString(10,10,scoreStr);
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	461a      	mov	r2, r3
 8002dce:	210a      	movs	r1, #10
 8002dd0:	200a      	movs	r0, #10
 8002dd2:	f7fe f895 	bl	8000f00 <LCD_DisplayString>
}
 8002dd6:	bf00      	nop
 8002dd8:	f507 774c 	add.w	r7, r7, #816	@ 0x330
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000004 	.word	0x20000004
 8002de4:	20025e94 	.word	0x20025e94
 8002de8:	20025b74 	.word	0x20025b74
 8002dec:	20025edc 	.word	0x20025edc
 8002df0:	20025f24 	.word	0x20025f24

08002df4 <showEndScreen>:

void showEndScreen(){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
	LCD_SetFont(&Font16x24);
 8002dfa:	483c      	ldr	r0, [pc, #240]	@ (8002eec <showEndScreen+0xf8>)
 8002dfc:	f7fd ffe0 	bl	8000dc0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002e00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e04:	f7fd ffcc 	bl	8000da0 <LCD_SetTextColor>

	LCD_Clear(0,0x2800); // DARK RED
 8002e08:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd ffa5 	bl	8000d5c <LCD_Clear>
	char scoreStr[11];
	uint32_to_string(pointsScored,(char *)&scoreStr,11);
 8002e12:	4b37      	ldr	r3, [pc, #220]	@ (8002ef0 <showEndScreen+0xfc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1d39      	adds	r1, r7, #4
 8002e18:	220b      	movs	r2, #11
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff98 	bl	8002d50 <uint32_to_string>
	LCD_DisplayString(10,200,scoreStr);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	461a      	mov	r2, r3
 8002e24:	21c8      	movs	r1, #200	@ 0xc8
 8002e26:	200a      	movs	r0, #10
 8002e28:	f7fe f86a 	bl	8000f00 <LCD_DisplayString>
	LCD_DisplayString(10,170,"You Scored:");
 8002e2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <showEndScreen+0x100>)
 8002e2e:	21aa      	movs	r1, #170	@ 0xaa
 8002e30:	200a      	movs	r0, #10
 8002e32:	f7fe f865 	bl	8000f00 <LCD_DisplayString>

	LCD_DisplayString(10,10,"You Lasted:");
 8002e36:	4a30      	ldr	r2, [pc, #192]	@ (8002ef8 <showEndScreen+0x104>)
 8002e38:	210a      	movs	r1, #10
 8002e3a:	200a      	movs	r0, #10
 8002e3c:	f7fe f860 	bl	8000f00 <LCD_DisplayString>
	uint32_t timeLasted = __HAL_TIM_GET_COUNTER(&htim5)/5000;
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <showEndScreen+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <showEndScreen+0x10c>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0b1b      	lsrs	r3, r3, #12
 8002e4e:	61fb      	str	r3, [r7, #28]
	uint32_t timeLastedSec = timeLasted % 60;
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <showEndScreen+0x110>)
 8002e54:	fba3 1302 	umull	r1, r3, r3, r2
 8002e58:	0959      	lsrs	r1, r3, #5
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a5b      	subs	r3, r3, r1
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	61bb      	str	r3, [r7, #24]
	uint32_t timeLastedMin = timeLasted / 60;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4a26      	ldr	r2, [pc, #152]	@ (8002f04 <showEndScreen+0x110>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	617b      	str	r3, [r7, #20]
	uint32_t timeLastedHour = (timeLasted / 60) / 60;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <showEndScreen+0x114>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0adb      	lsrs	r3, r3, #11
 8002e7c:	613b      	str	r3, [r7, #16]

	uint32_to_string(timeLastedHour, (char *)&scoreStr,11);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	220b      	movs	r2, #11
 8002e82:	4619      	mov	r1, r3
 8002e84:	6938      	ldr	r0, [r7, #16]
 8002e86:	f7ff ff63 	bl	8002d50 <uint32_to_string>
	LCD_DisplayString(40,40,scoreStr);
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2128      	movs	r1, #40	@ 0x28
 8002e90:	2028      	movs	r0, #40	@ 0x28
 8002e92:	f7fe f835 	bl	8000f00 <LCD_DisplayString>
	LCD_DisplayChar(10,40,'H');
 8002e96:	2248      	movs	r2, #72	@ 0x48
 8002e98:	2128      	movs	r1, #40	@ 0x28
 8002e9a:	200a      	movs	r0, #10
 8002e9c:	f7fe f80e 	bl	8000ebc <LCD_DisplayChar>
	uint32_to_string(timeLastedMin, (char *)&scoreStr,11);
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	220b      	movs	r2, #11
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff52 	bl	8002d50 <uint32_to_string>
	LCD_DisplayString(40,70,scoreStr);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2146      	movs	r1, #70	@ 0x46
 8002eb2:	2028      	movs	r0, #40	@ 0x28
 8002eb4:	f7fe f824 	bl	8000f00 <LCD_DisplayString>
	LCD_DisplayChar(10,70,'M');
 8002eb8:	224d      	movs	r2, #77	@ 0x4d
 8002eba:	2146      	movs	r1, #70	@ 0x46
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	f7fd fffd 	bl	8000ebc <LCD_DisplayChar>
	uint32_to_string(timeLastedSec, (char *)&scoreStr,11);
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	220b      	movs	r2, #11
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	69b8      	ldr	r0, [r7, #24]
 8002eca:	f7ff ff41 	bl	8002d50 <uint32_to_string>
	LCD_DisplayString(40,100,scoreStr);
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2164      	movs	r1, #100	@ 0x64
 8002ed4:	2028      	movs	r0, #40	@ 0x28
 8002ed6:	f7fe f813 	bl	8000f00 <LCD_DisplayString>
	LCD_DisplayChar(10,100,'S');
 8002eda:	2253      	movs	r2, #83	@ 0x53
 8002edc:	2164      	movs	r1, #100	@ 0x64
 8002ede:	200a      	movs	r0, #10
 8002ee0:	f7fd ffec 	bl	8000ebc <LCD_DisplayChar>
}
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	20025f24 	.word	0x20025f24
 8002ef4:	08008c14 	.word	0x08008c14
 8002ef8:	08008c20 	.word	0x08008c20
 8002efc:	20025fdc 	.word	0x20025fdc
 8002f00:	d1b71759 	.word	0xd1b71759
 8002f04:	88888889 	.word	0x88888889
 8002f08:	91a2b3c5 	.word	0x91a2b3c5

08002f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_MspInit+0x4c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f4a:	2007      	movs	r0, #7
 8002f4c:	f001 f82c 	bl	8003fa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a29      	ldr	r2, [pc, #164]	@ (8003020 <HAL_I2C_MspInit+0xc4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d14b      	bne.n	8003016 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a27      	ldr	r2, [pc, #156]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a20      	ldr	r2, [pc, #128]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fbc:	2312      	movs	r3, #18
 8002fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fc8:	2304      	movs	r3, #4
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4815      	ldr	r0, [pc, #84]	@ (8003028 <HAL_I2C_MspInit+0xcc>)
 8002fd4:	f001 f85e 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fde:	2312      	movs	r3, #18
 8002fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fea:	2304      	movs	r3, #4
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480d      	ldr	r0, [pc, #52]	@ (800302c <HAL_I2C_MspInit+0xd0>)
 8002ff6:	f001 f84d 	bl	8004094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 8003004:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_I2C_MspInit+0xc8>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40005c00 	.word	0x40005c00
 8003024:	40023800 	.word	0x40023800
 8003028:	40020800 	.word	0x40020800
 800302c:	40020000 	.word	0x40020000

08003030 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b09a      	sub	sp, #104	@ 0x68
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800304c:	2230      	movs	r2, #48	@ 0x30
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f004 fdba 	bl	8007bca <memset>
  if(hltdc->Instance==LTDC)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a81      	ldr	r2, [pc, #516]	@ (8003260 <HAL_LTDC_MspInit+0x230>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f040 80fb 	bne.w	8003258 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003062:	2308      	movs	r3, #8
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003066:	2364      	movs	r3, #100	@ 0x64
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800306a:	2302      	movs	r3, #2
 800306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800306e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003072:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fa5d 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003084:	f7ff fd80 	bl	8002b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	4b75      	ldr	r3, [pc, #468]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	4a74      	ldr	r2, [pc, #464]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 8003092:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003096:	6453      	str	r3, [r2, #68]	@ 0x44
 8003098:	4b72      	ldr	r3, [pc, #456]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	4a6d      	ldr	r2, [pc, #436]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	4b67      	ldr	r3, [pc, #412]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	4a66      	ldr	r2, [pc, #408]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d0:	4b64      	ldr	r3, [pc, #400]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	4b60      	ldr	r3, [pc, #384]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030e6:	f043 0302 	orr.w	r3, r3, #2
 80030ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	4b59      	ldr	r3, [pc, #356]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 8003102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003106:	6313      	str	r3, [r2, #48]	@ 0x30
 8003108:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	4b52      	ldr	r3, [pc, #328]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	4a51      	ldr	r2, [pc, #324]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	6313      	str	r3, [r2, #48]	@ 0x30
 8003124:	4b4f      	ldr	r3, [pc, #316]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	4b4b      	ldr	r3, [pc, #300]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	4a4a      	ldr	r2, [pc, #296]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003140:	4b48      	ldr	r3, [pc, #288]	@ (8003264 <HAL_LTDC_MspInit+0x234>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800314c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003150:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800315e:	230e      	movs	r3, #14
 8003160:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003166:	4619      	mov	r1, r3
 8003168:	483f      	ldr	r0, [pc, #252]	@ (8003268 <HAL_LTDC_MspInit+0x238>)
 800316a:	f000 ff93 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800316e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003172:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003180:	230e      	movs	r3, #14
 8003182:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003188:	4619      	mov	r1, r3
 800318a:	4838      	ldr	r0, [pc, #224]	@ (800326c <HAL_LTDC_MspInit+0x23c>)
 800318c:	f000 ff82 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003190:	2303      	movs	r3, #3
 8003192:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80031a0:	2309      	movs	r3, #9
 80031a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031a8:	4619      	mov	r1, r3
 80031aa:	4831      	ldr	r0, [pc, #196]	@ (8003270 <HAL_LTDC_MspInit+0x240>)
 80031ac:	f000 ff72 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80031b0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031c2:	230e      	movs	r3, #14
 80031c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031ca:	4619      	mov	r1, r3
 80031cc:	4828      	ldr	r0, [pc, #160]	@ (8003270 <HAL_LTDC_MspInit+0x240>)
 80031ce:	f000 ff61 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80031d2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80031d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031e4:	230e      	movs	r3, #14
 80031e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031ec:	4619      	mov	r1, r3
 80031ee:	4821      	ldr	r0, [pc, #132]	@ (8003274 <HAL_LTDC_MspInit+0x244>)
 80031f0:	f000 ff50 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80031f4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80031f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003206:	230e      	movs	r3, #14
 8003208:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800320a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800320e:	4619      	mov	r1, r3
 8003210:	4819      	ldr	r0, [pc, #100]	@ (8003278 <HAL_LTDC_MspInit+0x248>)
 8003212:	f000 ff3f 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003216:	2348      	movs	r3, #72	@ 0x48
 8003218:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003226:	230e      	movs	r3, #14
 8003228:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800322e:	4619      	mov	r1, r3
 8003230:	4812      	ldr	r0, [pc, #72]	@ (800327c <HAL_LTDC_MspInit+0x24c>)
 8003232:	f000 ff2f 	bl	8004094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003236:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800323a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003248:	2309      	movs	r3, #9
 800324a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800324c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003250:	4619      	mov	r1, r3
 8003252:	4808      	ldr	r0, [pc, #32]	@ (8003274 <HAL_LTDC_MspInit+0x244>)
 8003254:	f000 ff1e 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003258:	bf00      	nop
 800325a:	3768      	adds	r7, #104	@ 0x68
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40016800 	.word	0x40016800
 8003264:	40023800 	.word	0x40023800
 8003268:	40021400 	.word	0x40021400
 800326c:	40020000 	.word	0x40020000
 8003270:	40020400 	.word	0x40020400
 8003274:	40021800 	.word	0x40021800
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00

08003280 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <HAL_RNG_MspInit+0x3c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10d      	bne.n	80032ae <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RNG_MspInit+0x40>)
 8003298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_RNG_MspInit+0x40>)
 800329c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <HAL_RNG_MspInit+0x40>)
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	50060800 	.word	0x50060800
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <HAL_SPI_MspInit+0x84>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d12c      	bne.n	8003340 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_SPI_MspInit+0x88>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a17      	ldr	r2, [pc, #92]	@ (800334c <HAL_SPI_MspInit+0x88>)
 80032f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_SPI_MspInit+0x88>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_SPI_MspInit+0x88>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <HAL_SPI_MspInit+0x88>)
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	6313      	str	r3, [r2, #48]	@ 0x30
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_SPI_MspInit+0x88>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800331e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003330:	2305      	movs	r3, #5
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	4805      	ldr	r0, [pc, #20]	@ (8003350 <HAL_SPI_MspInit+0x8c>)
 800333c:	f000 feaa 	bl	8004094 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003340:	bf00      	nop
 8003342:	3728      	adds	r7, #40	@ 0x28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40015000 	.word	0x40015000
 800334c:	40023800 	.word	0x40023800
 8003350:	40021400 	.word	0x40021400

08003354 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a08      	ldr	r2, [pc, #32]	@ (8003384 <HAL_SPI_MspDeInit+0x30>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10a      	bne.n	800337c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003366:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_SPI_MspDeInit+0x34>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_SPI_MspDeInit+0x34>)
 800336c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003370:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003372:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003376:	4805      	ldr	r0, [pc, #20]	@ (800338c <HAL_SPI_MspDeInit+0x38>)
 8003378:	f001 f838 	bl	80043ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40015000 	.word	0x40015000
 8003388:	40023800 	.word	0x40023800
 800338c:	40021400 	.word	0x40021400

08003390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a0:	d116      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	201c      	movs	r0, #28
 80033c4:	f000 fdfb 	bl	8003fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033c8:	201c      	movs	r0, #28
 80033ca:	f000 fe14 	bl	8003ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033ce:	e012      	b.n	80033f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003404 <HAL_TIM_Base_MspInit+0x74>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a07      	ldr	r2, [pc, #28]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_TIM_Base_MspInit+0x70>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40000c00 	.word	0x40000c00

08003408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <NMI_Handler+0x4>

08003410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <MemManage_Handler+0x4>

08003420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <BusFault_Handler+0x4>

08003428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <UsageFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345e:	f000 fc4d 	bl	8003cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}

08003466 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800346a:	2001      	movs	r0, #1
 800346c:	f001 f8fe 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}

08003474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003478:	4802      	ldr	r0, [pc, #8]	@ (8003484 <TIM2_IRQHandler+0x10>)
 800347a:	f003 fea5 	bl	80071c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20025f94 	.word	0x20025f94

08003488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	@ (80034c0 <__NVIC_EnableIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80034ca:	f000 f9dd 	bl	8003888 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80034ce:	f000 f99d 	bl	800380c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80034d2:	2202      	movs	r2, #2
 80034d4:	2103      	movs	r1, #3
 80034d6:	2082      	movs	r0, #130	@ 0x82
 80034d8:	f000 fa2a 	bl	8003930 <I2C3_Write>
    HAL_Delay(5);
 80034dc:	2005      	movs	r0, #5
 80034de:	f000 fc2d 	bl	8003d3c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2103      	movs	r1, #3
 80034e6:	2082      	movs	r0, #130	@ 0x82
 80034e8:	f000 fa22 	bl	8003930 <I2C3_Write>
    HAL_Delay(2);
 80034ec:	2002      	movs	r0, #2
 80034ee:	f000 fc25 	bl	8003d3c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80034f2:	1cba      	adds	r2, r7, #2
 80034f4:	2302      	movs	r3, #2
 80034f6:	2100      	movs	r1, #0
 80034f8:	2082      	movs	r0, #130	@ 0x82
 80034fa:	f000 fa69 	bl	80039d0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b29a      	uxth	r2, r3
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	4313      	orrs	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f640 0211 	movw	r2, #2065	@ 0x811
 8003516:	4293      	cmp	r3, r2
 8003518:	d001      	beq.n	800351e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800351a:	2303      	movs	r3, #3
 800351c:	e095      	b.n	800364a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800351e:	2202      	movs	r2, #2
 8003520:	2103      	movs	r1, #3
 8003522:	2082      	movs	r0, #130	@ 0x82
 8003524:	f000 fa04 	bl	8003930 <I2C3_Write>
    HAL_Delay(5);
 8003528:	2005      	movs	r0, #5
 800352a:	f000 fc07 	bl	8003d3c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800352e:	2200      	movs	r2, #0
 8003530:	2103      	movs	r1, #3
 8003532:	2082      	movs	r0, #130	@ 0x82
 8003534:	f000 f9fc 	bl	8003930 <I2C3_Write>
    HAL_Delay(2);
 8003538:	2002      	movs	r0, #2
 800353a:	f000 fbff 	bl	8003d3c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800353e:	2004      	movs	r0, #4
 8003540:	f000 f887 	bl	8003652 <STMPE811_Read>
 8003544:	4603      	mov	r3, r0
 8003546:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003548:	797b      	ldrb	r3, [r7, #5]
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003550:	797b      	ldrb	r3, [r7, #5]
 8003552:	461a      	mov	r2, r3
 8003554:	2104      	movs	r1, #4
 8003556:	2082      	movs	r0, #130	@ 0x82
 8003558:	f000 f9ea 	bl	8003930 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800355c:	2004      	movs	r0, #4
 800355e:	f000 f878 	bl	8003652 <STMPE811_Read>
 8003562:	4603      	mov	r3, r0
 8003564:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003566:	797b      	ldrb	r3, [r7, #5]
 8003568:	f023 0302 	bic.w	r3, r3, #2
 800356c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800356e:	797b      	ldrb	r3, [r7, #5]
 8003570:	461a      	mov	r2, r3
 8003572:	2104      	movs	r1, #4
 8003574:	2082      	movs	r0, #130	@ 0x82
 8003576:	f000 f9db 	bl	8003930 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800357a:	2249      	movs	r2, #73	@ 0x49
 800357c:	2120      	movs	r1, #32
 800357e:	2082      	movs	r0, #130	@ 0x82
 8003580:	f000 f9d6 	bl	8003930 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003584:	2002      	movs	r0, #2
 8003586:	f000 fbd9 	bl	8003d3c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800358a:	2201      	movs	r2, #1
 800358c:	2121      	movs	r1, #33	@ 0x21
 800358e:	2082      	movs	r0, #130	@ 0x82
 8003590:	f000 f9ce 	bl	8003930 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003594:	2017      	movs	r0, #23
 8003596:	f000 f85c 	bl	8003652 <STMPE811_Read>
 800359a:	4603      	mov	r3, r0
 800359c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800359e:	797b      	ldrb	r3, [r7, #5]
 80035a0:	f043 031e 	orr.w	r3, r3, #30
 80035a4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80035a6:	797b      	ldrb	r3, [r7, #5]
 80035a8:	461a      	mov	r2, r3
 80035aa:	2117      	movs	r1, #23
 80035ac:	2082      	movs	r0, #130	@ 0x82
 80035ae:	f000 f9bf 	bl	8003930 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80035b2:	229a      	movs	r2, #154	@ 0x9a
 80035b4:	2141      	movs	r1, #65	@ 0x41
 80035b6:	2082      	movs	r0, #130	@ 0x82
 80035b8:	f000 f9ba 	bl	8003930 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80035bc:	2201      	movs	r2, #1
 80035be:	214a      	movs	r1, #74	@ 0x4a
 80035c0:	2082      	movs	r0, #130	@ 0x82
 80035c2:	f000 f9b5 	bl	8003930 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80035c6:	2201      	movs	r2, #1
 80035c8:	214b      	movs	r1, #75	@ 0x4b
 80035ca:	2082      	movs	r0, #130	@ 0x82
 80035cc:	f000 f9b0 	bl	8003930 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80035d0:	2200      	movs	r2, #0
 80035d2:	214b      	movs	r1, #75	@ 0x4b
 80035d4:	2082      	movs	r0, #130	@ 0x82
 80035d6:	f000 f9ab 	bl	8003930 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80035da:	2201      	movs	r2, #1
 80035dc:	2156      	movs	r1, #86	@ 0x56
 80035de:	2082      	movs	r0, #130	@ 0x82
 80035e0:	f000 f9a6 	bl	8003930 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80035e4:	2201      	movs	r2, #1
 80035e6:	2158      	movs	r1, #88	@ 0x58
 80035e8:	2082      	movs	r0, #130	@ 0x82
 80035ea:	f000 f9a1 	bl	8003930 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80035ee:	2203      	movs	r2, #3
 80035f0:	2140      	movs	r1, #64	@ 0x40
 80035f2:	2082      	movs	r0, #130	@ 0x82
 80035f4:	f000 f99c 	bl	8003930 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80035f8:	22ff      	movs	r2, #255	@ 0xff
 80035fa:	210b      	movs	r1, #11
 80035fc:	2082      	movs	r0, #130	@ 0x82
 80035fe:	f000 f997 	bl	8003930 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003602:	f000 f8c1 	bl	8003788 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003606:	2009      	movs	r0, #9
 8003608:	f000 f823 	bl	8003652 <STMPE811_Read>
 800360c:	4603      	mov	r3, r0
 800360e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003610:	797b      	ldrb	r3, [r7, #5]
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003618:	797b      	ldrb	r3, [r7, #5]
 800361a:	461a      	mov	r2, r3
 800361c:	2109      	movs	r1, #9
 800361e:	2082      	movs	r0, #130	@ 0x82
 8003620:	f000 f986 	bl	8003930 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003624:	200a      	movs	r0, #10
 8003626:	f000 f814 	bl	8003652 <STMPE811_Read>
 800362a:	4603      	mov	r3, r0
 800362c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800362e:	797b      	ldrb	r3, [r7, #5]
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003636:	797b      	ldrb	r3, [r7, #5]
 8003638:	461a      	mov	r2, r3
 800363a:	210a      	movs	r1, #10
 800363c:	2082      	movs	r0, #130	@ 0x82
 800363e:	f000 f977 	bl	8003930 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003642:	20c8      	movs	r0, #200	@ 0xc8
 8003644:	f000 fb7a 	bl	8003d3c <HAL_Delay>

    return STMPE811_State_Ok;
 8003648:	2302      	movs	r3, #2

}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800365c:	f107 020f 	add.w	r2, r7, #15
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4619      	mov	r1, r3
 8003664:	2082      	movs	r0, #130	@ 0x82
 8003666:	f000 f98d 	bl	8003984 <I2C3_Read>

    return readData;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	460a      	mov	r2, r1
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	4613      	mov	r3, r2
 8003682:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003684:	79ba      	ldrb	r2, [r7, #6]
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	4619      	mov	r1, r3
 800368a:	2082      	movs	r0, #130	@ 0x82
 800368c:	f000 f950 	bl	8003930 <I2C3_Write>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	799b      	ldrb	r3, [r3, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d117      	bne.n	80036d8 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f9b1 	bl	8003a14 <TM_STMPE811_ReadX>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	885b      	ldrh	r3, [r3, #2]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fa04 	bl	8003ad0 <TM_STMPE811_ReadY>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80036ce:	3301      	adds	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	805a      	strh	r2, [r3, #2]
 80036d6:	e048      	b.n	800376a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	799b      	ldrb	r3, [r3, #6]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d112      	bne.n	8003706 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f995 	bl	8003a14 <TM_STMPE811_ReadX>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	885b      	ldrh	r3, [r3, #2]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f9ea 	bl	8003ad0 <TM_STMPE811_ReadY>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	805a      	strh	r2, [r3, #2]
 8003704:	e031      	b.n	800376a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	799b      	ldrb	r3, [r3, #6]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d115      	bne.n	800373a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	885b      	ldrh	r3, [r3, #2]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f97e 	bl	8003a14 <TM_STMPE811_ReadX>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f9d3 	bl	8003ad0 <TM_STMPE811_ReadY>
 800372a:	4603      	mov	r3, r0
 800372c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003730:	3301      	adds	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	801a      	strh	r2, [r3, #0]
 8003738:	e017      	b.n	800376a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	799b      	ldrb	r3, [r3, #6]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d113      	bne.n	800376a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f964 	bl	8003a14 <TM_STMPE811_ReadX>
 800374c:	4603      	mov	r3, r0
 800374e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f9b7 	bl	8003ad0 <TM_STMPE811_ReadY>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800376a:	2201      	movs	r2, #1
 800376c:	214b      	movs	r1, #75	@ 0x4b
 800376e:	2082      	movs	r0, #130	@ 0x82
 8003770:	f000 f8de 	bl	8003930 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003774:	2200      	movs	r2, #0
 8003776:	214b      	movs	r1, #75	@ 0x4b
 8003778:	2082      	movs	r0, #130	@ 0x82
 800377a:	f000 f8d9 	bl	8003930 <I2C3_Write>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4b14      	ldr	r3, [pc, #80]	@ (80037e4 <enableInterruptSupportForTouch+0x5c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a13      	ldr	r2, [pc, #76]	@ (80037e4 <enableInterruptSupportForTouch+0x5c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <enableInterruptSupportForTouch+0x5c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037bc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80037be:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80037c2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037c8:	2302      	movs	r3, #2
 80037ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	@ (80037e8 <enableInterruptSupportForTouch+0x60>)
 80037d2:	f000 fc5f 	bl	8004094 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037d6:	2028      	movs	r0, #40	@ 0x28
 80037d8:	f7ff fe56 	bl	8003488 <__NVIC_EnableIRQ>

}
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020000 	.word	0x40020000

080037ec <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20026084 	.word	0x20026084

0800380c <I2C3_Init>:

static void I2C3_Init()
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <I2C3_Init+0x6c>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <I2C3_Init+0x6c>)
 800381c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003820:	6413      	str	r3, [r2, #64]	@ 0x40
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <I2C3_Init+0x6c>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <I2C3_Init+0x70>)
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <I2C3_Init+0x74>)
 8003832:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003834:	4b11      	ldr	r3, [pc, #68]	@ (800387c <I2C3_Init+0x70>)
 8003836:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <I2C3_Init+0x78>)
 8003838:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <I2C3_Init+0x70>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003840:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <I2C3_Init+0x70>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <I2C3_Init+0x70>)
 8003848:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800384c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <I2C3_Init+0x70>)
 8003850:	2200      	movs	r2, #0
 8003852:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003854:	4b09      	ldr	r3, [pc, #36]	@ (800387c <I2C3_Init+0x70>)
 8003856:	2200      	movs	r2, #0
 8003858:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800385a:	4808      	ldr	r0, [pc, #32]	@ (800387c <I2C3_Init+0x70>)
 800385c:	f000 ff1e 	bl	800469c <HAL_I2C_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <I2C3_Init+0x5e>
    }
    return;
 800386e:	bf00      	nop
}
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	20026030 	.word	0x20026030
 8003880:	40005c00 	.word	0x40005c00
 8003884:	000186a0 	.word	0x000186a0

08003888 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <I2C3_MspInit+0x9c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038dc:	2312      	movs	r3, #18
 80038de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038e8:	2304      	movs	r3, #4
 80038ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	4619      	mov	r1, r3
 80038f2:	480d      	ldr	r0, [pc, #52]	@ (8003928 <I2C3_MspInit+0xa0>)
 80038f4:	f000 fbce 	bl	8004094 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fe:	2312      	movs	r3, #18
 8003900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800390a:	2304      	movs	r3, #4
 800390c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	4619      	mov	r1, r3
 8003914:	4805      	ldr	r0, [pc, #20]	@ (800392c <I2C3_MspInit+0xa4>)
 8003916:	f000 fbbd 	bl	8004094 <HAL_GPIO_Init>
    
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40020800 	.word	0x40020800
 800392c:	40020000 	.word	0x40020000

08003930 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af04      	add	r7, sp, #16
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
 800393a:	460b      	mov	r3, r1
 800393c:	717b      	strb	r3, [r7, #5]
 800393e:	4613      	mov	r3, r2
 8003940:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003942:	793b      	ldrb	r3, [r7, #4]
 8003944:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003946:	797b      	ldrb	r3, [r7, #5]
 8003948:	b29a      	uxth	r2, r3
 800394a:	88f9      	ldrh	r1, [r7, #6]
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <I2C3_Write+0x48>)
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	2301      	movs	r3, #1
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	f107 030f 	add.w	r3, r7, #15
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2301      	movs	r3, #1
 800395c:	4807      	ldr	r0, [pc, #28]	@ (800397c <I2C3_Write+0x4c>)
 800395e:	f000 ffe1 	bl	8004924 <HAL_I2C_Mem_Write>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <I2C3_Write+0x50>)
 8003968:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800396a:	f7ff ff3f 	bl	80037ec <verifyHAL_I2C_IS_OKAY>
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	0003d090 	.word	0x0003d090
 800397c:	20026030 	.word	0x20026030
 8003980:	20026084 	.word	0x20026084

08003984 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af04      	add	r7, sp, #16
 800398a:	4603      	mov	r3, r0
 800398c:	603a      	str	r2, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
 8003990:	460b      	mov	r3, r1
 8003992:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	b299      	uxth	r1, r3
 8003998:	79bb      	ldrb	r3, [r7, #6]
 800399a:	b29a      	uxth	r2, r3
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <I2C3_Read+0x40>)
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	2301      	movs	r3, #1
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2301      	movs	r3, #1
 80039aa:	4807      	ldr	r0, [pc, #28]	@ (80039c8 <I2C3_Read+0x44>)
 80039ac:	f001 f8b4 	bl	8004b18 <HAL_I2C_Mem_Read>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <I2C3_Read+0x48>)
 80039b6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80039b8:	f7ff ff18 	bl	80037ec <verifyHAL_I2C_IS_OKAY>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	0003d090 	.word	0x0003d090
 80039c8:	20026030 	.word	0x20026030
 80039cc:	20026084 	.word	0x20026084

080039d0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	603a      	str	r2, [r7, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
 80039de:	460b      	mov	r3, r1
 80039e0:	71bb      	strb	r3, [r7, #6]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	b299      	uxth	r1, r3
 80039ea:	79bb      	ldrb	r3, [r7, #6]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <I2C3_MulitByteRead+0x3c>)
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	88bb      	ldrh	r3, [r7, #4]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <I2C3_MulitByteRead+0x40>)
 80039fe:	f001 f88b 	bl	8004b18 <HAL_I2C_Mem_Read>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	0003d090 	.word	0x0003d090
 8003a10:	20026030 	.word	0x20026030

08003a14 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003a1e:	204d      	movs	r0, #77	@ 0x4d
 8003a20:	f7ff fe17 	bl	8003652 <STMPE811_Read>
 8003a24:	4603      	mov	r3, r0
 8003a26:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003a28:	204e      	movs	r0, #78	@ 0x4e
 8003a2a:	f7ff fe12 	bl	8003652 <STMPE811_Read>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003a32:	7a7b      	ldrb	r3, [r7, #9]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7a3b      	ldrb	r3, [r7, #8]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	dc06      	bgt.n	8003a5a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003a4c:	89fb      	ldrh	r3, [r7, #14]
 8003a4e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003a52:	330c      	adds	r3, #12
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	81fb      	strh	r3, [r7, #14]
 8003a58:	e005      	b.n	8003a66 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003a60:	3308      	adds	r3, #8
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <TM_STMPE811_ReadX+0xb8>)
 8003a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a70:	441a      	add	r2, r3
 8003a72:	10d2      	asrs	r2, r2, #3
 8003a74:	17db      	asrs	r3, r3, #31
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a7e:	2bef      	cmp	r3, #239	@ 0xef
 8003a80:	dd02      	ble.n	8003a88 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003a82:	23ef      	movs	r3, #239	@ 0xef
 8003a84:	81fb      	strh	r3, [r7, #14]
 8003a86:	e005      	b.n	8003a94 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003a88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da01      	bge.n	8003a94 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003a94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	dd05      	ble.n	8003aaa <TM_STMPE811_ReadX+0x96>
 8003a9e:	89fa      	ldrh	r2, [r7, #14]
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	e004      	b.n	8003ab4 <TM_STMPE811_ReadX+0xa0>
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003ab6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	dd01      	ble.n	8003ac2 <TM_STMPE811_ReadX+0xae>
        return val;
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	e000      	b.n	8003ac4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	88888889 	.word	0x88888889

08003ad0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003ada:	204f      	movs	r0, #79	@ 0x4f
 8003adc:	f7ff fdb9 	bl	8003652 <STMPE811_Read>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003ae4:	2050      	movs	r0, #80	@ 0x50
 8003ae6:	f7ff fdb4 	bl	8003652 <STMPE811_Read>
 8003aea:	4603      	mov	r3, r0
 8003aec:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003aee:	7a7b      	ldrb	r3, [r7, #9]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	7a3b      	ldrb	r3, [r7, #8]
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <TM_STMPE811_ReadY+0xa0>)
 8003b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b10:	1052      	asrs	r2, r2, #1
 8003b12:	17db      	asrs	r3, r3, #31
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	dc02      	bgt.n	8003b26 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	81fb      	strh	r3, [r7, #14]
 8003b24:	e007      	b.n	8003b36 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b2e:	db02      	blt.n	8003b36 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003b30:	f240 133f 	movw	r3, #319	@ 0x13f
 8003b34:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003b36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dd05      	ble.n	8003b4c <TM_STMPE811_ReadY+0x7c>
 8003b40:	89fa      	ldrh	r2, [r7, #14]
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b21b      	sxth	r3, r3
 8003b4a:	e004      	b.n	8003b56 <TM_STMPE811_ReadY+0x86>
 8003b4c:	89fb      	ldrh	r3, [r7, #14]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	dd01      	ble.n	8003b64 <TM_STMPE811_ReadY+0x94>
        return val;
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	e000      	b.n	8003b66 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003b64:	88fb      	ldrh	r3, [r7, #6]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2e8ba2e9 	.word	0x2e8ba2e9

08003b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b7c:	4a14      	ldr	r2, [pc, #80]	@ (8003bd0 <_sbrk+0x5c>)
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <_sbrk+0x60>)
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <_sbrk+0x64>)
 8003b92:	4a12      	ldr	r2, [pc, #72]	@ (8003bdc <_sbrk+0x68>)
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <_sbrk+0x64>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba4:	f004 f860 	bl	8007c68 <__errno>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	220c      	movs	r2, #12
 8003bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	e009      	b.n	8003bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <_sbrk+0x64>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <_sbrk+0x64>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <_sbrk+0x64>)
 8003bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20030000 	.word	0x20030000
 8003bd4:	00000400 	.word	0x00000400
 8003bd8:	20026088 	.word	0x20026088
 8003bdc:	200261e0 	.word	0x200261e0

08003be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <SystemInit+0x20>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	4a05      	ldr	r2, [pc, #20]	@ (8003c00 <SystemInit+0x20>)
 8003bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c08:	f7ff ffea 	bl	8003be0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c0c:	480c      	ldr	r0, [pc, #48]	@ (8003c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c0e:	490d      	ldr	r1, [pc, #52]	@ (8003c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c14:	e002      	b.n	8003c1c <LoopCopyDataInit>

08003c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c1a:	3304      	adds	r3, #4

08003c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c20:	d3f9      	bcc.n	8003c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c22:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c24:	4c0a      	ldr	r4, [pc, #40]	@ (8003c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c28:	e001      	b.n	8003c2e <LoopFillZerobss>

08003c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c2c:	3204      	adds	r2, #4

08003c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c30:	d3fb      	bcc.n	8003c2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c32:	f004 f81f 	bl	8007c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c36:	f7fe fc21 	bl	800247c <main>
  bx  lr    
 8003c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c44:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8003c48:	08009e58 	.word	0x08009e58
  ldr r2, =_sbss
 8003c4c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8003c50:	200261dc 	.word	0x200261dc

08003c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c54:	e7fe      	b.n	8003c54 <ADC_IRQHandler>
	...

08003c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c98 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_Init+0x40>)
 8003c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_Init+0x40>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c98 <HAL_Init+0x40>)
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c74:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_Init+0x40>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a07      	ldr	r2, [pc, #28]	@ (8003c98 <HAL_Init+0x40>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f000 f991 	bl	8003fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f000 f808 	bl	8003c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c8c:	f7ff f93e 	bl	8002f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ca4:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_InitTick+0x54>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_InitTick+0x58>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f9b7 	bl	800402e <HAL_SYSTICK_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00e      	b.n	8003ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0f      	cmp	r3, #15
 8003cce:	d80a      	bhi.n	8003ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f000 f971 	bl	8003fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cdc:	4a06      	ldr	r2, [pc, #24]	@ (8003cf8 <HAL_InitTick+0x5c>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200001fc 	.word	0x200001fc
 8003cf4:	20000204 	.word	0x20000204
 8003cf8:	20000200 	.word	0x20000200

08003cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_IncTick+0x20>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_IncTick+0x24>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4a04      	ldr	r2, [pc, #16]	@ (8003d20 <HAL_IncTick+0x24>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000204 	.word	0x20000204
 8003d20:	2002608c 	.word	0x2002608c

08003d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return uwTick;
 8003d28:	4b03      	ldr	r3, [pc, #12]	@ (8003d38 <HAL_GetTick+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2002608c 	.word	0x2002608c

08003d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff ffee 	bl	8003d24 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d005      	beq.n	8003d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d56:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <HAL_Delay+0x44>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d62:	bf00      	nop
 8003d64:	f7ff ffde 	bl	8003d24 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d8f7      	bhi.n	8003d64 <HAL_Delay+0x28>
  {
  }
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000204 	.word	0x20000204

08003d84 <__NVIC_SetPriorityGrouping>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db6:	4a04      	ldr	r2, [pc, #16]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	60d3      	str	r3, [r2, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_GetPriorityGrouping>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <__NVIC_EnableIRQ+0x38>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db12      	blt.n	8003e5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <__NVIC_DisableIRQ+0x44>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	3320      	adds	r3, #32
 8003e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e50:	f3bf 8f4f 	dsb	sy
}
 8003e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e56:	f3bf 8f6f 	isb	sy
}
 8003e5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100

08003e6c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	db0c      	blt.n	8003e98 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	f003 021f 	and.w	r2, r3, #31
 8003e84:	4907      	ldr	r1, [pc, #28]	@ (8003ea4 <__NVIC_ClearPendingIRQ+0x38>)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e92:	3360      	adds	r3, #96	@ 0x60
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db0a      	blt.n	8003ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	490c      	ldr	r1, [pc, #48]	@ (8003ef4 <__NVIC_SetPriority+0x4c>)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed0:	e00a      	b.n	8003ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	4908      	ldr	r1, [pc, #32]	@ (8003ef8 <__NVIC_SetPriority+0x50>)
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	3b04      	subs	r3, #4
 8003ee0:	0112      	lsls	r2, r2, #4
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	761a      	strb	r2, [r3, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000e100 	.word	0xe000e100
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	@ 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f1c3 0307 	rsb	r3, r3, #7
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	bf28      	it	cs
 8003f1a:	2304      	movcs	r3, #4
 8003f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d902      	bls.n	8003f2c <NVIC_EncodePriority+0x30>
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3b03      	subs	r3, #3
 8003f2a:	e000      	b.n	8003f2e <NVIC_EncodePriority+0x32>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	401a      	ands	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f44:	f04f 31ff 	mov.w	r1, #4294967295
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	4313      	orrs	r3, r2
         );
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3724      	adds	r7, #36	@ 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f74:	d301      	bcc.n	8003f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f76:	2301      	movs	r3, #1
 8003f78:	e00f      	b.n	8003f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <SysTick_Config+0x40>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f82:	210f      	movs	r1, #15
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	f7ff ff8e 	bl	8003ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <SysTick_Config+0x40>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f92:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <SysTick_Config+0x40>)
 8003f94:	2207      	movs	r2, #7
 8003f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	e000e010 	.word	0xe000e010

08003fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fee7 	bl	8003d84 <__NVIC_SetPriorityGrouping>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd0:	f7ff fefc 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8003fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	6978      	ldr	r0, [r7, #20]
 8003fdc:	f7ff ff8e 	bl	8003efc <NVIC_EncodePriority>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff5d 	bl	8003ea8 <__NVIC_SetPriority>
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff feef 	bl	8003de8 <__NVIC_EnableIRQ>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff feff 	bl	8003e24 <__NVIC_DisableIRQ>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ff94 	bl	8003f64 <SysTick_Config>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff09 	bl	8003e6c <__NVIC_ClearPendingIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2201      	movs	r2, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800407e:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_EXTI_ClearPending+0x2c>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6153      	str	r3, [r2, #20]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40013c00 	.word	0x40013c00

08004094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	@ 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e177      	b.n	80043a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b0:	2201      	movs	r2, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f040 8166 	bne.w	800439a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d005      	beq.n	80040e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d130      	bne.n	8004148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	2203      	movs	r2, #3
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411c:	2201      	movs	r2, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 0201 	and.w	r2, r3, #1
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b03      	cmp	r3, #3
 8004152:	d017      	beq.n	8004184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d123      	bne.n	80041d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	08da      	lsrs	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3208      	adds	r2, #8
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0203 	and.w	r2, r3, #3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80c0 	beq.w	800439a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <HAL_GPIO_Init+0x324>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	4a65      	ldr	r2, [pc, #404]	@ (80043b8 <HAL_GPIO_Init+0x324>)
 8004224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004228:	6453      	str	r3, [r2, #68]	@ 0x44
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_GPIO_Init+0x324>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004236:	4a61      	ldr	r2, [pc, #388]	@ (80043bc <HAL_GPIO_Init+0x328>)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3302      	adds	r3, #2
 800423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	220f      	movs	r2, #15
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a58      	ldr	r2, [pc, #352]	@ (80043c0 <HAL_GPIO_Init+0x32c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d037      	beq.n	80042d2 <HAL_GPIO_Init+0x23e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a57      	ldr	r2, [pc, #348]	@ (80043c4 <HAL_GPIO_Init+0x330>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_GPIO_Init+0x23a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a56      	ldr	r2, [pc, #344]	@ (80043c8 <HAL_GPIO_Init+0x334>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02b      	beq.n	80042ca <HAL_GPIO_Init+0x236>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a55      	ldr	r2, [pc, #340]	@ (80043cc <HAL_GPIO_Init+0x338>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d025      	beq.n	80042c6 <HAL_GPIO_Init+0x232>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a54      	ldr	r2, [pc, #336]	@ (80043d0 <HAL_GPIO_Init+0x33c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01f      	beq.n	80042c2 <HAL_GPIO_Init+0x22e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a53      	ldr	r2, [pc, #332]	@ (80043d4 <HAL_GPIO_Init+0x340>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d019      	beq.n	80042be <HAL_GPIO_Init+0x22a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a52      	ldr	r2, [pc, #328]	@ (80043d8 <HAL_GPIO_Init+0x344>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_GPIO_Init+0x226>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a51      	ldr	r2, [pc, #324]	@ (80043dc <HAL_GPIO_Init+0x348>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00d      	beq.n	80042b6 <HAL_GPIO_Init+0x222>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a50      	ldr	r2, [pc, #320]	@ (80043e0 <HAL_GPIO_Init+0x34c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <HAL_GPIO_Init+0x21e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4f      	ldr	r2, [pc, #316]	@ (80043e4 <HAL_GPIO_Init+0x350>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_GPIO_Init+0x21a>
 80042aa:	2309      	movs	r3, #9
 80042ac:	e012      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042ae:	230a      	movs	r3, #10
 80042b0:	e010      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042b2:	2308      	movs	r3, #8
 80042b4:	e00e      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042b6:	2307      	movs	r3, #7
 80042b8:	e00c      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042ba:	2306      	movs	r3, #6
 80042bc:	e00a      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042be:	2305      	movs	r3, #5
 80042c0:	e008      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042c2:	2304      	movs	r3, #4
 80042c4:	e006      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042c6:	2303      	movs	r3, #3
 80042c8:	e004      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e002      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_GPIO_Init+0x240>
 80042d2:	2300      	movs	r3, #0
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	f002 0203 	and.w	r2, r2, #3
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	4093      	lsls	r3, r2
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e4:	4935      	ldr	r1, [pc, #212]	@ (80043bc <HAL_GPIO_Init+0x328>)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	089b      	lsrs	r3, r3, #2
 80042ea:	3302      	adds	r3, #2
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042f2:	4b3d      	ldr	r3, [pc, #244]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004316:	4a34      	ldr	r2, [pc, #208]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800431c:	4b32      	ldr	r3, [pc, #200]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004340:	4a29      	ldr	r2, [pc, #164]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004346:	4b28      	ldr	r3, [pc, #160]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800436a:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004394:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <HAL_GPIO_Init+0x354>)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	f67f ae84 	bls.w	80040b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3724      	adds	r7, #36	@ 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40013800 	.word	0x40013800
 80043c0:	40020000 	.word	0x40020000
 80043c4:	40020400 	.word	0x40020400
 80043c8:	40020800 	.word	0x40020800
 80043cc:	40020c00 	.word	0x40020c00
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40021400 	.word	0x40021400
 80043d8:	40021800 	.word	0x40021800
 80043dc:	40021c00 	.word	0x40021c00
 80043e0:	40022000 	.word	0x40022000
 80043e4:	40022400 	.word	0x40022400
 80043e8:	40013c00 	.word	0x40013c00

080043ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e0d9      	b.n	80045bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004408:	2201      	movs	r2, #1
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	f040 80c9 	bne.w	80045b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004424:	4a6b      	ldr	r2, [pc, #428]	@ (80045d4 <HAL_GPIO_DeInit+0x1e8>)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	3302      	adds	r3, #2
 800442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004430:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	220f      	movs	r2, #15
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	4013      	ands	r3, r2
 8004444:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a63      	ldr	r2, [pc, #396]	@ (80045d8 <HAL_GPIO_DeInit+0x1ec>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d037      	beq.n	80044be <HAL_GPIO_DeInit+0xd2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a62      	ldr	r2, [pc, #392]	@ (80045dc <HAL_GPIO_DeInit+0x1f0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d031      	beq.n	80044ba <HAL_GPIO_DeInit+0xce>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a61      	ldr	r2, [pc, #388]	@ (80045e0 <HAL_GPIO_DeInit+0x1f4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02b      	beq.n	80044b6 <HAL_GPIO_DeInit+0xca>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a60      	ldr	r2, [pc, #384]	@ (80045e4 <HAL_GPIO_DeInit+0x1f8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_DeInit+0xc6>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a5f      	ldr	r2, [pc, #380]	@ (80045e8 <HAL_GPIO_DeInit+0x1fc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <HAL_GPIO_DeInit+0xc2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a5e      	ldr	r2, [pc, #376]	@ (80045ec <HAL_GPIO_DeInit+0x200>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d019      	beq.n	80044aa <HAL_GPIO_DeInit+0xbe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a5d      	ldr	r2, [pc, #372]	@ (80045f0 <HAL_GPIO_DeInit+0x204>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_GPIO_DeInit+0xba>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a5c      	ldr	r2, [pc, #368]	@ (80045f4 <HAL_GPIO_DeInit+0x208>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00d      	beq.n	80044a2 <HAL_GPIO_DeInit+0xb6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a5b      	ldr	r2, [pc, #364]	@ (80045f8 <HAL_GPIO_DeInit+0x20c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_GPIO_DeInit+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a5a      	ldr	r2, [pc, #360]	@ (80045fc <HAL_GPIO_DeInit+0x210>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_GPIO_DeInit+0xae>
 8004496:	2309      	movs	r3, #9
 8004498:	e012      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 800449a:	230a      	movs	r3, #10
 800449c:	e010      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 800449e:	2308      	movs	r3, #8
 80044a0:	e00e      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044a2:	2307      	movs	r3, #7
 80044a4:	e00c      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044a6:	2306      	movs	r3, #6
 80044a8:	e00a      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044aa:	2305      	movs	r3, #5
 80044ac:	e008      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044ae:	2304      	movs	r3, #4
 80044b0:	e006      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044b2:	2303      	movs	r3, #3
 80044b4:	e004      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e002      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_GPIO_DeInit+0xd4>
 80044be:	2300      	movs	r3, #0
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	f002 0203 	and.w	r2, r2, #3
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	4093      	lsls	r3, r2
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d132      	bne.n	8004536 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80044d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	4949      	ldr	r1, [pc, #292]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044da:	4013      	ands	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80044de:	4b48      	ldr	r3, [pc, #288]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	4946      	ldr	r1, [pc, #280]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80044ec:	4b44      	ldr	r3, [pc, #272]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	4942      	ldr	r1, [pc, #264]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80044fa:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	493f      	ldr	r1, [pc, #252]	@ (8004600 <HAL_GPIO_DeInit+0x214>)
 8004504:	4013      	ands	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004518:	4a2e      	ldr	r2, [pc, #184]	@ (80045d4 <HAL_GPIO_DeInit+0x1e8>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	43da      	mvns	r2, r3
 8004528:	482a      	ldr	r0, [pc, #168]	@ (80045d4 <HAL_GPIO_DeInit+0x1e8>)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	400a      	ands	r2, r1
 8004530:	3302      	adds	r3, #2
 8004532:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2103      	movs	r1, #3
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	08da      	lsrs	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3208      	adds	r2, #8
 8004554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	08d2      	lsrs	r2, r2, #3
 800456c:	4019      	ands	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2103      	movs	r1, #3
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2101      	movs	r1, #1
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2103      	movs	r1, #3
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	3301      	adds	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f af22 	bls.w	8004408 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40013800 	.word	0x40013800
 80045d8:	40020000 	.word	0x40020000
 80045dc:	40020400 	.word	0x40020400
 80045e0:	40020800 	.word	0x40020800
 80045e4:	40020c00 	.word	0x40020c00
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40021400 	.word	0x40021400
 80045f0:	40021800 	.word	0x40021800
 80045f4:	40021c00 	.word	0x40021c00
 80045f8:	40022000 	.word	0x40022000
 80045fc:	40022400 	.word	0x40022400
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
 8004610:	4613      	mov	r3, r2
 8004612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004614:	787b      	ldrb	r3, [r7, #1]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004620:	e003      	b.n	800462a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004622:	887b      	ldrh	r3, [r7, #2]
 8004624:	041a      	lsls	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	619a      	str	r2, [r3, #24]
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	041a      	lsls	r2, r3, #16
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43d9      	mvns	r1, r3
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	400b      	ands	r3, r1
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	619a      	str	r2, [r3, #24]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004682:	4a05      	ldr	r2, [pc, #20]	@ (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fa3e 	bl	8002b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40013c00 	.word	0x40013c00

0800469c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e12b      	b.n	8004906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe fc4a 	bl	8002f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	@ 0x24
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004700:	f001 ff06 	bl	8006510 <HAL_RCC_GetPCLK1Freq>
 8004704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a81      	ldr	r2, [pc, #516]	@ (8004910 <HAL_I2C_Init+0x274>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d807      	bhi.n	8004720 <HAL_I2C_Init+0x84>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a80      	ldr	r2, [pc, #512]	@ (8004914 <HAL_I2C_Init+0x278>)
 8004714:	4293      	cmp	r3, r2
 8004716:	bf94      	ite	ls
 8004718:	2301      	movls	r3, #1
 800471a:	2300      	movhi	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e006      	b.n	800472e <HAL_I2C_Init+0x92>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a7d      	ldr	r2, [pc, #500]	@ (8004918 <HAL_I2C_Init+0x27c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0e7      	b.n	8004906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a78      	ldr	r2, [pc, #480]	@ (800491c <HAL_I2C_Init+0x280>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0c9b      	lsrs	r3, r3, #18
 8004740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a6a      	ldr	r2, [pc, #424]	@ (8004910 <HAL_I2C_Init+0x274>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d802      	bhi.n	8004770 <HAL_I2C_Init+0xd4>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3301      	adds	r3, #1
 800476e:	e009      	b.n	8004784 <HAL_I2C_Init+0xe8>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	4a69      	ldr	r2, [pc, #420]	@ (8004920 <HAL_I2C_Init+0x284>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	3301      	adds	r3, #1
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	430b      	orrs	r3, r1
 800478a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004796:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	495c      	ldr	r1, [pc, #368]	@ (8004910 <HAL_I2C_Init+0x274>)
 80047a0:	428b      	cmp	r3, r1
 80047a2:	d819      	bhi.n	80047d8 <HAL_I2C_Init+0x13c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1e59      	subs	r1, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047b8:	400b      	ands	r3, r1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_I2C_Init+0x138>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1e59      	subs	r1, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d2:	e051      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e04f      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <HAL_I2C_Init+0x168>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e58      	subs	r0, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e012      	b.n	800482a <HAL_I2C_Init+0x18e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Init+0x196>
 800482e:	2301      	movs	r3, #1
 8004830:	e022      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <HAL_I2C_Init+0x1bc>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1e58      	subs	r0, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	440b      	add	r3, r1
 8004848:	fbb0 f3f3 	udiv	r3, r0, r3
 800484c:	3301      	adds	r3, #1
 800484e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004856:	e00f      	b.n	8004878 <HAL_I2C_Init+0x1dc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	0099      	lsls	r1, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	fbb0 f3f3 	udiv	r3, r0, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	4313      	orrs	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6911      	ldr	r1, [r2, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	000186a0 	.word	0x000186a0
 8004914:	001e847f 	.word	0x001e847f
 8004918:	003d08ff 	.word	0x003d08ff
 800491c:	431bde83 	.word	0x431bde83
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800493e:	f7ff f9f1 	bl	8003d24 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	f040 80d9 	bne.w	8004b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2319      	movs	r3, #25
 8004958:	2201      	movs	r2, #1
 800495a:	496d      	ldr	r1, [pc, #436]	@ (8004b10 <HAL_I2C_Mem_Write+0x1ec>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fc8b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
 800496a:	e0cc      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_I2C_Mem_Write+0x56>
 8004976:	2302      	movs	r3, #2
 8004978:	e0c5      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d007      	beq.n	80049a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2221      	movs	r2, #33	@ 0x21
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a4d      	ldr	r2, [pc, #308]	@ (8004b14 <HAL_I2C_Mem_Write+0x1f0>)
 80049e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e2:	88f8      	ldrh	r0, [r7, #6]
 80049e4:	893a      	ldrh	r2, [r7, #8]
 80049e6:	8979      	ldrh	r1, [r7, #10]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4603      	mov	r3, r0
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fac2 	bl	8004f7c <I2C_RequestMemoryWrite>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d052      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e081      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fd50 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d107      	bne.n	8004a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1aa      	bne.n	8004a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fd43 	bl	800553c <I2C_WaitOnBTFFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e016      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	00100002 	.word	0x00100002
 8004b14:	ffff0000 	.word	0xffff0000

08004b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	@ 0x30
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b32:	f7ff f8f7 	bl	8003d24 <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 8214 	bne.w	8004f6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2319      	movs	r3, #25
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	497b      	ldr	r1, [pc, #492]	@ (8004d3c <HAL_I2C_Mem_Read+0x224>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fb91 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e207      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_I2C_Mem_Read+0x56>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e200      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d007      	beq.n	8004b94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2222      	movs	r2, #34	@ 0x22
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2240      	movs	r2, #64	@ 0x40
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d40 <HAL_I2C_Mem_Read+0x228>)
 8004bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd6:	88f8      	ldrh	r0, [r7, #6]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	8979      	ldrh	r1, [r7, #10]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4603      	mov	r3, r0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa5e 	bl	80050a8 <I2C_RequestMemoryRead>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1bc      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e190      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d11b      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e170      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d11b      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	e150      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cbc:	e144      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f200 80f1 	bhi.w	8004eaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d123      	bne.n	8004d18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fc79 	bl	80055cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e145      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d16:	e117      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d14e      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	2200      	movs	r2, #0
 8004d28:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <HAL_I2C_Mem_Read+0x22c>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 faa4 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e11a      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
 8004d3a:	bf00      	nop
 8004d3c:	00100002 	.word	0x00100002
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dbc:	e0c4      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	496c      	ldr	r1, [pc, #432]	@ (8004f78 <HAL_I2C_Mem_Read+0x460>)
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa55 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cb      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	2200      	movs	r2, #0
 8004e22:	4955      	ldr	r1, [pc, #340]	@ (8004f78 <HAL_I2C_Mem_Read+0x460>)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fa27 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e09d      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ea8:	e04e      	b.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fb8c 	bl	80055cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e058      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d124      	bne.n	8004f48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d107      	bne.n	8004f16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f aeb6 	bne.w	8004cbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	@ 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00010004 	.word	0x00010004

08004f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f960 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fcc:	d103      	bne.n	8004fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e05f      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	492d      	ldr	r1, [pc, #180]	@ (80050a4 <I2C_RequestMemoryWrite+0x128>)
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f9bb 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e04c      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fa46 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b04      	cmp	r3, #4
 800502c:	d107      	bne.n	800503e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800503c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e02b      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e021      	b.n	8005098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b29b      	uxth	r3, r3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	6a39      	ldr	r1, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fa20 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00d      	beq.n	800508e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	2b04      	cmp	r3, #4
 8005078:	d107      	bne.n	800508a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e005      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508e:	893b      	ldrh	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	460b      	mov	r3, r1
 80050bc:	813b      	strh	r3, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8c2 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005108:	d103      	bne.n	8005112 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005110:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0aa      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	4952      	ldr	r1, [pc, #328]	@ (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f91d 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e097      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f9a8 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e076      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	e021      	b.n	80051d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005190:	893b      	ldrh	r3, [r7, #8]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f982 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e050      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ca:	893b      	ldrh	r3, [r7, #8]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f967 	bl	80054ac <I2C_WaitOnTXEFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d107      	bne.n	80051fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e035      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2200      	movs	r2, #0
 8005218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f82b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005236:	d103      	bne.n	8005240 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e013      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	4906      	ldr	r1, [pc, #24]	@ (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f886 	bl	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	e048      	b.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d044      	beq.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fe fd47 	bl	8003d24 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d139      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10d      	bne.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	e00c      	b.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	43da      	mvns	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4013      	ands	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d116      	bne.n	800531c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e023      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10d      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	43da      	mvns	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	e00c      	b.n	800535c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	43da      	mvns	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	d093      	beq.n	800528a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537a:	e071      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d123      	bne.n	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800539a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e067      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d041      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fe fca2 	bl	8003d24 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d136      	bne.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10c      	bne.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e00b      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e021      	b.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10c      	bne.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e00b      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	43da      	mvns	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af6d 	bne.w	800537c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b8:	e034      	b.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8e3 	bl	8005686 <I2C_IsAcknowledgeFailed>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e034      	b.n	8005534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d028      	beq.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe fc27 	bl	8003d24 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11d      	bne.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f2:	2b80      	cmp	r3, #128	@ 0x80
 80054f4:	d016      	beq.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e007      	b.n	8005534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552e:	2b80      	cmp	r3, #128	@ 0x80
 8005530:	d1c3      	bne.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005548:	e034      	b.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f89b 	bl	8005686 <I2C_IsAcknowledgeFailed>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e034      	b.n	80055c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d028      	beq.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe fbdf 	bl	8003d24 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11d      	bne.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d016      	beq.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e007      	b.n	80055c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d1c3      	bne.n	800554a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d8:	e049      	b.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d119      	bne.n	800561c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0210 	mvn.w	r2, #16
 80055f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e030      	b.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe fb82 	bl	8003d24 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	d016      	beq.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d1ae      	bne.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569c:	d11b      	bne.n	80056d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e0bf      	b.n	8005876 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fc90 	bl	8003030 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005726:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6999      	ldr	r1, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800573c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b4a      	ldr	r3, [pc, #296]	@ (8005880 <HAL_LTDC_Init+0x19c>)
 8005758:	400b      	ands	r3, r1
 800575a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6899      	ldr	r1, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b3e      	ldr	r3, [pc, #248]	@ (8005880 <HAL_LTDC_Init+0x19c>)
 8005786:	400b      	ands	r3, r1
 8005788:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68d9      	ldr	r1, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6919      	ldr	r1, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b33      	ldr	r3, [pc, #204]	@ (8005880 <HAL_LTDC_Init+0x19c>)
 80057b4:	400b      	ands	r3, r1
 80057b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6919      	ldr	r1, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <HAL_LTDC_Init+0x19c>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6959      	ldr	r1, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0206 	orr.w	r2, r2, #6
 8005852:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	f000f800 	.word	0xf000f800

08005884 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005884:	b5b0      	push	{r4, r5, r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_LTDC_ConfigLayer+0x1a>
 800589a:	2302      	movs	r3, #2
 800589c:	e02c      	b.n	80058f8 <HAL_LTDC_ConfigLayer+0x74>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2134      	movs	r1, #52	@ 0x34
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4614      	mov	r4, r2
 80058c2:	461d      	mov	r5, r3
 80058c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f811 	bl	8005900 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdb0      	pop	{r4, r5, r7, pc}

08005900 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005900:	b480      	push	{r7}
 8005902:	b089      	sub	sp, #36	@ 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591c:	4413      	add	r3, r2
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	4413      	add	r3, r2
 800592e:	3384      	adds	r3, #132	@ 0x84
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	4611      	mov	r1, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	01d2      	lsls	r2, r2, #7
 800593c:	440a      	add	r2, r1
 800593e:	3284      	adds	r2, #132	@ 0x84
 8005940:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005944:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005956:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005958:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	01db      	lsls	r3, r3, #7
 8005964:	440b      	add	r3, r1
 8005966:	3384      	adds	r3, #132	@ 0x84
 8005968:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800596e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800597e:	4413      	add	r3, r2
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	01db      	lsls	r3, r3, #7
 800598e:	4413      	add	r3, r2
 8005990:	3384      	adds	r3, #132	@ 0x84
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	4611      	mov	r1, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	01d2      	lsls	r2, r2, #7
 800599e:	440a      	add	r2, r1
 80059a0:	3284      	adds	r2, #132	@ 0x84
 80059a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80059a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b6:	4413      	add	r3, r2
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	01db      	lsls	r3, r3, #7
 80059c4:	440b      	add	r3, r1
 80059c6:	3384      	adds	r3, #132	@ 0x84
 80059c8:	4619      	mov	r1, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	01db      	lsls	r3, r3, #7
 80059da:	4413      	add	r3, r2
 80059dc:	3384      	adds	r3, #132	@ 0x84
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	4611      	mov	r1, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	01d2      	lsls	r2, r2, #7
 80059ea:	440a      	add	r2, r1
 80059ec:	3284      	adds	r2, #132	@ 0x84
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	01db      	lsls	r3, r3, #7
 80059fe:	4413      	add	r3, r2
 8005a00:	3384      	adds	r3, #132	@ 0x84
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	01db      	lsls	r3, r3, #7
 8005a30:	4413      	add	r3, r2
 8005a32:	3384      	adds	r3, #132	@ 0x84
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	4413      	add	r3, r2
 8005a42:	3384      	adds	r3, #132	@ 0x84
 8005a44:	461a      	mov	r2, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a50:	461a      	mov	r2, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	01db      	lsls	r3, r3, #7
 8005a64:	440b      	add	r3, r1
 8005a66:	3384      	adds	r3, #132	@ 0x84
 8005a68:	4619      	mov	r1, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	01db      	lsls	r3, r3, #7
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3384      	adds	r3, #132	@ 0x84
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	4611      	mov	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	01d2      	lsls	r2, r2, #7
 8005a8a:	440a      	add	r2, r1
 8005a8c:	3284      	adds	r2, #132	@ 0x84
 8005a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	01db      	lsls	r3, r3, #7
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3384      	adds	r3, #132	@ 0x84
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3384      	adds	r3, #132	@ 0x84
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	4611      	mov	r1, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	01d2      	lsls	r2, r2, #7
 8005ac4:	440a      	add	r2, r1
 8005ac6:	3284      	adds	r2, #132	@ 0x84
 8005ac8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005acc:	f023 0307 	bic.w	r3, r3, #7
 8005ad0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	6809      	ldr	r1, [r1, #0]
 8005ade:	4608      	mov	r0, r1
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	01c9      	lsls	r1, r1, #7
 8005ae4:	4401      	add	r1, r0
 8005ae6:	3184      	adds	r1, #132	@ 0x84
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	01db      	lsls	r3, r3, #7
 8005af6:	4413      	add	r3, r2
 8005af8:	3384      	adds	r3, #132	@ 0x84
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	01db      	lsls	r3, r3, #7
 8005b06:	4413      	add	r3, r2
 8005b08:	3384      	adds	r3, #132	@ 0x84
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	01db      	lsls	r3, r3, #7
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3384      	adds	r3, #132	@ 0x84
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005b2e:	2304      	movs	r3, #4
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	e01b      	b.n	8005b6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d102      	bne.n	8005b42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e014      	b.n	8005b6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d00b      	beq.n	8005b62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d007      	beq.n	8005b62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d003      	beq.n	8005b62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b5e:	2b07      	cmp	r3, #7
 8005b60:	d102      	bne.n	8005b68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005b62:	2302      	movs	r3, #2
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e001      	b.n	8005b6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	01db      	lsls	r3, r3, #7
 8005b76:	4413      	add	r3, r2
 8005b78:	3384      	adds	r3, #132	@ 0x84
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	4611      	mov	r1, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	01d2      	lsls	r2, r2, #7
 8005b86:	440a      	add	r2, r1
 8005b88:	3284      	adds	r2, #132	@ 0x84
 8005b8a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1acb      	subs	r3, r1, r3
 8005ba6:	69f9      	ldr	r1, [r7, #28]
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	6809      	ldr	r1, [r1, #0]
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	01c9      	lsls	r1, r1, #7
 8005bb8:	4401      	add	r1, r0
 8005bba:	3184      	adds	r1, #132	@ 0x84
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	01db      	lsls	r3, r3, #7
 8005bca:	4413      	add	r3, r2
 8005bcc:	3384      	adds	r3, #132	@ 0x84
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	01d2      	lsls	r2, r2, #7
 8005bda:	440a      	add	r2, r1
 8005bdc:	3284      	adds	r2, #132	@ 0x84
 8005bde:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	01db      	lsls	r3, r3, #7
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3384      	adds	r3, #132	@ 0x84
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	01db      	lsls	r3, r3, #7
 8005c08:	4413      	add	r3, r2
 8005c0a:	3384      	adds	r3, #132	@ 0x84
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	4611      	mov	r1, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	01d2      	lsls	r2, r2, #7
 8005c18:	440a      	add	r2, r1
 8005c1a:	3284      	adds	r2, #132	@ 0x84
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6013      	str	r3, [r2, #0]
}
 8005c22:	bf00      	nop
 8005c24:	3724      	adds	r7, #36	@ 0x24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e267      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d075      	beq.n	8005d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c4e:	4b88      	ldr	r3, [pc, #544]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d00c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5a:	4b85      	ldr	r3, [pc, #532]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d112      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c66:	4b82      	ldr	r3, [pc, #520]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	4b7e      	ldr	r3, [pc, #504]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05b      	beq.n	8005d38 <HAL_RCC_OscConfig+0x108>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d157      	bne.n	8005d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e242      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x74>
 8005c96:	4b76      	ldr	r3, [pc, #472]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a75      	ldr	r2, [pc, #468]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b70      	ldr	r3, [pc, #448]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b6d      	ldr	r3, [pc, #436]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005cc8:	4b69      	ldr	r3, [pc, #420]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a68      	ldr	r2, [pc, #416]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fe f81c 	bl	8003d24 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fe f818 	bl	8003d24 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	@ 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e207      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b5b      	ldr	r3, [pc, #364]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xc0>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fe f808 	bl	8003d24 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fe f804 	bl	8003d24 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	@ 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e1f3      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2a:	4b51      	ldr	r3, [pc, #324]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe8>
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d063      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d46:	4b4a      	ldr	r3, [pc, #296]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d52:	4b47      	ldr	r3, [pc, #284]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d11c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5e:	4b44      	ldr	r3, [pc, #272]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6a:	4b41      	ldr	r3, [pc, #260]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e1c7      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d82:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4937      	ldr	r1, [pc, #220]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	e03a      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d020      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da0:	4b34      	ldr	r3, [pc, #208]	@ (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da6:	f7fd ffbd 	bl	8003d24 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dae:	f7fd ffb9 	bl	8003d24 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e1a8      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	4b28      	ldr	r3, [pc, #160]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4925      	ldr	r1, [pc, #148]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de2:	4b24      	ldr	r3, [pc, #144]	@ (8005e74 <HAL_RCC_OscConfig+0x244>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd ff9c 	bl	8003d24 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fd ff98 	bl	8003d24 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e187      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d036      	beq.n	8005e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b15      	ldr	r3, [pc, #84]	@ (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e28:	f7fd ff7c 	bl	8003d24 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e30:	f7fd ff78 	bl	8003d24 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e167      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e42:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCC_OscConfig+0x240>)
 8005e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0f0      	beq.n	8005e30 <HAL_RCC_OscConfig+0x200>
 8005e4e:	e01b      	b.n	8005e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e50:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <HAL_RCC_OscConfig+0x248>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fd ff65 	bl	8003d24 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fd ff61 	bl	8003d24 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d907      	bls.n	8005e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e150      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 8005e70:	40023800 	.word	0x40023800
 8005e74:	42470000 	.word	0x42470000
 8005e78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e7c:	4b88      	ldr	r3, [pc, #544]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ea      	bne.n	8005e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8097 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b81      	ldr	r3, [pc, #516]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	4a7c      	ldr	r2, [pc, #496]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b77      	ldr	r3, [pc, #476]	@ (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed2:	4b74      	ldr	r3, [pc, #464]	@ (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a73      	ldr	r2, [pc, #460]	@ (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ede:	f7fd ff21 	bl	8003d24 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fd ff1d 	bl	8003d24 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e10c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCC_OscConfig+0x474>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2ea>
 8005f0c:	4b64      	ldr	r3, [pc, #400]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	4a63      	ldr	r2, [pc, #396]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f18:	e01c      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f22:	4b5f      	ldr	r3, [pc, #380]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f26:	4a5e      	ldr	r2, [pc, #376]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	4a5b      	ldr	r2, [pc, #364]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0x324>
 8005f3c:	4b58      	ldr	r3, [pc, #352]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f40:	4a57      	ldr	r2, [pc, #348]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f48:	4b55      	ldr	r3, [pc, #340]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4c:	4a54      	ldr	r2, [pc, #336]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fd fee2 	bl	8003d24 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fd fede 	bl	8003d24 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0cb      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7a:	4b49      	ldr	r3, [pc, #292]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ee      	beq.n	8005f64 <HAL_RCC_OscConfig+0x334>
 8005f86:	e014      	b.n	8005fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f88:	f7fd fecc 	bl	8003d24 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fd fec8 	bl	8003d24 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0b5      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1ee      	bne.n	8005f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	4b39      	ldr	r3, [pc, #228]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	4a38      	ldr	r2, [pc, #224]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80a1 	beq.w	8006110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fce:	4b34      	ldr	r3, [pc, #208]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d05c      	beq.n	8006094 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d141      	bne.n	8006066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b31      	ldr	r3, [pc, #196]	@ (80060a8 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fd fe9c 	bl	8003d24 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fe98 	bl	8003d24 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e087      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	491b      	ldr	r1, [pc, #108]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006038:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <HAL_RCC_OscConfig+0x478>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fd fe71 	bl	8003d24 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006046:	f7fd fe6d 	bl	8003d24 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e05c      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006058:	4b11      	ldr	r3, [pc, #68]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x416>
 8006064:	e054      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b10      	ldr	r3, [pc, #64]	@ (80060a8 <HAL_RCC_OscConfig+0x478>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fd fe5a 	bl	8003d24 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fd fe56 	bl	8003d24 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e045      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCC_OscConfig+0x470>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x444>
 8006092:	e03d      	b.n	8006110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d107      	bne.n	80060ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e038      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40007000 	.word	0x40007000
 80060a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	@ (800611c <HAL_RCC_OscConfig+0x4ec>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d028      	beq.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d121      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d11a      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d111      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	3b01      	subs	r3, #1
 80060f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800

08006120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0cc      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006134:	4b68      	ldr	r3, [pc, #416]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90c      	bls.n	800615c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006142:	4b65      	ldr	r3, [pc, #404]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b63      	ldr	r3, [pc, #396]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0b8      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006174:	4b59      	ldr	r3, [pc, #356]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a58      	ldr	r2, [pc, #352]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800617e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800618c:	4b53      	ldr	r3, [pc, #332]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a52      	ldr	r2, [pc, #328]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b50      	ldr	r3, [pc, #320]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	494d      	ldr	r1, [pc, #308]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d044      	beq.n	8006240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061be:	4b47      	ldr	r3, [pc, #284]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d119      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d003      	beq.n	80061de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	4b3f      	ldr	r3, [pc, #252]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e06f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	4b3b      	ldr	r3, [pc, #236]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e067      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061fe:	4b37      	ldr	r3, [pc, #220]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 0203 	bic.w	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4934      	ldr	r1, [pc, #208]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	4313      	orrs	r3, r2
 800620e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006210:	f7fd fd88 	bl	8003d24 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	e00a      	b.n	800622e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006218:	f7fd fd84 	bl	8003d24 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	4b2b      	ldr	r3, [pc, #172]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 020c 	and.w	r2, r3, #12
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	429a      	cmp	r2, r3
 800623e:	d1eb      	bne.n	8006218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b25      	ldr	r3, [pc, #148]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d20c      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b22      	ldr	r3, [pc, #136]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e032      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4916      	ldr	r1, [pc, #88]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	490e      	ldr	r1, [pc, #56]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062a6:	f000 f821 	bl	80062ec <HAL_RCC_GetSysClockFreq>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	490a      	ldr	r1, [pc, #40]	@ (80062e0 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	5ccb      	ldrb	r3, [r1, r3]
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	4a09      	ldr	r2, [pc, #36]	@ (80062e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062c2:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fd fce8 	bl	8003c9c <HAL_InitTick>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40023c00 	.word	0x40023c00
 80062dc:	40023800 	.word	0x40023800
 80062e0:	08009dfc 	.word	0x08009dfc
 80062e4:	200001fc 	.word	0x200001fc
 80062e8:	20000200 	.word	0x20000200

080062ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b094      	sub	sp, #80	@ 0x50
 80062f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006304:	4b79      	ldr	r3, [pc, #484]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b08      	cmp	r3, #8
 800630e:	d00d      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x40>
 8006310:	2b08      	cmp	r3, #8
 8006312:	f200 80e1 	bhi.w	80064d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0x34>
 800631a:	2b04      	cmp	r3, #4
 800631c:	d003      	beq.n	8006326 <HAL_RCC_GetSysClockFreq+0x3a>
 800631e:	e0db      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006320:	4b73      	ldr	r3, [pc, #460]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006322:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006324:	e0db      	b.n	80064de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006326:	4b73      	ldr	r3, [pc, #460]	@ (80064f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800632a:	e0d8      	b.n	80064de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800632c:	4b6f      	ldr	r3, [pc, #444]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006334:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006336:	4b6d      	ldr	r3, [pc, #436]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d063      	beq.n	800640a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b6a      	ldr	r3, [pc, #424]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	2200      	movs	r2, #0
 800634a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800634c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30
 8006356:	2300      	movs	r3, #0
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
 800635a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f04f 0100 	mov.w	r1, #0
 800636a:	0159      	lsls	r1, r3, #5
 800636c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006370:	0150      	lsls	r0, r2, #5
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4621      	mov	r1, r4
 8006378:	1a51      	subs	r1, r2, r1
 800637a:	6139      	str	r1, [r7, #16]
 800637c:	4629      	mov	r1, r5
 800637e:	eb63 0301 	sbc.w	r3, r3, r1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006390:	4659      	mov	r1, fp
 8006392:	018b      	lsls	r3, r1, #6
 8006394:	4651      	mov	r1, sl
 8006396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800639a:	4651      	mov	r1, sl
 800639c:	018a      	lsls	r2, r1, #6
 800639e:	4651      	mov	r1, sl
 80063a0:	ebb2 0801 	subs.w	r8, r2, r1
 80063a4:	4659      	mov	r1, fp
 80063a6:	eb63 0901 	sbc.w	r9, r3, r1
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063be:	4690      	mov	r8, r2
 80063c0:	4699      	mov	r9, r3
 80063c2:	4623      	mov	r3, r4
 80063c4:	eb18 0303 	adds.w	r3, r8, r3
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	462b      	mov	r3, r5
 80063cc:	eb49 0303 	adc.w	r3, r9, r3
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063de:	4629      	mov	r1, r5
 80063e0:	024b      	lsls	r3, r1, #9
 80063e2:	4621      	mov	r1, r4
 80063e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063e8:	4621      	mov	r1, r4
 80063ea:	024a      	lsls	r2, r1, #9
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063f2:	2200      	movs	r2, #0
 80063f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063fc:	f7f9 ff48 	bl	8000290 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4613      	mov	r3, r2
 8006406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006408:	e058      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800640a:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	099b      	lsrs	r3, r3, #6
 8006410:	2200      	movs	r2, #0
 8006412:	4618      	mov	r0, r3
 8006414:	4611      	mov	r1, r2
 8006416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800641a:	623b      	str	r3, [r7, #32]
 800641c:	2300      	movs	r3, #0
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	f04f 0000 	mov.w	r0, #0
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	0159      	lsls	r1, r3, #5
 8006432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006436:	0150      	lsls	r0, r2, #5
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4641      	mov	r1, r8
 800643e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006442:	4649      	mov	r1, r9
 8006444:	eb63 0b01 	sbc.w	fp, r3, r1
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800645c:	ebb2 040a 	subs.w	r4, r2, sl
 8006460:	eb63 050b 	sbc.w	r5, r3, fp
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	00eb      	lsls	r3, r5, #3
 800646e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006472:	00e2      	lsls	r2, r4, #3
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	4643      	mov	r3, r8
 800647a:	18e3      	adds	r3, r4, r3
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	464b      	mov	r3, r9
 8006480:	eb45 0303 	adc.w	r3, r5, r3
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006492:	4629      	mov	r1, r5
 8006494:	028b      	lsls	r3, r1, #10
 8006496:	4621      	mov	r1, r4
 8006498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800649c:	4621      	mov	r1, r4
 800649e:	028a      	lsls	r2, r1, #10
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a6:	2200      	movs	r2, #0
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	61fa      	str	r2, [r7, #28]
 80064ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b0:	f7f9 feee 	bl	8000290 <__aeabi_uldivmod>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4613      	mov	r3, r2
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064bc:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x200>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	3301      	adds	r3, #1
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064d6:	e002      	b.n	80064de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3750      	adds	r7, #80	@ 0x50
 80064e4:	46bd      	mov	sp, r7
 80064e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800
 80064f0:	00f42400 	.word	0x00f42400
 80064f4:	007a1200 	.word	0x007a1200

080064f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064fc:	4b03      	ldr	r3, [pc, #12]	@ (800650c <HAL_RCC_GetHCLKFreq+0x14>)
 80064fe:	681b      	ldr	r3, [r3, #0]
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	200001fc 	.word	0x200001fc

08006510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006514:	f7ff fff0 	bl	80064f8 <HAL_RCC_GetHCLKFreq>
 8006518:	4602      	mov	r2, r0
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	0a9b      	lsrs	r3, r3, #10
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	4903      	ldr	r1, [pc, #12]	@ (8006534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006526:	5ccb      	ldrb	r3, [r1, r3]
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800652c:	4618      	mov	r0, r3
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40023800 	.word	0x40023800
 8006534:	08009e0c 	.word	0x08009e0c

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d075      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800656c:	4b91      	ldr	r3, [pc, #580]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006572:	f7fd fbd7 	bl	8003d24 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006578:	e008      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800657a:	f7fd fbd3 	bl	8003d24 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e189      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658c:	4b8a      	ldr	r3, [pc, #552]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f0      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	019a      	lsls	r2, r3, #6
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	071b      	lsls	r3, r3, #28
 80065b0:	4981      	ldr	r1, [pc, #516]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01f      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065c4:	4b7c      	ldr	r3, [pc, #496]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ca:	0f1b      	lsrs	r3, r3, #28
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	019a      	lsls	r2, r3, #6
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	431a      	orrs	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	071b      	lsls	r3, r3, #28
 80065e4:	4974      	ldr	r1, [pc, #464]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065ec:	4b72      	ldr	r3, [pc, #456]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065f2:	f023 021f 	bic.w	r2, r3, #31
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	496e      	ldr	r1, [pc, #440]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	019a      	lsls	r2, r3, #6
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	071b      	lsls	r3, r3, #28
 8006624:	4964      	ldr	r1, [pc, #400]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800662c:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fd fb77 	bl	8003d24 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800663a:	f7fd fb73 	bl	8003d24 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e129      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800664c:	4b5a      	ldr	r3, [pc, #360]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d079      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006670:	4b52      	ldr	r3, [pc, #328]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006676:	f7fd fb55 	bl	8003d24 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800667e:	f7fd fb51 	bl	8003d24 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e107      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006690:	4b49      	ldr	r3, [pc, #292]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d0ef      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d020      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066aa:	4b43      	ldr	r3, [pc, #268]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b0:	0f1b      	lsrs	r3, r3, #28
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	019a      	lsls	r2, r3, #6
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	071b      	lsls	r3, r3, #28
 80066ca:	493b      	ldr	r1, [pc, #236]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066d2:	4b39      	ldr	r3, [pc, #228]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	4934      	ldr	r1, [pc, #208]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01e      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066f8:	4b2f      	ldr	r3, [pc, #188]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	019a      	lsls	r2, r3, #6
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	061b      	lsls	r3, r3, #24
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	071b      	lsls	r3, r3, #28
 8006718:	4927      	ldr	r1, [pc, #156]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006720:	4b25      	ldr	r3, [pc, #148]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006726:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	4922      	ldr	r1, [pc, #136]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006736:	4b21      	ldr	r3, [pc, #132]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673c:	f7fd faf2 	bl	8003d24 <HAL_GetTick>
 8006740:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006744:	f7fd faee 	bl	8003d24 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e0a4      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006756:	4b18      	ldr	r3, [pc, #96]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006762:	d1ef      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 808b 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	4a0f      	ldr	r2, [pc, #60]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006780:	6413      	str	r3, [r2, #64]	@ 0x40
 8006782:	4b0d      	ldr	r3, [pc, #52]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0b      	ldr	r2, [pc, #44]	@ (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800679a:	f7fd fac3 	bl	8003d24 <HAL_GetTick>
 800679e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067a0:	e010      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a2:	f7fd fabf 	bl	8003d24 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d909      	bls.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e075      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80067b4:	42470068 	.word	0x42470068
 80067b8:	40023800 	.word	0x40023800
 80067bc:	42470070 	.word	0x42470070
 80067c0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067c4:	4b38      	ldr	r3, [pc, #224]	@ (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0e8      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067d0:	4b36      	ldr	r3, [pc, #216]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ee:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067f8:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067fe:	4b2c      	ldr	r3, [pc, #176]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006804:	4a29      	ldr	r2, [pc, #164]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800680a:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d114      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006816:	f7fd fa85 	bl	8003d24 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	e00a      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fd fa81 	bl	8003d24 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e035      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	4b1d      	ldr	r3, [pc, #116]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ee      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684c:	d10d      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800684e:	4b17      	ldr	r3, [pc, #92]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800685e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006862:	4912      	ldr	r1, [pc, #72]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800686a:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4a0f      	ldr	r2, [pc, #60]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006870:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006874:	6093      	str	r3, [r2, #8]
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006878:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006882:	490a      	ldr	r1, [pc, #40]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006884:	4313      	orrs	r3, r2
 8006886:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800689a:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800689c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40007000 	.word	0x40007000
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470e40 	.word	0x42470e40
 80068b4:	424711e0 	.word	0x424711e0

080068b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e01c      	b.n	8006904 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	795b      	ldrb	r3, [r3, #5]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fcd0 	bl	8003280 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0204 	orr.w	r2, r2, #4
 80068f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	791b      	ldrb	r3, [r3, #4]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006922:	2302      	movs	r3, #2
 8006924:	e044      	b.n	80069b0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	795b      	ldrb	r3, [r3, #5]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	d133      	bne.n	800699e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2202      	movs	r2, #2
 800693a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800693c:	f7fd f9f2 	bl	8003d24 <HAL_GetTick>
 8006940:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006942:	e018      	b.n	8006976 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006944:	f7fd f9ee 	bl	8003d24 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d911      	bls.n	8006976 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00a      	beq.n	8006976 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e01c      	b.n	80069b0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	d1df      	bne.n	8006944 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	715a      	strb	r2, [r3, #5]
 800699c:	e004      	b.n	80069a8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2204      	movs	r2, #4
 80069a2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	711a      	strb	r2, [r3, #4]

  return status;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e07b      	b.n	8006ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069da:	d009      	beq.n	80069f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	61da      	str	r2, [r3, #28]
 80069e2:	e005      	b.n	80069f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fc fc5a 	bl	80032c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a74:	ea42 0103 	orr.w	r1, r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	f003 0104 	and.w	r1, r3, #4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	f003 0210 	and.w	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e01a      	b.n	8006b12 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006af2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fc fc2d 	bl	8003354 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b2a:	f7fd f8fb 	bl	8003d24 <HAL_GetTick>
 8006b2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
 8006b42:	e12a      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_Transmit+0x36>
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e122      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_SPI_Transmit+0x48>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e11b      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	88fa      	ldrh	r2, [r7, #6]
 8006b82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d007      	beq.n	8006bf0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf8:	d152      	bne.n	8006ca0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0xee>
 8006c02:	8b7b      	ldrh	r3, [r7, #26]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d145      	bne.n	8006c94 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c2c:	e032      	b.n	8006c94 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d112      	bne.n	8006c62 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c60:	e018      	b.n	8006c94 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c62:	f7fd f85f 	bl	8003d24 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d803      	bhi.n	8006c7a <HAL_SPI_Transmit+0x160>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d102      	bne.n	8006c80 <HAL_SPI_Transmit+0x166>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e082      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1c7      	bne.n	8006c2e <HAL_SPI_Transmit+0x114>
 8006c9e:	e053      	b.n	8006d48 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_SPI_Transmit+0x194>
 8006ca8:	8b7b      	ldrh	r3, [r7, #26]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d147      	bne.n	8006d3e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cd4:	e033      	b.n	8006d3e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d113      	bne.n	8006d0c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d0a:	e018      	b.n	8006d3e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0c:	f7fd f80a 	bl	8003d24 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d803      	bhi.n	8006d24 <HAL_SPI_Transmit+0x20a>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d102      	bne.n	8006d2a <HAL_SPI_Transmit+0x210>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e02d      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1c6      	bne.n	8006cd6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f8bf 	bl	8006ed0 <SPI_EndRxTxTransaction>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d98:	2300      	movs	r3, #0
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db0:	b2db      	uxtb	r3, r3
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd0:	f7fc ffa8 	bl	8003d24 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4413      	add	r3, r2
 8006dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de0:	f7fc ffa0 	bl	8003d24 <HAL_GetTick>
 8006de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006de6:	4b39      	ldr	r3, [pc, #228]	@ (8006ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	0d1b      	lsrs	r3, r3, #20
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006df6:	e054      	b.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d050      	beq.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e00:	f7fc ff90 	bl	8003d24 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d902      	bls.n	8006e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d13d      	bne.n	8006e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e2e:	d111      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e38:	d004      	beq.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e42:	d107      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e5c:	d10f      	bne.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e017      	b.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d19b      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200001fc 	.word	0x200001fc

08006ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f7ff ff6a 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e032      	b.n	8006f68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <SPI_EndRxTxTransaction+0xa0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1b      	ldr	r2, [pc, #108]	@ (8006f74 <SPI_EndRxTxTransaction+0xa4>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	0d5b      	lsrs	r3, r3, #21
 8006f0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f20:	d112      	bne.n	8006f48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	@ 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff ff47 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d016      	beq.n	8006f66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e00f      	b.n	8006f68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5e:	2b80      	cmp	r3, #128	@ 0x80
 8006f60:	d0f2      	beq.n	8006f48 <SPI_EndRxTxTransaction+0x78>
 8006f62:	e000      	b.n	8006f66 <SPI_EndRxTxTransaction+0x96>
        break;
 8006f64:	bf00      	nop
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200001fc 	.word	0x200001fc
 8006f74:	165e9f81 	.word	0x165e9f81

08006f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e041      	b.n	800700e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fc f9f6 	bl	8003390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f000 fae6 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e046      	b.n	80070be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a23      	ldr	r2, [pc, #140]	@ (80070cc <HAL_TIM_Base_Start+0xb4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d022      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704a:	d01d      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1f      	ldr	r2, [pc, #124]	@ (80070d0 <HAL_TIM_Base_Start+0xb8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d018      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1e      	ldr	r2, [pc, #120]	@ (80070d4 <HAL_TIM_Base_Start+0xbc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d013      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1c      	ldr	r2, [pc, #112]	@ (80070d8 <HAL_TIM_Base_Start+0xc0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00e      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1b      	ldr	r2, [pc, #108]	@ (80070dc <HAL_TIM_Base_Start+0xc4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d009      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <HAL_TIM_Base_Start+0xc8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <HAL_TIM_Base_Start+0x70>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a18      	ldr	r2, [pc, #96]	@ (80070e4 <HAL_TIM_Base_Start+0xcc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d111      	bne.n	80070ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b06      	cmp	r3, #6
 8007098:	d010      	beq.n	80070bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070aa:	e007      	b.n	80070bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40010400 	.word	0x40010400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40001800 	.word	0x40001800

080070e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d001      	beq.n	8007100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e04e      	b.n	800719e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a23      	ldr	r2, [pc, #140]	@ (80071ac <HAL_TIM_Base_Start_IT+0xc4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d022      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712a:	d01d      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1f      	ldr	r2, [pc, #124]	@ (80071b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d018      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1e      	ldr	r2, [pc, #120]	@ (80071b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d013      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1c      	ldr	r2, [pc, #112]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00e      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d009      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a19      	ldr	r2, [pc, #100]	@ (80071c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x80>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a18      	ldr	r2, [pc, #96]	@ (80071c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d111      	bne.n	800718c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b06      	cmp	r3, #6
 8007178:	d010      	beq.n	800719c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	e007      	b.n	800719c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40000400 	.word	0x40000400
 80071b4:	40000800 	.word	0x40000800
 80071b8:	40000c00 	.word	0x40000c00
 80071bc:	40010400 	.word	0x40010400
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40001800 	.word	0x40001800

080071c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d020      	beq.n	800722c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0202 	mvn.w	r2, #2
 80071fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f999 	bl	800754a <HAL_TIM_IC_CaptureCallback>
 8007218:	e005      	b.n	8007226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f98b 	bl	8007536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f99c 	bl	800755e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d020      	beq.n	8007278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01b      	beq.n	8007278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0204 	mvn.w	r2, #4
 8007248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f973 	bl	800754a <HAL_TIM_IC_CaptureCallback>
 8007264:	e005      	b.n	8007272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f965 	bl	8007536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f976 	bl	800755e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d020      	beq.n	80072c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01b      	beq.n	80072c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0208 	mvn.w	r2, #8
 8007294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f94d 	bl	800754a <HAL_TIM_IC_CaptureCallback>
 80072b0:	e005      	b.n	80072be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f93f 	bl	8007536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f950 	bl	800755e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d020      	beq.n	8007310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01b      	beq.n	8007310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0210 	mvn.w	r2, #16
 80072e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2208      	movs	r2, #8
 80072e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f927 	bl	800754a <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f919 	bl	8007536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f92a 	bl	800755e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0201 	mvn.w	r2, #1
 800732c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fb fbb4 	bl	8002a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fae4 	bl	8007920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00c      	beq.n	800737c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f8fb 	bl	8007572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0220 	mvn.w	r2, #32
 8007398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fab6 	bl	800790c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIM_ConfigClockSource+0x1c>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e0b4      	b.n	800752e <HAL_TIM_ConfigClockSource+0x186>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073fc:	d03e      	beq.n	800747c <HAL_TIM_ConfigClockSource+0xd4>
 80073fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007402:	f200 8087 	bhi.w	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 8007406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800740a:	f000 8086 	beq.w	800751a <HAL_TIM_ConfigClockSource+0x172>
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007412:	d87f      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 8007414:	2b70      	cmp	r3, #112	@ 0x70
 8007416:	d01a      	beq.n	800744e <HAL_TIM_ConfigClockSource+0xa6>
 8007418:	2b70      	cmp	r3, #112	@ 0x70
 800741a:	d87b      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 800741c:	2b60      	cmp	r3, #96	@ 0x60
 800741e:	d050      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007420:	2b60      	cmp	r3, #96	@ 0x60
 8007422:	d877      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 8007424:	2b50      	cmp	r3, #80	@ 0x50
 8007426:	d03c      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007428:	2b50      	cmp	r3, #80	@ 0x50
 800742a:	d873      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 800742c:	2b40      	cmp	r3, #64	@ 0x40
 800742e:	d058      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007430:	2b40      	cmp	r3, #64	@ 0x40
 8007432:	d86f      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 8007434:	2b30      	cmp	r3, #48	@ 0x30
 8007436:	d064      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x15a>
 8007438:	2b30      	cmp	r3, #48	@ 0x30
 800743a:	d86b      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d060      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x15a>
 8007440:	2b20      	cmp	r3, #32
 8007442:	d867      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05c      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x15a>
 8007448:	2b10      	cmp	r3, #16
 800744a:	d05a      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x15a>
 800744c:	e062      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800745e:	f000 f9b9 	bl	80077d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	609a      	str	r2, [r3, #8]
      break;
 800747a:	e04f      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800748c:	f000 f9a2 	bl	80077d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800749e:	609a      	str	r2, [r3, #8]
      break;
 80074a0:	e03c      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	461a      	mov	r2, r3
 80074b0:	f000 f916 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2150      	movs	r1, #80	@ 0x50
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f96f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 80074c0:	e02c      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ce:	461a      	mov	r2, r3
 80074d0:	f000 f935 	bl	800773e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2160      	movs	r1, #96	@ 0x60
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f95f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 80074e0:	e01c      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 f8f6 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2140      	movs	r1, #64	@ 0x40
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f94f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 8007500:	e00c      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f000 f946 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 8007512:	e003      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e000      	b.n	800751c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800751a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a46      	ldr	r2, [pc, #280]	@ (80076b4 <TIM_Base_SetConfig+0x12c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a6:	d00f      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a43      	ldr	r2, [pc, #268]	@ (80076b8 <TIM_Base_SetConfig+0x130>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a42      	ldr	r2, [pc, #264]	@ (80076bc <TIM_Base_SetConfig+0x134>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a41      	ldr	r2, [pc, #260]	@ (80076c0 <TIM_Base_SetConfig+0x138>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a40      	ldr	r2, [pc, #256]	@ (80076c4 <TIM_Base_SetConfig+0x13c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a35      	ldr	r2, [pc, #212]	@ (80076b4 <TIM_Base_SetConfig+0x12c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d02b      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e8:	d027      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a32      	ldr	r2, [pc, #200]	@ (80076b8 <TIM_Base_SetConfig+0x130>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d023      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a31      	ldr	r2, [pc, #196]	@ (80076bc <TIM_Base_SetConfig+0x134>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01f      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a30      	ldr	r2, [pc, #192]	@ (80076c0 <TIM_Base_SetConfig+0x138>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01b      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2f      	ldr	r2, [pc, #188]	@ (80076c4 <TIM_Base_SetConfig+0x13c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d017      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2e      	ldr	r2, [pc, #184]	@ (80076c8 <TIM_Base_SetConfig+0x140>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2d      	ldr	r2, [pc, #180]	@ (80076cc <TIM_Base_SetConfig+0x144>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00f      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2c      	ldr	r2, [pc, #176]	@ (80076d0 <TIM_Base_SetConfig+0x148>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00b      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2b      	ldr	r2, [pc, #172]	@ (80076d4 <TIM_Base_SetConfig+0x14c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d007      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2a      	ldr	r2, [pc, #168]	@ (80076d8 <TIM_Base_SetConfig+0x150>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d003      	beq.n	800763a <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a29      	ldr	r2, [pc, #164]	@ (80076dc <TIM_Base_SetConfig+0x154>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d108      	bne.n	800764c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a10      	ldr	r2, [pc, #64]	@ (80076b4 <TIM_Base_SetConfig+0x12c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d003      	beq.n	8007680 <TIM_Base_SetConfig+0xf8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a12      	ldr	r2, [pc, #72]	@ (80076c4 <TIM_Base_SetConfig+0x13c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d103      	bne.n	8007688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b01      	cmp	r3, #1
 8007698:	d105      	bne.n	80076a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]
  }
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	40001800 	.word	0x40001800
 80076d8:	40001c00 	.word	0x40001c00
 80076dc:	40002000 	.word	0x40002000

080076e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 0201 	bic.w	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f023 030a 	bic.w	r3, r3, #10
 800771c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800773e:	b480      	push	{r7}
 8007740:	b087      	sub	sp, #28
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f023 0210 	bic.w	r2, r3, #16
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800777a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f043 0307 	orr.w	r3, r3, #7
 80077c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007828:	2302      	movs	r3, #2
 800782a:	e05a      	b.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a21      	ldr	r2, [pc, #132]	@ (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d022      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007878:	d01d      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1d      	ldr	r2, [pc, #116]	@ (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d018      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1b      	ldr	r2, [pc, #108]	@ (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1a      	ldr	r2, [pc, #104]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00e      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a18      	ldr	r2, [pc, #96]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d009      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a17      	ldr	r2, [pc, #92]	@ (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d004      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a15      	ldr	r2, [pc, #84]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10c      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40000c00 	.word	0x40000c00
 8007900:	40010400 	.word	0x40010400
 8007904:	40014000 	.word	0x40014000
 8007908:	40001800 	.word	0x40001800

0800790c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <std>:
 8007934:	2300      	movs	r3, #0
 8007936:	b510      	push	{r4, lr}
 8007938:	4604      	mov	r4, r0
 800793a:	e9c0 3300 	strd	r3, r3, [r0]
 800793e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007942:	6083      	str	r3, [r0, #8]
 8007944:	8181      	strh	r1, [r0, #12]
 8007946:	6643      	str	r3, [r0, #100]	@ 0x64
 8007948:	81c2      	strh	r2, [r0, #14]
 800794a:	6183      	str	r3, [r0, #24]
 800794c:	4619      	mov	r1, r3
 800794e:	2208      	movs	r2, #8
 8007950:	305c      	adds	r0, #92	@ 0x5c
 8007952:	f000 f93a 	bl	8007bca <memset>
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <std+0x58>)
 8007958:	6263      	str	r3, [r4, #36]	@ 0x24
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <std+0x5c>)
 800795c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <std+0x60>)
 8007960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <std+0x64>)
 8007964:	6323      	str	r3, [r4, #48]	@ 0x30
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <std+0x68>)
 8007968:	6224      	str	r4, [r4, #32]
 800796a:	429c      	cmp	r4, r3
 800796c:	d006      	beq.n	800797c <std+0x48>
 800796e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007972:	4294      	cmp	r4, r2
 8007974:	d002      	beq.n	800797c <std+0x48>
 8007976:	33d0      	adds	r3, #208	@ 0xd0
 8007978:	429c      	cmp	r4, r3
 800797a:	d105      	bne.n	8007988 <std+0x54>
 800797c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007984:	f000 b99a 	b.w	8007cbc <__retarget_lock_init_recursive>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	08007b45 	.word	0x08007b45
 8007990:	08007b67 	.word	0x08007b67
 8007994:	08007b9f 	.word	0x08007b9f
 8007998:	08007bc3 	.word	0x08007bc3
 800799c:	20026090 	.word	0x20026090

080079a0 <stdio_exit_handler>:
 80079a0:	4a02      	ldr	r2, [pc, #8]	@ (80079ac <stdio_exit_handler+0xc>)
 80079a2:	4903      	ldr	r1, [pc, #12]	@ (80079b0 <stdio_exit_handler+0x10>)
 80079a4:	4803      	ldr	r0, [pc, #12]	@ (80079b4 <stdio_exit_handler+0x14>)
 80079a6:	f000 b869 	b.w	8007a7c <_fwalk_sglue>
 80079aa:	bf00      	nop
 80079ac:	20000208 	.word	0x20000208
 80079b0:	08008829 	.word	0x08008829
 80079b4:	20000218 	.word	0x20000218

080079b8 <cleanup_stdio>:
 80079b8:	6841      	ldr	r1, [r0, #4]
 80079ba:	4b0c      	ldr	r3, [pc, #48]	@ (80079ec <cleanup_stdio+0x34>)
 80079bc:	4299      	cmp	r1, r3
 80079be:	b510      	push	{r4, lr}
 80079c0:	4604      	mov	r4, r0
 80079c2:	d001      	beq.n	80079c8 <cleanup_stdio+0x10>
 80079c4:	f000 ff30 	bl	8008828 <_fflush_r>
 80079c8:	68a1      	ldr	r1, [r4, #8]
 80079ca:	4b09      	ldr	r3, [pc, #36]	@ (80079f0 <cleanup_stdio+0x38>)
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <cleanup_stdio+0x1e>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 ff29 	bl	8008828 <_fflush_r>
 80079d6:	68e1      	ldr	r1, [r4, #12]
 80079d8:	4b06      	ldr	r3, [pc, #24]	@ (80079f4 <cleanup_stdio+0x3c>)
 80079da:	4299      	cmp	r1, r3
 80079dc:	d004      	beq.n	80079e8 <cleanup_stdio+0x30>
 80079de:	4620      	mov	r0, r4
 80079e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e4:	f000 bf20 	b.w	8008828 <_fflush_r>
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	20026090 	.word	0x20026090
 80079f0:	200260f8 	.word	0x200260f8
 80079f4:	20026160 	.word	0x20026160

080079f8 <global_stdio_init.part.0>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <global_stdio_init.part.0+0x30>)
 80079fc:	4c0b      	ldr	r4, [pc, #44]	@ (8007a2c <global_stdio_init.part.0+0x34>)
 80079fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007a30 <global_stdio_init.part.0+0x38>)
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	4620      	mov	r0, r4
 8007a04:	2200      	movs	r2, #0
 8007a06:	2104      	movs	r1, #4
 8007a08:	f7ff ff94 	bl	8007934 <std>
 8007a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a10:	2201      	movs	r2, #1
 8007a12:	2109      	movs	r1, #9
 8007a14:	f7ff ff8e 	bl	8007934 <std>
 8007a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a22:	2112      	movs	r1, #18
 8007a24:	f7ff bf86 	b.w	8007934 <std>
 8007a28:	200261c8 	.word	0x200261c8
 8007a2c:	20026090 	.word	0x20026090
 8007a30:	080079a1 	.word	0x080079a1

08007a34 <__sfp_lock_acquire>:
 8007a34:	4801      	ldr	r0, [pc, #4]	@ (8007a3c <__sfp_lock_acquire+0x8>)
 8007a36:	f000 b942 	b.w	8007cbe <__retarget_lock_acquire_recursive>
 8007a3a:	bf00      	nop
 8007a3c:	200261d1 	.word	0x200261d1

08007a40 <__sfp_lock_release>:
 8007a40:	4801      	ldr	r0, [pc, #4]	@ (8007a48 <__sfp_lock_release+0x8>)
 8007a42:	f000 b93d 	b.w	8007cc0 <__retarget_lock_release_recursive>
 8007a46:	bf00      	nop
 8007a48:	200261d1 	.word	0x200261d1

08007a4c <__sinit>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	4604      	mov	r4, r0
 8007a50:	f7ff fff0 	bl	8007a34 <__sfp_lock_acquire>
 8007a54:	6a23      	ldr	r3, [r4, #32]
 8007a56:	b11b      	cbz	r3, 8007a60 <__sinit+0x14>
 8007a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5c:	f7ff bff0 	b.w	8007a40 <__sfp_lock_release>
 8007a60:	4b04      	ldr	r3, [pc, #16]	@ (8007a74 <__sinit+0x28>)
 8007a62:	6223      	str	r3, [r4, #32]
 8007a64:	4b04      	ldr	r3, [pc, #16]	@ (8007a78 <__sinit+0x2c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f5      	bne.n	8007a58 <__sinit+0xc>
 8007a6c:	f7ff ffc4 	bl	80079f8 <global_stdio_init.part.0>
 8007a70:	e7f2      	b.n	8007a58 <__sinit+0xc>
 8007a72:	bf00      	nop
 8007a74:	080079b9 	.word	0x080079b9
 8007a78:	200261c8 	.word	0x200261c8

08007a7c <_fwalk_sglue>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	4607      	mov	r7, r0
 8007a82:	4688      	mov	r8, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	2600      	movs	r6, #0
 8007a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a90:	d505      	bpl.n	8007a9e <_fwalk_sglue+0x22>
 8007a92:	6824      	ldr	r4, [r4, #0]
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	d1f7      	bne.n	8007a88 <_fwalk_sglue+0xc>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d907      	bls.n	8007ab4 <_fwalk_sglue+0x38>
 8007aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	d003      	beq.n	8007ab4 <_fwalk_sglue+0x38>
 8007aac:	4629      	mov	r1, r5
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c0      	blx	r8
 8007ab2:	4306      	orrs	r6, r0
 8007ab4:	3568      	adds	r5, #104	@ 0x68
 8007ab6:	e7e9      	b.n	8007a8c <_fwalk_sglue+0x10>

08007ab8 <iprintf>:
 8007ab8:	b40f      	push	{r0, r1, r2, r3}
 8007aba:	b507      	push	{r0, r1, r2, lr}
 8007abc:	4906      	ldr	r1, [pc, #24]	@ (8007ad8 <iprintf+0x20>)
 8007abe:	ab04      	add	r3, sp, #16
 8007ac0:	6808      	ldr	r0, [r1, #0]
 8007ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac6:	6881      	ldr	r1, [r0, #8]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f000 fb83 	bl	80081d4 <_vfiprintf_r>
 8007ace:	b003      	add	sp, #12
 8007ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad4:	b004      	add	sp, #16
 8007ad6:	4770      	bx	lr
 8007ad8:	20000214 	.word	0x20000214

08007adc <sniprintf>:
 8007adc:	b40c      	push	{r2, r3}
 8007ade:	b530      	push	{r4, r5, lr}
 8007ae0:	4b17      	ldr	r3, [pc, #92]	@ (8007b40 <sniprintf+0x64>)
 8007ae2:	1e0c      	subs	r4, r1, #0
 8007ae4:	681d      	ldr	r5, [r3, #0]
 8007ae6:	b09d      	sub	sp, #116	@ 0x74
 8007ae8:	da08      	bge.n	8007afc <sniprintf+0x20>
 8007aea:	238b      	movs	r3, #139	@ 0x8b
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	f04f 30ff 	mov.w	r0, #4294967295
 8007af2:	b01d      	add	sp, #116	@ 0x74
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	b002      	add	sp, #8
 8007afa:	4770      	bx	lr
 8007afc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b04:	bf14      	ite	ne
 8007b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b0a:	4623      	moveq	r3, r4
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	9006      	str	r0, [sp, #24]
 8007b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b1e:	ab21      	add	r3, sp, #132	@ 0x84
 8007b20:	a902      	add	r1, sp, #8
 8007b22:	4628      	mov	r0, r5
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	f000 fa2f 	bl	8007f88 <_svfiprintf_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	bfbc      	itt	lt
 8007b2e:	238b      	movlt	r3, #139	@ 0x8b
 8007b30:	602b      	strlt	r3, [r5, #0]
 8007b32:	2c00      	cmp	r4, #0
 8007b34:	d0dd      	beq.n	8007af2 <sniprintf+0x16>
 8007b36:	9b02      	ldr	r3, [sp, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e7d9      	b.n	8007af2 <sniprintf+0x16>
 8007b3e:	bf00      	nop
 8007b40:	20000214 	.word	0x20000214

08007b44 <__sread>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	f000 f868 	bl	8007c20 <_read_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	bfab      	itete	ge
 8007b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b56:	89a3      	ldrhlt	r3, [r4, #12]
 8007b58:	181b      	addge	r3, r3, r0
 8007b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b5e:	bfac      	ite	ge
 8007b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b62:	81a3      	strhlt	r3, [r4, #12]
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <__swrite>:
 8007b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	461f      	mov	r7, r3
 8007b6c:	898b      	ldrh	r3, [r1, #12]
 8007b6e:	05db      	lsls	r3, r3, #23
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	4616      	mov	r6, r2
 8007b76:	d505      	bpl.n	8007b84 <__swrite+0x1e>
 8007b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f000 f83c 	bl	8007bfc <_lseek_r>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	4632      	mov	r2, r6
 8007b92:	463b      	mov	r3, r7
 8007b94:	4628      	mov	r0, r5
 8007b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9a:	f000 b853 	b.w	8007c44 <_write_r>

08007b9e <__sseek>:
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba6:	f000 f829 	bl	8007bfc <_lseek_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	bf15      	itete	ne
 8007bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bba:	81a3      	strheq	r3, [r4, #12]
 8007bbc:	bf18      	it	ne
 8007bbe:	81a3      	strhne	r3, [r4, #12]
 8007bc0:	bd10      	pop	{r4, pc}

08007bc2 <__sclose>:
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 b809 	b.w	8007bdc <_close_r>

08007bca <memset>:
 8007bca:	4402      	add	r2, r0
 8007bcc:	4603      	mov	r3, r0
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d100      	bne.n	8007bd4 <memset+0xa>
 8007bd2:	4770      	bx	lr
 8007bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd8:	e7f9      	b.n	8007bce <memset+0x4>
	...

08007bdc <_close_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	@ (8007bf8 <_close_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f000 ffbe 	bl	8008b68 <_close>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_close_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_close_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	200261cc 	.word	0x200261cc

08007bfc <_lseek_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	@ (8007c1c <_lseek_r+0x20>)
 8007c00:	4604      	mov	r4, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f000 ffc4 	bl	8008b98 <_lseek>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_lseek_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_lseek_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	200261cc 	.word	0x200261cc

08007c20 <_read_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	@ (8007c40 <_read_r+0x20>)
 8007c24:	4604      	mov	r4, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f000 ffba 	bl	8008ba8 <_read>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_read_r+0x1e>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_read_r+0x1e>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	200261cc 	.word	0x200261cc

08007c44 <_write_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	@ (8007c64 <_write_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 ffb0 	bl	8008bb8 <_write>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_write_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_write_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	200261cc 	.word	0x200261cc

08007c68 <__errno>:
 8007c68:	4b01      	ldr	r3, [pc, #4]	@ (8007c70 <__errno+0x8>)
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000214 	.word	0x20000214

08007c74 <__libc_init_array>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4d0d      	ldr	r5, [pc, #52]	@ (8007cac <__libc_init_array+0x38>)
 8007c78:	4c0d      	ldr	r4, [pc, #52]	@ (8007cb0 <__libc_init_array+0x3c>)
 8007c7a:	1b64      	subs	r4, r4, r5
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	2600      	movs	r6, #0
 8007c80:	42a6      	cmp	r6, r4
 8007c82:	d109      	bne.n	8007c98 <__libc_init_array+0x24>
 8007c84:	4d0b      	ldr	r5, [pc, #44]	@ (8007cb4 <__libc_init_array+0x40>)
 8007c86:	4c0c      	ldr	r4, [pc, #48]	@ (8007cb8 <__libc_init_array+0x44>)
 8007c88:	f000 ff9e 	bl	8008bc8 <_init>
 8007c8c:	1b64      	subs	r4, r4, r5
 8007c8e:	10a4      	asrs	r4, r4, #2
 8007c90:	2600      	movs	r6, #0
 8007c92:	42a6      	cmp	r6, r4
 8007c94:	d105      	bne.n	8007ca2 <__libc_init_array+0x2e>
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9c:	4798      	blx	r3
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7ee      	b.n	8007c80 <__libc_init_array+0xc>
 8007ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca6:	4798      	blx	r3
 8007ca8:	3601      	adds	r6, #1
 8007caa:	e7f2      	b.n	8007c92 <__libc_init_array+0x1e>
 8007cac:	08009e50 	.word	0x08009e50
 8007cb0:	08009e50 	.word	0x08009e50
 8007cb4:	08009e50 	.word	0x08009e50
 8007cb8:	08009e54 	.word	0x08009e54

08007cbc <__retarget_lock_init_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <__retarget_lock_acquire_recursive>:
 8007cbe:	4770      	bx	lr

08007cc0 <__retarget_lock_release_recursive>:
 8007cc0:	4770      	bx	lr

08007cc2 <memcpy>:
 8007cc2:	440a      	add	r2, r1
 8007cc4:	4291      	cmp	r1, r2
 8007cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cca:	d100      	bne.n	8007cce <memcpy+0xc>
 8007ccc:	4770      	bx	lr
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d1f9      	bne.n	8007cd0 <memcpy+0xe>
 8007cdc:	bd10      	pop	{r4, pc}
	...

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d041      	beq.n	8007d6c <_free_r+0x8c>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f000 f8e0 	bl	8007eb8 <__malloc_lock>
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d70 <_free_r+0x90>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x2c>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	4628      	mov	r0, r5
 8007d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d08:	f000 b8dc 	b.w	8007ec4 <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x42>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1809      	addeq	r1, r1, r0
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x1e>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x4c>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x42>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x6c>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	4401      	add	r1, r0
 8007d38:	1850      	adds	r0, r2, r1
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x22>
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	4408      	add	r0, r1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x22>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x74>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x22>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x22>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	200261d8 	.word	0x200261d8

08007d74 <sbrk_aligned>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4e0f      	ldr	r6, [pc, #60]	@ (8007db4 <sbrk_aligned+0x40>)
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6831      	ldr	r1, [r6, #0]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	b911      	cbnz	r1, 8007d86 <sbrk_aligned+0x12>
 8007d80:	f000 fe28 	bl	80089d4 <_sbrk_r>
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 fe23 	bl	80089d4 <_sbrk_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d103      	bne.n	8007d9a <sbrk_aligned+0x26>
 8007d92:	f04f 34ff 	mov.w	r4, #4294967295
 8007d96:	4620      	mov	r0, r4
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d0f8      	beq.n	8007d96 <sbrk_aligned+0x22>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 fe14 	bl	80089d4 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d1f2      	bne.n	8007d96 <sbrk_aligned+0x22>
 8007db0:	e7ef      	b.n	8007d92 <sbrk_aligned+0x1e>
 8007db2:	bf00      	nop
 8007db4:	200261d4 	.word	0x200261d4

08007db8 <_malloc_r>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	1ccd      	adds	r5, r1, #3
 8007dbe:	f025 0503 	bic.w	r5, r5, #3
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	2d0c      	cmp	r5, #12
 8007dc6:	bf38      	it	cc
 8007dc8:	250c      	movcc	r5, #12
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	4606      	mov	r6, r0
 8007dce:	db01      	blt.n	8007dd4 <_malloc_r+0x1c>
 8007dd0:	42a9      	cmp	r1, r5
 8007dd2:	d904      	bls.n	8007dde <_malloc_r+0x26>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	6033      	str	r3, [r6, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb4 <_malloc_r+0xfc>
 8007de2:	f000 f869 	bl	8007eb8 <__malloc_lock>
 8007de6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dea:	461c      	mov	r4, r3
 8007dec:	bb44      	cbnz	r4, 8007e40 <_malloc_r+0x88>
 8007dee:	4629      	mov	r1, r5
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffbf 	bl	8007d74 <sbrk_aligned>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	4604      	mov	r4, r0
 8007dfa:	d158      	bne.n	8007eae <_malloc_r+0xf6>
 8007dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007e00:	4627      	mov	r7, r4
 8007e02:	2f00      	cmp	r7, #0
 8007e04:	d143      	bne.n	8007e8e <_malloc_r+0xd6>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d04b      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	eb04 0903 	add.w	r9, r4, r3
 8007e14:	f000 fdde 	bl	80089d4 <_sbrk_r>
 8007e18:	4581      	cmp	r9, r0
 8007e1a:	d142      	bne.n	8007ea2 <_malloc_r+0xea>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	1a6d      	subs	r5, r5, r1
 8007e20:	4629      	mov	r1, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffa6 	bl	8007d74 <sbrk_aligned>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d03a      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	442b      	add	r3, r5
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	bb62      	cbnz	r2, 8007e94 <_malloc_r+0xdc>
 8007e3a:	f8c8 7000 	str.w	r7, [r8]
 8007e3e:	e00f      	b.n	8007e60 <_malloc_r+0xa8>
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	1b52      	subs	r2, r2, r5
 8007e44:	d420      	bmi.n	8007e88 <_malloc_r+0xd0>
 8007e46:	2a0b      	cmp	r2, #11
 8007e48:	d917      	bls.n	8007e7a <_malloc_r+0xc2>
 8007e4a:	1961      	adds	r1, r4, r5
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	6059      	strne	r1, [r3, #4]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	bf08      	it	eq
 8007e58:	f8c8 1000 	streq.w	r1, [r8]
 8007e5c:	5162      	str	r2, [r4, r5]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f82f 	bl	8007ec4 <__malloc_unlock>
 8007e66:	f104 000b 	add.w	r0, r4, #11
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	f020 0007 	bic.w	r0, r0, #7
 8007e70:	1ac2      	subs	r2, r0, r3
 8007e72:	bf1c      	itt	ne
 8007e74:	1a1b      	subne	r3, r3, r0
 8007e76:	50a3      	strne	r3, [r4, r2]
 8007e78:	e7af      	b.n	8007dda <_malloc_r+0x22>
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf0c      	ite	eq
 8007e80:	f8c8 2000 	streq.w	r2, [r8]
 8007e84:	605a      	strne	r2, [r3, #4]
 8007e86:	e7eb      	b.n	8007e60 <_malloc_r+0xa8>
 8007e88:	4623      	mov	r3, r4
 8007e8a:	6864      	ldr	r4, [r4, #4]
 8007e8c:	e7ae      	b.n	8007dec <_malloc_r+0x34>
 8007e8e:	463c      	mov	r4, r7
 8007e90:	687f      	ldr	r7, [r7, #4]
 8007e92:	e7b6      	b.n	8007e02 <_malloc_r+0x4a>
 8007e94:	461a      	mov	r2, r3
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d1fb      	bne.n	8007e94 <_malloc_r+0xdc>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	e7de      	b.n	8007e60 <_malloc_r+0xa8>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f80c 	bl	8007ec4 <__malloc_unlock>
 8007eac:	e794      	b.n	8007dd8 <_malloc_r+0x20>
 8007eae:	6005      	str	r5, [r0, #0]
 8007eb0:	e7d6      	b.n	8007e60 <_malloc_r+0xa8>
 8007eb2:	bf00      	nop
 8007eb4:	200261d8 	.word	0x200261d8

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f7ff bf00 	b.w	8007cbe <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200261d0 	.word	0x200261d0

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f7ff befb 	b.w	8007cc0 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	200261d0 	.word	0x200261d0

08007ed0 <__ssputs_r>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	688e      	ldr	r6, [r1, #8]
 8007ed6:	461f      	mov	r7, r3
 8007ed8:	42be      	cmp	r6, r7
 8007eda:	680b      	ldr	r3, [r1, #0]
 8007edc:	4682      	mov	sl, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	d82d      	bhi.n	8007f40 <__ssputs_r+0x70>
 8007ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007eec:	d026      	beq.n	8007f3c <__ssputs_r+0x6c>
 8007eee:	6965      	ldr	r5, [r4, #20]
 8007ef0:	6909      	ldr	r1, [r1, #16]
 8007ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef6:	eba3 0901 	sub.w	r9, r3, r1
 8007efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007efe:	1c7b      	adds	r3, r7, #1
 8007f00:	444b      	add	r3, r9
 8007f02:	106d      	asrs	r5, r5, #1
 8007f04:	429d      	cmp	r5, r3
 8007f06:	bf38      	it	cc
 8007f08:	461d      	movcc	r5, r3
 8007f0a:	0553      	lsls	r3, r2, #21
 8007f0c:	d527      	bpl.n	8007f5e <__ssputs_r+0x8e>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7ff ff52 	bl	8007db8 <_malloc_r>
 8007f14:	4606      	mov	r6, r0
 8007f16:	b360      	cbz	r0, 8007f72 <__ssputs_r+0xa2>
 8007f18:	6921      	ldr	r1, [r4, #16]
 8007f1a:	464a      	mov	r2, r9
 8007f1c:	f7ff fed1 	bl	8007cc2 <memcpy>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	6126      	str	r6, [r4, #16]
 8007f2e:	6165      	str	r5, [r4, #20]
 8007f30:	444e      	add	r6, r9
 8007f32:	eba5 0509 	sub.w	r5, r5, r9
 8007f36:	6026      	str	r6, [r4, #0]
 8007f38:	60a5      	str	r5, [r4, #8]
 8007f3a:	463e      	mov	r6, r7
 8007f3c:	42be      	cmp	r6, r7
 8007f3e:	d900      	bls.n	8007f42 <__ssputs_r+0x72>
 8007f40:	463e      	mov	r6, r7
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	4632      	mov	r2, r6
 8007f46:	4641      	mov	r1, r8
 8007f48:	f000 fd2a 	bl	80089a0 <memmove>
 8007f4c:	68a3      	ldr	r3, [r4, #8]
 8007f4e:	1b9b      	subs	r3, r3, r6
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	4433      	add	r3, r6
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5e:	462a      	mov	r2, r5
 8007f60:	f000 fd48 	bl	80089f4 <_realloc_r>
 8007f64:	4606      	mov	r6, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1e0      	bne.n	8007f2c <__ssputs_r+0x5c>
 8007f6a:	6921      	ldr	r1, [r4, #16]
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f7ff feb7 	bl	8007ce0 <_free_r>
 8007f72:	230c      	movs	r3, #12
 8007f74:	f8ca 3000 	str.w	r3, [sl]
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	e7e9      	b.n	8007f5a <__ssputs_r+0x8a>
	...

08007f88 <_svfiprintf_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	898b      	ldrh	r3, [r1, #12]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	b09d      	sub	sp, #116	@ 0x74
 8007f94:	4607      	mov	r7, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	d510      	bpl.n	8007fbe <_svfiprintf_r+0x36>
 8007f9c:	690b      	ldr	r3, [r1, #16]
 8007f9e:	b973      	cbnz	r3, 8007fbe <_svfiprintf_r+0x36>
 8007fa0:	2140      	movs	r1, #64	@ 0x40
 8007fa2:	f7ff ff09 	bl	8007db8 <_malloc_r>
 8007fa6:	6028      	str	r0, [r5, #0]
 8007fa8:	6128      	str	r0, [r5, #16]
 8007faa:	b930      	cbnz	r0, 8007fba <_svfiprintf_r+0x32>
 8007fac:	230c      	movs	r3, #12
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b01d      	add	sp, #116	@ 0x74
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	2340      	movs	r3, #64	@ 0x40
 8007fbc:	616b      	str	r3, [r5, #20]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fcc:	2330      	movs	r3, #48	@ 0x30
 8007fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800816c <_svfiprintf_r+0x1e4>
 8007fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fd6:	f04f 0901 	mov.w	r9, #1
 8007fda:	4623      	mov	r3, r4
 8007fdc:	469a      	mov	sl, r3
 8007fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe2:	b10a      	cbz	r2, 8007fe8 <_svfiprintf_r+0x60>
 8007fe4:	2a25      	cmp	r2, #37	@ 0x25
 8007fe6:	d1f9      	bne.n	8007fdc <_svfiprintf_r+0x54>
 8007fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fec:	d00b      	beq.n	8008006 <_svfiprintf_r+0x7e>
 8007fee:	465b      	mov	r3, fp
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ff6b 	bl	8007ed0 <__ssputs_r>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f000 80a7 	beq.w	800814e <_svfiprintf_r+0x1c6>
 8008000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008002:	445a      	add	r2, fp
 8008004:	9209      	str	r2, [sp, #36]	@ 0x24
 8008006:	f89a 3000 	ldrb.w	r3, [sl]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 809f 	beq.w	800814e <_svfiprintf_r+0x1c6>
 8008010:	2300      	movs	r3, #0
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801a:	f10a 0a01 	add.w	sl, sl, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008026:	931a      	str	r3, [sp, #104]	@ 0x68
 8008028:	4654      	mov	r4, sl
 800802a:	2205      	movs	r2, #5
 800802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008030:	484e      	ldr	r0, [pc, #312]	@ (800816c <_svfiprintf_r+0x1e4>)
 8008032:	f7f8 f8dd 	bl	80001f0 <memchr>
 8008036:	9a04      	ldr	r2, [sp, #16]
 8008038:	b9d8      	cbnz	r0, 8008072 <_svfiprintf_r+0xea>
 800803a:	06d0      	lsls	r0, r2, #27
 800803c:	bf44      	itt	mi
 800803e:	2320      	movmi	r3, #32
 8008040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008044:	0711      	lsls	r1, r2, #28
 8008046:	bf44      	itt	mi
 8008048:	232b      	movmi	r3, #43	@ 0x2b
 800804a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b2a      	cmp	r3, #42	@ 0x2a
 8008054:	d015      	beq.n	8008082 <_svfiprintf_r+0xfa>
 8008056:	9a07      	ldr	r2, [sp, #28]
 8008058:	4654      	mov	r4, sl
 800805a:	2000      	movs	r0, #0
 800805c:	f04f 0c0a 	mov.w	ip, #10
 8008060:	4621      	mov	r1, r4
 8008062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008066:	3b30      	subs	r3, #48	@ 0x30
 8008068:	2b09      	cmp	r3, #9
 800806a:	d94b      	bls.n	8008104 <_svfiprintf_r+0x17c>
 800806c:	b1b0      	cbz	r0, 800809c <_svfiprintf_r+0x114>
 800806e:	9207      	str	r2, [sp, #28]
 8008070:	e014      	b.n	800809c <_svfiprintf_r+0x114>
 8008072:	eba0 0308 	sub.w	r3, r0, r8
 8008076:	fa09 f303 	lsl.w	r3, r9, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	46a2      	mov	sl, r4
 8008080:	e7d2      	b.n	8008028 <_svfiprintf_r+0xa0>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	1d19      	adds	r1, r3, #4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	9103      	str	r1, [sp, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	bfbb      	ittet	lt
 800808e:	425b      	neglt	r3, r3
 8008090:	f042 0202 	orrlt.w	r2, r2, #2
 8008094:	9307      	strge	r3, [sp, #28]
 8008096:	9307      	strlt	r3, [sp, #28]
 8008098:	bfb8      	it	lt
 800809a:	9204      	strlt	r2, [sp, #16]
 800809c:	7823      	ldrb	r3, [r4, #0]
 800809e:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a0:	d10a      	bne.n	80080b8 <_svfiprintf_r+0x130>
 80080a2:	7863      	ldrb	r3, [r4, #1]
 80080a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a6:	d132      	bne.n	800810e <_svfiprintf_r+0x186>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	1d1a      	adds	r2, r3, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	9203      	str	r2, [sp, #12]
 80080b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080b4:	3402      	adds	r4, #2
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800817c <_svfiprintf_r+0x1f4>
 80080bc:	7821      	ldrb	r1, [r4, #0]
 80080be:	2203      	movs	r2, #3
 80080c0:	4650      	mov	r0, sl
 80080c2:	f7f8 f895 	bl	80001f0 <memchr>
 80080c6:	b138      	cbz	r0, 80080d8 <_svfiprintf_r+0x150>
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	eba0 000a 	sub.w	r0, r0, sl
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	4082      	lsls	r2, r0
 80080d2:	4313      	orrs	r3, r2
 80080d4:	3401      	adds	r4, #1
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080dc:	4824      	ldr	r0, [pc, #144]	@ (8008170 <_svfiprintf_r+0x1e8>)
 80080de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080e2:	2206      	movs	r2, #6
 80080e4:	f7f8 f884 	bl	80001f0 <memchr>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d036      	beq.n	800815a <_svfiprintf_r+0x1d2>
 80080ec:	4b21      	ldr	r3, [pc, #132]	@ (8008174 <_svfiprintf_r+0x1ec>)
 80080ee:	bb1b      	cbnz	r3, 8008138 <_svfiprintf_r+0x1b0>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	3307      	adds	r3, #7
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	3308      	adds	r3, #8
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fe:	4433      	add	r3, r6
 8008100:	9309      	str	r3, [sp, #36]	@ 0x24
 8008102:	e76a      	b.n	8007fda <_svfiprintf_r+0x52>
 8008104:	fb0c 3202 	mla	r2, ip, r2, r3
 8008108:	460c      	mov	r4, r1
 800810a:	2001      	movs	r0, #1
 800810c:	e7a8      	b.n	8008060 <_svfiprintf_r+0xd8>
 800810e:	2300      	movs	r3, #0
 8008110:	3401      	adds	r4, #1
 8008112:	9305      	str	r3, [sp, #20]
 8008114:	4619      	mov	r1, r3
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4620      	mov	r0, r4
 800811c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008120:	3a30      	subs	r2, #48	@ 0x30
 8008122:	2a09      	cmp	r2, #9
 8008124:	d903      	bls.n	800812e <_svfiprintf_r+0x1a6>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0c6      	beq.n	80080b8 <_svfiprintf_r+0x130>
 800812a:	9105      	str	r1, [sp, #20]
 800812c:	e7c4      	b.n	80080b8 <_svfiprintf_r+0x130>
 800812e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008132:	4604      	mov	r4, r0
 8008134:	2301      	movs	r3, #1
 8008136:	e7f0      	b.n	800811a <_svfiprintf_r+0x192>
 8008138:	ab03      	add	r3, sp, #12
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	462a      	mov	r2, r5
 800813e:	4b0e      	ldr	r3, [pc, #56]	@ (8008178 <_svfiprintf_r+0x1f0>)
 8008140:	a904      	add	r1, sp, #16
 8008142:	4638      	mov	r0, r7
 8008144:	f3af 8000 	nop.w
 8008148:	1c42      	adds	r2, r0, #1
 800814a:	4606      	mov	r6, r0
 800814c:	d1d6      	bne.n	80080fc <_svfiprintf_r+0x174>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	065b      	lsls	r3, r3, #25
 8008152:	f53f af2d 	bmi.w	8007fb0 <_svfiprintf_r+0x28>
 8008156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008158:	e72c      	b.n	8007fb4 <_svfiprintf_r+0x2c>
 800815a:	ab03      	add	r3, sp, #12
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	462a      	mov	r2, r5
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <_svfiprintf_r+0x1f0>)
 8008162:	a904      	add	r1, sp, #16
 8008164:	4638      	mov	r0, r7
 8008166:	f000 f9bb 	bl	80084e0 <_printf_i>
 800816a:	e7ed      	b.n	8008148 <_svfiprintf_r+0x1c0>
 800816c:	08009e14 	.word	0x08009e14
 8008170:	08009e1e 	.word	0x08009e1e
 8008174:	00000000 	.word	0x00000000
 8008178:	08007ed1 	.word	0x08007ed1
 800817c:	08009e1a 	.word	0x08009e1a

08008180 <__sfputc_r>:
 8008180:	6893      	ldr	r3, [r2, #8]
 8008182:	3b01      	subs	r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	b410      	push	{r4}
 8008188:	6093      	str	r3, [r2, #8]
 800818a:	da08      	bge.n	800819e <__sfputc_r+0x1e>
 800818c:	6994      	ldr	r4, [r2, #24]
 800818e:	42a3      	cmp	r3, r4
 8008190:	db01      	blt.n	8008196 <__sfputc_r+0x16>
 8008192:	290a      	cmp	r1, #10
 8008194:	d103      	bne.n	800819e <__sfputc_r+0x1e>
 8008196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800819a:	f000 bb6d 	b.w	8008878 <__swbuf_r>
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	1c58      	adds	r0, r3, #1
 80081a2:	6010      	str	r0, [r2, #0]
 80081a4:	7019      	strb	r1, [r3, #0]
 80081a6:	4608      	mov	r0, r1
 80081a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <__sfputs_r>:
 80081ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b0:	4606      	mov	r6, r0
 80081b2:	460f      	mov	r7, r1
 80081b4:	4614      	mov	r4, r2
 80081b6:	18d5      	adds	r5, r2, r3
 80081b8:	42ac      	cmp	r4, r5
 80081ba:	d101      	bne.n	80081c0 <__sfputs_r+0x12>
 80081bc:	2000      	movs	r0, #0
 80081be:	e007      	b.n	80081d0 <__sfputs_r+0x22>
 80081c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c4:	463a      	mov	r2, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ffda 	bl	8008180 <__sfputc_r>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d1f3      	bne.n	80081b8 <__sfputs_r+0xa>
 80081d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081d4 <_vfiprintf_r>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	460d      	mov	r5, r1
 80081da:	b09d      	sub	sp, #116	@ 0x74
 80081dc:	4614      	mov	r4, r2
 80081de:	4698      	mov	r8, r3
 80081e0:	4606      	mov	r6, r0
 80081e2:	b118      	cbz	r0, 80081ec <_vfiprintf_r+0x18>
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	b90b      	cbnz	r3, 80081ec <_vfiprintf_r+0x18>
 80081e8:	f7ff fc30 	bl	8007a4c <__sinit>
 80081ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	d405      	bmi.n	80081fe <_vfiprintf_r+0x2a>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	059a      	lsls	r2, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_vfiprintf_r+0x2a>
 80081f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fa:	f7ff fd60 	bl	8007cbe <__retarget_lock_acquire_recursive>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	071b      	lsls	r3, r3, #28
 8008202:	d501      	bpl.n	8008208 <_vfiprintf_r+0x34>
 8008204:	692b      	ldr	r3, [r5, #16]
 8008206:	b99b      	cbnz	r3, 8008230 <_vfiprintf_r+0x5c>
 8008208:	4629      	mov	r1, r5
 800820a:	4630      	mov	r0, r6
 800820c:	f000 fb72 	bl	80088f4 <__swsetup_r>
 8008210:	b170      	cbz	r0, 8008230 <_vfiprintf_r+0x5c>
 8008212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008214:	07dc      	lsls	r4, r3, #31
 8008216:	d504      	bpl.n	8008222 <_vfiprintf_r+0x4e>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	b01d      	add	sp, #116	@ 0x74
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	0598      	lsls	r0, r3, #22
 8008226:	d4f7      	bmi.n	8008218 <_vfiprintf_r+0x44>
 8008228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800822a:	f7ff fd49 	bl	8007cc0 <__retarget_lock_release_recursive>
 800822e:	e7f3      	b.n	8008218 <_vfiprintf_r+0x44>
 8008230:	2300      	movs	r3, #0
 8008232:	9309      	str	r3, [sp, #36]	@ 0x24
 8008234:	2320      	movs	r3, #32
 8008236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800823a:	f8cd 800c 	str.w	r8, [sp, #12]
 800823e:	2330      	movs	r3, #48	@ 0x30
 8008240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083f0 <_vfiprintf_r+0x21c>
 8008244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008248:	f04f 0901 	mov.w	r9, #1
 800824c:	4623      	mov	r3, r4
 800824e:	469a      	mov	sl, r3
 8008250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008254:	b10a      	cbz	r2, 800825a <_vfiprintf_r+0x86>
 8008256:	2a25      	cmp	r2, #37	@ 0x25
 8008258:	d1f9      	bne.n	800824e <_vfiprintf_r+0x7a>
 800825a:	ebba 0b04 	subs.w	fp, sl, r4
 800825e:	d00b      	beq.n	8008278 <_vfiprintf_r+0xa4>
 8008260:	465b      	mov	r3, fp
 8008262:	4622      	mov	r2, r4
 8008264:	4629      	mov	r1, r5
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff ffa1 	bl	80081ae <__sfputs_r>
 800826c:	3001      	adds	r0, #1
 800826e:	f000 80a7 	beq.w	80083c0 <_vfiprintf_r+0x1ec>
 8008272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008274:	445a      	add	r2, fp
 8008276:	9209      	str	r2, [sp, #36]	@ 0x24
 8008278:	f89a 3000 	ldrb.w	r3, [sl]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 809f 	beq.w	80083c0 <_vfiprintf_r+0x1ec>
 8008282:	2300      	movs	r3, #0
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800828c:	f10a 0a01 	add.w	sl, sl, #1
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008298:	931a      	str	r3, [sp, #104]	@ 0x68
 800829a:	4654      	mov	r4, sl
 800829c:	2205      	movs	r2, #5
 800829e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a2:	4853      	ldr	r0, [pc, #332]	@ (80083f0 <_vfiprintf_r+0x21c>)
 80082a4:	f7f7 ffa4 	bl	80001f0 <memchr>
 80082a8:	9a04      	ldr	r2, [sp, #16]
 80082aa:	b9d8      	cbnz	r0, 80082e4 <_vfiprintf_r+0x110>
 80082ac:	06d1      	lsls	r1, r2, #27
 80082ae:	bf44      	itt	mi
 80082b0:	2320      	movmi	r3, #32
 80082b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b6:	0713      	lsls	r3, r2, #28
 80082b8:	bf44      	itt	mi
 80082ba:	232b      	movmi	r3, #43	@ 0x2b
 80082bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c6:	d015      	beq.n	80082f4 <_vfiprintf_r+0x120>
 80082c8:	9a07      	ldr	r2, [sp, #28]
 80082ca:	4654      	mov	r4, sl
 80082cc:	2000      	movs	r0, #0
 80082ce:	f04f 0c0a 	mov.w	ip, #10
 80082d2:	4621      	mov	r1, r4
 80082d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d8:	3b30      	subs	r3, #48	@ 0x30
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d94b      	bls.n	8008376 <_vfiprintf_r+0x1a2>
 80082de:	b1b0      	cbz	r0, 800830e <_vfiprintf_r+0x13a>
 80082e0:	9207      	str	r2, [sp, #28]
 80082e2:	e014      	b.n	800830e <_vfiprintf_r+0x13a>
 80082e4:	eba0 0308 	sub.w	r3, r0, r8
 80082e8:	fa09 f303 	lsl.w	r3, r9, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	46a2      	mov	sl, r4
 80082f2:	e7d2      	b.n	800829a <_vfiprintf_r+0xc6>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1d19      	adds	r1, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	9103      	str	r1, [sp, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfbb      	ittet	lt
 8008300:	425b      	neglt	r3, r3
 8008302:	f042 0202 	orrlt.w	r2, r2, #2
 8008306:	9307      	strge	r3, [sp, #28]
 8008308:	9307      	strlt	r3, [sp, #28]
 800830a:	bfb8      	it	lt
 800830c:	9204      	strlt	r2, [sp, #16]
 800830e:	7823      	ldrb	r3, [r4, #0]
 8008310:	2b2e      	cmp	r3, #46	@ 0x2e
 8008312:	d10a      	bne.n	800832a <_vfiprintf_r+0x156>
 8008314:	7863      	ldrb	r3, [r4, #1]
 8008316:	2b2a      	cmp	r3, #42	@ 0x2a
 8008318:	d132      	bne.n	8008380 <_vfiprintf_r+0x1ac>
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	9203      	str	r2, [sp, #12]
 8008322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008326:	3402      	adds	r4, #2
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008400 <_vfiprintf_r+0x22c>
 800832e:	7821      	ldrb	r1, [r4, #0]
 8008330:	2203      	movs	r2, #3
 8008332:	4650      	mov	r0, sl
 8008334:	f7f7 ff5c 	bl	80001f0 <memchr>
 8008338:	b138      	cbz	r0, 800834a <_vfiprintf_r+0x176>
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	eba0 000a 	sub.w	r0, r0, sl
 8008340:	2240      	movs	r2, #64	@ 0x40
 8008342:	4082      	lsls	r2, r0
 8008344:	4313      	orrs	r3, r2
 8008346:	3401      	adds	r4, #1
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834e:	4829      	ldr	r0, [pc, #164]	@ (80083f4 <_vfiprintf_r+0x220>)
 8008350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008354:	2206      	movs	r2, #6
 8008356:	f7f7 ff4b 	bl	80001f0 <memchr>
 800835a:	2800      	cmp	r0, #0
 800835c:	d03f      	beq.n	80083de <_vfiprintf_r+0x20a>
 800835e:	4b26      	ldr	r3, [pc, #152]	@ (80083f8 <_vfiprintf_r+0x224>)
 8008360:	bb1b      	cbnz	r3, 80083aa <_vfiprintf_r+0x1d6>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	3307      	adds	r3, #7
 8008366:	f023 0307 	bic.w	r3, r3, #7
 800836a:	3308      	adds	r3, #8
 800836c:	9303      	str	r3, [sp, #12]
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	443b      	add	r3, r7
 8008372:	9309      	str	r3, [sp, #36]	@ 0x24
 8008374:	e76a      	b.n	800824c <_vfiprintf_r+0x78>
 8008376:	fb0c 3202 	mla	r2, ip, r2, r3
 800837a:	460c      	mov	r4, r1
 800837c:	2001      	movs	r0, #1
 800837e:	e7a8      	b.n	80082d2 <_vfiprintf_r+0xfe>
 8008380:	2300      	movs	r3, #0
 8008382:	3401      	adds	r4, #1
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	4619      	mov	r1, r3
 8008388:	f04f 0c0a 	mov.w	ip, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008392:	3a30      	subs	r2, #48	@ 0x30
 8008394:	2a09      	cmp	r2, #9
 8008396:	d903      	bls.n	80083a0 <_vfiprintf_r+0x1cc>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0c6      	beq.n	800832a <_vfiprintf_r+0x156>
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	e7c4      	b.n	800832a <_vfiprintf_r+0x156>
 80083a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a4:	4604      	mov	r4, r0
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7f0      	b.n	800838c <_vfiprintf_r+0x1b8>
 80083aa:	ab03      	add	r3, sp, #12
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <_vfiprintf_r+0x228>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	4630      	mov	r0, r6
 80083b6:	f3af 8000 	nop.w
 80083ba:	4607      	mov	r7, r0
 80083bc:	1c78      	adds	r0, r7, #1
 80083be:	d1d6      	bne.n	800836e <_vfiprintf_r+0x19a>
 80083c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d405      	bmi.n	80083d2 <_vfiprintf_r+0x1fe>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	059a      	lsls	r2, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_vfiprintf_r+0x1fe>
 80083cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ce:	f7ff fc77 	bl	8007cc0 <__retarget_lock_release_recursive>
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	065b      	lsls	r3, r3, #25
 80083d6:	f53f af1f 	bmi.w	8008218 <_vfiprintf_r+0x44>
 80083da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083dc:	e71e      	b.n	800821c <_vfiprintf_r+0x48>
 80083de:	ab03      	add	r3, sp, #12
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	462a      	mov	r2, r5
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <_vfiprintf_r+0x228>)
 80083e6:	a904      	add	r1, sp, #16
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f879 	bl	80084e0 <_printf_i>
 80083ee:	e7e4      	b.n	80083ba <_vfiprintf_r+0x1e6>
 80083f0:	08009e14 	.word	0x08009e14
 80083f4:	08009e1e 	.word	0x08009e1e
 80083f8:	00000000 	.word	0x00000000
 80083fc:	080081af 	.word	0x080081af
 8008400:	08009e1a 	.word	0x08009e1a

08008404 <_printf_common>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	4616      	mov	r6, r2
 800840a:	4698      	mov	r8, r3
 800840c:	688a      	ldr	r2, [r1, #8]
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008414:	4293      	cmp	r3, r2
 8008416:	bfb8      	it	lt
 8008418:	4613      	movlt	r3, r2
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008420:	4607      	mov	r7, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b10a      	cbz	r2, 800842a <_printf_common+0x26>
 8008426:	3301      	adds	r3, #1
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	0699      	lsls	r1, r3, #26
 800842e:	bf42      	ittt	mi
 8008430:	6833      	ldrmi	r3, [r6, #0]
 8008432:	3302      	addmi	r3, #2
 8008434:	6033      	strmi	r3, [r6, #0]
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	f015 0506 	ands.w	r5, r5, #6
 800843c:	d106      	bne.n	800844c <_printf_common+0x48>
 800843e:	f104 0a19 	add.w	sl, r4, #25
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	6832      	ldr	r2, [r6, #0]
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	42ab      	cmp	r3, r5
 800844a:	dc26      	bgt.n	800849a <_printf_common+0x96>
 800844c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	3b00      	subs	r3, #0
 8008454:	bf18      	it	ne
 8008456:	2301      	movne	r3, #1
 8008458:	0692      	lsls	r2, r2, #26
 800845a:	d42b      	bmi.n	80084b4 <_printf_common+0xb0>
 800845c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008460:	4641      	mov	r1, r8
 8008462:	4638      	mov	r0, r7
 8008464:	47c8      	blx	r9
 8008466:	3001      	adds	r0, #1
 8008468:	d01e      	beq.n	80084a8 <_printf_common+0xa4>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	f003 0306 	and.w	r3, r3, #6
 8008472:	2b04      	cmp	r3, #4
 8008474:	bf02      	ittt	eq
 8008476:	68e5      	ldreq	r5, [r4, #12]
 8008478:	6833      	ldreq	r3, [r6, #0]
 800847a:	1aed      	subeq	r5, r5, r3
 800847c:	68a3      	ldr	r3, [r4, #8]
 800847e:	bf0c      	ite	eq
 8008480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008484:	2500      	movne	r5, #0
 8008486:	4293      	cmp	r3, r2
 8008488:	bfc4      	itt	gt
 800848a:	1a9b      	subgt	r3, r3, r2
 800848c:	18ed      	addgt	r5, r5, r3
 800848e:	2600      	movs	r6, #0
 8008490:	341a      	adds	r4, #26
 8008492:	42b5      	cmp	r5, r6
 8008494:	d11a      	bne.n	80084cc <_printf_common+0xc8>
 8008496:	2000      	movs	r0, #0
 8008498:	e008      	b.n	80084ac <_printf_common+0xa8>
 800849a:	2301      	movs	r3, #1
 800849c:	4652      	mov	r2, sl
 800849e:	4641      	mov	r1, r8
 80084a0:	4638      	mov	r0, r7
 80084a2:	47c8      	blx	r9
 80084a4:	3001      	adds	r0, #1
 80084a6:	d103      	bne.n	80084b0 <_printf_common+0xac>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	3501      	adds	r5, #1
 80084b2:	e7c6      	b.n	8008442 <_printf_common+0x3e>
 80084b4:	18e1      	adds	r1, r4, r3
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	2030      	movs	r0, #48	@ 0x30
 80084ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084be:	4422      	add	r2, r4
 80084c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084c8:	3302      	adds	r3, #2
 80084ca:	e7c7      	b.n	800845c <_printf_common+0x58>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4622      	mov	r2, r4
 80084d0:	4641      	mov	r1, r8
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c8      	blx	r9
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0e6      	beq.n	80084a8 <_printf_common+0xa4>
 80084da:	3601      	adds	r6, #1
 80084dc:	e7d9      	b.n	8008492 <_printf_common+0x8e>
	...

080084e0 <_printf_i>:
 80084e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	7e0f      	ldrb	r7, [r1, #24]
 80084e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084e8:	2f78      	cmp	r7, #120	@ 0x78
 80084ea:	4691      	mov	r9, r2
 80084ec:	4680      	mov	r8, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	469a      	mov	sl, r3
 80084f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084f6:	d807      	bhi.n	8008508 <_printf_i+0x28>
 80084f8:	2f62      	cmp	r7, #98	@ 0x62
 80084fa:	d80a      	bhi.n	8008512 <_printf_i+0x32>
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	f000 80d2 	beq.w	80086a6 <_printf_i+0x1c6>
 8008502:	2f58      	cmp	r7, #88	@ 0x58
 8008504:	f000 80b9 	beq.w	800867a <_printf_i+0x19a>
 8008508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800850c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008510:	e03a      	b.n	8008588 <_printf_i+0xa8>
 8008512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008516:	2b15      	cmp	r3, #21
 8008518:	d8f6      	bhi.n	8008508 <_printf_i+0x28>
 800851a:	a101      	add	r1, pc, #4	@ (adr r1, 8008520 <_printf_i+0x40>)
 800851c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008520:	08008579 	.word	0x08008579
 8008524:	0800858d 	.word	0x0800858d
 8008528:	08008509 	.word	0x08008509
 800852c:	08008509 	.word	0x08008509
 8008530:	08008509 	.word	0x08008509
 8008534:	08008509 	.word	0x08008509
 8008538:	0800858d 	.word	0x0800858d
 800853c:	08008509 	.word	0x08008509
 8008540:	08008509 	.word	0x08008509
 8008544:	08008509 	.word	0x08008509
 8008548:	08008509 	.word	0x08008509
 800854c:	0800868d 	.word	0x0800868d
 8008550:	080085b7 	.word	0x080085b7
 8008554:	08008647 	.word	0x08008647
 8008558:	08008509 	.word	0x08008509
 800855c:	08008509 	.word	0x08008509
 8008560:	080086af 	.word	0x080086af
 8008564:	08008509 	.word	0x08008509
 8008568:	080085b7 	.word	0x080085b7
 800856c:	08008509 	.word	0x08008509
 8008570:	08008509 	.word	0x08008509
 8008574:	0800864f 	.word	0x0800864f
 8008578:	6833      	ldr	r3, [r6, #0]
 800857a:	1d1a      	adds	r2, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6032      	str	r2, [r6, #0]
 8008580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008588:	2301      	movs	r3, #1
 800858a:	e09d      	b.n	80086c8 <_printf_i+0x1e8>
 800858c:	6833      	ldr	r3, [r6, #0]
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	0606      	lsls	r6, r0, #24
 8008596:	d501      	bpl.n	800859c <_printf_i+0xbc>
 8008598:	681d      	ldr	r5, [r3, #0]
 800859a:	e003      	b.n	80085a4 <_printf_i+0xc4>
 800859c:	0645      	lsls	r5, r0, #25
 800859e:	d5fb      	bpl.n	8008598 <_printf_i+0xb8>
 80085a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	da03      	bge.n	80085b0 <_printf_i+0xd0>
 80085a8:	232d      	movs	r3, #45	@ 0x2d
 80085aa:	426d      	negs	r5, r5
 80085ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085b0:	4859      	ldr	r0, [pc, #356]	@ (8008718 <_printf_i+0x238>)
 80085b2:	230a      	movs	r3, #10
 80085b4:	e011      	b.n	80085da <_printf_i+0xfa>
 80085b6:	6821      	ldr	r1, [r4, #0]
 80085b8:	6833      	ldr	r3, [r6, #0]
 80085ba:	0608      	lsls	r0, r1, #24
 80085bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80085c0:	d402      	bmi.n	80085c8 <_printf_i+0xe8>
 80085c2:	0649      	lsls	r1, r1, #25
 80085c4:	bf48      	it	mi
 80085c6:	b2ad      	uxthmi	r5, r5
 80085c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80085ca:	4853      	ldr	r0, [pc, #332]	@ (8008718 <_printf_i+0x238>)
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	bf14      	ite	ne
 80085d0:	230a      	movne	r3, #10
 80085d2:	2308      	moveq	r3, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085da:	6866      	ldr	r6, [r4, #4]
 80085dc:	60a6      	str	r6, [r4, #8]
 80085de:	2e00      	cmp	r6, #0
 80085e0:	bfa2      	ittt	ge
 80085e2:	6821      	ldrge	r1, [r4, #0]
 80085e4:	f021 0104 	bicge.w	r1, r1, #4
 80085e8:	6021      	strge	r1, [r4, #0]
 80085ea:	b90d      	cbnz	r5, 80085f0 <_printf_i+0x110>
 80085ec:	2e00      	cmp	r6, #0
 80085ee:	d04b      	beq.n	8008688 <_printf_i+0x1a8>
 80085f0:	4616      	mov	r6, r2
 80085f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80085f6:	fb03 5711 	mls	r7, r3, r1, r5
 80085fa:	5dc7      	ldrb	r7, [r0, r7]
 80085fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008600:	462f      	mov	r7, r5
 8008602:	42bb      	cmp	r3, r7
 8008604:	460d      	mov	r5, r1
 8008606:	d9f4      	bls.n	80085f2 <_printf_i+0x112>
 8008608:	2b08      	cmp	r3, #8
 800860a:	d10b      	bne.n	8008624 <_printf_i+0x144>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	07df      	lsls	r7, r3, #31
 8008610:	d508      	bpl.n	8008624 <_printf_i+0x144>
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	6861      	ldr	r1, [r4, #4]
 8008616:	4299      	cmp	r1, r3
 8008618:	bfde      	ittt	le
 800861a:	2330      	movle	r3, #48	@ 0x30
 800861c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008624:	1b92      	subs	r2, r2, r6
 8008626:	6122      	str	r2, [r4, #16]
 8008628:	f8cd a000 	str.w	sl, [sp]
 800862c:	464b      	mov	r3, r9
 800862e:	aa03      	add	r2, sp, #12
 8008630:	4621      	mov	r1, r4
 8008632:	4640      	mov	r0, r8
 8008634:	f7ff fee6 	bl	8008404 <_printf_common>
 8008638:	3001      	adds	r0, #1
 800863a:	d14a      	bne.n	80086d2 <_printf_i+0x1f2>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	b004      	add	sp, #16
 8008642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f043 0320 	orr.w	r3, r3, #32
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	4833      	ldr	r0, [pc, #204]	@ (800871c <_printf_i+0x23c>)
 8008650:	2778      	movs	r7, #120	@ 0x78
 8008652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	6831      	ldr	r1, [r6, #0]
 800865a:	061f      	lsls	r7, r3, #24
 800865c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008660:	d402      	bmi.n	8008668 <_printf_i+0x188>
 8008662:	065f      	lsls	r7, r3, #25
 8008664:	bf48      	it	mi
 8008666:	b2ad      	uxthmi	r5, r5
 8008668:	6031      	str	r1, [r6, #0]
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	bf44      	itt	mi
 800866e:	f043 0320 	orrmi.w	r3, r3, #32
 8008672:	6023      	strmi	r3, [r4, #0]
 8008674:	b11d      	cbz	r5, 800867e <_printf_i+0x19e>
 8008676:	2310      	movs	r3, #16
 8008678:	e7ac      	b.n	80085d4 <_printf_i+0xf4>
 800867a:	4827      	ldr	r0, [pc, #156]	@ (8008718 <_printf_i+0x238>)
 800867c:	e7e9      	b.n	8008652 <_printf_i+0x172>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	f023 0320 	bic.w	r3, r3, #32
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	e7f6      	b.n	8008676 <_printf_i+0x196>
 8008688:	4616      	mov	r6, r2
 800868a:	e7bd      	b.n	8008608 <_printf_i+0x128>
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	6825      	ldr	r5, [r4, #0]
 8008690:	6961      	ldr	r1, [r4, #20]
 8008692:	1d18      	adds	r0, r3, #4
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	062e      	lsls	r6, r5, #24
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	d501      	bpl.n	80086a0 <_printf_i+0x1c0>
 800869c:	6019      	str	r1, [r3, #0]
 800869e:	e002      	b.n	80086a6 <_printf_i+0x1c6>
 80086a0:	0668      	lsls	r0, r5, #25
 80086a2:	d5fb      	bpl.n	800869c <_printf_i+0x1bc>
 80086a4:	8019      	strh	r1, [r3, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	4616      	mov	r6, r2
 80086ac:	e7bc      	b.n	8008628 <_printf_i+0x148>
 80086ae:	6833      	ldr	r3, [r6, #0]
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	6032      	str	r2, [r6, #0]
 80086b4:	681e      	ldr	r6, [r3, #0]
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	2100      	movs	r1, #0
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7f7 fd98 	bl	80001f0 <memchr>
 80086c0:	b108      	cbz	r0, 80086c6 <_printf_i+0x1e6>
 80086c2:	1b80      	subs	r0, r0, r6
 80086c4:	6060      	str	r0, [r4, #4]
 80086c6:	6863      	ldr	r3, [r4, #4]
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	2300      	movs	r3, #0
 80086cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086d0:	e7aa      	b.n	8008628 <_printf_i+0x148>
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	4632      	mov	r2, r6
 80086d6:	4649      	mov	r1, r9
 80086d8:	4640      	mov	r0, r8
 80086da:	47d0      	blx	sl
 80086dc:	3001      	adds	r0, #1
 80086de:	d0ad      	beq.n	800863c <_printf_i+0x15c>
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	079b      	lsls	r3, r3, #30
 80086e4:	d413      	bmi.n	800870e <_printf_i+0x22e>
 80086e6:	68e0      	ldr	r0, [r4, #12]
 80086e8:	9b03      	ldr	r3, [sp, #12]
 80086ea:	4298      	cmp	r0, r3
 80086ec:	bfb8      	it	lt
 80086ee:	4618      	movlt	r0, r3
 80086f0:	e7a6      	b.n	8008640 <_printf_i+0x160>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4632      	mov	r2, r6
 80086f6:	4649      	mov	r1, r9
 80086f8:	4640      	mov	r0, r8
 80086fa:	47d0      	blx	sl
 80086fc:	3001      	adds	r0, #1
 80086fe:	d09d      	beq.n	800863c <_printf_i+0x15c>
 8008700:	3501      	adds	r5, #1
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	9903      	ldr	r1, [sp, #12]
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	42ab      	cmp	r3, r5
 800870a:	dcf2      	bgt.n	80086f2 <_printf_i+0x212>
 800870c:	e7eb      	b.n	80086e6 <_printf_i+0x206>
 800870e:	2500      	movs	r5, #0
 8008710:	f104 0619 	add.w	r6, r4, #25
 8008714:	e7f5      	b.n	8008702 <_printf_i+0x222>
 8008716:	bf00      	nop
 8008718:	08009e25 	.word	0x08009e25
 800871c:	08009e36 	.word	0x08009e36

08008720 <__sflush_r>:
 8008720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	0716      	lsls	r6, r2, #28
 800872a:	4605      	mov	r5, r0
 800872c:	460c      	mov	r4, r1
 800872e:	d454      	bmi.n	80087da <__sflush_r+0xba>
 8008730:	684b      	ldr	r3, [r1, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dc02      	bgt.n	800873c <__sflush_r+0x1c>
 8008736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	dd48      	ble.n	80087ce <__sflush_r+0xae>
 800873c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800873e:	2e00      	cmp	r6, #0
 8008740:	d045      	beq.n	80087ce <__sflush_r+0xae>
 8008742:	2300      	movs	r3, #0
 8008744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008748:	682f      	ldr	r7, [r5, #0]
 800874a:	6a21      	ldr	r1, [r4, #32]
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	d030      	beq.n	80087b2 <__sflush_r+0x92>
 8008750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	0759      	lsls	r1, r3, #29
 8008756:	d505      	bpl.n	8008764 <__sflush_r+0x44>
 8008758:	6863      	ldr	r3, [r4, #4]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800875e:	b10b      	cbz	r3, 8008764 <__sflush_r+0x44>
 8008760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	2300      	movs	r3, #0
 8008766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008768:	6a21      	ldr	r1, [r4, #32]
 800876a:	4628      	mov	r0, r5
 800876c:	47b0      	blx	r6
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	d106      	bne.n	8008782 <__sflush_r+0x62>
 8008774:	6829      	ldr	r1, [r5, #0]
 8008776:	291d      	cmp	r1, #29
 8008778:	d82b      	bhi.n	80087d2 <__sflush_r+0xb2>
 800877a:	4a2a      	ldr	r2, [pc, #168]	@ (8008824 <__sflush_r+0x104>)
 800877c:	410a      	asrs	r2, r1
 800877e:	07d6      	lsls	r6, r2, #31
 8008780:	d427      	bmi.n	80087d2 <__sflush_r+0xb2>
 8008782:	2200      	movs	r2, #0
 8008784:	6062      	str	r2, [r4, #4]
 8008786:	04d9      	lsls	r1, r3, #19
 8008788:	6922      	ldr	r2, [r4, #16]
 800878a:	6022      	str	r2, [r4, #0]
 800878c:	d504      	bpl.n	8008798 <__sflush_r+0x78>
 800878e:	1c42      	adds	r2, r0, #1
 8008790:	d101      	bne.n	8008796 <__sflush_r+0x76>
 8008792:	682b      	ldr	r3, [r5, #0]
 8008794:	b903      	cbnz	r3, 8008798 <__sflush_r+0x78>
 8008796:	6560      	str	r0, [r4, #84]	@ 0x54
 8008798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800879a:	602f      	str	r7, [r5, #0]
 800879c:	b1b9      	cbz	r1, 80087ce <__sflush_r+0xae>
 800879e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087a2:	4299      	cmp	r1, r3
 80087a4:	d002      	beq.n	80087ac <__sflush_r+0x8c>
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7ff fa9a 	bl	8007ce0 <_free_r>
 80087ac:	2300      	movs	r3, #0
 80087ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80087b0:	e00d      	b.n	80087ce <__sflush_r+0xae>
 80087b2:	2301      	movs	r3, #1
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b0      	blx	r6
 80087b8:	4602      	mov	r2, r0
 80087ba:	1c50      	adds	r0, r2, #1
 80087bc:	d1c9      	bne.n	8008752 <__sflush_r+0x32>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0c6      	beq.n	8008752 <__sflush_r+0x32>
 80087c4:	2b1d      	cmp	r3, #29
 80087c6:	d001      	beq.n	80087cc <__sflush_r+0xac>
 80087c8:	2b16      	cmp	r3, #22
 80087ca:	d11e      	bne.n	800880a <__sflush_r+0xea>
 80087cc:	602f      	str	r7, [r5, #0]
 80087ce:	2000      	movs	r0, #0
 80087d0:	e022      	b.n	8008818 <__sflush_r+0xf8>
 80087d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d6:	b21b      	sxth	r3, r3
 80087d8:	e01b      	b.n	8008812 <__sflush_r+0xf2>
 80087da:	690f      	ldr	r7, [r1, #16]
 80087dc:	2f00      	cmp	r7, #0
 80087de:	d0f6      	beq.n	80087ce <__sflush_r+0xae>
 80087e0:	0793      	lsls	r3, r2, #30
 80087e2:	680e      	ldr	r6, [r1, #0]
 80087e4:	bf08      	it	eq
 80087e6:	694b      	ldreq	r3, [r1, #20]
 80087e8:	600f      	str	r7, [r1, #0]
 80087ea:	bf18      	it	ne
 80087ec:	2300      	movne	r3, #0
 80087ee:	eba6 0807 	sub.w	r8, r6, r7
 80087f2:	608b      	str	r3, [r1, #8]
 80087f4:	f1b8 0f00 	cmp.w	r8, #0
 80087f8:	dde9      	ble.n	80087ce <__sflush_r+0xae>
 80087fa:	6a21      	ldr	r1, [r4, #32]
 80087fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087fe:	4643      	mov	r3, r8
 8008800:	463a      	mov	r2, r7
 8008802:	4628      	mov	r0, r5
 8008804:	47b0      	blx	r6
 8008806:	2800      	cmp	r0, #0
 8008808:	dc08      	bgt.n	800881c <__sflush_r+0xfc>
 800880a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881c:	4407      	add	r7, r0
 800881e:	eba8 0800 	sub.w	r8, r8, r0
 8008822:	e7e7      	b.n	80087f4 <__sflush_r+0xd4>
 8008824:	dfbffffe 	.word	0xdfbffffe

08008828 <_fflush_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	690b      	ldr	r3, [r1, #16]
 800882c:	4605      	mov	r5, r0
 800882e:	460c      	mov	r4, r1
 8008830:	b913      	cbnz	r3, 8008838 <_fflush_r+0x10>
 8008832:	2500      	movs	r5, #0
 8008834:	4628      	mov	r0, r5
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	b118      	cbz	r0, 8008842 <_fflush_r+0x1a>
 800883a:	6a03      	ldr	r3, [r0, #32]
 800883c:	b90b      	cbnz	r3, 8008842 <_fflush_r+0x1a>
 800883e:	f7ff f905 	bl	8007a4c <__sinit>
 8008842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0f3      	beq.n	8008832 <_fflush_r+0xa>
 800884a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800884c:	07d0      	lsls	r0, r2, #31
 800884e:	d404      	bmi.n	800885a <_fflush_r+0x32>
 8008850:	0599      	lsls	r1, r3, #22
 8008852:	d402      	bmi.n	800885a <_fflush_r+0x32>
 8008854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008856:	f7ff fa32 	bl	8007cbe <__retarget_lock_acquire_recursive>
 800885a:	4628      	mov	r0, r5
 800885c:	4621      	mov	r1, r4
 800885e:	f7ff ff5f 	bl	8008720 <__sflush_r>
 8008862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008864:	07da      	lsls	r2, r3, #31
 8008866:	4605      	mov	r5, r0
 8008868:	d4e4      	bmi.n	8008834 <_fflush_r+0xc>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	059b      	lsls	r3, r3, #22
 800886e:	d4e1      	bmi.n	8008834 <_fflush_r+0xc>
 8008870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008872:	f7ff fa25 	bl	8007cc0 <__retarget_lock_release_recursive>
 8008876:	e7dd      	b.n	8008834 <_fflush_r+0xc>

08008878 <__swbuf_r>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	460e      	mov	r6, r1
 800887c:	4614      	mov	r4, r2
 800887e:	4605      	mov	r5, r0
 8008880:	b118      	cbz	r0, 800888a <__swbuf_r+0x12>
 8008882:	6a03      	ldr	r3, [r0, #32]
 8008884:	b90b      	cbnz	r3, 800888a <__swbuf_r+0x12>
 8008886:	f7ff f8e1 	bl	8007a4c <__sinit>
 800888a:	69a3      	ldr	r3, [r4, #24]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	071a      	lsls	r2, r3, #28
 8008892:	d501      	bpl.n	8008898 <__swbuf_r+0x20>
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	b943      	cbnz	r3, 80088aa <__swbuf_r+0x32>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f82a 	bl	80088f4 <__swsetup_r>
 80088a0:	b118      	cbz	r0, 80088aa <__swbuf_r+0x32>
 80088a2:	f04f 37ff 	mov.w	r7, #4294967295
 80088a6:	4638      	mov	r0, r7
 80088a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	6922      	ldr	r2, [r4, #16]
 80088ae:	1a98      	subs	r0, r3, r2
 80088b0:	6963      	ldr	r3, [r4, #20]
 80088b2:	b2f6      	uxtb	r6, r6
 80088b4:	4283      	cmp	r3, r0
 80088b6:	4637      	mov	r7, r6
 80088b8:	dc05      	bgt.n	80088c6 <__swbuf_r+0x4e>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f7ff ffb3 	bl	8008828 <_fflush_r>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d1ed      	bne.n	80088a2 <__swbuf_r+0x2a>
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	701e      	strb	r6, [r3, #0]
 80088d4:	6962      	ldr	r2, [r4, #20]
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	429a      	cmp	r2, r3
 80088da:	d004      	beq.n	80088e6 <__swbuf_r+0x6e>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	07db      	lsls	r3, r3, #31
 80088e0:	d5e1      	bpl.n	80088a6 <__swbuf_r+0x2e>
 80088e2:	2e0a      	cmp	r6, #10
 80088e4:	d1df      	bne.n	80088a6 <__swbuf_r+0x2e>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7ff ff9d 	bl	8008828 <_fflush_r>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d0d9      	beq.n	80088a6 <__swbuf_r+0x2e>
 80088f2:	e7d6      	b.n	80088a2 <__swbuf_r+0x2a>

080088f4 <__swsetup_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4b29      	ldr	r3, [pc, #164]	@ (800899c <__swsetup_r+0xa8>)
 80088f8:	4605      	mov	r5, r0
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	460c      	mov	r4, r1
 80088fe:	b118      	cbz	r0, 8008908 <__swsetup_r+0x14>
 8008900:	6a03      	ldr	r3, [r0, #32]
 8008902:	b90b      	cbnz	r3, 8008908 <__swsetup_r+0x14>
 8008904:	f7ff f8a2 	bl	8007a4c <__sinit>
 8008908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890c:	0719      	lsls	r1, r3, #28
 800890e:	d422      	bmi.n	8008956 <__swsetup_r+0x62>
 8008910:	06da      	lsls	r2, r3, #27
 8008912:	d407      	bmi.n	8008924 <__swsetup_r+0x30>
 8008914:	2209      	movs	r2, #9
 8008916:	602a      	str	r2, [r5, #0]
 8008918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891c:	81a3      	strh	r3, [r4, #12]
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	e033      	b.n	800898c <__swsetup_r+0x98>
 8008924:	0758      	lsls	r0, r3, #29
 8008926:	d512      	bpl.n	800894e <__swsetup_r+0x5a>
 8008928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800892a:	b141      	cbz	r1, 800893e <__swsetup_r+0x4a>
 800892c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008930:	4299      	cmp	r1, r3
 8008932:	d002      	beq.n	800893a <__swsetup_r+0x46>
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff f9d3 	bl	8007ce0 <_free_r>
 800893a:	2300      	movs	r3, #0
 800893c:	6363      	str	r3, [r4, #52]	@ 0x34
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	2300      	movs	r3, #0
 8008948:	6063      	str	r3, [r4, #4]
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	f043 0308 	orr.w	r3, r3, #8
 8008954:	81a3      	strh	r3, [r4, #12]
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	b94b      	cbnz	r3, 800896e <__swsetup_r+0x7a>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008964:	d003      	beq.n	800896e <__swsetup_r+0x7a>
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f000 f897 	bl	8008a9c <__smakebuf_r>
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	f013 0201 	ands.w	r2, r3, #1
 8008976:	d00a      	beq.n	800898e <__swsetup_r+0x9a>
 8008978:	2200      	movs	r2, #0
 800897a:	60a2      	str	r2, [r4, #8]
 800897c:	6962      	ldr	r2, [r4, #20]
 800897e:	4252      	negs	r2, r2
 8008980:	61a2      	str	r2, [r4, #24]
 8008982:	6922      	ldr	r2, [r4, #16]
 8008984:	b942      	cbnz	r2, 8008998 <__swsetup_r+0xa4>
 8008986:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800898a:	d1c5      	bne.n	8008918 <__swsetup_r+0x24>
 800898c:	bd38      	pop	{r3, r4, r5, pc}
 800898e:	0799      	lsls	r1, r3, #30
 8008990:	bf58      	it	pl
 8008992:	6962      	ldrpl	r2, [r4, #20]
 8008994:	60a2      	str	r2, [r4, #8]
 8008996:	e7f4      	b.n	8008982 <__swsetup_r+0x8e>
 8008998:	2000      	movs	r0, #0
 800899a:	e7f7      	b.n	800898c <__swsetup_r+0x98>
 800899c:	20000214 	.word	0x20000214

080089a0 <memmove>:
 80089a0:	4288      	cmp	r0, r1
 80089a2:	b510      	push	{r4, lr}
 80089a4:	eb01 0402 	add.w	r4, r1, r2
 80089a8:	d902      	bls.n	80089b0 <memmove+0x10>
 80089aa:	4284      	cmp	r4, r0
 80089ac:	4623      	mov	r3, r4
 80089ae:	d807      	bhi.n	80089c0 <memmove+0x20>
 80089b0:	1e43      	subs	r3, r0, #1
 80089b2:	42a1      	cmp	r1, r4
 80089b4:	d008      	beq.n	80089c8 <memmove+0x28>
 80089b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089be:	e7f8      	b.n	80089b2 <memmove+0x12>
 80089c0:	4402      	add	r2, r0
 80089c2:	4601      	mov	r1, r0
 80089c4:	428a      	cmp	r2, r1
 80089c6:	d100      	bne.n	80089ca <memmove+0x2a>
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089d2:	e7f7      	b.n	80089c4 <memmove+0x24>

080089d4 <_sbrk_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	@ (80089f0 <_sbrk_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7fb f8c8 	bl	8003b74 <_sbrk>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_sbrk_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_sbrk_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	200261cc 	.word	0x200261cc

080089f4 <_realloc_r>:
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	4680      	mov	r8, r0
 80089fa:	4615      	mov	r5, r2
 80089fc:	460c      	mov	r4, r1
 80089fe:	b921      	cbnz	r1, 8008a0a <_realloc_r+0x16>
 8008a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	4611      	mov	r1, r2
 8008a06:	f7ff b9d7 	b.w	8007db8 <_malloc_r>
 8008a0a:	b92a      	cbnz	r2, 8008a18 <_realloc_r+0x24>
 8008a0c:	f7ff f968 	bl	8007ce0 <_free_r>
 8008a10:	2400      	movs	r4, #0
 8008a12:	4620      	mov	r0, r4
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	f000 f89e 	bl	8008b58 <_malloc_usable_size_r>
 8008a1c:	4285      	cmp	r5, r0
 8008a1e:	4606      	mov	r6, r0
 8008a20:	d802      	bhi.n	8008a28 <_realloc_r+0x34>
 8008a22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a26:	d8f4      	bhi.n	8008a12 <_realloc_r+0x1e>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff f9c4 	bl	8007db8 <_malloc_r>
 8008a30:	4607      	mov	r7, r0
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d0ec      	beq.n	8008a10 <_realloc_r+0x1c>
 8008a36:	42b5      	cmp	r5, r6
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	bf28      	it	cs
 8008a3e:	4632      	movcs	r2, r6
 8008a40:	f7ff f93f 	bl	8007cc2 <memcpy>
 8008a44:	4621      	mov	r1, r4
 8008a46:	4640      	mov	r0, r8
 8008a48:	f7ff f94a 	bl	8007ce0 <_free_r>
 8008a4c:	463c      	mov	r4, r7
 8008a4e:	e7e0      	b.n	8008a12 <_realloc_r+0x1e>

08008a50 <__swhatbuf_r>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	b096      	sub	sp, #88	@ 0x58
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	461e      	mov	r6, r3
 8008a60:	da0d      	bge.n	8008a7e <__swhatbuf_r+0x2e>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	bf14      	ite	ne
 8008a6e:	2340      	movne	r3, #64	@ 0x40
 8008a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a74:	2000      	movs	r0, #0
 8008a76:	6031      	str	r1, [r6, #0]
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	b016      	add	sp, #88	@ 0x58
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	466a      	mov	r2, sp
 8008a80:	f000 f848 	bl	8008b14 <_fstat_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	dbec      	blt.n	8008a62 <__swhatbuf_r+0x12>
 8008a88:	9901      	ldr	r1, [sp, #4]
 8008a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a92:	4259      	negs	r1, r3
 8008a94:	4159      	adcs	r1, r3
 8008a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a9a:	e7eb      	b.n	8008a74 <__swhatbuf_r+0x24>

08008a9c <__smakebuf_r>:
 8008a9c:	898b      	ldrh	r3, [r1, #12]
 8008a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa0:	079d      	lsls	r5, r3, #30
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	d507      	bpl.n	8008ab8 <__smakebuf_r+0x1c>
 8008aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	6123      	str	r3, [r4, #16]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	6163      	str	r3, [r4, #20]
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab8:	ab01      	add	r3, sp, #4
 8008aba:	466a      	mov	r2, sp
 8008abc:	f7ff ffc8 	bl	8008a50 <__swhatbuf_r>
 8008ac0:	9f00      	ldr	r7, [sp, #0]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff f976 	bl	8007db8 <_malloc_r>
 8008acc:	b948      	cbnz	r0, 8008ae2 <__smakebuf_r+0x46>
 8008ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad2:	059a      	lsls	r2, r3, #22
 8008ad4:	d4ee      	bmi.n	8008ab4 <__smakebuf_r+0x18>
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	f043 0302 	orr.w	r3, r3, #2
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	e7e2      	b.n	8008aa8 <__smakebuf_r+0xc>
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	6020      	str	r0, [r4, #0]
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008af2:	b15b      	cbz	r3, 8008b0c <__smakebuf_r+0x70>
 8008af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 f81d 	bl	8008b38 <_isatty_r>
 8008afe:	b128      	cbz	r0, 8008b0c <__smakebuf_r+0x70>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	431d      	orrs	r5, r3
 8008b10:	81a5      	strh	r5, [r4, #12]
 8008b12:	e7cf      	b.n	8008ab4 <__smakebuf_r+0x18>

08008b14 <_fstat_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d07      	ldr	r5, [pc, #28]	@ (8008b34 <_fstat_r+0x20>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	f000 f829 	bl	8008b78 <_fstat>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d102      	bne.n	8008b30 <_fstat_r+0x1c>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	b103      	cbz	r3, 8008b30 <_fstat_r+0x1c>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	bf00      	nop
 8008b34:	200261cc 	.word	0x200261cc

08008b38 <_isatty_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d06      	ldr	r5, [pc, #24]	@ (8008b54 <_isatty_r+0x1c>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f000 f820 	bl	8008b88 <_isatty>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_isatty_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_isatty_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	200261cc 	.word	0x200261cc

08008b58 <_malloc_usable_size_r>:
 8008b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5c:	1f18      	subs	r0, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfbc      	itt	lt
 8008b62:	580b      	ldrlt	r3, [r1, r0]
 8008b64:	18c0      	addlt	r0, r0, r3
 8008b66:	4770      	bx	lr

08008b68 <_close>:
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <_close+0xc>)
 8008b6a:	2258      	movs	r2, #88	@ 0x58
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b72:	4770      	bx	lr
 8008b74:	200261cc 	.word	0x200261cc

08008b78 <_fstat>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	@ (8008b84 <_fstat+0xc>)
 8008b7a:	2258      	movs	r2, #88	@ 0x58
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	4770      	bx	lr
 8008b84:	200261cc 	.word	0x200261cc

08008b88 <_isatty>:
 8008b88:	4b02      	ldr	r3, [pc, #8]	@ (8008b94 <_isatty+0xc>)
 8008b8a:	2258      	movs	r2, #88	@ 0x58
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	2000      	movs	r0, #0
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	200261cc 	.word	0x200261cc

08008b98 <_lseek>:
 8008b98:	4b02      	ldr	r3, [pc, #8]	@ (8008ba4 <_lseek+0xc>)
 8008b9a:	2258      	movs	r2, #88	@ 0x58
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba2:	4770      	bx	lr
 8008ba4:	200261cc 	.word	0x200261cc

08008ba8 <_read>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	@ (8008bb4 <_read+0xc>)
 8008baa:	2258      	movs	r2, #88	@ 0x58
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	4770      	bx	lr
 8008bb4:	200261cc 	.word	0x200261cc

08008bb8 <_write>:
 8008bb8:	4b02      	ldr	r3, [pc, #8]	@ (8008bc4 <_write+0xc>)
 8008bba:	2258      	movs	r2, #88	@ 0x58
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	4770      	bx	lr
 8008bc4:	200261cc 	.word	0x200261cc

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
