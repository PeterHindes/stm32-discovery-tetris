
PHindesFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d4  080087d4  0000a264  2**0
                  CONTENTS
  4 .ARM          00000008  080087d4  080087d4  000097d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087dc  080087dc  0000a264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087e0  080087e0  000097e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  080087e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a264  2**0
                  CONTENTS
 10 .bss          00025f34  20000264  20000264  0000a264  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026198  20026198  0000a264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015919  00000000  00000000  0000a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1f  00000000  00000000  0001fbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  000235d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001088  00000000  00000000  00024b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e9f  00000000  00000000  00025be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be3b  00000000  00000000  0004da7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e320a  00000000  00000000  000698ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014cac4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006090  00000000  00000000  0014cb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00152b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007540 	.word	0x08007540

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	08007540 	.word	0x08007540

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fd7a 	bl	800307c <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa96 	bl	8000ab8 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa53 	bl	8000a38 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fbd6 	bl	8000d48 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fcd6 	bl	8000f4c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f869 	bl	800067c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000280 	.word	0x20000280

080005b4 <Determine_Touch_Quadrant>:
		}
	}
}

uint8_t Determine_Touch_Quadrant(uint16_t x, uint16_t y, uint16_t screenWidth, uint16_t screenHeight)
{
 80005b4:	b490      	push	{r4, r7}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
    // Calculate center of the screen
    int16_t centerX = screenWidth / 2;
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	085b      	lsrs	r3, r3, #1
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	81fb      	strh	r3, [r7, #14]
    int16_t centerY = screenHeight / 2;
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	085b      	lsrs	r3, r3, #1
 80005de:	b29b      	uxth	r3, r3
 80005e0:	81bb      	strh	r3, [r7, #12]

    // Calculate relative position from the center
    int16_t relX = x - centerX;
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	817b      	strh	r3, [r7, #10]
    int16_t relY = centerY - y; // Invert Y-axis as screen Y grows downward
 80005ec:	89ba      	ldrh	r2, [r7, #12]
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	813b      	strh	r3, [r7, #8]

    // Determine the rotated quadrant based on diagonal boundaries
    if (relY > relX && relY > -relX) {
 80005f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dd08      	ble.n	8000614 <Determine_Touch_Quadrant+0x60>
 8000602:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800060a:	425b      	negs	r3, r3
 800060c:	429a      	cmp	r2, r3
 800060e:	dd01      	ble.n	8000614 <Determine_Touch_Quadrant+0x60>
        return 0; // Up (Quadrant 1)
 8000610:	2300      	movs	r3, #0
 8000612:	e02d      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY > -relX) {
 8000614:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000618:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800061c:	429a      	cmp	r2, r3
 800061e:	dc08      	bgt.n	8000632 <Determine_Touch_Quadrant+0x7e>
 8000620:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000628:	425b      	negs	r3, r3
 800062a:	429a      	cmp	r2, r3
 800062c:	dd01      	ble.n	8000632 <Determine_Touch_Quadrant+0x7e>
        return 1; // Right (Quadrant 2)
 800062e:	2301      	movs	r3, #1
 8000630:	e01e      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY <= relX && relY <= -relX) {
 8000632:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000636:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800063a:	429a      	cmp	r2, r3
 800063c:	dc08      	bgt.n	8000650 <Determine_Touch_Quadrant+0x9c>
 800063e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000642:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000646:	425b      	negs	r3, r3
 8000648:	429a      	cmp	r2, r3
 800064a:	dc01      	bgt.n	8000650 <Determine_Touch_Quadrant+0x9c>
        return 2; // Down (Quadrant 3)
 800064c:	2302      	movs	r3, #2
 800064e:	e00f      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    } else if (relY > relX && relY <= -relX) {
 8000650:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000654:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000658:	429a      	cmp	r2, r3
 800065a:	dd08      	ble.n	800066e <Determine_Touch_Quadrant+0xba>
 800065c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000664:	425b      	negs	r3, r3
 8000666:	429a      	cmp	r2, r3
 8000668:	dc01      	bgt.n	800066e <Determine_Touch_Quadrant+0xba>
        return 3; // Left (Quadrant 4)
 800066a:	2303      	movs	r3, #3
 800066c:	e000      	b.n	8000670 <Determine_Touch_Quadrant+0xbc>
    }

    // Fallback (should not happen)
    return -1;
 800066e:	23ff      	movs	r3, #255	@ 0xff
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bc90      	pop	{r4, r7}
 8000678:	4770      	bx	lr
	...

0800067c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000694:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000696:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800069a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006c6:	f002 ffdd 	bl	8003684 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ca:	2028      	movs	r0, #40	@ 0x28
 80006cc:	f002 ff8b 	bl	80035e6 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006d2:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	20000288 	.word	0x20000288
 80006ec:	0600000f 	.word	0x0600000f

080006f0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006f6:	2028      	movs	r0, #40	@ 0x28
 80006f8:	f002 ff83 	bl	8003602 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000706:	e006      	b.n	8000716 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000708:	204c      	movs	r0, #76	@ 0x4c
 800070a:	f002 fa26 	bl	8002b5a <STMPE811_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b5a      	ldr	r3, [pc, #360]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000714:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <EXTI15_10_IRQHandler+0x18c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f4      	beq.n	8000708 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 fc2a 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000724:	4603      	mov	r3, r0
 8000726:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000728:	2100      	movs	r1, #0
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fc32 	bl	8000f94 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000730:	200b      	movs	r0, #11
 8000732:	f000 fc21 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b51      	ldr	r3, [pc, #324]	@ (8000880 <EXTI15_10_IRQHandler+0x190>)
 800073c:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800073e:	4b50      	ldr	r3, [pc, #320]	@ (8000880 <EXTI15_10_IRQHandler+0x190>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000748:	797b      	ldrb	r3, [r7, #5]
 800074a:	4619      	mov	r1, r3
 800074c:	200b      	movs	r0, #11
 800074e:	f000 fc21 	bl	8000f94 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000752:	2040      	movs	r0, #64	@ 0x40
 8000754:	f000 fc10 	bl	8000f78 <ReadRegisterFromTouchModule>
 8000758:	4603      	mov	r3, r0
 800075a:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 800075c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da01      	bge.n	8000768 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000764:	2301      	movs	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d062      	beq.n	8000834 <EXTI15_10_IRQHandler+0x144>
	{
		printf("\nPressed");
 800076e:	4845      	ldr	r0, [pc, #276]	@ (8000884 <EXTI15_10_IRQHandler+0x194>)
 8000770:	f006 f86a 	bl	8006848 <iprintf>
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 8000774:	4844      	ldr	r0, [pc, #272]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000776:	f000 fbf4 	bl	8000f62 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 800077a:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000782:	885b      	ldrh	r3, [r3, #2]
 8000784:	461a      	mov	r2, r3
 8000786:	4841      	ldr	r0, [pc, #260]	@ (800088c <EXTI15_10_IRQHandler+0x19c>)
 8000788:	f006 f85e 	bl	8006848 <iprintf>

		if (activeScreen == 0){
 800078c:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d128      	bne.n	80007e6 <EXTI15_10_IRQHandler+0xf6>
			if (startClicked(StaticTouchData.x, LCD_PIXEL_HEIGHT-StaticTouchData.y)){
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f001 fe39 	bl	800241c <startClicked>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d044      	beq.n	800083a <EXTI15_10_IRQHandler+0x14a>
				LCD_SetTextColor(LCD_COLOR_WHITE);
 80007b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80007b4:	f000 faea 	bl	8000d8c <LCD_SetTextColor>
				LCD_SetFont(&Font16x24);
 80007b8:	4836      	ldr	r0, [pc, #216]	@ (8000894 <EXTI15_10_IRQHandler+0x1a4>)
 80007ba:	f000 faf7 	bl	8000dac <LCD_SetFont>
				LCD_DisplayString(30,190, "Starting...");
 80007be:	4a36      	ldr	r2, [pc, #216]	@ (8000898 <EXTI15_10_IRQHandler+0x1a8>)
 80007c0:	21be      	movs	r1, #190	@ 0xbe
 80007c2:	201e      	movs	r0, #30
 80007c4:	f000 fb92 	bl	8000eec <LCD_DisplayString>
//				HAL_Delay(200);
				activeScreen = 1;
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	801a      	strh	r2, [r3, #0]
				initGame();
 80007ce:	f000 ff6f 	bl	80016b0 <initGame>
//				HAL_Delay(2);
				LCD_Clear(0, LCD_COLOR_BLACK);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fab7 	bl	8000d48 <LCD_Clear>
				showGameScreen();
 80007da:	f001 fe41 	bl	8002460 <showGameScreen>
				Draw_Arrows_On_Screen(-1);
 80007de:	20ff      	movs	r0, #255	@ 0xff
 80007e0:	f000 fd2e 	bl	8001240 <Draw_Arrows_On_Screen>
 80007e4:	e029      	b.n	800083a <EXTI15_10_IRQHandler+0x14a>
			}
		} else if (activeScreen == 1){
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <EXTI15_10_IRQHandler+0x1a0>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d125      	bne.n	800083a <EXTI15_10_IRQHandler+0x14a>
			LCD_Clear(0, LCD_COLOR_BLACK);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 faa9 	bl	8000d48 <LCD_Clear>

			uint8_t activeArrow = Determine_Touch_Quadrant(StaticTouchData.x,LCD_PIXEL_HEIGHT-StaticTouchData.y , LCD_PIXEL_WIDTH, LCD_PIXEL_HEIGHT);
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 80007f8:	8818      	ldrh	r0, [r3, #0]
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <EXTI15_10_IRQHandler+0x198>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000802:	b299      	uxth	r1, r3
 8000804:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000808:	22f0      	movs	r2, #240	@ 0xf0
 800080a:	f7ff fed3 	bl	80005b4 <Determine_Touch_Quadrant>
 800080e:	4603      	mov	r3, r0
 8000810:	70fb      	strb	r3, [r7, #3]
			Draw_Arrows_On_Screen(activeArrow);
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd13 	bl	8001240 <Draw_Arrows_On_Screen>

//			currentPiece = nextPiece;
//			initializeRandomPiece( & nextPiece);

			handleInput(& board, & currentPiece, activeArrow);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	461a      	mov	r2, r3
 800081e:	491f      	ldr	r1, [pc, #124]	@ (800089c <EXTI15_10_IRQHandler+0x1ac>)
 8000820:	481f      	ldr	r0, [pc, #124]	@ (80008a0 <EXTI15_10_IRQHandler+0x1b0>)
 8000822:	f001 f891 	bl	8001948 <handleInput>

			showGameScreen();
 8000826:	f001 fe1b 	bl	8002460 <showGameScreen>
			Draw_Arrows_On_Screen(activeArrow);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fd07 	bl	8001240 <Draw_Arrows_On_Screen>
 8000832:	e002      	b.n	800083a <EXTI15_10_IRQHandler+0x14a>
		}
	}else{
		/* Touch not pressed */
		Draw_Arrows_On_Screen(-1);
 8000834:	20ff      	movs	r0, #255	@ 0xff
 8000836:	f000 fd03 	bl	8001240 <Draw_Arrows_On_Screen>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800083a:	2101      	movs	r1, #1
 800083c:	204b      	movs	r0, #75	@ 0x4b
 800083e:	f002 f99d 	bl	8002b7c <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000842:	2100      	movs	r1, #0
 8000844:	204b      	movs	r0, #75	@ 0x4b
 8000846:	f002 f999 	bl	8002b7c <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4619      	mov	r1, r3
 800084e:	200a      	movs	r0, #10
 8000850:	f000 fba0 	bl	8000f94 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000854:	2103      	movs	r1, #3
 8000856:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <EXTI15_10_IRQHandler+0x1b4>)
 8000858:	f002 fefc 	bl	8003654 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800085c:	2028      	movs	r0, #40	@ 0x28
 800085e:	f002 feea 	bl	8003636 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000862:	2028      	movs	r0, #40	@ 0x28
 8000864:	f002 febf 	bl	80035e6 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	4619      	mov	r1, r3
 800086c:	200b      	movs	r0, #11
 800086e:	f000 fb91 	bl	8000f94 <WriteDataToTouchModule>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000294 	.word	0x20000294
 8000880:	20000290 	.word	0x20000290
 8000884:	0800757c 	.word	0x0800757c
 8000888:	20000280 	.word	0x20000280
 800088c:	08007588 	.word	0x08007588
 8000890:	20025fe8 	.word	0x20025fe8
 8000894:	20000004 	.word	0x20000004
 8000898:	0800759c 	.word	0x0800759c
 800089c:	20025e94 	.word	0x20025e94
 80008a0:	20025b74 	.word	0x20025b74
 80008a4:	20000288 	.word	0x20000288

080008a8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a59      	ldr	r2, [pc, #356]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a52      	ldr	r2, [pc, #328]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a4b      	ldr	r2, [pc, #300]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b42      	ldr	r3, [pc, #264]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a3d      	ldr	r2, [pc, #244]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b37      	ldr	r3, [pc, #220]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a36      	ldr	r2, [pc, #216]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000972:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000976:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000984:	230e      	movs	r3, #14
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4824      	ldr	r0, [pc, #144]	@ (8000a20 <LCD_GPIO_Init+0x178>)
 8000990:	f002 fe78 	bl	8003684 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000994:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000998:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4820      	ldr	r0, [pc, #128]	@ (8000a24 <LCD_GPIO_Init+0x17c>)
 80009a2:	f002 fe6f 	bl	8003684 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009a6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <LCD_GPIO_Init+0x180>)
 80009b4:	f002 fe66 	bl	8003684 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009b8:	2348      	movs	r3, #72	@ 0x48
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <LCD_GPIO_Init+0x184>)
 80009c4:	f002 fe5e 	bl	8003684 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <LCD_GPIO_Init+0x188>)
 80009d6:	f002 fe55 	bl	8003684 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009de:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <LCD_GPIO_Init+0x18c>)
 80009e8:	f002 fe4c 	bl	8003684 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009f0:	2309      	movs	r3, #9
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480a      	ldr	r0, [pc, #40]	@ (8000a24 <LCD_GPIO_Init+0x17c>)
 80009fc:	f002 fe42 	bl	8003684 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <LCD_GPIO_Init+0x18c>)
 8000a0e:	f002 fe39 	bl	8003684 <HAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40021800 	.word	0x40021800

08000a38 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b090      	sub	sp, #64	@ 0x40
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a46:	23f0      	movs	r3, #240	@ 0xf0
 8000a48:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a4e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a52:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a58:	23ff      	movs	r3, #255	@ 0xff
 8000a5a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a66:	2305      	movs	r3, #5
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <LTCD_Layer_Init+0x78>)
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a74:	23f0      	movs	r3, #240	@ 0xf0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a78:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a90:	79fa      	ldrb	r2, [r7, #7]
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <LTCD_Layer_Init+0x7c>)
 8000a9a:	f004 f9b9 	bl	8004e10 <HAL_LTDC_ConfigLayer>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000aa4:	f000 fa4c 	bl	8000f40 <LCD_Error_Handler>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	@ 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000374 	.word	0x20000374
 8000ab4:	20000298 	.word	0x20000298

08000ab8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <LTCD__Init+0xb0>)
 8000abe:	4a2b      	ldr	r2, [pc, #172]	@ (8000b6c <LTCD__Init+0xb4>)
 8000ac0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <LTCD__Init+0xb0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ad0:	221d      	movs	r2, #29
 8000ad2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ada:	4b23      	ldr	r3, [pc, #140]	@ (8000b68 <LTCD__Init+0xb0>)
 8000adc:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <LTCD__Init+0xb0>)
 8000ae4:	f240 1243 	movw	r2, #323	@ 0x143
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <LTCD__Init+0xb0>)
 8000aec:	f240 1217 	movw	r2, #279	@ 0x117
 8000af0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <LTCD__Init+0xb0>)
 8000af4:	f240 1247 	movw	r2, #327	@ 0x147
 8000af8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <LTCD__Init+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b14:	2208      	movs	r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b1a:	22c0      	movs	r2, #192	@ 0xc0
 8000b1c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b20:	2204      	movs	r2, #4
 8000b22:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b2c:	4810      	ldr	r0, [pc, #64]	@ (8000b70 <LTCD__Init+0xb8>)
 8000b2e:	f004 ffc9 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b4a:	f7ff fead 	bl	80008a8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <LTCD__Init+0xb0>)
 8000b50:	f004 f88e 	bl	8004c70 <HAL_LTDC_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b5a:	f000 f9f1 	bl	8000f40 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b5e:	f001 f849 	bl	8001bf4 <ili9341_Init>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000298 	.word	0x20000298
 8000b6c:	40016800 	.word	0x40016800
 8000b70:	20000340 	.word	0x20000340

08000b74 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	807b      	strh	r3, [r7, #2]
		HAL_Delay(1);
		drawn = 0;
	}
#endif
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	if (x>=0 && y>=0 && x <LCD_PIXEL_WIDTH && y<LCD_PIXEL_HEIGHT) {
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	2bef      	cmp	r3, #239	@ 0xef
 8000b8a:	d80f      	bhi.n	8000bac <LCD_Draw_Pixel+0x38>
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b92:	d20b      	bcs.n	8000bac <LCD_Draw_Pixel+0x38>
#endif
		frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000b94:	88ba      	ldrh	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4904      	ldr	r1, [pc, #16]	@ (8000bb8 <LCD_Draw_Pixel+0x44>)
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#if PREVENT_PIXEL_OUT_OF_BOUNDS == 1
	}
#endif
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000374 	.word	0x20000374

08000bbc <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4623      	mov	r3, r4
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	425b      	negs	r3, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	e034      	b.n	8000c4e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	425b      	negs	r3, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	81bb      	strh	r3, [r7, #12]
 8000bec:	e024      	b.n	8000c38 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000bee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bf2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bf6:	fb03 f202 	mul.w	r2, r3, r2
 8000bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	441a      	add	r2, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	8879      	ldrh	r1, [r7, #2]
 8000c0c:	fb01 f303 	mul.w	r3, r1, r3
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dc0b      	bgt.n	8000c2c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c14:	89ba      	ldrh	r2, [r7, #12]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	883a      	ldrh	r2, [r7, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff ffa4 	bl	8000b74 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
 8000c38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	ddd5      	ble.n	8000bee <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	81fb      	strh	r3, [r7, #14]
 8000c4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	ddc5      	ble.n	8000be4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}

08000c62 <LCD_Draw_Rectangle_Fill>:

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, int16_t Xlen, int16_t Ylen, uint16_t color)
{
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4604      	mov	r4, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4623      	mov	r3, r4
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4603      	mov	r3, r0
 8000c76:	80bb      	strh	r3, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	803b      	strh	r3, [r7, #0]
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	e01c      	b.n	8000cc0 <LCD_Draw_Rectangle_Fill+0x5e>
    {
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	81bb      	strh	r3, [r7, #12]
 8000c8a:	e00b      	b.n	8000ca4 <LCD_Draw_Rectangle_Fill+0x42>
        {
            LCD_Draw_Pixel(x, y, color);
 8000c8c:	89bb      	ldrh	r3, [r7, #12]
 8000c8e:	89f9      	ldrh	r1, [r7, #14]
 8000c90:	8c3a      	ldrh	r2, [r7, #32]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff6e 	bl	8000b74 <LCD_Draw_Pixel>
        for(int16_t x = Xpos; x < Xpos + Xlen; x++)
 8000c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	81bb      	strh	r3, [r7, #12]
 8000ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ca8:	88f9      	ldrh	r1, [r7, #6]
 8000caa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cae:	440b      	add	r3, r1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbeb      	blt.n	8000c8c <LCD_Draw_Rectangle_Fill+0x2a>
    for(int16_t y = Ypos; y < Ypos + Ylen; y++)
 8000cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	81fb      	strh	r3, [r7, #14]
 8000cc0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc4:	88b9      	ldrh	r1, [r7, #4]
 8000cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cca:	440b      	add	r3, r1
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbda      	blt.n	8000c86 <LCD_Draw_Rectangle_Fill+0x24>
        }
    }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}

08000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>:
//            LCD_Draw_Pixel(Xpos + x, Ypos + y, color);
//        }
//    }
//}
void Draw_BottomLeft_to_TopRight_Triangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t color)
{
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4623      	mov	r3, r4
 8000cea:	80fb      	strh	r3, [r7, #6]
 8000cec:	4603      	mov	r3, r0
 8000cee:	80bb      	strh	r3, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	803b      	strh	r3, [r7, #0]
    for (int y = 0; y < size; y++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e01a      	b.n	8000d34 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x5a>
        for (int x = 0; x <= y; x++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	e010      	b.n	8000d26 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x4c>
            LCD_Draw_Pixel(Xpos + x, Ypos - y, color);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	88ba      	ldrh	r2, [r7, #4]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	883a      	ldrh	r2, [r7, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff ff2a 	bl	8000b74 <LCD_Draw_Pixel>
        for (int x = 0; x <= y; x++) {
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	ddea      	ble.n	8000d04 <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x2a>
    for (int y = 0; y < size; y++) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbe0      	blt.n	8000cfe <Draw_BottomLeft_to_TopRight_Triangle_Fill+0x24>
        }
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
	...

08000d48 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10e      	bne.n	8000d7c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e007      	b.n	8000d74 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d64:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <LCD_Clear+0x40>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d7a:	d3f3      	bcc.n	8000d64 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000374 	.word	0x20000374

08000d8c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <LCD_SetTextColor+0x1c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	8013      	strh	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000000 	.word	0x20000000

08000dac <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <LCD_SetFont+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000370 	.word	0x20000370

08000dcc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e04c      	b.n	8000e84 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	e03f      	b.n	8000e70 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	4a27      	ldr	r2, [pc, #156]	@ (8000ea0 <LCD_Draw_Char+0xd4>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	fa42 f303 	asr.w	r3, r2, r3
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <LCD_Draw_Char+0x5c>
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	889b      	ldrh	r3, [r3, #4]
 8000e24:	2b0c      	cmp	r3, #12
 8000e26:	d920      	bls.n	8000e6a <LCD_Draw_Char+0x9e>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	fa42 f303 	asr.w	r3, r2, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d104      	bne.n	8000e4c <LCD_Draw_Char+0x80>
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d80e      	bhi.n	8000e6a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <LCD_Draw_Char+0xd8>)
 8000e62:	8812      	ldrh	r2, [r2, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fe85 	bl	8000b74 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3b8      	bcc.n	8000df0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	88db      	ldrh	r3, [r3, #6]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d3ab      	bcc.n	8000dea <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000370 	.word	0x20000370
 8000ea0:	aaaaaaab 	.word	0xaaaaaaab
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	3b20      	subs	r3, #32
 8000ebe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	88c9      	ldrh	r1, [r1, #6]
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	441a      	add	r2, r3
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff76 	bl	8000dcc <LCD_Draw_Char>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000370 	.word	0x20000370

08000eec <LCD_DisplayString>:

void LCD_DisplayString(int x, int y, const char *str) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
    int charSpacing = 16; // Adjust character spacing as needed
 8000ef8:	2310      	movs	r3, #16
 8000efa:	617b      	str	r3, [r7, #20]
    int currentX = x;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	61fb      	str	r3, [r7, #28]

    // Loop through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	e011      	b.n	8000f2a <LCD_DisplayString+0x3e>
        LCD_DisplayChar(currentX, y, str[i]);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	b298      	uxth	r0, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff ffc6 	bl	8000ea8 <LCD_DisplayChar>
        currentX += charSpacing; // Move to the next character position
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4413      	add	r3, r2
 8000f22:	61fb      	str	r3, [r7, #28]
    for (int i = 0; str[i] != '\0'; i++) {
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1e7      	bne.n	8000f06 <LCD_DisplayString+0x1a>
    }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <LCD_Error_Handler+0x8>

08000f4c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f50:	f001 fd3c 	bl	80029cc <STMPE811_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d001      	beq.n	8000f5e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <InitializeLCDTouch+0xe>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 fe18 	bl	8002ba0 <STMPE811_DetermineTouchPosition>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fde8 	bl	8002b5a <STMPE811_Read>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fde6 	bl	8002b7c <STMPE811_Write>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <Draw_Arrow_Up>:

#include "draw.h"


void Draw_Arrow_Up(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	807b      	strh	r3, [r7, #2]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e00c      	b.n	8000ff6 <Draw_Arrow_Up+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop + i, color);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	883a      	ldrh	r2, [r7, #0]
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fdc2 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbee      	blt.n	8000fdc <Draw_Arrow_Up+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e01e      	b.n	8001042 <Draw_Arrow_Up+0x8a>
        LCD_Draw_Pixel(Xcenter - i, Ytop + i, color); // Left diagonal
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	b29b      	uxth	r3, r3
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	b298      	uxth	r0, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	883a      	ldrh	r2, [r7, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fdaa 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter + i, Ytop + i, color); // Right diagonal
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	b29a      	uxth	r2, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4413      	add	r3, r2
 8001028:	b298      	uxth	r0, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b29a      	uxth	r2, r3
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	883a      	ldrh	r2, [r7, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd9c 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3301      	adds	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4293      	cmp	r3, r2
 800104e:	dbd9      	blt.n	8001004 <Draw_Arrow_Up+0x4c>
    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <Draw_Arrow_Down>:

void Draw_Arrow_Down(uint16_t Xcenter, uint16_t Ytop, uint16_t size, uint16_t color)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	4604      	mov	r4, r0
 8001062:	4608      	mov	r0, r1
 8001064:	4611      	mov	r1, r2
 8001066:	461a      	mov	r2, r3
 8001068:	4623      	mov	r3, r4
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4603      	mov	r3, r0
 800106e:	80bb      	strh	r3, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	803b      	strh	r3, [r7, #0]
    // Draw the shaft (vertical line)
    for (int i = 0; i < size; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e00c      	b.n	8001098 <Draw_Arrow_Down+0x3e>
        LCD_Draw_Pixel(Xcenter, Ytop - i, color);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	b29b      	uxth	r3, r3
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b299      	uxth	r1, r3
 8001088:	883a      	ldrh	r2, [r7, #0]
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd71 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbee      	blt.n	800107e <Draw_Arrow_Down+0x24>
    }

    // Draw the arrowhead (ensure it fits within the shaft)
    for (int i = 0; i < size / 2; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e01e      	b.n	80010e4 <Draw_Arrow_Down+0x8a>
        LCD_Draw_Pixel(Xcenter + i, Ytop - i , color); // Left diagonal
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4413      	add	r3, r2
 80010ae:	b298      	uxth	r0, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	88ba      	ldrh	r2, [r7, #4]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	883a      	ldrh	r2, [r7, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd59 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xcenter - i, Ytop - i, color); // Right diagonal
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b298      	uxth	r0, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	88ba      	ldrh	r2, [r7, #4]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	883a      	ldrh	r2, [r7, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd4b 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dbd9      	blt.n	80010a6 <Draw_Arrow_Down+0x4c>
    }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}

080010fc <Draw_Arrow_Left>:

void Draw_Arrow_Left(uint16_t Xleft, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	4604      	mov	r4, r0
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4623      	mov	r3, r4
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	4603      	mov	r3, r0
 8001110:	80bb      	strh	r3, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	807b      	strh	r3, [r7, #2]
 8001116:	4613      	mov	r3, r2
 8001118:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e00c      	b.n	800113a <Draw_Arrow_Left+0x3e>
        LCD_Draw_Pixel(Xleft + i, Ycenter, color);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b29a      	uxth	r2, r3
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4413      	add	r3, r2
 8001128:	b29b      	uxth	r3, r3
 800112a:	883a      	ldrh	r2, [r7, #0]
 800112c:	88b9      	ldrh	r1, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fd20 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbee      	blt.n	8001120 <Draw_Arrow_Left+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	e01e      	b.n	8001186 <Draw_Arrow_Left+0x8a>
        LCD_Draw_Pixel(Xleft + i, Ycenter - i, color); // Top diagonal
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	b29a      	uxth	r2, r3
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	4413      	add	r3, r2
 8001150:	b298      	uxth	r0, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	b29b      	uxth	r3, r3
 8001156:	88ba      	ldrh	r2, [r7, #4]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	883a      	ldrh	r2, [r7, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd08 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xleft + i, Ycenter + i, color); // Bottom diagonal
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	b29a      	uxth	r2, r3
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4413      	add	r3, r2
 800116c:	b298      	uxth	r0, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	b29a      	uxth	r2, r3
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	b29b      	uxth	r3, r3
 8001178:	883a      	ldrh	r2, [r7, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcfa 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4293      	cmp	r3, r2
 8001192:	dbd9      	blt.n	8001148 <Draw_Arrow_Left+0x4c>
    }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <Draw_Arrow_Right>:

void Draw_Arrow_Right(uint16_t Xright, uint16_t Ycenter, uint16_t size, uint16_t color)
{
 800119e:	b590      	push	{r4, r7, lr}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4604      	mov	r4, r0
 80011a6:	4608      	mov	r0, r1
 80011a8:	4611      	mov	r1, r2
 80011aa:	461a      	mov	r2, r3
 80011ac:	4623      	mov	r3, r4
 80011ae:	80fb      	strh	r3, [r7, #6]
 80011b0:	4603      	mov	r3, r0
 80011b2:	80bb      	strh	r3, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	803b      	strh	r3, [r7, #0]
    // Draw the shaft
    for (int i = 0; i < size; i++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e00c      	b.n	80011dc <Draw_Arrow_Right+0x3e>
        LCD_Draw_Pixel(Xright - i, Ycenter, color);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	883a      	ldrh	r2, [r7, #0]
 80011ce:	88b9      	ldrh	r1, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fccf 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size; i++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbee      	blt.n	80011c2 <Draw_Arrow_Right+0x24>
    }

    // Draw the arrowhead
    for (int i = 0; i < size / 2; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	e01e      	b.n	8001228 <Draw_Arrow_Right+0x8a>
        LCD_Draw_Pixel(Xright - i, Ycenter - i, color); // Top diagonal
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b298      	uxth	r0, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	88ba      	ldrh	r2, [r7, #4]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	883a      	ldrh	r2, [r7, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcb7 	bl	8000b74 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(Xright - i, Ycenter + i, color); // Bottom diagonal
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	b29b      	uxth	r3, r3
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b298      	uxth	r0, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	b29a      	uxth	r2, r3
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	883a      	ldrh	r2, [r7, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fca9 	bl	8000b74 <LCD_Draw_Pixel>
    for (int i = 0; i < size / 2; i++) {
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	b29b      	uxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	dbd9      	blt.n	80011ea <Draw_Arrow_Right+0x4c>
    }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <Draw_Arrows_On_Screen>:

#define arrowSize 20
#define arrowColor LCD_COLOR_WHITE
#define activeArrowColor LCD_COLOR_GREEN
void Draw_Arrows_On_Screen(uint8_t activeArrow) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]

    Draw_Arrow_Up(LCD_PIXEL_WIDTH / 2, 10, arrowSize, activeArrow == 0 ? activeArrowColor : arrowColor);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <Draw_Arrows_On_Screen+0x16>
 8001250:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001254:	e001      	b.n	800125a <Draw_Arrows_On_Screen+0x1a>
 8001256:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125a:	2214      	movs	r2, #20
 800125c:	210a      	movs	r1, #10
 800125e:	2078      	movs	r0, #120	@ 0x78
 8001260:	f7ff feaa 	bl	8000fb8 <Draw_Arrow_Up>
    Draw_Arrow_Right(LCD_PIXEL_WIDTH - 10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 1 ? activeArrowColor : arrowColor);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d102      	bne.n	8001270 <Draw_Arrows_On_Screen+0x30>
 800126a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800126e:	e001      	b.n	8001274 <Draw_Arrows_On_Screen+0x34>
 8001270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001274:	2214      	movs	r2, #20
 8001276:	21a0      	movs	r1, #160	@ 0xa0
 8001278:	20e6      	movs	r0, #230	@ 0xe6
 800127a:	f7ff ff90 	bl	800119e <Draw_Arrow_Right>
    Draw_Arrow_Down(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT - 10, arrowSize, activeArrow == 2 ? activeArrowColor : arrowColor);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <Draw_Arrows_On_Screen+0x4a>
 8001284:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001288:	e001      	b.n	800128e <Draw_Arrows_On_Screen+0x4e>
 800128a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128e:	2214      	movs	r2, #20
 8001290:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001294:	2078      	movs	r0, #120	@ 0x78
 8001296:	f7ff fee0 	bl	800105a <Draw_Arrow_Down>
    Draw_Arrow_Left(10, LCD_PIXEL_HEIGHT / 2, arrowSize, activeArrow == 3 ? activeArrowColor : arrowColor);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d102      	bne.n	80012a6 <Draw_Arrows_On_Screen+0x66>
 80012a0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012a4:	e001      	b.n	80012aa <Draw_Arrows_On_Screen+0x6a>
 80012a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012aa:	2214      	movs	r2, #20
 80012ac:	21a0      	movs	r1, #160	@ 0xa0
 80012ae:	200a      	movs	r0, #10
 80012b0:	f7ff ff24 	bl	80010fc <Draw_Arrow_Left>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <Draw_Tetris_Block>:

void Draw_Tetris_Block(uint16_t Xpos, uint16_t Ypos, uint16_t size, uint16_t mainColor, uint16_t brightColor, uint16_t darkColor)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
    uint16_t shadingThickness = size / 6; // Thickness of the shading
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	4a33      	ldr	r2, [pc, #204]	@ (80013ac <Draw_Tetris_Block+0xf0>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	81fb      	strh	r3, [r7, #14]

    // 1. Draw the main square
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, size, mainColor);
 80012e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012ea:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 80012ee:	88b9      	ldrh	r1, [r7, #4]
 80012f0:	88f8      	ldrh	r0, [r7, #6]
 80012f2:	883b      	ldrh	r3, [r7, #0]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7ff fcb3 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 2. Draw the top bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, size, shadingThickness, brightColor);
 80012fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001300:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001304:	88b9      	ldrh	r1, [r7, #4]
 8001306:	88f8      	ldrh	r0, [r7, #6]
 8001308:	8c3b      	ldrh	r3, [r7, #32]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4623      	mov	r3, r4
 800130e:	f7ff fca8 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 3. Draw the left bright rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos, shadingThickness, size, brightColor);
 8001312:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001316:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800131a:	88b9      	ldrh	r1, [r7, #4]
 800131c:	88f8      	ldrh	r0, [r7, #6]
 800131e:	8c3b      	ldrh	r3, [r7, #32]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4623      	mov	r3, r4
 8001324:	f7ff fc9d 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 4. Draw the bottom dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos, Ypos + size - shadingThickness, size, shadingThickness, darkColor);
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b299      	uxth	r1, r3
 8001336:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800133a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800133e:	88f8      	ldrh	r0, [r7, #6]
 8001340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4623      	mov	r3, r4
 8001346:	f7ff fc8c 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 5. Draw the right dark rectangle
    LCD_Draw_Rectangle_Fill(Xpos + size - shadingThickness, Ypos, shadingThickness, size, darkColor);
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	4413      	add	r3, r2
 8001350:	b29a      	uxth	r2, r3
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b298      	uxth	r0, r3
 8001358:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800135c:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001360:	88b9      	ldrh	r1, [r7, #4]
 8001362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	f7ff fc7b 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // 6. Draw the bottom-left bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos, Ypos + size - 1, shadingThickness, brightColor);
 800136c:	88ba      	ldrh	r2, [r7, #4]
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	b299      	uxth	r1, r3
 8001378:	8c3b      	ldrh	r3, [r7, #32]
 800137a:	89fa      	ldrh	r2, [r7, #14]
 800137c:	88f8      	ldrh	r0, [r7, #6]
 800137e:	f7ff fcac 	bl	8000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>

    // 7. Draw the top-right bright triangle
    Draw_BottomLeft_to_TopRight_Triangle_Fill(Xpos + size - shadingThickness, Ypos + shadingThickness - 1, shadingThickness, brightColor);
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b298      	uxth	r0, r3
 8001390:	88ba      	ldrh	r2, [r7, #4]
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b299      	uxth	r1, r3
 800139c:	8c3b      	ldrh	r3, [r7, #32]
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	f7ff fc9b 	bl	8000cda <Draw_BottomLeft_to_TopRight_Triangle_Fill>
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	aaaaaaab 	.word	0xaaaaaaab

080013b0 <Fill_Tetris_Board>:

void Fill_Tetris_Board(Board *board, uint16_t startX, uint16_t startY)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	82fb      	strh	r3, [r7, #22]
 80013c4:	e047      	b.n	8001456 <Fill_Tetris_Board+0xa6>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	82bb      	strh	r3, [r7, #20]
 80013ca:	e03e      	b.n	800144a <Fill_Tetris_Board+0x9a>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 80013cc:	8abb      	ldrh	r3, [r7, #20]
 80013ce:	461a      	mov	r2, r3
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	4413      	add	r3, r2
 80013dc:	b29a      	uxth	r2, r3
 80013de:	8abb      	ldrh	r3, [r7, #20]
 80013e0:	4413      	add	r3, r2
 80013e2:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 80013e4:	8afb      	ldrh	r3, [r7, #22]
 80013e6:	461a      	mov	r2, r3
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	8afb      	ldrh	r3, [r7, #22]
 80013f8:	4413      	add	r3, r2
 80013fa:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = board->grid[row][col];
 80013fc:	8afa      	ldrh	r2, [r7, #22]
 80013fe:	8ab8      	ldrh	r0, [r7, #20]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001410:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <Fill_Tetris_Board+0x94>
				uint16_t * colors = piceIndexToColors(index-1);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b01      	subs	r3, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f000 ff89 	bl	8002334 <piceIndexToColors>
 8001422:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	881c      	ldrh	r4, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3302      	adds	r3, #2
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	3204      	adds	r2, #4
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	8a39      	ldrh	r1, [r7, #16]
 8001436:	8a78      	ldrh	r0, [r7, #18]
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4623      	mov	r3, r4
 800143e:	220e      	movs	r2, #14
 8001440:	f7ff ff3c 	bl	80012bc <Draw_Tetris_Block>
        for (uint16_t col = 0; col < BOARD_WIDTH; col++) {
 8001444:	8abb      	ldrh	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	82bb      	strh	r3, [r7, #20]
 800144a:	8abb      	ldrh	r3, [r7, #20]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d9bd      	bls.n	80013cc <Fill_Tetris_Board+0x1c>
    for (uint16_t row = 0; row < BOARD_HEIGHT; row++) {
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	3301      	adds	r3, #1
 8001454:	82fb      	strh	r3, [r7, #22]
 8001456:	8afb      	ldrh	r3, [r7, #22]
 8001458:	2b13      	cmp	r3, #19
 800145a:	d9b4      	bls.n	80013c6 <Fill_Tetris_Board+0x16>
            }
        }
    }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
	...

08001468 <DrawTetrominoByIndex>:

void DrawTetrominoByIndex(uint8_t pieceNumber, uint16_t startX, uint16_t startY)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af02      	add	r7, sp, #8
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	460b      	mov	r3, r1
 8001474:	80bb      	strh	r3, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	807b      	strh	r3, [r7, #2]
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 800147a:	2300      	movs	r3, #0
 800147c:	82fb      	strh	r3, [r7, #22]
 800147e:	e047      	b.n	8001510 <DrawTetrominoByIndex+0xa8>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 8001480:	2300      	movs	r3, #0
 8001482:	82bb      	strh	r3, [r7, #20]
 8001484:	e03e      	b.n	8001504 <DrawTetrominoByIndex+0x9c>
            // Calculate the position of the current block
            uint16_t xPos = startX + col * BLOCK_SIZE + col;
 8001486:	8abb      	ldrh	r3, [r7, #20]
 8001488:	461a      	mov	r2, r3
 800148a:	00d2      	lsls	r2, r2, #3
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	b29a      	uxth	r2, r3
 8001498:	8abb      	ldrh	r3, [r7, #20]
 800149a:	4413      	add	r3, r2
 800149c:	827b      	strh	r3, [r7, #18]
            uint16_t yPos = startY + row * BLOCK_SIZE + row; // Bottom-up positioning
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	461a      	mov	r2, r3
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	8afb      	ldrh	r3, [r7, #22]
 80014b2:	4413      	add	r3, r2
 80014b4:	823b      	strh	r3, [r7, #16]

            // Get the colors for this position
            int index = TETROMINOS[pieceNumber][row][col];
 80014b6:	79f9      	ldrb	r1, [r7, #7]
 80014b8:	8afa      	ldrh	r2, [r7, #22]
 80014ba:	8abb      	ldrh	r3, [r7, #20]
 80014bc:	4818      	ldr	r0, [pc, #96]	@ (8001520 <DrawTetrominoByIndex+0xb8>)
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	440a      	add	r2, r1
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014ca:	60fb      	str	r3, [r7, #12]
            if (index != 0){
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <DrawTetrominoByIndex+0x96>
				uint16_t * colors = piceIndexToColors(index-1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 ff2c 	bl	8002334 <piceIndexToColors>
 80014dc:	60b8      	str	r0, [r7, #8]

				// Draw the Tetris block
				Draw_Tetris_Block(xPos, yPos, BLOCK_SIZE, colors[0], colors[1], colors[2]);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	881c      	ldrh	r4, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3302      	adds	r3, #2
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	3204      	adds	r2, #4
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	8a39      	ldrh	r1, [r7, #16]
 80014f0:	8a78      	ldrh	r0, [r7, #18]
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	220e      	movs	r2, #14
 80014fa:	f7ff fedf 	bl	80012bc <Draw_Tetris_Block>
        for (uint16_t col = 0; col < TETROMINOSIZES; col++) {
 80014fe:	8abb      	ldrh	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	82bb      	strh	r3, [r7, #20]
 8001504:	8abb      	ldrh	r3, [r7, #20]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9bd      	bls.n	8001486 <DrawTetrominoByIndex+0x1e>
    for (uint16_t row = 0; row < TETROMINOSIZES; row++) {
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	3301      	adds	r3, #1
 800150e:	82fb      	strh	r3, [r7, #22]
 8001510:	8afb      	ldrh	r3, [r7, #22]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9b4      	bls.n	8001480 <DrawTetrominoByIndex+0x18>
            }
        }
    }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	20000010 	.word	0x20000010

08001524 <LCD_Draw_Rounded_Rectangle_Fill>:
            }
        }
    }
}

void LCD_Draw_Rounded_Rectangle_Fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, uint16_t color) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	af02      	add	r7, sp, #8
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
    // Draw central rectangle
    LCD_Draw_Rectangle_Fill(x + radius, y + radius, width - 2 * radius, height - 2 * radius, color);
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	8b3b      	ldrh	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	b298      	uxth	r0, r3
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	8b3b      	ldrh	r3, [r7, #24]
 800154e:	4413      	add	r3, r2
 8001550:	b299      	uxth	r1, r3
 8001552:	8b3b      	ldrh	r3, [r7, #24]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	b29b      	uxth	r3, r3
 8001558:	887a      	ldrh	r2, [r7, #2]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	b21c      	sxth	r4, r3
 8001560:	8b3b      	ldrh	r3, [r7, #24]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b29b      	uxth	r3, r3
 8001566:	883a      	ldrh	r2, [r7, #0]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21a      	sxth	r2, r3
 800156e:	8bbb      	ldrh	r3, [r7, #28]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4613      	mov	r3, r2
 8001574:	4622      	mov	r2, r4
 8001576:	f7ff fb74 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw top and bottom rectangles
    LCD_Draw_Rectangle_Fill(x + radius, y, width - 2 * radius, radius, color); // Top
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	8b3b      	ldrh	r3, [r7, #24]
 800157e:	4413      	add	r3, r2
 8001580:	b298      	uxth	r0, r3
 8001582:	8b3b      	ldrh	r3, [r7, #24]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	b29b      	uxth	r3, r3
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	b21a      	sxth	r2, r3
 8001590:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001594:	88b9      	ldrh	r1, [r7, #4]
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4623      	mov	r3, r4
 800159c:	f7ff fb61 	bl	8000c62 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + radius, y + height - radius, width - 2 * radius, radius, color); // Bottom
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	8b3b      	ldrh	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	b298      	uxth	r0, r3
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	883b      	ldrh	r3, [r7, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	8b3b      	ldrh	r3, [r7, #24]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b299      	uxth	r1, r3
 80015b6:	8b3b      	ldrh	r3, [r7, #24]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	887a      	ldrh	r2, [r7, #2]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	f7ff fb48 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw left and right rectangles
    LCD_Draw_Rectangle_Fill(x, y + radius, radius, height - 2 * radius, color); // Left
 80015d2:	88ba      	ldrh	r2, [r7, #4]
 80015d4:	8b3b      	ldrh	r3, [r7, #24]
 80015d6:	4413      	add	r3, r2
 80015d8:	b299      	uxth	r1, r3
 80015da:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	883a      	ldrh	r2, [r7, #0]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	88f8      	ldrh	r0, [r7, #6]
 80015ee:	8bbb      	ldrh	r3, [r7, #28]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	4622      	mov	r2, r4
 80015f6:	f7ff fb34 	bl	8000c62 <LCD_Draw_Rectangle_Fill>
    LCD_Draw_Rectangle_Fill(x + width - radius, y + radius, radius, height - 2 * radius, color); // Right
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	4413      	add	r3, r2
 8001600:	b29a      	uxth	r2, r3
 8001602:	8b3b      	ldrh	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	b298      	uxth	r0, r3
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	4413      	add	r3, r2
 800160e:	b299      	uxth	r1, r3
 8001610:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001614:	8b3b      	ldrh	r3, [r7, #24]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21a      	sxth	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4613      	mov	r3, r2
 8001628:	4622      	mov	r2, r4
 800162a:	f7ff fb1a 	bl	8000c62 <LCD_Draw_Rectangle_Fill>

    // Draw corner circles
    LCD_Draw_Circle_Fill(x + radius, y + radius, radius, color);                  // Top-left
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	8b3b      	ldrh	r3, [r7, #24]
 8001632:	4413      	add	r3, r2
 8001634:	b298      	uxth	r0, r3
 8001636:	88ba      	ldrh	r2, [r7, #4]
 8001638:	8b3b      	ldrh	r3, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	b299      	uxth	r1, r3
 800163e:	8bbb      	ldrh	r3, [r7, #28]
 8001640:	8b3a      	ldrh	r2, [r7, #24]
 8001642:	f7ff fabb 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + radius, radius, color);         // Top-right
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	4413      	add	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b298      	uxth	r0, r3
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	8b3b      	ldrh	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	b299      	uxth	r1, r3
 800165c:	8bbb      	ldrh	r3, [r7, #28]
 800165e:	8b3a      	ldrh	r2, [r7, #24]
 8001660:	f7ff faac 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + radius, y + height - radius, radius, color);        // Bottom-left
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	8b3b      	ldrh	r3, [r7, #24]
 8001668:	4413      	add	r3, r2
 800166a:	b298      	uxth	r0, r3
 800166c:	88ba      	ldrh	r2, [r7, #4]
 800166e:	883b      	ldrh	r3, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	b29a      	uxth	r2, r3
 8001674:	8b3b      	ldrh	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b299      	uxth	r1, r3
 800167a:	8bbb      	ldrh	r3, [r7, #28]
 800167c:	8b3a      	ldrh	r2, [r7, #24]
 800167e:	f7ff fa9d 	bl	8000bbc <LCD_Draw_Circle_Fill>
    LCD_Draw_Circle_Fill(x + width - radius, y + height - radius, radius, color);// Bottom-right
 8001682:	88fa      	ldrh	r2, [r7, #6]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4413      	add	r3, r2
 8001688:	b29a      	uxth	r2, r3
 800168a:	8b3b      	ldrh	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	883b      	ldrh	r3, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	b29a      	uxth	r2, r3
 8001698:	8b3b      	ldrh	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	b299      	uxth	r1, r3
 800169e:	8bbb      	ldrh	r3, [r7, #28]
 80016a0:	8b3a      	ldrh	r2, [r7, #24]
 80016a2:	f7ff fa8b 	bl	8000bbc <LCD_Draw_Circle_Fill>
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}
	...

080016b0 <initGame>:

Board board;
Piece currentPiece;
Piece nextPiece;

void initGame() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	initializeBoard(& board);
 80016b4:	4809      	ldr	r0, [pc, #36]	@ (80016dc <initGame+0x2c>)
 80016b6:	f000 f9b5 	bl	8001a24 <initializeBoard>
	initializeRandomPiece(& currentPiece);
 80016ba:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <initGame+0x30>)
 80016bc:	f000 fdf6 	bl	80022ac <initializeRandomPiece>
	initializeRandomPiece(& nextPiece);
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <initGame+0x34>)
 80016c2:	f000 fdf3 	bl	80022ac <initializeRandomPiece>
	board.grid[0][0] = 6;
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <initGame+0x2c>)
 80016c8:	2206      	movs	r2, #6
 80016ca:	601a      	str	r2, [r3, #0]
	board.grid[0][1] = 2;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <initGame+0x2c>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	605a      	str	r2, [r3, #4]
	board.grid[1][0] = 5;
 80016d2:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <initGame+0x2c>)
 80016d4:	2205      	movs	r2, #5
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20025b74 	.word	0x20025b74
 80016e0:	20025e94 	.word	0x20025e94
 80016e4:	20025edc 	.word	0x20025edc

080016e8 <movePieceDown>:

bool movePieceDown(Board *board, Piece *piece) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
    piece->y++;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	645a      	str	r2, [r3, #68]	@ 0x44
    if (collision(board, piece)) {
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f86a 	bl	80017d8 <collision>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <movePieceDown+0x30>
        piece->y--;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	1e5a      	subs	r2, r3, #1
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	645a      	str	r2, [r3, #68]	@ 0x44
        return false;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <movePieceDown+0x32>
    }
    return true;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <lockPiece>:

void lockPiece(Board *board, Piece *piece) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e03b      	b.n	80017ac <lockPiece+0x88>
        for (int j = 0; j < 4; j++) {
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	e032      	b.n	80017a0 <lockPiece+0x7c>
            if (piece->matrix[i][j]) {
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	0091      	lsls	r1, r2, #2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	440a      	add	r2, r1
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d026      	beq.n	800179a <lockPiece+0x76>
                int x = piece->x + j;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4413      	add	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
                if (y >= 0 && y < BOARD_HEIGHT && x >= 0 && x < BOARD_WIDTH) {
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db19      	blt.n	800179a <lockPiece+0x76>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b13      	cmp	r3, #19
 800176a:	dc16      	bgt.n	800179a <lockPiece+0x76>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db13      	blt.n	800179a <lockPiece+0x76>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b09      	cmp	r3, #9
 8001776:	dc10      	bgt.n	800179a <lockPiece+0x76>
                    board->grid[y][x] = piece->matrix[i][j];
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	0091      	lsls	r1, r2, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	440a      	add	r2, r1
 8001782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	3301      	adds	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	ddc9      	ble.n	800173a <lockPiece+0x16>
    for (int i = 0; i < 4; i++) {
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	ddc0      	ble.n	8001734 <lockPiece+0x10>
                }
            }
        }
    }
    currentPiece = nextPiece;
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <lockPiece+0xac>)
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <lockPiece+0xb0>)
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	2348      	movs	r3, #72	@ 0x48
 80017bc:	461a      	mov	r2, r3
 80017be:	f005 f9a8 	bl	8006b12 <memcpy>
    initializeRandomPiece( & nextPiece);
 80017c2:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <lockPiece+0xb0>)
 80017c4:	f000 fd72 	bl	80022ac <initializeRandomPiece>
}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20025e94 	.word	0x20025e94
 80017d4:	20025edc 	.word	0x20025edc

080017d8 <collision>:

bool collision(Board *board, Piece *piece) {
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e03a      	b.n	800185e <collision+0x86>
        for (int j = 0; j < 4; j++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e031      	b.n	8001852 <collision+0x7a>
            if (piece->matrix[i][j]) {
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	0091      	lsls	r1, r2, #2
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	440a      	add	r2, r1
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d025      	beq.n	800184c <collision+0x74>
                int x = piece->x + j;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
                int y = piece->y + i;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4413      	add	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]

                if (x < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT) {
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db05      	blt.n	8001826 <collision+0x4e>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b09      	cmp	r3, #9
 800181e:	dc02      	bgt.n	8001826 <collision+0x4e>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b13      	cmp	r3, #19
 8001824:	dd01      	ble.n	800182a <collision+0x52>
                    return true;
 8001826:	2301      	movs	r3, #1
 8001828:	e01d      	b.n	8001866 <collision+0x8e>
                }

                if (y >= 0 && board->grid[y][x]) {
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0d      	blt.n	800184c <collision+0x74>
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <collision+0x74>
                    return true;
 8001848:	2301      	movs	r3, #1
 800184a:	e00c      	b.n	8001866 <collision+0x8e>
        for (int j = 0; j < 4; j++) {
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	3301      	adds	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b03      	cmp	r3, #3
 8001856:	ddca      	ble.n	80017ee <collision+0x16>
    for (int i = 0; i < 4; i++) {
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b03      	cmp	r3, #3
 8001862:	ddc1      	ble.n	80017e8 <collision+0x10>
                }
            }
        }
    }
    return false;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <rotatePiece>:

void rotatePiece(Piece *piece) {
 8001872:	b580      	push	{r7, lr}
 8001874:	b096      	sub	sp, #88	@ 0x58
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
    int tempMatrix[4][4] = {0};
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	2240      	movs	r2, #64	@ 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f005 f8ca 	bl	8006a1c <memset>

    // Transpose and reverse rows to achieve 90-degree clockwise rotation
    for (int i = 0; i < 4; i++) {
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	@ 0x54
 800188c:	e01d      	b.n	80018ca <rotatePiece+0x58>
        for (int j = 0; j < 4; j++) {
 800188e:	2300      	movs	r3, #0
 8001890:	653b      	str	r3, [r7, #80]	@ 0x50
 8001892:	e014      	b.n	80018be <rotatePiece+0x4c>
            tempMatrix[j][3 - i] = piece->matrix[i][j];
 8001894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001896:	f1c3 0303 	rsb	r3, r3, #3
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800189e:	0088      	lsls	r0, r1, #2
 80018a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80018a2:	4401      	add	r1, r0
 80018a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80018a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80018aa:	0089      	lsls	r1, r1, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	3358      	adds	r3, #88	@ 0x58
 80018b2:	443b      	add	r3, r7
 80018b4:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++) {
 80018b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ba:	3301      	adds	r3, #1
 80018bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80018be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	dde7      	ble.n	8001894 <rotatePiece+0x22>
    for (int i = 0; i < 4; i++) {
 80018c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c6:	3301      	adds	r3, #1
 80018c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80018ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	ddde      	ble.n	800188e <rotatePiece+0x1c>
        }
    }

    // Manually copy tempMatrix to piece->matrix
    for (int i = 0; i < 4; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018d4:	e01b      	b.n	800190e <rotatePiece+0x9c>
        for (int j = 0; j < 4; j++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018da:	e012      	b.n	8001902 <rotatePiece+0x90>
            piece->matrix[i][j] = tempMatrix[i][j];
 80018dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018de:	009a      	lsls	r2, r3, #2
 80018e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	3358      	adds	r3, #88	@ 0x58
 80018e8:	443b      	add	r3, r7
 80018ea:	f853 1c50 	ldr.w	r1, [r3, #-80]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018f2:	0090      	lsls	r0, r2, #2
 80018f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018f6:	4402      	add	r2, r0
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 80018fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018fe:	3301      	adds	r3, #1
 8001900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001904:	2b03      	cmp	r3, #3
 8001906:	dde9      	ble.n	80018dc <rotatePiece+0x6a>
    for (int i = 0; i < 4; i++) {
 8001908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800190a:	3301      	adds	r3, #1
 800190c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800190e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001910:	2b03      	cmp	r3, #3
 8001912:	dde0      	ble.n	80018d6 <rotatePiece+0x64>
        }
    }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3758      	adds	r7, #88	@ 0x58
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <dropPiece>:

void dropPiece(Board *board, Piece *piece) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
    while (movePieceDown(board, piece)) {
 8001928:	bf00      	nop
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fedb 	bl	80016e8 <movePieceDown>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f8      	bne.n	800192a <dropPiece+0xc>
    }
    lockPiece(board, piece);
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fef2 	bl	8001724 <lockPiece>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <handleInput>:

void handleInput(Board *board, Piece *piece, uint8_t command) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d847      	bhi.n	80019ec <handleInput+0xa4>
 800195c:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <handleInput+0x1c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001991 	.word	0x08001991
 8001968:	08001985 	.word	0x08001985
 800196c:	080019bf 	.word	0x080019bf
 8001970:	08001979 	.word	0x08001979
 8001974:	080019dd 	.word	0x080019dd
        case 3: // Move left
            piece->x--;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 8001982:	e033      	b.n	80019ec <handleInput+0xa4>
        case 1: // Move right
            piece->x++;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40
            break;
 800198e:	e02d      	b.n	80019ec <handleInput+0xa4>
        case 0: // Rotate
            rotatePiece(piece);
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f7ff ff6e 	bl	8001872 <rotatePiece>
            if (collision(board, piece)) {
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ff1d 	bl	80017d8 <collision>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <handleInput+0x9e>
                // Undo rotation if collision occurs
                for (int i = 0; i < 3; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e005      	b.n	80019b6 <handleInput+0x6e>
                    rotatePiece(piece);
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f7ff ff61 	bl	8001872 <rotatePiece>
                for (int i = 0; i < 3; i++) {
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	ddf6      	ble.n	80019aa <handleInput+0x62>
                }
            }
            break;
 80019bc:	e013      	b.n	80019e6 <handleInput+0x9e>
        case 2: // Soft drop
            if (!movePieceDown(board, piece)){
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fe91 	bl	80016e8 <movePieceDown>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <handleInput+0xa2>
            	lockPiece(board, piece);
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fea5 	bl	8001724 <lockPiece>
            }
            break;
 80019da:	e006      	b.n	80019ea <handleInput+0xa2>
        case 4: // Hard drop
            dropPiece(board, piece);
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff ff9d 	bl	800191e <dropPiece>
            break;
 80019e4:	e002      	b.n	80019ec <handleInput+0xa4>
            break;
 80019e6:	bf00      	nop
 80019e8:	e000      	b.n	80019ec <handleInput+0xa4>
            break;
 80019ea:	bf00      	nop
    }

    // Undo move if collision detected
    if (collision(board, piece)) {
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff fef2 	bl	80017d8 <collision>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <handleInput+0xd4>
        switch (command) {
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d007      	beq.n	8001a10 <handleInput+0xc8>
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10b      	bne.n	8001a1c <handleInput+0xd4>
            case 3: piece->x++; break;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a0e:	e005      	b.n	8001a1c <handleInput+0xd4>
            case 1: piece->x--; break;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1a:	bf00      	nop
        }
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <initializeBoard>:
 *      Author: user
 */

#include "gameBoard.h"

void initializeBoard(Board *board) {
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e016      	b.n	8001a60 <initializeBoard+0x3c>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	e00d      	b.n	8001a54 <initializeBoard+0x30>
            board->grid[i][j] = 0;
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	ddee      	ble.n	8001a38 <initializeBoard+0x14>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b13      	cmp	r3, #19
 8001a64:	dde5      	ble.n	8001a32 <initializeBoard+0xe>
        }
    }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <boardWithPiece>:
            }
        }
    }
}

Board boardWithPiece(Board *board, Piece *piece) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001a80:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001a84:	6018      	str	r0, [r3, #0]
 8001a86:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001a8a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001a8e:	6019      	str	r1, [r3, #0]
 8001a90:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001a94:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001a98:	601a      	str	r2, [r3, #0]
	Board tempBoard;

    // Copy the board grid to a temporary grid
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001aa0:	e030      	b.n	8001b04 <boardWithPiece+0x90>
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001aa8:	e023      	b.n	8001af2 <boardWithPiece+0x7e>
        	tempBoard.grid[i][j] = board->grid[i][j];
 8001aaa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001aae:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001ab2:	6819      	ldr	r1, [r3, #0]
 8001ab4:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001aca:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001ace:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001ad2:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int j = 0; j < BOARD_WIDTH; j++) {
 8001ae8:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8001af2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001af6:	2b09      	cmp	r3, #9
 8001af8:	ddd7      	ble.n	8001aaa <boardWithPiece+0x36>
    for (int i = 0; i < BOARD_HEIGHT; i++) {
 8001afa:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001afe:	3301      	adds	r3, #1
 8001b00:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001b04:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001b08:	2b13      	cmp	r3, #19
 8001b0a:	ddca      	ble.n	8001aa2 <boardWithPiece+0x2e>
        }
    }

    // Overlay the active piece onto the temporary grid
    for (int pi = 0; pi < 4; pi++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001b12:	e052      	b.n	8001bba <boardWithPiece+0x146>
        for (int pj = 0; pj < 4; pj++) {
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001b1a:	e045      	b.n	8001ba8 <boardWithPiece+0x134>
            int px = piece->x + pj;
 8001b1c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001b20:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int py = piece->y + pi;
 8001b32:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001b36:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b42:	4413      	add	r3, r2
 8001b44:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

//            if (px >= 0 && px < BOARD_WIDTH && py >= 0 && py < BOARD_HEIGHT && piece->matrix[pi][pj] == 1) {
            if (piece->matrix[pi][pj])
 8001b48:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001b4c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b56:	0091      	lsls	r1, r2, #2
 8001b58:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01b      	beq.n	8001b9e <boardWithPiece+0x12a>
            	tempBoard.grid[py][px] = piece->matrix[pi][pj];
 8001b66:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001b6a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001b74:	0091      	lsls	r1, r2, #2
 8001b76:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b7a:	440a      	add	r2, r1
 8001b7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b80:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001b84:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001b88:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001b98:	4413      	add	r3, r2
 8001b9a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for (int pj = 0; pj < 4; pj++) {
 8001b9e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001ba8:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	ddb5      	ble.n	8001b1c <boardWithPiece+0xa8>
    for (int pi = 0; pi < 4; pi++) {
 8001bb0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001bba:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	dda8      	ble.n	8001b14 <boardWithPiece+0xa0>
//            }
        }
    }

    return tempBoard;
 8001bc2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001bc6:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001bd0:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f004 ff98 	bl	8006b12 <memcpy>
}
 8001be2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001be6:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001bf8:	f000 f9fe 	bl	8001ff8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001bfc:	20ca      	movs	r0, #202	@ 0xca
 8001bfe:	f000 f943 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001c02:	20c3      	movs	r0, #195	@ 0xc3
 8001c04:	f000 f94d 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001c08:	2008      	movs	r0, #8
 8001c0a:	f000 f94a 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001c0e:	2050      	movs	r0, #80	@ 0x50
 8001c10:	f000 f947 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001c14:	20cf      	movs	r0, #207	@ 0xcf
 8001c16:	f000 f937 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f941 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001c20:	20c1      	movs	r0, #193	@ 0xc1
 8001c22:	f000 f93e 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001c26:	2030      	movs	r0, #48	@ 0x30
 8001c28:	f000 f93b 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001c2c:	20ed      	movs	r0, #237	@ 0xed
 8001c2e:	f000 f92b 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	f000 f935 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f932 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001c3e:	2012      	movs	r0, #18
 8001c40:	f000 f92f 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001c44:	2081      	movs	r0, #129	@ 0x81
 8001c46:	f000 f92c 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001c4a:	20e8      	movs	r0, #232	@ 0xe8
 8001c4c:	f000 f91c 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001c50:	2085      	movs	r0, #133	@ 0x85
 8001c52:	f000 f926 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 f923 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c5c:	2078      	movs	r0, #120	@ 0x78
 8001c5e:	f000 f920 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001c62:	20cb      	movs	r0, #203	@ 0xcb
 8001c64:	f000 f910 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001c68:	2039      	movs	r0, #57	@ 0x39
 8001c6a:	f000 f91a 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001c6e:	202c      	movs	r0, #44	@ 0x2c
 8001c70:	f000 f917 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 f914 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001c7a:	2034      	movs	r0, #52	@ 0x34
 8001c7c:	f000 f911 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001c80:	2002      	movs	r0, #2
 8001c82:	f000 f90e 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001c86:	20f7      	movs	r0, #247	@ 0xf7
 8001c88:	f000 f8fe 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001c8c:	2020      	movs	r0, #32
 8001c8e:	f000 f908 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001c92:	20ea      	movs	r0, #234	@ 0xea
 8001c94:	f000 f8f8 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f902 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f8ff 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001ca4:	20b1      	movs	r0, #177	@ 0xb1
 8001ca6:	f000 f8ef 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 f8f9 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001cb0:	201b      	movs	r0, #27
 8001cb2:	f000 f8f6 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001cb6:	20b6      	movs	r0, #182	@ 0xb6
 8001cb8:	f000 f8e6 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001cbc:	200a      	movs	r0, #10
 8001cbe:	f000 f8f0 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001cc2:	20a2      	movs	r0, #162	@ 0xa2
 8001cc4:	f000 f8ed 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001cc8:	20c0      	movs	r0, #192	@ 0xc0
 8001cca:	f000 f8dd 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cce:	2010      	movs	r0, #16
 8001cd0:	f000 f8e7 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001cd4:	20c1      	movs	r0, #193	@ 0xc1
 8001cd6:	f000 f8d7 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001cda:	2010      	movs	r0, #16
 8001cdc:	f000 f8e1 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ce0:	20c5      	movs	r0, #197	@ 0xc5
 8001ce2:	f000 f8d1 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ce6:	2045      	movs	r0, #69	@ 0x45
 8001ce8:	f000 f8db 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001cec:	2015      	movs	r0, #21
 8001cee:	f000 f8d8 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001cf2:	20c7      	movs	r0, #199	@ 0xc7
 8001cf4:	f000 f8c8 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001cf8:	2090      	movs	r0, #144	@ 0x90
 8001cfa:	f000 f8d2 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001cfe:	2036      	movs	r0, #54	@ 0x36
 8001d00:	f000 f8c2 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001d04:	20c8      	movs	r0, #200	@ 0xc8
 8001d06:	f000 f8cc 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001d0a:	20f2      	movs	r0, #242	@ 0xf2
 8001d0c:	f000 f8bc 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 f8c6 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001d16:	20b0      	movs	r0, #176	@ 0xb0
 8001d18:	f000 f8b6 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001d1c:	20c2      	movs	r0, #194	@ 0xc2
 8001d1e:	f000 f8c0 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001d22:	20b6      	movs	r0, #182	@ 0xb6
 8001d24:	f000 f8b0 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f000 f8ba 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001d2e:	20a7      	movs	r0, #167	@ 0xa7
 8001d30:	f000 f8b7 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001d34:	2027      	movs	r0, #39	@ 0x27
 8001d36:	f000 f8b4 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001d3a:	2004      	movs	r0, #4
 8001d3c:	f000 f8b1 	bl	8001ea2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001d40:	202a      	movs	r0, #42	@ 0x2a
 8001d42:	f000 f8a1 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f8ab 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f8a8 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f8a5 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001d58:	20ef      	movs	r0, #239	@ 0xef
 8001d5a:	f000 f8a2 	bl	8001ea2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001d5e:	202b      	movs	r0, #43	@ 0x2b
 8001d60:	f000 f892 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f89c 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f899 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f000 f896 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001d76:	203f      	movs	r0, #63	@ 0x3f
 8001d78:	f000 f893 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001d7c:	20f6      	movs	r0, #246	@ 0xf6
 8001d7e:	f000 f883 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 f88d 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 f88a 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001d8e:	2006      	movs	r0, #6
 8001d90:	f000 f887 	bl	8001ea2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001d94:	202c      	movs	r0, #44	@ 0x2c
 8001d96:	f000 f877 	bl	8001e88 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001d9a:	20c8      	movs	r0, #200	@ 0xc8
 8001d9c:	f000 f9e8 	bl	8002170 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001da0:	2026      	movs	r0, #38	@ 0x26
 8001da2:	f000 f871 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 f87b 	bl	8001ea2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001dac:	20e0      	movs	r0, #224	@ 0xe0
 8001dae:	f000 f86b 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f875 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001db8:	2029      	movs	r0, #41	@ 0x29
 8001dba:	f000 f872 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001dbe:	2024      	movs	r0, #36	@ 0x24
 8001dc0:	f000 f86f 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f000 f86c 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001dca:	200e      	movs	r0, #14
 8001dcc:	f000 f869 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001dd0:	2009      	movs	r0, #9
 8001dd2:	f000 f866 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001dd6:	204e      	movs	r0, #78	@ 0x4e
 8001dd8:	f000 f863 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ddc:	2078      	movs	r0, #120	@ 0x78
 8001dde:	f000 f860 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001de2:	203c      	movs	r0, #60	@ 0x3c
 8001de4:	f000 f85d 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001de8:	2009      	movs	r0, #9
 8001dea:	f000 f85a 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001dee:	2013      	movs	r0, #19
 8001df0:	f000 f857 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001df4:	2005      	movs	r0, #5
 8001df6:	f000 f854 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001dfa:	2017      	movs	r0, #23
 8001dfc:	f000 f851 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e00:	2011      	movs	r0, #17
 8001e02:	f000 f84e 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f84b 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001e0c:	20e1      	movs	r0, #225	@ 0xe1
 8001e0e:	f000 f83b 	bl	8001e88 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f845 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001e18:	2016      	movs	r0, #22
 8001e1a:	f000 f842 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e1e:	201b      	movs	r0, #27
 8001e20:	f000 f83f 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e24:	2004      	movs	r0, #4
 8001e26:	f000 f83c 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	f000 f839 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001e30:	2007      	movs	r0, #7
 8001e32:	f000 f836 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001e36:	2031      	movs	r0, #49	@ 0x31
 8001e38:	f000 f833 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001e3c:	2033      	movs	r0, #51	@ 0x33
 8001e3e:	f000 f830 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001e42:	2042      	movs	r0, #66	@ 0x42
 8001e44:	f000 f82d 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001e48:	2005      	movs	r0, #5
 8001e4a:	f000 f82a 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f000 f827 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001e54:	200a      	movs	r0, #10
 8001e56:	f000 f824 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001e5a:	2028      	movs	r0, #40	@ 0x28
 8001e5c:	f000 f821 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001e60:	202f      	movs	r0, #47	@ 0x2f
 8001e62:	f000 f81e 	bl	8001ea2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f000 f81b 	bl	8001ea2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001e6c:	2011      	movs	r0, #17
 8001e6e:	f000 f80b 	bl	8001e88 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001e72:	20c8      	movs	r0, #200	@ 0xc8
 8001e74:	f000 f97c 	bl	8002170 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001e78:	2029      	movs	r0, #41	@ 0x29
 8001e7a:	f000 f805 	bl	8001e88 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001e7e:	202c      	movs	r0, #44	@ 0x2c
 8001e80:	f000 f802 	bl	8001e88 <ili9341_Write_Reg>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f949 	bl	800212c <LCD_IO_WriteReg>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f91a 	bl	80020e8 <LCD_IO_WriteData>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ec0:	4819      	ldr	r0, [pc, #100]	@ (8001f28 <SPI_Init+0x6c>)
 8001ec2:	f004 f9de 	bl	8006282 <HAL_SPI_GetState>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12b      	bne.n	8001f24 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <SPI_Init+0x6c>)
 8001ece:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <SPI_Init+0x70>)
 8001ed0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <SPI_Init+0x6c>)
 8001ed4:	2218      	movs	r2, #24
 8001ed6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <SPI_Init+0x6c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <SPI_Init+0x6c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <SPI_Init+0x6c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <SPI_Init+0x6c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <SPI_Init+0x6c>)
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <SPI_Init+0x6c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <SPI_Init+0x6c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <SPI_Init+0x6c>)
 8001f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f08:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <SPI_Init+0x6c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <SPI_Init+0x6c>)
 8001f12:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f16:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <SPI_Init+0x6c>)
 8001f1a:	f000 f833 	bl	8001f84 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f1e:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <SPI_Init+0x6c>)
 8001f20:	f003 ffba 	bl	8005e98 <HAL_SPI_Init>
  }
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20025f24 	.word	0x20025f24
 8001f2c:	40015000 	.word	0x40015000

08001f30 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <SPI_Write+0x34>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1db9      	adds	r1, r7, #6
 8001f44:	2201      	movs	r2, #1
 8001f46:	4808      	ldr	r0, [pc, #32]	@ (8001f68 <SPI_Write+0x38>)
 8001f48:	f004 f857 	bl	8005ffa <HAL_SPI_Transmit>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001f56:	f000 f809 	bl	8001f6c <SPI_Error>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	20025f24 	.word	0x20025f24

08001f6c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001f70:	4803      	ldr	r0, [pc, #12]	@ (8001f80 <SPI_Error+0x14>)
 8001f72:	f004 f81a 	bl	8005faa <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001f76:	f7ff ffa1 	bl	8001ebc <SPI_Init>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20025f24 	.word	0x20025f24

08001f84 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f94:	4a16      	ldr	r2, [pc, #88]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001fb2:	f043 0320 	orr.w	r3, r3, #32
 8001fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <SPI_MspInit+0x6c>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001fc4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <SPI_MspInit+0x70>)
 8001fe2:	f001 fb4f 	bl	8003684 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	@ 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40021400 	.word	0x40021400

08001ff8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <LCD_IO_Init+0xe0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d164      	bne.n	80020d0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <LCD_IO_Init+0xe0>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	4a31      	ldr	r2, [pc, #196]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6313      	str	r3, [r2, #48]	@ 0x30
 800201c:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <LCD_IO_Init+0xe4>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800202c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	4827      	ldr	r0, [pc, #156]	@ (80020e0 <LCD_IO_Init+0xe8>)
 8002042:	f001 fb1f 	bl	8003684 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <LCD_IO_Init+0xe4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	4619      	mov	r1, r3
 800207a:	4819      	ldr	r0, [pc, #100]	@ (80020e0 <LCD_IO_Init+0xe8>)
 800207c:	f001 fb02 	bl	8003684 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <LCD_IO_Init+0xe4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <LCD_IO_Init+0xe4>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800209c:	2304      	movs	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <LCD_IO_Init+0xec>)
 80020b4:	f001 fae6 	bl	8003684 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <LCD_IO_Init+0xec>)
 80020be:	f001 fd99 	bl	8003bf4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020c2:	2201      	movs	r2, #1
 80020c4:	2104      	movs	r1, #4
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <LCD_IO_Init+0xec>)
 80020c8:	f001 fd94 	bl	8003bf4 <HAL_GPIO_WritePin>

    SPI_Init();
 80020cc:	f7ff fef6 	bl	8001ebc <SPI_Init>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20025f7c 	.word	0x20025f7c
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40020800 	.word	0x40020800

080020e8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f8:	480a      	ldr	r0, [pc, #40]	@ (8002124 <LCD_IO_WriteData+0x3c>)
 80020fa:	f001 fd7b 	bl	8003bf4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80020fe:	2200      	movs	r2, #0
 8002100:	2104      	movs	r1, #4
 8002102:	4809      	ldr	r0, [pc, #36]	@ (8002128 <LCD_IO_WriteData+0x40>)
 8002104:	f001 fd76 	bl	8003bf4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff10 	bl	8001f30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002110:	2201      	movs	r2, #1
 8002112:	2104      	movs	r1, #4
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <LCD_IO_WriteData+0x40>)
 8002116:	f001 fd6d 	bl	8003bf4 <HAL_GPIO_WritePin>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40020800 	.word	0x40020800

0800212c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800213c:	480a      	ldr	r0, [pc, #40]	@ (8002168 <LCD_IO_WriteReg+0x3c>)
 800213e:	f001 fd59 	bl	8003bf4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	4809      	ldr	r0, [pc, #36]	@ (800216c <LCD_IO_WriteReg+0x40>)
 8002148:	f001 fd54 	bl	8003bf4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff feed 	bl	8001f30 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002156:	2201      	movs	r2, #1
 8002158:	2104      	movs	r1, #4
 800215a:	4804      	ldr	r0, [pc, #16]	@ (800216c <LCD_IO_WriteReg+0x40>)
 800215c:	f001 fd4a 	bl	8003bf4 <HAL_GPIO_WritePin>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40020800 	.word	0x40020800

08002170 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 f8d7 	bl	800332c <HAL_Delay>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218a:	f001 f85d 	bl	8003248 <HAL_Init>
//  SystemClockOverride();
//#ifdef DONTDEFINE
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218e:	f000 f809 	bl	80021a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
//#endif
  ApplicationInit(); // Initializes the LCD functionality
 8002192:	f7fe f9f5 	bl	8000580 <ApplicationInit>
  showStartScreen();
 8002196:	f000 f8ed 	bl	8002374 <showStartScreen>
  MX_RNG_Init();
  MX_SPI5_Init();
  MX_TIM5_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_RNG_Init();
 800219a:	f000 f86d 	bl	8002278 <MX_RNG_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <main+0x18>
	...

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	@ 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fc32 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <SystemClock_Config+0xcc>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <SystemClock_Config+0xcc>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <SystemClock_Config+0xcc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <SystemClock_Config+0xd0>)
 80021ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xd0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002214:	2308      	movs	r3, #8
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 335;
 8002218:	f240 134f 	movw	r3, #335	@ 0x14f
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221e:	2302      	movs	r3, #2
 8002220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002222:	2307      	movs	r3, #7
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f002 ffc6 	bl	80051bc <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002236:	f000 f833 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002246:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800224a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002250:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	2105      	movs	r1, #5
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fa27 	bl	80056ac <HAL_RCC_ClockConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002264:	f000 f81c 	bl	80022a0 <Error_Handler>
  }
}
 8002268:	bf00      	nop
 800226a:	3750      	adds	r7, #80	@ 0x50
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000

08002278 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_RNG_Init+0x20>)
 800227e:	4a07      	ldr	r2, [pc, #28]	@ (800229c <MX_RNG_Init+0x24>)
 8002280:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <MX_RNG_Init+0x20>)
 8002284:	f003 fdde 	bl	8005e44 <HAL_RNG_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800228e:	f000 f807 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20025f80 	.word	0x20025f80
 800229c:	50060800 	.word	0x50060800

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <Error_Handler+0x8>

080022ac <initializeRandomPiece>:
	{0xCB20, 0xFC40, 0x9A20}, // orange
	{0x0019, 0x001F, 0x0013}, // dark blue
	{0x9819, 0xC81F, 0x6013}, // magenta
};

void initializeRandomPiece(Piece *piece) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    int randomIndex = rand() % 7;
 80022b4:	f000 f852 	bl	800235c <rand>
 80022b8:	4601      	mov	r1, r0
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <initializeRandomPiece+0x80>)
 80022bc:	fba3 2301 	umull	r2, r3, r3, r1
 80022c0:	1aca      	subs	r2, r1, r3
 80022c2:	0852      	lsrs	r2, r2, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	089a      	lsrs	r2, r3, #2
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	1aca      	subs	r2, r1, r3
 80022d0:	60fa      	str	r2, [r7, #12]
    for (int i = 0; i < 4; i++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e01c      	b.n	8002312 <initializeRandomPiece+0x66>
        for (int j = 0; j < 4; j++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e013      	b.n	8002306 <initializeRandomPiece+0x5a>
            piece->matrix[i][j] = TETROMINOS[randomIndex][i][j];
 80022de:	4914      	ldr	r1, [pc, #80]	@ (8002330 <initializeRandomPiece+0x84>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4413      	add	r3, r2
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	0090      	lsls	r0, r2, #2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4402      	add	r2, r0
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 4; j++) {
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b03      	cmp	r3, #3
 800230a:	dde8      	ble.n	80022de <initializeRandomPiece+0x32>
    for (int i = 0; i < 4; i++) {
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b03      	cmp	r3, #3
 8002316:	dddf      	ble.n	80022d8 <initializeRandomPiece+0x2c>
        }
    }
    piece->x = BOARD_WIDTH / 2 - 1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2204      	movs	r2, #4
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40
    piece->y = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	24924925 	.word	0x24924925
 8002330:	20000010 	.word	0x20000010

08002334 <piceIndexToColors>:

// base, light, dark
uint16_t * piceIndexToColors(int index) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	return TETROMINO_COLORS[index];
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <piceIndexToColors+0x24>)
 8002348:	4413      	add	r3, r2
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200001d0 	.word	0x200001d0

0800235c <rand>:
RNG_HandleTypeDef rng;
void initRng(RNG_HandleTypeDef hrng){
	rng=hrng;
}

uint32_t rand(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	return rng.RandomNumber;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <rand+0x14>)
 8002362:	68db      	ldr	r3, [r3, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20025fd8 	.word	0x20025fd8

08002374 <showStartScreen>:
void shadingDemo(){
	LCD_Clear(0, LCD_COLOR_BLACK);

	Draw_Tetris_Block(40,40,80,0xCB20, 0xFC40, 0x9A20);
}
void showStartScreen(){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_BLACK);
 800237a:	2100      	movs	r1, #0
 800237c:	2000      	movs	r0, #0
 800237e:	f7fe fce3 	bl	8000d48 <LCD_Clear>

	LCD_SetFont(&Font16x24);
 8002382:	4823      	ldr	r0, [pc, #140]	@ (8002410 <showStartScreen+0x9c>)
 8002384:	f7fe fd12 	bl	8000dac <LCD_SetFont>

//	Draw_Tetris_Block(40, 40, 20, 0x0679, 0x07FF, 0x04D3);
	DrawTetrominoByIndex(0, 20, 40);
 8002388:	2228      	movs	r2, #40	@ 0x28
 800238a:	2114      	movs	r1, #20
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff f86b 	bl	8001468 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(1, 20, 70);
 8002392:	2246      	movs	r2, #70	@ 0x46
 8002394:	2114      	movs	r1, #20
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff f866 	bl	8001468 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(2, 90, 40);
 800239c:	2228      	movs	r2, #40	@ 0x28
 800239e:	215a      	movs	r1, #90	@ 0x5a
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7ff f861 	bl	8001468 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(3, 140, 40);
 80023a6:	2228      	movs	r2, #40	@ 0x28
 80023a8:	218c      	movs	r1, #140	@ 0x8c
 80023aa:	2003      	movs	r0, #3
 80023ac:	f7ff f85c 	bl	8001468 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(4, 65, 80);
 80023b0:	2250      	movs	r2, #80	@ 0x50
 80023b2:	2141      	movs	r1, #65	@ 0x41
 80023b4:	2004      	movs	r0, #4
 80023b6:	f7ff f857 	bl	8001468 <DrawTetrominoByIndex>
	DrawTetrominoByIndex(5, 100, 80);
 80023ba:	2250      	movs	r2, #80	@ 0x50
 80023bc:	2164      	movs	r1, #100	@ 0x64
 80023be:	2005      	movs	r0, #5
 80023c0:	f7ff f852 	bl	8001468 <DrawTetrominoByIndex>

	DrawTetrominoByIndex(6, 50, 140);
 80023c4:	228c      	movs	r2, #140	@ 0x8c
 80023c6:	2132      	movs	r1, #50	@ 0x32
 80023c8:	2006      	movs	r0, #6
 80023ca:	f7ff f84d 	bl	8001468 <DrawTetrominoByIndex>
	LCD_SetTextColor(LCD_COLOR_MAGENTA);
 80023ce:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80023d2:	f7fe fcdb 	bl	8000d8c <LCD_SetTextColor>
	LCD_DisplayString(100, 152, "ETRIS");
 80023d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002414 <showStartScreen+0xa0>)
 80023d8:	2198      	movs	r1, #152	@ 0x98
 80023da:	2064      	movs	r0, #100	@ 0x64
 80023dc:	f7fe fd86 	bl	8000eec <LCD_DisplayString>

	// Start Button
//	LCD_Draw_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, LCD_COLOR_GREEN);
	LCD_Draw_Rounded_Rectangle_Fill(START_AREA_X, START_AREA_Y, START_AREA_X_LEN, START_AREA_Y_LEN, 15, LCD_COLOR_GREEN);
 80023e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	230f      	movs	r3, #15
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2330      	movs	r3, #48	@ 0x30
 80023ec:	22b4      	movs	r2, #180	@ 0xb4
 80023ee:	21f2      	movs	r1, #242	@ 0xf2
 80023f0:	201e      	movs	r0, #30
 80023f2:	f7ff f897 	bl	8001524 <LCD_Draw_Rounded_Rectangle_Fill>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fcc8 	bl	8000d8c <LCD_SetTextColor>
	LCD_DisplayString(START_AREA_X + BORDER_GAP + 24, START_AREA_Y + BORDER_GAP /2, "Start");
 80023fc:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <showStartScreen+0xa4>)
 80023fe:	f240 1101 	movw	r1, #257	@ 0x101
 8002402:	2054      	movs	r0, #84	@ 0x54
 8002404:	f7fe fd72 	bl	8000eec <LCD_DisplayString>
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000004 	.word	0x20000004
 8002414:	080075a8 	.word	0x080075a8
 8002418:	080075b0 	.word	0x080075b0

0800241c <startClicked>:

bool startClicked(uint16_t x, uint16_t y) {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	4613      	mov	r3, r2
 800242a:	80bb      	strh	r3, [r7, #4]
	return (x >= START_AREA_X && x <= (START_AREA_X + START_AREA_X_LEN) && y >= START_AREA_Y && y <= (START_AREA_Y + START_AREA_Y_LEN));
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b1d      	cmp	r3, #29
 8002430:	d90b      	bls.n	800244a <startClicked+0x2e>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2bd2      	cmp	r3, #210	@ 0xd2
 8002436:	d808      	bhi.n	800244a <startClicked+0x2e>
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	2bf1      	cmp	r3, #241	@ 0xf1
 800243c:	d905      	bls.n	800244a <startClicked+0x2e>
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002444:	d801      	bhi.n	800244a <startClicked+0x2e>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <startClicked+0x30>
 800244a:	2300      	movs	r3, #0
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <showGameScreen>:

void showGameScreen(){
 8002460:	b580      	push	{r7, lr}
 8002462:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8002466:	af00      	add	r7, sp, #0
	// Game Board
	Board shownBoard = boardWithPiece(& board, & currentPiece);
 8002468:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800246c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <showGameScreen+0x30>)
 8002472:	4908      	ldr	r1, [pc, #32]	@ (8002494 <showGameScreen+0x34>)
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fafd 	bl	8001a74 <boardWithPiece>
	Fill_Tetris_Board(
 800247a:	463b      	mov	r3, r7
 800247c:	2232      	movs	r2, #50	@ 0x32
 800247e:	212d      	movs	r1, #45	@ 0x2d
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe ff95 	bl	80013b0 <Fill_Tetris_Board>
			50
			);

	// Next Piece
//	DrawTetromino(& nextPiece, 130, 10);
}
 8002486:	bf00      	nop
 8002488:	f507 7748 	add.w	r7, r7, #800	@ 0x320
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20025e94 	.word	0x20025e94
 8002494:	20025b74 	.word	0x20025b74

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_MspInit+0x4c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024d6:	2007      	movs	r0, #7
 80024d8:	f001 f85e 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_I2C_MspInit+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d14b      	bne.n	80025a2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a20      	ldr	r2, [pc, #128]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002548:	2312      	movs	r3, #18
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002554:	2304      	movs	r3, #4
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4815      	ldr	r0, [pc, #84]	@ (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002560:	f001 f890 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256a:	2312      	movs	r3, #18
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002576:	2304      	movs	r3, #4
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <HAL_I2C_MspInit+0xd0>)
 8002582:	f001 f87f 	bl	8003684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002594:	6413      	str	r3, [r2, #64]	@ 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	@ 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40005c00 	.word	0x40005c00
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09a      	sub	sp, #104	@ 0x68
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d8:	2230      	movs	r2, #48	@ 0x30
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fa1d 	bl	8006a1c <memset>
  if(hltdc->Instance==LTDC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a81      	ldr	r2, [pc, #516]	@ (80027ec <HAL_LTDC_MspInit+0x230>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f040 80fb 	bne.w	80027e4 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025ee:	2308      	movs	r3, #8
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80025f2:	2364      	movs	r3, #100	@ 0x64
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80025f6:	2302      	movs	r3, #2
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fa5d 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002610:	f7ff fe46 	bl	80022a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	4b75      	ldr	r3, [pc, #468]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	4a74      	ldr	r2, [pc, #464]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800261e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002622:	6453      	str	r3, [r2, #68]	@ 0x44
 8002624:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	4b6e      	ldr	r3, [pc, #440]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4a6d      	ldr	r2, [pc, #436]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002640:	4b6b      	ldr	r3, [pc, #428]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	4a66      	ldr	r2, [pc, #408]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6313      	str	r3, [r2, #48]	@ 0x30
 800265c:	4b64      	ldr	r3, [pc, #400]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	4b60      	ldr	r3, [pc, #384]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	4a5f      	ldr	r2, [pc, #380]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6313      	str	r3, [r2, #48]	@ 0x30
 8002678:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 800268e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	4b52      	ldr	r3, [pc, #328]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b0:	4b4f      	ldr	r3, [pc, #316]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80026cc:	4b48      	ldr	r3, [pc, #288]	@ (80027f0 <HAL_LTDC_MspInit+0x234>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80026d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026ea:	230e      	movs	r3, #14
 80026ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026f2:	4619      	mov	r1, r3
 80026f4:	483f      	ldr	r0, [pc, #252]	@ (80027f4 <HAL_LTDC_MspInit+0x238>)
 80026f6:	f000 ffc5 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80026fa:	f641 0358 	movw	r3, #6232	@ 0x1858
 80026fe:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800270c:	230e      	movs	r3, #14
 800270e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002714:	4619      	mov	r1, r3
 8002716:	4838      	ldr	r0, [pc, #224]	@ (80027f8 <HAL_LTDC_MspInit+0x23c>)
 8002718:	f000 ffb4 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800271c:	2303      	movs	r3, #3
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800272c:	2309      	movs	r3, #9
 800272e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002734:	4619      	mov	r1, r3
 8002736:	4831      	ldr	r0, [pc, #196]	@ (80027fc <HAL_LTDC_MspInit+0x240>)
 8002738:	f000 ffa4 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800273c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002740:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800274e:	230e      	movs	r3, #14
 8002750:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002756:	4619      	mov	r1, r3
 8002758:	4828      	ldr	r0, [pc, #160]	@ (80027fc <HAL_LTDC_MspInit+0x240>)
 800275a:	f000 ff93 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800275e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002762:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002770:	230e      	movs	r3, #14
 8002772:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002774:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002778:	4619      	mov	r1, r3
 800277a:	4821      	ldr	r0, [pc, #132]	@ (8002800 <HAL_LTDC_MspInit+0x244>)
 800277c:	f000 ff82 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002780:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002784:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002792:	230e      	movs	r3, #14
 8002794:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002796:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800279a:	4619      	mov	r1, r3
 800279c:	4819      	ldr	r0, [pc, #100]	@ (8002804 <HAL_LTDC_MspInit+0x248>)
 800279e:	f000 ff71 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80027a2:	2348      	movs	r3, #72	@ 0x48
 80027a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027b2:	230e      	movs	r3, #14
 80027b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027ba:	4619      	mov	r1, r3
 80027bc:	4812      	ldr	r0, [pc, #72]	@ (8002808 <HAL_LTDC_MspInit+0x24c>)
 80027be:	f000 ff61 	bl	8003684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80027c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027d4:	2309      	movs	r3, #9
 80027d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027dc:	4619      	mov	r1, r3
 80027de:	4808      	ldr	r0, [pc, #32]	@ (8002800 <HAL_LTDC_MspInit+0x244>)
 80027e0:	f000 ff50 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80027e4:	bf00      	nop
 80027e6:	3768      	adds	r7, #104	@ 0x68
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40016800 	.word	0x40016800
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40021800 	.word	0x40021800
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00

0800280c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_RNG_MspInit+0x3c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282c:	6353      	str	r3, [r2, #52]	@ 0x34
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_RNG_MspInit+0x40>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	50060800 	.word	0x50060800
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_SPI_MspInit+0x84>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12c      	bne.n	80028cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 800287c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_SPI_MspInit+0x88>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80028aa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028bc:	2305      	movs	r3, #5
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <HAL_SPI_MspInit+0x8c>)
 80028c8:	f000 fedc 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	@ 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40015000 	.word	0x40015000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40021400 	.word	0x40021400

080028e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <HAL_SPI_MspDeInit+0x30>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10a      	bne.n	8002908 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_SPI_MspDeInit+0x34>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_SPI_MspDeInit+0x34>)
 80028f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80028fe:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002902:	4805      	ldr	r0, [pc, #20]	@ (8002918 <HAL_SPI_MspDeInit+0x38>)
 8002904:	f001 f86a 	bl	80039dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40015000 	.word	0x40015000
 8002914:	40023800 	.word	0x40023800
 8002918:	40021400 	.word	0x40021400

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <NMI_Handler+0x4>

08002924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <HardFault_Handler+0x4>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <MemManage_Handler+0x4>

08002934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <BusFault_Handler+0x4>

0800293c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <UsageFault_Handler+0x4>

08002944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002972:	f000 fcbb 	bl	80032ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002980:	4802      	ldr	r0, [pc, #8]	@ (800298c <TIM5_IRQHandler+0x10>)
 8002982:	f003 fd69 	bl	8006458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20025f90 	.word	0x20025f90

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80029d2:	f000 f9dd 	bl	8002d90 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80029d6:	f000 f99d 	bl	8002d14 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80029da:	2202      	movs	r2, #2
 80029dc:	2103      	movs	r1, #3
 80029de:	2082      	movs	r0, #130	@ 0x82
 80029e0:	f000 fa2a 	bl	8002e38 <I2C3_Write>
    HAL_Delay(5);
 80029e4:	2005      	movs	r0, #5
 80029e6:	f000 fca1 	bl	800332c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2103      	movs	r1, #3
 80029ee:	2082      	movs	r0, #130	@ 0x82
 80029f0:	f000 fa22 	bl	8002e38 <I2C3_Write>
    HAL_Delay(2);
 80029f4:	2002      	movs	r0, #2
 80029f6:	f000 fc99 	bl	800332c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80029fa:	1cba      	adds	r2, r7, #2
 80029fc:	2302      	movs	r3, #2
 80029fe:	2100      	movs	r1, #0
 8002a00:	2082      	movs	r0, #130	@ 0x82
 8002a02:	f000 fa69 	bl	8002ed8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f640 0211 	movw	r2, #2065	@ 0x811
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d001      	beq.n	8002a26 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e095      	b.n	8002b52 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a26:	2202      	movs	r2, #2
 8002a28:	2103      	movs	r1, #3
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	f000 fa04 	bl	8002e38 <I2C3_Write>
    HAL_Delay(5);
 8002a30:	2005      	movs	r0, #5
 8002a32:	f000 fc7b 	bl	800332c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2103      	movs	r1, #3
 8002a3a:	2082      	movs	r0, #130	@ 0x82
 8002a3c:	f000 f9fc 	bl	8002e38 <I2C3_Write>
    HAL_Delay(2);
 8002a40:	2002      	movs	r0, #2
 8002a42:	f000 fc73 	bl	800332c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a46:	2004      	movs	r0, #4
 8002a48:	f000 f887 	bl	8002b5a <STMPE811_Read>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002a50:	797b      	ldrb	r3, [r7, #5]
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a58:	797b      	ldrb	r3, [r7, #5]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	2082      	movs	r0, #130	@ 0x82
 8002a60:	f000 f9ea 	bl	8002e38 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a64:	2004      	movs	r0, #4
 8002a66:	f000 f878 	bl	8002b5a <STMPE811_Read>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002a6e:	797b      	ldrb	r3, [r7, #5]
 8002a70:	f023 0302 	bic.w	r3, r3, #2
 8002a74:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a76:	797b      	ldrb	r3, [r7, #5]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	2082      	movs	r0, #130	@ 0x82
 8002a7e:	f000 f9db 	bl	8002e38 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002a82:	2249      	movs	r2, #73	@ 0x49
 8002a84:	2120      	movs	r1, #32
 8002a86:	2082      	movs	r0, #130	@ 0x82
 8002a88:	f000 f9d6 	bl	8002e38 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f000 fc4d 	bl	800332c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002a92:	2201      	movs	r2, #1
 8002a94:	2121      	movs	r1, #33	@ 0x21
 8002a96:	2082      	movs	r0, #130	@ 0x82
 8002a98:	f000 f9ce 	bl	8002e38 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a9c:	2017      	movs	r0, #23
 8002a9e:	f000 f85c 	bl	8002b5a <STMPE811_Read>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002aa6:	797b      	ldrb	r3, [r7, #5]
 8002aa8:	f043 031e 	orr.w	r3, r3, #30
 8002aac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002aae:	797b      	ldrb	r3, [r7, #5]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2117      	movs	r1, #23
 8002ab4:	2082      	movs	r0, #130	@ 0x82
 8002ab6:	f000 f9bf 	bl	8002e38 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002aba:	229a      	movs	r2, #154	@ 0x9a
 8002abc:	2141      	movs	r1, #65	@ 0x41
 8002abe:	2082      	movs	r0, #130	@ 0x82
 8002ac0:	f000 f9ba 	bl	8002e38 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	214a      	movs	r1, #74	@ 0x4a
 8002ac8:	2082      	movs	r0, #130	@ 0x82
 8002aca:	f000 f9b5 	bl	8002e38 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ace:	2201      	movs	r2, #1
 8002ad0:	214b      	movs	r1, #75	@ 0x4b
 8002ad2:	2082      	movs	r0, #130	@ 0x82
 8002ad4:	f000 f9b0 	bl	8002e38 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	214b      	movs	r1, #75	@ 0x4b
 8002adc:	2082      	movs	r0, #130	@ 0x82
 8002ade:	f000 f9ab 	bl	8002e38 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2156      	movs	r1, #86	@ 0x56
 8002ae6:	2082      	movs	r0, #130	@ 0x82
 8002ae8:	f000 f9a6 	bl	8002e38 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2158      	movs	r1, #88	@ 0x58
 8002af0:	2082      	movs	r0, #130	@ 0x82
 8002af2:	f000 f9a1 	bl	8002e38 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002af6:	2203      	movs	r2, #3
 8002af8:	2140      	movs	r1, #64	@ 0x40
 8002afa:	2082      	movs	r0, #130	@ 0x82
 8002afc:	f000 f99c 	bl	8002e38 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002b00:	22ff      	movs	r2, #255	@ 0xff
 8002b02:	210b      	movs	r1, #11
 8002b04:	2082      	movs	r0, #130	@ 0x82
 8002b06:	f000 f997 	bl	8002e38 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002b0a:	f000 f8c1 	bl	8002c90 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002b0e:	2009      	movs	r0, #9
 8002b10:	f000 f823 	bl	8002b5a <STMPE811_Read>
 8002b14:	4603      	mov	r3, r0
 8002b16:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b18:	797b      	ldrb	r3, [r7, #5]
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002b20:	797b      	ldrb	r3, [r7, #5]
 8002b22:	461a      	mov	r2, r3
 8002b24:	2109      	movs	r1, #9
 8002b26:	2082      	movs	r0, #130	@ 0x82
 8002b28:	f000 f986 	bl	8002e38 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f000 f814 	bl	8002b5a <STMPE811_Read>
 8002b32:	4603      	mov	r3, r0
 8002b34:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b36:	797b      	ldrb	r3, [r7, #5]
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002b3e:	797b      	ldrb	r3, [r7, #5]
 8002b40:	461a      	mov	r2, r3
 8002b42:	210a      	movs	r1, #10
 8002b44:	2082      	movs	r0, #130	@ 0x82
 8002b46:	f000 f977 	bl	8002e38 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b4a:	20c8      	movs	r0, #200	@ 0xc8
 8002b4c:	f000 fbee 	bl	800332c <HAL_Delay>

    return STMPE811_State_Ok;
 8002b50:	2302      	movs	r3, #2

}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002b64:	f107 020f 	add.w	r2, r7, #15
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	2082      	movs	r0, #130	@ 0x82
 8002b6e:	f000 f98d 	bl	8002e8c <I2C3_Read>

    return readData;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002b8c:	79ba      	ldrb	r2, [r7, #6]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4619      	mov	r1, r3
 8002b92:	2082      	movs	r0, #130	@ 0x82
 8002b94:	f000 f950 	bl	8002e38 <I2C3_Write>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	799b      	ldrb	r3, [r3, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d117      	bne.n	8002be0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f9b1 	bl	8002f1c <TM_STMPE811_ReadX>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	885b      	ldrh	r3, [r3, #2]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fa04 	bl	8002fd8 <TM_STMPE811_ReadY>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	805a      	strh	r2, [r3, #2]
 8002bde:	e048      	b.n	8002c72 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	799b      	ldrb	r3, [r3, #6]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d112      	bne.n	8002c0e <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f995 	bl	8002f1c <TM_STMPE811_ReadX>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	885b      	ldrh	r3, [r3, #2]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f9ea 	bl	8002fd8 <TM_STMPE811_ReadY>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	805a      	strh	r2, [r3, #2]
 8002c0c:	e031      	b.n	8002c72 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d115      	bne.n	8002c42 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	885b      	ldrh	r3, [r3, #2]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f97e 	bl	8002f1c <TM_STMPE811_ReadX>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f9d3 	bl	8002fd8 <TM_STMPE811_ReadY>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	e017      	b.n	8002c72 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	799b      	ldrb	r3, [r3, #6]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d113      	bne.n	8002c72 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f964 	bl	8002f1c <TM_STMPE811_ReadX>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f9b7 	bl	8002fd8 <TM_STMPE811_ReadY>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c72:	2201      	movs	r2, #1
 8002c74:	214b      	movs	r1, #75	@ 0x4b
 8002c76:	2082      	movs	r0, #130	@ 0x82
 8002c78:	f000 f8de 	bl	8002e38 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	214b      	movs	r1, #75	@ 0x4b
 8002c80:	2082      	movs	r0, #130	@ 0x82
 8002c82:	f000 f8d9 	bl	8002e38 <I2C3_Write>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <enableInterruptSupportForTouch+0x5c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <enableInterruptSupportForTouch+0x5c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <enableInterruptSupportForTouch+0x5c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cc4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cc6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002cca:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	@ (8002cf0 <enableInterruptSupportForTouch+0x60>)
 8002cda:	f000 fcd3 	bl	8003684 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cde:	2028      	movs	r0, #40	@ 0x28
 8002ce0:	f7ff fe56 	bl	8002990 <__NVIC_EnableIRQ>

}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20026040 	.word	0x20026040

08002d14 <I2C3_Init>:

static void I2C3_Init()
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4b18      	ldr	r3, [pc, #96]	@ (8002d80 <I2C3_Init+0x6c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <I2C3_Init+0x6c>)
 8002d24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <I2C3_Init+0x6c>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <I2C3_Init+0x70>)
 8002d38:	4a13      	ldr	r2, [pc, #76]	@ (8002d88 <I2C3_Init+0x74>)
 8002d3a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <I2C3_Init+0x70>)
 8002d3e:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <I2C3_Init+0x78>)
 8002d40:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <I2C3_Init+0x70>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <I2C3_Init+0x70>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <I2C3_Init+0x70>)
 8002d50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d54:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <I2C3_Init+0x70>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <I2C3_Init+0x70>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002d62:	4808      	ldr	r0, [pc, #32]	@ (8002d84 <I2C3_Init+0x70>)
 8002d64:	f000 ff60 	bl	8003c28 <HAL_I2C_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002d72:	bf00      	nop
 8002d74:	e7fd      	b.n	8002d72 <I2C3_Init+0x5e>
    }
    return;
 8002d76:	bf00      	nop
}
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	20025fec 	.word	0x20025fec
 8002d88:	40005c00 	.word	0x40005c00
 8002d8c:	000186a0 	.word	0x000186a0

08002d90 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <I2C3_MspInit+0x9c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de4:	2312      	movs	r3, #18
 8002de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002df0:	2304      	movs	r3, #4
 8002df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480d      	ldr	r0, [pc, #52]	@ (8002e30 <I2C3_MspInit+0xa0>)
 8002dfc:	f000 fc42 	bl	8003684 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e06:	2312      	movs	r3, #18
 8002e08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e12:	2304      	movs	r3, #4
 8002e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 030c 	add.w	r3, r7, #12
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <I2C3_MspInit+0xa4>)
 8002e1e:	f000 fc31 	bl	8003684 <HAL_GPIO_Init>
    
}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020000 	.word	0x40020000

08002e38 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
 8002e42:	460b      	mov	r3, r1
 8002e44:	717b      	strb	r3, [r7, #5]
 8002e46:	4613      	mov	r3, r2
 8002e48:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e4e:	797b      	ldrb	r3, [r7, #5]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	88f9      	ldrh	r1, [r7, #6]
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <I2C3_Write+0x48>)
 8002e56:	9302      	str	r3, [sp, #8]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	f107 030f 	add.w	r3, r7, #15
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2301      	movs	r3, #1
 8002e64:	4807      	ldr	r0, [pc, #28]	@ (8002e84 <I2C3_Write+0x4c>)
 8002e66:	f001 f823 	bl	8003eb0 <HAL_I2C_Mem_Write>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <I2C3_Write+0x50>)
 8002e70:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002e72:	f7ff ff3f 	bl	8002cf4 <verifyHAL_I2C_IS_OKAY>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	0003d090 	.word	0x0003d090
 8002e84:	20025fec 	.word	0x20025fec
 8002e88:	20026040 	.word	0x20026040

08002e8c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af04      	add	r7, sp, #16
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	b299      	uxth	r1, r3
 8002ea0:	79bb      	ldrb	r3, [r7, #6]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <I2C3_Read+0x40>)
 8002ea6:	9302      	str	r3, [sp, #8]
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	4807      	ldr	r0, [pc, #28]	@ (8002ed0 <I2C3_Read+0x44>)
 8002eb4:	f001 f8f6 	bl	80040a4 <HAL_I2C_Mem_Read>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <I2C3_Read+0x48>)
 8002ebe:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002ec0:	f7ff ff18 	bl	8002cf4 <verifyHAL_I2C_IS_OKAY>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	0003d090 	.word	0x0003d090
 8002ed0:	20025fec 	.word	0x20025fec
 8002ed4:	20026040 	.word	0x20026040

08002ed8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af04      	add	r7, sp, #16
 8002ede:	603a      	str	r2, [r7, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	71bb      	strb	r3, [r7, #6]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	b299      	uxth	r1, r3
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <I2C3_MulitByteRead+0x3c>)
 8002ef8:	9302      	str	r3, [sp, #8]
 8002efa:	88bb      	ldrh	r3, [r7, #4]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2301      	movs	r3, #1
 8002f04:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <I2C3_MulitByteRead+0x40>)
 8002f06:	f001 f8cd 	bl	80040a4 <HAL_I2C_Mem_Read>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0003d090 	.word	0x0003d090
 8002f18:	20025fec 	.word	0x20025fec

08002f1c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f26:	204d      	movs	r0, #77	@ 0x4d
 8002f28:	f7ff fe17 	bl	8002b5a <STMPE811_Read>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f30:	204e      	movs	r0, #78	@ 0x4e
 8002f32:	f7ff fe12 	bl	8002b5a <STMPE811_Read>
 8002f36:	4603      	mov	r3, r0
 8002f38:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f3a:	7a7b      	ldrb	r3, [r7, #9]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	7a3b      	ldrb	r3, [r7, #8]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f4c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f50:	4293      	cmp	r3, r2
 8002f52:	dc06      	bgt.n	8002f62 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	81fb      	strh	r3, [r7, #14]
 8002f60:	e005      	b.n	8002f6e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002f68:	3308      	adds	r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f72:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <TM_STMPE811_ReadX+0xb8>)
 8002f74:	fb82 1203 	smull	r1, r2, r2, r3
 8002f78:	441a      	add	r2, r3
 8002f7a:	10d2      	asrs	r2, r2, #3
 8002f7c:	17db      	asrs	r3, r3, #31
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f86:	2bef      	cmp	r3, #239	@ 0xef
 8002f88:	dd02      	ble.n	8002f90 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002f8a:	23ef      	movs	r3, #239	@ 0xef
 8002f8c:	81fb      	strh	r3, [r7, #14]
 8002f8e:	e005      	b.n	8002f9c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002f90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da01      	bge.n	8002f9c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002f9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dd05      	ble.n	8002fb2 <TM_STMPE811_ReadX+0x96>
 8002fa6:	89fa      	ldrh	r2, [r7, #14]
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	e004      	b.n	8002fbc <TM_STMPE811_ReadX+0xa0>
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002fbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	dd01      	ble.n	8002fca <TM_STMPE811_ReadX+0xae>
        return val;
 8002fc6:	89fb      	ldrh	r3, [r7, #14]
 8002fc8:	e000      	b.n	8002fcc <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002fca:	88fb      	ldrh	r3, [r7, #6]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	88888889 	.word	0x88888889

08002fd8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002fe2:	204f      	movs	r0, #79	@ 0x4f
 8002fe4:	f7ff fdb9 	bl	8002b5a <STMPE811_Read>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002fec:	2050      	movs	r0, #80	@ 0x50
 8002fee:	f7ff fdb4 	bl	8002b5a <STMPE811_Read>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002ff6:	7a7b      	ldrb	r3, [r7, #9]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	b21a      	sxth	r2, r3
 8002ffc:	7a3b      	ldrb	r3, [r7, #8]
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	4313      	orrs	r3, r2
 8003002:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003004:	89fb      	ldrh	r3, [r7, #14]
 8003006:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800300a:	b29b      	uxth	r3, r3
 800300c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800300e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003012:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <TM_STMPE811_ReadY+0xa0>)
 8003014:	fb82 1203 	smull	r1, r2, r2, r3
 8003018:	1052      	asrs	r2, r2, #1
 800301a:	17db      	asrs	r3, r3, #31
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dc02      	bgt.n	800302e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	81fb      	strh	r3, [r7, #14]
 800302c:	e007      	b.n	800303e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800302e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003032:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003036:	db02      	blt.n	800303e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003038:	f240 133f 	movw	r3, #319	@ 0x13f
 800303c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800303e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	429a      	cmp	r2, r3
 8003046:	dd05      	ble.n	8003054 <TM_STMPE811_ReadY+0x7c>
 8003048:	89fa      	ldrh	r2, [r7, #14]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29b      	uxth	r3, r3
 8003050:	b21b      	sxth	r3, r3
 8003052:	e004      	b.n	800305e <TM_STMPE811_ReadY+0x86>
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	b21b      	sxth	r3, r3
 800305e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003064:	2b04      	cmp	r3, #4
 8003066:	dd01      	ble.n	800306c <TM_STMPE811_ReadY+0x94>
        return val;
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	e000      	b.n	800306e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800306c:	88fb      	ldrh	r3, [r7, #6]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2e8ba2e9 	.word	0x2e8ba2e9

0800307c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e00a      	b.n	80030b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800309c:	f3af 8000 	nop.w
 80030a0:	4601      	mov	r1, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	60ba      	str	r2, [r7, #8]
 80030a8:	b2ca      	uxtb	r2, r1
 80030aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	dbf0      	blt.n	800309c <_read+0x12>
  }

  return len;
 80030ba:	687b      	ldr	r3, [r7, #4]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e009      	b.n	80030ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	60ba      	str	r2, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	dbf1      	blt.n	80030d6 <_write+0x12>
  }
  return len;
 80030f2:	687b      	ldr	r3, [r7, #4]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_close>:

int _close(int file)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003124:	605a      	str	r2, [r3, #4]
  return 0;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <_isatty>:

int _isatty(int file)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <_sbrk+0x5c>)
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <_sbrk+0x60>)
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003178:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <_sbrk+0x64>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003180:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <_sbrk+0x64>)
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <_sbrk+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d207      	bcs.n	80031a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003194:	f003 fc90 	bl	8006ab8 <__errno>
 8003198:	4603      	mov	r3, r0
 800319a:	220c      	movs	r2, #12
 800319c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e009      	b.n	80031b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a4:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <_sbrk+0x64>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031aa:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <_sbrk+0x64>)
 80031b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20030000 	.word	0x20030000
 80031c4:	00000400 	.word	0x00000400
 80031c8:	20026044 	.word	0x20026044
 80031cc:	20026198 	.word	0x20026198

080031d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <SystemInit+0x20>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	4a05      	ldr	r2, [pc, #20]	@ (80031f0 <SystemInit+0x20>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800322c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031f8:	f7ff ffea 	bl	80031d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031fc:	480c      	ldr	r0, [pc, #48]	@ (8003230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031fe:	490d      	ldr	r1, [pc, #52]	@ (8003234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003200:	4a0d      	ldr	r2, [pc, #52]	@ (8003238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003204:	e002      	b.n	800320c <LoopCopyDataInit>

08003206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320a:	3304      	adds	r3, #4

0800320c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800320c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003210:	d3f9      	bcc.n	8003206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003214:	4c0a      	ldr	r4, [pc, #40]	@ (8003240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003218:	e001      	b.n	800321e <LoopFillZerobss>

0800321a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800321c:	3204      	adds	r2, #4

0800321e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003220:	d3fb      	bcc.n	800321a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003222:	f003 fc4f 	bl	8006ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003226:	f7fe ffae 	bl	8002186 <main>
  bx  lr    
 800322a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800322c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003234:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8003238:	080087e4 	.word	0x080087e4
  ldr r2, =_sbss
 800323c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8003240:	20026198 	.word	0x20026198

08003244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003244:	e7fe      	b.n	8003244 <ADC_IRQHandler>
	...

08003248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800324c:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <HAL_Init+0x40>)
 8003252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <HAL_Init+0x40>)
 800325e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <HAL_Init+0x40>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 f991 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003276:	2000      	movs	r0, #0
 8003278:	f000 f808 	bl	800328c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800327c:	f7ff f90c 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00

0800328c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003294:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <HAL_InitTick+0x54>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_InitTick+0x58>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9b7 	bl	800361e <HAL_SYSTICK_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00e      	b.n	80032d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d80a      	bhi.n	80032d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f000 f971 	bl	80035ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032cc:	4a06      	ldr	r2, [pc, #24]	@ (80032e8 <HAL_InitTick+0x5c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200001fc 	.word	0x200001fc
 80032e4:	20000204 	.word	0x20000204
 80032e8:	20000200 	.word	0x20000200

080032ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_IncTick+0x20>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_IncTick+0x24>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <HAL_IncTick+0x24>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000204 	.word	0x20000204
 8003310:	20026048 	.word	0x20026048

08003314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <HAL_GetTick+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20026048 	.word	0x20026048

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff ffee 	bl	8003314 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d005      	beq.n	8003352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_Delay+0x44>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003352:	bf00      	nop
 8003354:	f7ff ffde 	bl	8003314 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d8f7      	bhi.n	8003354 <HAL_Delay+0x28>
  {
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000204 	.word	0x20000204

08003374 <__NVIC_SetPriorityGrouping>:
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db12      	blt.n	800344c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	490a      	ldr	r1, [pc, #40]	@ (8003458 <__NVIC_DisableIRQ+0x44>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	3320      	adds	r3, #32
 800343c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003440:	f3bf 8f4f 	dsb	sy
}
 8003444:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003446:	f3bf 8f6f 	isb	sy
}
 800344a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0c      	blt.n	8003488 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	@ (8003494 <__NVIC_ClearPendingIRQ+0x38>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	3360      	adds	r3, #96	@ 0x60
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	@ (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	@ (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	@ 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
         );
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003564:	d301      	bcc.n	800356a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356a:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <SysTick_Config+0x40>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003572:	210f      	movs	r1, #15
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	f7ff ff8e 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <SysTick_Config+0x40>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <SysTick_Config+0x40>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000e010 	.word	0xe000e010

08003598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fee7 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff fefc 	bl	80033bc <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff8e 	bl	80034ec <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff feef 	bl	80033d8 <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff feff 	bl	8003414 <__NVIC_DisableIRQ>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff94 	bl	8003554 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff09 	bl	800345c <__NVIC_ClearPendingIRQ>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2201      	movs	r2, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <HAL_EXTI_ClearPending+0x2c>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6153      	str	r3, [r2, #20]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e177      	b.n	8003990 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 8166 	bne.w	800398a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d005      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d130      	bne.n	8003738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d017      	beq.n	8003774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80c0 	beq.w	800398a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_GPIO_Init+0x324>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003826:	4a61      	ldr	r2, [pc, #388]	@ (80039ac <HAL_GPIO_Init+0x328>)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a58      	ldr	r2, [pc, #352]	@ (80039b0 <HAL_GPIO_Init+0x32c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d037      	beq.n	80038c2 <HAL_GPIO_Init+0x23e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a57      	ldr	r2, [pc, #348]	@ (80039b4 <HAL_GPIO_Init+0x330>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_GPIO_Init+0x23a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a56      	ldr	r2, [pc, #344]	@ (80039b8 <HAL_GPIO_Init+0x334>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d02b      	beq.n	80038ba <HAL_GPIO_Init+0x236>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a55      	ldr	r2, [pc, #340]	@ (80039bc <HAL_GPIO_Init+0x338>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d025      	beq.n	80038b6 <HAL_GPIO_Init+0x232>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a54      	ldr	r2, [pc, #336]	@ (80039c0 <HAL_GPIO_Init+0x33c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01f      	beq.n	80038b2 <HAL_GPIO_Init+0x22e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a53      	ldr	r2, [pc, #332]	@ (80039c4 <HAL_GPIO_Init+0x340>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d019      	beq.n	80038ae <HAL_GPIO_Init+0x22a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a52      	ldr	r2, [pc, #328]	@ (80039c8 <HAL_GPIO_Init+0x344>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_GPIO_Init+0x226>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a51      	ldr	r2, [pc, #324]	@ (80039cc <HAL_GPIO_Init+0x348>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00d      	beq.n	80038a6 <HAL_GPIO_Init+0x222>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a50      	ldr	r2, [pc, #320]	@ (80039d0 <HAL_GPIO_Init+0x34c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <HAL_GPIO_Init+0x21e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4f      	ldr	r2, [pc, #316]	@ (80039d4 <HAL_GPIO_Init+0x350>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_GPIO_Init+0x21a>
 800389a:	2309      	movs	r3, #9
 800389c:	e012      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 800389e:	230a      	movs	r3, #10
 80038a0:	e010      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038a2:	2308      	movs	r3, #8
 80038a4:	e00e      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038a6:	2307      	movs	r3, #7
 80038a8:	e00c      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038aa:	2306      	movs	r3, #6
 80038ac:	e00a      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038ae:	2305      	movs	r3, #5
 80038b0:	e008      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038b2:	2304      	movs	r3, #4
 80038b4:	e006      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e004      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_GPIO_Init+0x240>
 80038c2:	2300      	movs	r3, #0
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	f002 0203 	and.w	r2, r2, #3
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	4093      	lsls	r3, r2
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d4:	4935      	ldr	r1, [pc, #212]	@ (80039ac <HAL_GPIO_Init+0x328>)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e2:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003906:	4a34      	ldr	r2, [pc, #208]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800390c:	4b32      	ldr	r3, [pc, #200]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003930:	4a29      	ldr	r2, [pc, #164]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003936:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395a:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_GPIO_Init+0x354>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3301      	adds	r3, #1
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	f67f ae84 	bls.w	80036a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40020400 	.word	0x40020400
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020c00 	.word	0x40020c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40021400 	.word	0x40021400
 80039c8:	40021800 	.word	0x40021800
 80039cc:	40021c00 	.word	0x40021c00
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40022400 	.word	0x40022400
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e0d9      	b.n	8003bac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f8:	2201      	movs	r2, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	f040 80c9 	bne.w	8003ba6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a14:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc4 <HAL_GPIO_DeInit+0x1e8>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_GPIO_DeInit+0x1ec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d037      	beq.n	8003aae <HAL_GPIO_DeInit+0xd2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a62      	ldr	r2, [pc, #392]	@ (8003bcc <HAL_GPIO_DeInit+0x1f0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_GPIO_DeInit+0xce>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a61      	ldr	r2, [pc, #388]	@ (8003bd0 <HAL_GPIO_DeInit+0x1f4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_GPIO_DeInit+0xca>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a60      	ldr	r2, [pc, #384]	@ (8003bd4 <HAL_GPIO_DeInit+0x1f8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_DeInit+0xc6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd8 <HAL_GPIO_DeInit+0x1fc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_DeInit+0xc2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a5e      	ldr	r2, [pc, #376]	@ (8003bdc <HAL_GPIO_DeInit+0x200>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_DeInit+0xbe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_GPIO_DeInit+0x204>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_DeInit+0xba>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a5c      	ldr	r2, [pc, #368]	@ (8003be4 <HAL_GPIO_DeInit+0x208>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_DeInit+0xb6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a5b      	ldr	r2, [pc, #364]	@ (8003be8 <HAL_GPIO_DeInit+0x20c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_DeInit+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a5a      	ldr	r2, [pc, #360]	@ (8003bec <HAL_GPIO_DeInit+0x210>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_DeInit+0xae>
 8003a86:	2309      	movs	r3, #9
 8003a88:	e012      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e010      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e00e      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e00c      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00a      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a9a:	2305      	movs	r3, #5
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d132      	bne.n	8003b26 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	4949      	ldr	r1, [pc, #292]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ace:	4b48      	ldr	r3, [pc, #288]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4946      	ldr	r1, [pc, #280]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003adc:	4b44      	ldr	r3, [pc, #272]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	4942      	ldr	r1, [pc, #264]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003aea:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	493f      	ldr	r1, [pc, #252]	@ (8003bf0 <HAL_GPIO_DeInit+0x214>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b08:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc4 <HAL_GPIO_DeInit+0x1e8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	482a      	ldr	r0, [pc, #168]	@ (8003bc4 <HAL_GPIO_DeInit+0x1e8>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	400a      	ands	r2, r1
 8003b20:	3302      	adds	r3, #2
 8003b22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2103      	movs	r1, #3
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	08d2      	lsrs	r2, r2, #3
 8003b5c:	4019      	ands	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2103      	movs	r1, #3
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2103      	movs	r1, #3
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	f67f af22 	bls.w	80039f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40021400 	.word	0x40021400
 8003be0:	40021800 	.word	0x40021800
 8003be4:	40021c00 	.word	0x40021c00
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40022400 	.word	0x40022400
 8003bf0:	40013c00 	.word	0x40013c00

08003bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
 8003c00:	4613      	mov	r3, r2
 8003c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c04:	787b      	ldrb	r3, [r7, #1]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c10:	e003      	b.n	8003c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	041a      	lsls	r2, r3, #16
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e12b      	b.n	8003e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe fc4a 	bl	80024e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f001 ff06 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8003c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a81      	ldr	r2, [pc, #516]	@ (8003e9c <HAL_I2C_Init+0x274>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d807      	bhi.n	8003cac <HAL_I2C_Init+0x84>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a80      	ldr	r2, [pc, #512]	@ (8003ea0 <HAL_I2C_Init+0x278>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bf94      	ite	ls
 8003ca4:	2301      	movls	r3, #1
 8003ca6:	2300      	movhi	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e006      	b.n	8003cba <HAL_I2C_Init+0x92>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ea4 <HAL_I2C_Init+0x27c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0e7      	b.n	8003e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a78      	ldr	r2, [pc, #480]	@ (8003ea8 <HAL_I2C_Init+0x280>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0c9b      	lsrs	r3, r3, #18
 8003ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e9c <HAL_I2C_Init+0x274>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d802      	bhi.n	8003cfc <HAL_I2C_Init+0xd4>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	e009      	b.n	8003d10 <HAL_I2C_Init+0xe8>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	4a69      	ldr	r2, [pc, #420]	@ (8003eac <HAL_I2C_Init+0x284>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	3301      	adds	r3, #1
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	495c      	ldr	r1, [pc, #368]	@ (8003e9c <HAL_I2C_Init+0x274>)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d819      	bhi.n	8003d64 <HAL_I2C_Init+0x13c>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e59      	subs	r1, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d44:	400b      	ands	r3, r1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_I2C_Init+0x138>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1e59      	subs	r1, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	e051      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e04f      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d111      	bne.n	8003d90 <HAL_I2C_Init+0x168>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e012      	b.n	8003db6 <HAL_I2C_Init+0x18e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e58      	subs	r0, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	0099      	lsls	r1, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Init+0x196>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e022      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10e      	bne.n	8003de4 <HAL_I2C_Init+0x1bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1e58      	subs	r0, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	440b      	add	r3, r1
 8003dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de2:	e00f      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1e58      	subs	r0, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	0099      	lsls	r1, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	6809      	ldr	r1, [r1, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6911      	ldr	r1, [r2, #16]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	000186a0 	.word	0x000186a0
 8003ea0:	001e847f 	.word	0x001e847f
 8003ea4:	003d08ff 	.word	0x003d08ff
 8003ea8:	431bde83 	.word	0x431bde83
 8003eac:	10624dd3 	.word	0x10624dd3

08003eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	817b      	strh	r3, [r7, #10]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	813b      	strh	r3, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eca:	f7ff fa23 	bl	8003314 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	f040 80d9 	bne.w	8004090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2319      	movs	r3, #25
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	496d      	ldr	r1, [pc, #436]	@ (800409c <HAL_I2C_Mem_Write+0x1ec>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fc8b 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0cc      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Mem_Write+0x56>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0c5      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2221      	movs	r2, #33	@ 0x21
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2240      	movs	r2, #64	@ 0x40
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80040a0 <HAL_I2C_Mem_Write+0x1f0>)
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6e:	88f8      	ldrh	r0, [r7, #6]
 8003f70:	893a      	ldrh	r2, [r7, #8]
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fac2 	bl	8004508 <I2C_RequestMemoryWrite>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d052      	beq.n	8004030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e081      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fd50 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e06b      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d11b      	bne.n	8004030 <HAL_I2C_Mem_Write+0x180>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1aa      	bne.n	8003f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fd43 	bl	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e016      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	00100002 	.word	0x00100002
 80040a0:	ffff0000 	.word	0xffff0000

080040a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	817b      	strh	r3, [r7, #10]
 80040b6:	460b      	mov	r3, r1
 80040b8:	813b      	strh	r3, [r7, #8]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040be:	f7ff f929 	bl	8003314 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	f040 8214 	bne.w	80044fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2319      	movs	r3, #25
 80040d8:	2201      	movs	r2, #1
 80040da:	497b      	ldr	r1, [pc, #492]	@ (80042c8 <HAL_I2C_Mem_Read+0x224>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb91 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	e207      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Mem_Read+0x56>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e200      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d007      	beq.n	8004120 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800412e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2222      	movs	r2, #34	@ 0x22
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2240      	movs	r2, #64	@ 0x40
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800414a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a5b      	ldr	r2, [pc, #364]	@ (80042cc <HAL_I2C_Mem_Read+0x228>)
 8004160:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004162:	88f8      	ldrh	r0, [r7, #6]
 8004164:	893a      	ldrh	r2, [r7, #8]
 8004166:	8979      	ldrh	r1, [r7, #10]
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fa5e 	bl	8004634 <I2C_RequestMemoryRead>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e1bc      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d113      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e190      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d11b      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e170      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d11b      	bne.n	8004232 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004208:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	e150      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004248:	e144      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	2b03      	cmp	r3, #3
 8004250:	f200 80f1 	bhi.w	8004436 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004258:	2b01      	cmp	r3, #1
 800425a:	d123      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fc79 	bl	8004b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e145      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042a2:	e117      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d14e      	bne.n	800434a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	2200      	movs	r2, #0
 80042b4:	4906      	ldr	r1, [pc, #24]	@ (80042d0 <HAL_I2C_Mem_Read+0x22c>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 faa4 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e11a      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
 80042c6:	bf00      	nop
 80042c8:	00100002 	.word	0x00100002
 80042cc:	ffff0000 	.word	0xffff0000
 80042d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004348:	e0c4      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	2200      	movs	r2, #0
 8004352:	496c      	ldr	r1, [pc, #432]	@ (8004504 <HAL_I2C_Mem_Read+0x460>)
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fa55 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0cb      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	2200      	movs	r2, #0
 80043ae:	4955      	ldr	r1, [pc, #340]	@ (8004504 <HAL_I2C_Mem_Read+0x460>)
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fa27 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e09d      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004434:	e04e      	b.n	80044d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004438:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fb8c 	bl	8004b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e058      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d124      	bne.n	80044d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448e:	2b03      	cmp	r3, #3
 8004490:	d107      	bne.n	80044a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f aeb6 	bne.w	800424a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
  }
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00010004 	.word	0x00010004

08004508 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004530:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	2200      	movs	r2, #0
 800453a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f960 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004558:	d103      	bne.n	8004562 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004560:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e05f      	b.n	8004626 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004574:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	492d      	ldr	r1, [pc, #180]	@ (8004630 <I2C_RequestMemoryWrite+0x128>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9bb 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e04c      	b.n	8004626 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa46 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d107      	bne.n	80045ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e02b      	b.n	8004626 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	e021      	b.n	8004624 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f0:	6a39      	ldr	r1, [r7, #32]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fa20 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	2b04      	cmp	r3, #4
 8004604:	d107      	bne.n	8004616 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004614:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e005      	b.n	8004626 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800461a:	893b      	ldrh	r3, [r7, #8]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	00010002 	.word	0x00010002

08004634 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	817b      	strh	r3, [r7, #10]
 8004646:	460b      	mov	r3, r1
 8004648:	813b      	strh	r3, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2200      	movs	r2, #0
 8004676:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f8c2 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004694:	d103      	bne.n	800469e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800469c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0aa      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	6a3a      	ldr	r2, [r7, #32]
 80046b6:	4952      	ldr	r1, [pc, #328]	@ (8004800 <I2C_RequestMemoryRead+0x1cc>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f91d 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e097      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	6a39      	ldr	r1, [r7, #32]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f9a8 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d107      	bne.n	8004706 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e076      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	e021      	b.n	8004760 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b29b      	uxth	r3, r3
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	6a39      	ldr	r1, [r7, #32]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f982 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2b04      	cmp	r3, #4
 8004740:	d107      	bne.n	8004752 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e050      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004756:	893b      	ldrh	r3, [r7, #8]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004762:	6a39      	ldr	r1, [r7, #32]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f967 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	2b04      	cmp	r3, #4
 8004776:	d107      	bne.n	8004788 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004786:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e035      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f82b 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c2:	d103      	bne.n	80047cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e013      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047d0:	897b      	ldrh	r3, [r7, #10]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	6a3a      	ldr	r2, [r7, #32]
 80047e4:	4906      	ldr	r1, [pc, #24]	@ (8004800 <I2C_RequestMemoryRead+0x1cc>)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f886 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004814:	e048      	b.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d044      	beq.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe fd79 	bl	8003314 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d139      	bne.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x56>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	e00c      	b.n	8004874 <I2C_WaitOnFlagUntilTimeout+0x70>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	429a      	cmp	r2, r3
 8004878:	d116      	bne.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e023      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10d      	bne.n	80048ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	e00c      	b.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	43da      	mvns	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d093      	beq.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004906:	e071      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004916:	d123      	bne.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004926:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004930:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e067      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d041      	beq.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fe fcd4 	bl	8003314 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d136      	bne.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10c      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	43da      	mvns	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf14      	ite	ne
 800499a:	2301      	movne	r3, #1
 800499c:	2300      	moveq	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e00b      	b.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	43da      	mvns	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e021      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10c      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	43da      	mvns	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e00b      	b.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	43da      	mvns	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f47f af6d 	bne.w	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a44:	e034      	b.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f8e3 	bl	8004c12 <I2C_IsAcknowledgeFailed>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e034      	b.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d028      	beq.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fe fc59 	bl	8003314 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11d      	bne.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7e:	2b80      	cmp	r3, #128	@ 0x80
 8004a80:	d016      	beq.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d1c3      	bne.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad4:	e034      	b.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f89b 	bl	8004c12 <I2C_IsAcknowledgeFailed>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e034      	b.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d028      	beq.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fe fc11 	bl	8003314 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11d      	bne.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d016      	beq.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e007      	b.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d1c3      	bne.n	8004ad6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b64:	e049      	b.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d119      	bne.n	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0210 	mvn.w	r2, #16
 8004b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e030      	b.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba8:	f7fe fbb4 	bl	8003314 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11d      	bne.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d016      	beq.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	d1ae      	bne.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c28:	d11b      	bne.n	8004c62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0bf      	b.n	8004e02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd fc90 	bl	80025bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004cb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e0c <HAL_LTDC_Init+0x19c>)
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68d9      	ldr	r1, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <HAL_LTDC_Init+0x19c>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68d9      	ldr	r1, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6919      	ldr	r1, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <HAL_LTDC_Init+0x19c>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6919      	ldr	r1, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6959      	ldr	r1, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <HAL_LTDC_Init+0x19c>)
 8004d6e:	400b      	ands	r3, r1
 8004d70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6959      	ldr	r1, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0206 	orr.w	r2, r2, #6
 8004dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	f000f800 	.word	0xf000f800

08004e10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_LTDC_ConfigLayer+0x1a>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e02c      	b.n	8004e84 <HAL_LTDC_ConfigLayer+0x74>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2134      	movs	r1, #52	@ 0x34
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	461d      	mov	r5, r3
 8004e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f811 	bl	8004e8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bdb0      	pop	{r4, r5, r7, pc}

08004e8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	@ 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea8:	4413      	add	r3, r2
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	01db      	lsls	r3, r3, #7
 8004eb8:	4413      	add	r3, r2
 8004eba:	3384      	adds	r3, #132	@ 0x84
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	01d2      	lsls	r2, r2, #7
 8004ec8:	440a      	add	r2, r1
 8004eca:	3284      	adds	r2, #132	@ 0x84
 8004ecc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ed0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ee2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ee4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3384      	adds	r3, #132	@ 0x84
 8004ef4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004efa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f0a:	4413      	add	r3, r2
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	01db      	lsls	r3, r3, #7
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3384      	adds	r3, #132	@ 0x84
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	4611      	mov	r1, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	01d2      	lsls	r2, r2, #7
 8004f2a:	440a      	add	r2, r1
 8004f2c:	3284      	adds	r2, #132	@ 0x84
 8004f2e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f42:	4413      	add	r3, r2
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	01db      	lsls	r3, r3, #7
 8004f50:	440b      	add	r3, r1
 8004f52:	3384      	adds	r3, #132	@ 0x84
 8004f54:	4619      	mov	r1, r3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	01db      	lsls	r3, r3, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	3384      	adds	r3, #132	@ 0x84
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	4611      	mov	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	01d2      	lsls	r2, r2, #7
 8004f76:	440a      	add	r2, r1
 8004f78:	3284      	adds	r2, #132	@ 0x84
 8004f7a:	f023 0307 	bic.w	r3, r3, #7
 8004f7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	01db      	lsls	r3, r3, #7
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3384      	adds	r3, #132	@ 0x84
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	01db      	lsls	r3, r3, #7
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3384      	adds	r3, #132	@ 0x84
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	01db      	lsls	r3, r3, #7
 8004fcc:	4413      	add	r3, r2
 8004fce:	3384      	adds	r3, #132	@ 0x84
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fdc:	461a      	mov	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	01db      	lsls	r3, r3, #7
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3384      	adds	r3, #132	@ 0x84
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	4413      	add	r3, r2
 8005008:	3384      	adds	r3, #132	@ 0x84
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	4611      	mov	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	01d2      	lsls	r2, r2, #7
 8005016:	440a      	add	r2, r1
 8005018:	3284      	adds	r2, #132	@ 0x84
 800501a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800501e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	01db      	lsls	r3, r3, #7
 800502a:	4413      	add	r3, r2
 800502c:	3384      	adds	r3, #132	@ 0x84
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	01db      	lsls	r3, r3, #7
 8005040:	4413      	add	r3, r2
 8005042:	3384      	adds	r3, #132	@ 0x84
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	4611      	mov	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	01d2      	lsls	r2, r2, #7
 8005050:	440a      	add	r2, r1
 8005052:	3284      	adds	r2, #132	@ 0x84
 8005054:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005058:	f023 0307 	bic.w	r3, r3, #7
 800505c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	6809      	ldr	r1, [r1, #0]
 800506a:	4608      	mov	r0, r1
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	01c9      	lsls	r1, r1, #7
 8005070:	4401      	add	r1, r0
 8005072:	3184      	adds	r1, #132	@ 0x84
 8005074:	4313      	orrs	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	01db      	lsls	r3, r3, #7
 8005082:	4413      	add	r3, r2
 8005084:	3384      	adds	r3, #132	@ 0x84
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	01db      	lsls	r3, r3, #7
 8005092:	4413      	add	r3, r2
 8005094:	3384      	adds	r3, #132	@ 0x84
 8005096:	461a      	mov	r2, r3
 8005098:	2300      	movs	r3, #0
 800509a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	01db      	lsls	r3, r3, #7
 80050a6:	4413      	add	r3, r2
 80050a8:	3384      	adds	r3, #132	@ 0x84
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d102      	bne.n	80050c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80050ba:	2304      	movs	r3, #4
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	e01b      	b.n	80050f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d102      	bne.n	80050ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80050c8:	2303      	movs	r3, #3
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e014      	b.n	80050f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d00b      	beq.n	80050ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d007      	beq.n	80050ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d003      	beq.n	80050ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	d102      	bne.n	80050f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050ee:	2302      	movs	r3, #2
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e001      	b.n	80050f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050f4:	2301      	movs	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	4413      	add	r3, r2
 8005104:	3384      	adds	r3, #132	@ 0x84
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	4611      	mov	r1, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	01d2      	lsls	r2, r2, #7
 8005112:	440a      	add	r2, r1
 8005114:	3284      	adds	r2, #132	@ 0x84
 8005116:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800511a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	1acb      	subs	r3, r1, r3
 8005132:	69f9      	ldr	r1, [r7, #28]
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	6809      	ldr	r1, [r1, #0]
 800513e:	4608      	mov	r0, r1
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	01c9      	lsls	r1, r1, #7
 8005144:	4401      	add	r1, r0
 8005146:	3184      	adds	r1, #132	@ 0x84
 8005148:	4313      	orrs	r3, r2
 800514a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	4413      	add	r3, r2
 8005158:	3384      	adds	r3, #132	@ 0x84
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	4611      	mov	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	01d2      	lsls	r2, r2, #7
 8005166:	440a      	add	r2, r1
 8005168:	3284      	adds	r2, #132	@ 0x84
 800516a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800516e:	f023 0307 	bic.w	r3, r3, #7
 8005172:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	01db      	lsls	r3, r3, #7
 800517e:	4413      	add	r3, r2
 8005180:	3384      	adds	r3, #132	@ 0x84
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	01db      	lsls	r3, r3, #7
 8005194:	4413      	add	r3, r2
 8005196:	3384      	adds	r3, #132	@ 0x84
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	4611      	mov	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	01d2      	lsls	r2, r2, #7
 80051a4:	440a      	add	r2, r1
 80051a6:	3284      	adds	r2, #132	@ 0x84
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3724      	adds	r7, #36	@ 0x24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e267      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d075      	beq.n	80052c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051da:	4b88      	ldr	r3, [pc, #544]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00c      	beq.n	8005200 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e6:	4b85      	ldr	r3, [pc, #532]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d112      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f2:	4b82      	ldr	r3, [pc, #520]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051fe:	d10b      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	4b7e      	ldr	r3, [pc, #504]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05b      	beq.n	80052c4 <HAL_RCC_OscConfig+0x108>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d157      	bne.n	80052c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e242      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x74>
 8005222:	4b76      	ldr	r3, [pc, #472]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a75      	ldr	r2, [pc, #468]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e01d      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x98>
 800523a:	4b70      	ldr	r3, [pc, #448]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a6f      	ldr	r2, [pc, #444]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b6d      	ldr	r3, [pc, #436]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6c      	ldr	r2, [pc, #432]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e00b      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005254:	4b69      	ldr	r3, [pc, #420]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a68      	ldr	r2, [pc, #416]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800525a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b66      	ldr	r3, [pc, #408]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a65      	ldr	r2, [pc, #404]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800526a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d013      	beq.n	800529c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005274:	f7fe f84e 	bl	8003314 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fe f84a 	bl	8003314 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	@ 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e207      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	4b5b      	ldr	r3, [pc, #364]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0xc0>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fe f83a 	bl	8003314 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fe f836 	bl	8003314 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	@ 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e1f3      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	4b51      	ldr	r3, [pc, #324]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0xe8>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d063      	beq.n	800539a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052d2:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052de:	4b47      	ldr	r3, [pc, #284]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d11c      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ea:	4b44      	ldr	r3, [pc, #272]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d116      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e1c7      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4937      	ldr	r1, [pc, #220]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	e03a      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532c:	4b34      	ldr	r3, [pc, #208]	@ (8005400 <HAL_RCC_OscConfig+0x244>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fd ffef 	bl	8003314 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533a:	f7fd ffeb 	bl	8003314 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1a8      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534c:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4925      	ldr	r1, [pc, #148]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
 800536c:	e015      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800536e:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x244>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fd ffce 	bl	8003314 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537c:	f7fd ffca 	bl	8003314 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e187      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538e:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d036      	beq.n	8005414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_RCC_OscConfig+0x248>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fd ffae 	bl	8003314 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053bc:	f7fd ffaa 	bl	8003314 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e167      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ce:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_RCC_OscConfig+0x240>)
 80053d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x200>
 80053da:	e01b      	b.n	8005414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_OscConfig+0x248>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e2:	f7fd ff97 	bl	8003314 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	e00e      	b.n	8005408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ea:	f7fd ff93 	bl	8003314 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d907      	bls.n	8005408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e150      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
 80053fc:	40023800 	.word	0x40023800
 8005400:	42470000 	.word	0x42470000
 8005404:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	4b88      	ldr	r3, [pc, #544]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800540a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ea      	bne.n	80053ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8097 	beq.w	8005550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005426:	4b81      	ldr	r3, [pc, #516]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	4b7d      	ldr	r3, [pc, #500]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	4a7c      	ldr	r2, [pc, #496]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800543c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005440:	6413      	str	r3, [r2, #64]	@ 0x40
 8005442:	4b7a      	ldr	r3, [pc, #488]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005452:	4b77      	ldr	r3, [pc, #476]	@ (8005630 <HAL_RCC_OscConfig+0x474>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d118      	bne.n	8005490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800545e:	4b74      	ldr	r3, [pc, #464]	@ (8005630 <HAL_RCC_OscConfig+0x474>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a73      	ldr	r2, [pc, #460]	@ (8005630 <HAL_RCC_OscConfig+0x474>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546a:	f7fd ff53 	bl	8003314 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005472:	f7fd ff4f 	bl	8003314 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e10c      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005484:	4b6a      	ldr	r3, [pc, #424]	@ (8005630 <HAL_RCC_OscConfig+0x474>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_OscConfig+0x2ea>
 8005498:	4b64      	ldr	r3, [pc, #400]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549c:	4a63      	ldr	r2, [pc, #396]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a4:	e01c      	b.n	80054e0 <HAL_RCC_OscConfig+0x324>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x30c>
 80054ae:	4b5f      	ldr	r3, [pc, #380]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b2:	4a5e      	ldr	r2, [pc, #376]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ba:	4b5c      	ldr	r3, [pc, #368]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054be:	4a5b      	ldr	r2, [pc, #364]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c6:	e00b      	b.n	80054e0 <HAL_RCC_OscConfig+0x324>
 80054c8:	4b58      	ldr	r3, [pc, #352]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	4a57      	ldr	r2, [pc, #348]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054d4:	4b55      	ldr	r3, [pc, #340]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	4a54      	ldr	r2, [pc, #336]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80054da:	f023 0304 	bic.w	r3, r3, #4
 80054de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd ff14 	bl	8003314 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fd ff10 	bl	8003314 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0cb      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005506:	4b49      	ldr	r3, [pc, #292]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ee      	beq.n	80054f0 <HAL_RCC_OscConfig+0x334>
 8005512:	e014      	b.n	800553e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005514:	f7fd fefe 	bl	8003314 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fd fefa 	bl	8003314 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0b5      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005532:	4b3e      	ldr	r3, [pc, #248]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ee      	bne.n	800551c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d105      	bne.n	8005550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005544:	4b39      	ldr	r3, [pc, #228]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	4a38      	ldr	r2, [pc, #224]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800554a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80a1 	beq.w	800569c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555a:	4b34      	ldr	r3, [pc, #208]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b08      	cmp	r3, #8
 8005564:	d05c      	beq.n	8005620 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d141      	bne.n	80055f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556e:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <HAL_RCC_OscConfig+0x478>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fd fece 	bl	8003314 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fd feca 	bl	8003314 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e087      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	4b27      	ldr	r3, [pc, #156]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	019b      	lsls	r3, r3, #6
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	3b01      	subs	r3, #1
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	491b      	ldr	r1, [pc, #108]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <HAL_RCC_OscConfig+0x478>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fd fea3 	bl	8003314 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d2:	f7fd fe9f 	bl	8003314 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e05c      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e4:	4b11      	ldr	r3, [pc, #68]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x416>
 80055f0:	e054      	b.n	800569c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <HAL_RCC_OscConfig+0x478>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fd fe8c 	bl	8003314 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005600:	f7fd fe88 	bl	8003314 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e045      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	4b06      	ldr	r3, [pc, #24]	@ (800562c <HAL_RCC_OscConfig+0x470>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x444>
 800561e:	e03d      	b.n	800569c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d107      	bne.n	8005638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e038      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
 800562c:	40023800 	.word	0x40023800
 8005630:	40007000 	.word	0x40007000
 8005634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005638:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <HAL_RCC_OscConfig+0x4ec>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d028      	beq.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d121      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d11a      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800566e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005670:	4293      	cmp	r3, r2
 8005672:	d111      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	3b01      	subs	r3, #1
 8005682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d107      	bne.n	8005698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800

080056ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0cc      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b68      	ldr	r3, [pc, #416]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d90c      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b65      	ldr	r3, [pc, #404]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b63      	ldr	r3, [pc, #396]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b8      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d020      	beq.n	8005736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005700:	4b59      	ldr	r3, [pc, #356]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4a58      	ldr	r2, [pc, #352]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800570a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005718:	4b53      	ldr	r3, [pc, #332]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a52      	ldr	r2, [pc, #328]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005724:	4b50      	ldr	r3, [pc, #320]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	494d      	ldr	r1, [pc, #308]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d044      	beq.n	80057cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	4b47      	ldr	r3, [pc, #284]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d119      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d003      	beq.n	800576a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005766:	2b03      	cmp	r3, #3
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e06f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	4b3b      	ldr	r3, [pc, #236]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e067      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b37      	ldr	r3, [pc, #220]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4934      	ldr	r1, [pc, #208]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800579c:	f7fd fdba 	bl	8003314 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fd fdb6 	bl	8003314 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057cc:	4b25      	ldr	r3, [pc, #148]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d20c      	bcs.n	80057f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b22      	ldr	r3, [pc, #136]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e032      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005800:	4b19      	ldr	r3, [pc, #100]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4916      	ldr	r1, [pc, #88]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800581e:	4b12      	ldr	r3, [pc, #72]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	490e      	ldr	r1, [pc, #56]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005832:	f000 f821 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 8005836:	4602      	mov	r2, r0
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	490a      	ldr	r1, [pc, #40]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	5ccb      	ldrb	r3, [r1, r3]
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	4a09      	ldr	r2, [pc, #36]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_RCC_ClockConfig+0x1c8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fd1a 	bl	800328c <HAL_InitTick>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40023c00 	.word	0x40023c00
 8005868:	40023800 	.word	0x40023800
 800586c:	08008788 	.word	0x08008788
 8005870:	200001fc 	.word	0x200001fc
 8005874:	20000200 	.word	0x20000200

08005878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b094      	sub	sp, #80	@ 0x50
 800587e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005890:	4b79      	ldr	r3, [pc, #484]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b08      	cmp	r3, #8
 800589a:	d00d      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x40>
 800589c:	2b08      	cmp	r3, #8
 800589e:	f200 80e1 	bhi.w	8005a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x34>
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d003      	beq.n	80058b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058aa:	e0db      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058ac:	4b73      	ldr	r3, [pc, #460]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80058ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058b0:	e0db      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058b2:	4b73      	ldr	r3, [pc, #460]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058b6:	e0d8      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d063      	beq.n	8005996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	2200      	movs	r2, #0
 80058d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058e2:	2300      	movs	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	0159      	lsls	r1, r3, #5
 80058f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058fc:	0150      	lsls	r0, r2, #5
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4621      	mov	r1, r4
 8005904:	1a51      	subs	r1, r2, r1
 8005906:	6139      	str	r1, [r7, #16]
 8005908:	4629      	mov	r1, r5
 800590a:	eb63 0301 	sbc.w	r3, r3, r1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800591c:	4659      	mov	r1, fp
 800591e:	018b      	lsls	r3, r1, #6
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005926:	4651      	mov	r1, sl
 8005928:	018a      	lsls	r2, r1, #6
 800592a:	4651      	mov	r1, sl
 800592c:	ebb2 0801 	subs.w	r8, r2, r1
 8005930:	4659      	mov	r1, fp
 8005932:	eb63 0901 	sbc.w	r9, r3, r1
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800594a:	4690      	mov	r8, r2
 800594c:	4699      	mov	r9, r3
 800594e:	4623      	mov	r3, r4
 8005950:	eb18 0303 	adds.w	r3, r8, r3
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	462b      	mov	r3, r5
 8005958:	eb49 0303 	adc.w	r3, r9, r3
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800596a:	4629      	mov	r1, r5
 800596c:	024b      	lsls	r3, r1, #9
 800596e:	4621      	mov	r1, r4
 8005970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005974:	4621      	mov	r1, r4
 8005976:	024a      	lsls	r2, r1, #9
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597e:	2200      	movs	r2, #0
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005988:	f7fa fc82 	bl	8000290 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4613      	mov	r3, r2
 8005992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005994:	e058      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005996:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	099b      	lsrs	r3, r3, #6
 800599c:	2200      	movs	r2, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	4611      	mov	r1, r2
 80059a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	0159      	lsls	r1, r3, #5
 80059be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c2:	0150      	lsls	r0, r2, #5
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4641      	mov	r1, r8
 80059ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ce:	4649      	mov	r1, r9
 80059d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059e8:	ebb2 040a 	subs.w	r4, r2, sl
 80059ec:	eb63 050b 	sbc.w	r5, r3, fp
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	00eb      	lsls	r3, r5, #3
 80059fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059fe:	00e2      	lsls	r2, r4, #3
 8005a00:	4614      	mov	r4, r2
 8005a02:	461d      	mov	r5, r3
 8005a04:	4643      	mov	r3, r8
 8005a06:	18e3      	adds	r3, r4, r3
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	eb45 0303 	adc.w	r3, r5, r3
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	028b      	lsls	r3, r1, #10
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a28:	4621      	mov	r1, r4
 8005a2a:	028a      	lsls	r2, r1, #10
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	61fa      	str	r2, [r7, #28]
 8005a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a3c:	f7fa fc28 	bl	8000290 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a48:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	3301      	adds	r3, #1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3750      	adds	r7, #80	@ 0x50
 8005a70:	46bd      	mov	sp, r7
 8005a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	00f42400 	.word	0x00f42400
 8005a80:	007a1200 	.word	0x007a1200

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b03      	ldr	r3, [pc, #12]	@ (8005a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	200001fc 	.word	0x200001fc

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa0:	f7ff fff0 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0a9b      	lsrs	r3, r3, #10
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4903      	ldr	r1, [pc, #12]	@ (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	08008798 	.word	0x08008798

08005ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d075      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005af8:	4b91      	ldr	r3, [pc, #580]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005afe:	f7fd fc09 	bl	8003314 <HAL_GetTick>
 8005b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b06:	f7fd fc05 	bl	8003314 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e189      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b18:	4b8a      	ldr	r3, [pc, #552]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	019a      	lsls	r2, r3, #6
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	071b      	lsls	r3, r3, #28
 8005b3c:	4981      	ldr	r1, [pc, #516]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b50:	4b7c      	ldr	r3, [pc, #496]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b56:	0f1b      	lsrs	r3, r3, #28
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	019a      	lsls	r2, r3, #6
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	071b      	lsls	r3, r3, #28
 8005b70:	4974      	ldr	r1, [pc, #464]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b78:	4b72      	ldr	r3, [pc, #456]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b7e:	f023 021f 	bic.w	r2, r3, #31
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	496e      	ldr	r1, [pc, #440]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00d      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	019a      	lsls	r2, r3, #6
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	071b      	lsls	r3, r3, #28
 8005bb0:	4964      	ldr	r1, [pc, #400]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bb8:	4b61      	ldr	r3, [pc, #388]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bbe:	f7fd fba9 	bl	8003314 <HAL_GetTick>
 8005bc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bc6:	f7fd fba5 	bl	8003314 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e129      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d079      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bfc:	4b52      	ldr	r3, [pc, #328]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c02:	f7fd fb87 	bl	8003314 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c0a:	f7fd fb83 	bl	8003314 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e107      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c1c:	4b49      	ldr	r3, [pc, #292]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c28:	d0ef      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c36:	4b43      	ldr	r3, [pc, #268]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3c:	0f1b      	lsrs	r3, r3, #28
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	019a      	lsls	r2, r3, #6
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	061b      	lsls	r3, r3, #24
 8005c50:	431a      	orrs	r2, r3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	071b      	lsls	r3, r3, #28
 8005c56:	493b      	ldr	r1, [pc, #236]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c5e:	4b39      	ldr	r3, [pc, #228]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	4934      	ldr	r1, [pc, #208]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01e      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c84:	4b2f      	ldr	r3, [pc, #188]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8a:	0e1b      	lsrs	r3, r3, #24
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	019a      	lsls	r2, r3, #6
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	061b      	lsls	r3, r3, #24
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	071b      	lsls	r3, r3, #28
 8005ca4:	4927      	ldr	r1, [pc, #156]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cac:	4b25      	ldr	r3, [pc, #148]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	4922      	ldr	r1, [pc, #136]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cc2:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc8:	f7fd fb24 	bl	8003314 <HAL_GetTick>
 8005ccc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd0:	f7fd fb20 	bl	8003314 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0a4      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ce2:	4b18      	ldr	r3, [pc, #96]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cee:	d1ef      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 808b 	beq.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	4a0f      	ldr	r2, [pc, #60]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d26:	f7fd faf5 	bl	8003314 <HAL_GetTick>
 8005d2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d2c:	e010      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fd faf1 	bl	8003314 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d909      	bls.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e075      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d40:	42470068 	.word	0x42470068
 8005d44:	40023800 	.word	0x40023800
 8005d48:	42470070 	.word	0x42470070
 8005d4c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d50:	4b38      	ldr	r3, [pc, #224]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0e8      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d5c:	4b36      	ldr	r3, [pc, #216]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d64:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02f      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d028      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d84:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d90:	4a29      	ldr	r2, [pc, #164]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d96:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d114      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005da2:	f7fd fab7 	bl	8003314 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fd fab3 	bl	8003314 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e035      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ee      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd8:	d10d      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005dda:	4b17      	ldr	r3, [pc, #92]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dee:	4912      	ldr	r1, [pc, #72]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	608b      	str	r3, [r1, #8]
 8005df4:	e005      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e00:	6093      	str	r3, [r2, #8]
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0e:	490a      	ldr	r1, [pc, #40]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40007000 	.word	0x40007000
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	42470e40 	.word	0x42470e40
 8005e40:	424711e0 	.word	0x424711e0

08005e44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01c      	b.n	8005e90 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	795b      	ldrb	r3, [r3, #5]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc fcd0 	bl	800280c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0204 	orr.w	r2, r2, #4
 8005e80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07b      	b.n	8005fa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eba:	d009      	beq.n	8005ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	e005      	b.n	8005ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fc fcb0 	bl	8002850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f54:	ea42 0103 	orr.w	r1, r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	f003 0104 	and.w	r1, r3, #4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	f003 0210 	and.w	r2, r3, #16
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e01a      	b.n	8005ff2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc fc83 	bl	80028e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b088      	sub	sp, #32
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800600a:	f7fd f983 	bl	8003314 <HAL_GetTick>
 800600e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
 8006022:	e12a      	b.n	800627a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_SPI_Transmit+0x36>
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e122      	b.n	800627a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_SPI_Transmit+0x48>
 800603e:	2302      	movs	r3, #2
 8006040:	e11b      	b.n	800627a <HAL_SPI_Transmit+0x280>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2203      	movs	r2, #3
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	88fa      	ldrh	r2, [r7, #6]
 8006062:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	88fa      	ldrh	r2, [r7, #6]
 8006068:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006090:	d10f      	bne.n	80060b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d007      	beq.n	80060d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d8:	d152      	bne.n	8006180 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_SPI_Transmit+0xee>
 80060e2:	8b7b      	ldrh	r3, [r7, #26]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d145      	bne.n	8006174 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800610c:	e032      	b.n	8006174 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d112      	bne.n	8006142 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	1c9a      	adds	r2, r3, #2
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006140:	e018      	b.n	8006174 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006142:	f7fd f8e7 	bl	8003314 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d803      	bhi.n	800615a <HAL_SPI_Transmit+0x160>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d102      	bne.n	8006160 <HAL_SPI_Transmit+0x166>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e082      	b.n	800627a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1c7      	bne.n	800610e <HAL_SPI_Transmit+0x114>
 800617e:	e053      	b.n	8006228 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_Transmit+0x194>
 8006188:	8b7b      	ldrh	r3, [r7, #26]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d147      	bne.n	800621e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061b4:	e033      	b.n	800621e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d113      	bne.n	80061ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061ea:	e018      	b.n	800621e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ec:	f7fd f892 	bl	8003314 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d803      	bhi.n	8006204 <HAL_SPI_Transmit+0x20a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x210>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e02d      	b.n	800627a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1c6      	bne.n	80061b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f8bf 	bl	80063b0 <SPI_EndRxTxTransaction>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006278:	2300      	movs	r3, #0
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006290:	b2db      	uxtb	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062b0:	f7fd f830 	bl	8003314 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	4413      	add	r3, r2
 80062be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062c0:	f7fd f828 	bl	8003314 <HAL_GetTick>
 80062c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062c6:	4b39      	ldr	r3, [pc, #228]	@ (80063ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	015b      	lsls	r3, r3, #5
 80062cc:	0d1b      	lsrs	r3, r3, #20
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	fb02 f303 	mul.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062d6:	e054      	b.n	8006382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d050      	beq.n	8006382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062e0:	f7fd f818 	bl	8003314 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d902      	bls.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d13d      	bne.n	8006372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630e:	d111      	bne.n	8006334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006318:	d004      	beq.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006322:	d107      	bne.n	8006334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633c:	d10f      	bne.n	800635e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800635c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e017      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	3b01      	subs	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	bf0c      	ite	eq
 8006392:	2301      	moveq	r3, #1
 8006394:	2300      	movne	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	429a      	cmp	r2, r3
 800639e:	d19b      	bne.n	80062d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200001fc 	.word	0x200001fc

080063b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2201      	movs	r2, #1
 80063c4:	2102      	movs	r1, #2
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff ff6a 	bl	80062a0 <SPI_WaitFlagStateUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e032      	b.n	8006448 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006450 <SPI_EndRxTxTransaction+0xa0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006454 <SPI_EndRxTxTransaction+0xa4>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	0d5b      	lsrs	r3, r3, #21
 80063ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006400:	d112      	bne.n	8006428 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	2180      	movs	r1, #128	@ 0x80
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff ff47 	bl	80062a0 <SPI_WaitFlagStateUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d016      	beq.n	8006446 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e00f      	b.n	8006448 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3b01      	subs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643e:	2b80      	cmp	r3, #128	@ 0x80
 8006440:	d0f2      	beq.n	8006428 <SPI_EndRxTxTransaction+0x78>
 8006442:	e000      	b.n	8006446 <SPI_EndRxTxTransaction+0x96>
        break;
 8006444:	bf00      	nop
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200001fc 	.word	0x200001fc
 8006454:	165e9f81 	.word	0x165e9f81

08006458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d020      	beq.n	80064bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0202 	mvn.w	r2, #2
 800648c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f8dc 	bl	8006660 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f8ce 	bl	800664c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f8df 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0204 	mvn.w	r2, #4
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8b6 	bl	8006660 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8a8 	bl	800664c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f8b9 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0208 	mvn.w	r2, #8
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2204      	movs	r2, #4
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f890 	bl	8006660 <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f882 	bl	800664c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f893 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0210 	mvn.w	r2, #16
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2208      	movs	r2, #8
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f86a 	bl	8006660 <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f85c 	bl	800664c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f86d 	bl	8006674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0201 	mvn.w	r2, #1
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f83a 	bl	8006638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f864 	bl	80066b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f83e 	bl	8006688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0220 	mvn.w	r2, #32
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f836 	bl	800669c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <std>:
 80066c4:	2300      	movs	r3, #0
 80066c6:	b510      	push	{r4, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	e9c0 3300 	strd	r3, r3, [r0]
 80066ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066d2:	6083      	str	r3, [r0, #8]
 80066d4:	8181      	strh	r1, [r0, #12]
 80066d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066d8:	81c2      	strh	r2, [r0, #14]
 80066da:	6183      	str	r3, [r0, #24]
 80066dc:	4619      	mov	r1, r3
 80066de:	2208      	movs	r2, #8
 80066e0:	305c      	adds	r0, #92	@ 0x5c
 80066e2:	f000 f99b 	bl	8006a1c <memset>
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <std+0x58>)
 80066e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <std+0x5c>)
 80066ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <std+0x60>)
 80066f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <std+0x64>)
 80066f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80066f6:	4b0d      	ldr	r3, [pc, #52]	@ (800672c <std+0x68>)
 80066f8:	6224      	str	r4, [r4, #32]
 80066fa:	429c      	cmp	r4, r3
 80066fc:	d006      	beq.n	800670c <std+0x48>
 80066fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006702:	4294      	cmp	r4, r2
 8006704:	d002      	beq.n	800670c <std+0x48>
 8006706:	33d0      	adds	r3, #208	@ 0xd0
 8006708:	429c      	cmp	r4, r3
 800670a:	d105      	bne.n	8006718 <std+0x54>
 800670c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f000 b9fa 	b.w	8006b0c <__retarget_lock_init_recursive>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	0800686d 	.word	0x0800686d
 8006720:	0800688f 	.word	0x0800688f
 8006724:	080068c7 	.word	0x080068c7
 8006728:	080068eb 	.word	0x080068eb
 800672c:	2002604c 	.word	0x2002604c

08006730 <stdio_exit_handler>:
 8006730:	4a02      	ldr	r2, [pc, #8]	@ (800673c <stdio_exit_handler+0xc>)
 8006732:	4903      	ldr	r1, [pc, #12]	@ (8006740 <stdio_exit_handler+0x10>)
 8006734:	4803      	ldr	r0, [pc, #12]	@ (8006744 <stdio_exit_handler+0x14>)
 8006736:	f000 b869 	b.w	800680c <_fwalk_sglue>
 800673a:	bf00      	nop
 800673c:	20000208 	.word	0x20000208
 8006740:	080073c9 	.word	0x080073c9
 8006744:	20000218 	.word	0x20000218

08006748 <cleanup_stdio>:
 8006748:	6841      	ldr	r1, [r0, #4]
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <cleanup_stdio+0x34>)
 800674c:	4299      	cmp	r1, r3
 800674e:	b510      	push	{r4, lr}
 8006750:	4604      	mov	r4, r0
 8006752:	d001      	beq.n	8006758 <cleanup_stdio+0x10>
 8006754:	f000 fe38 	bl	80073c8 <_fflush_r>
 8006758:	68a1      	ldr	r1, [r4, #8]
 800675a:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <cleanup_stdio+0x38>)
 800675c:	4299      	cmp	r1, r3
 800675e:	d002      	beq.n	8006766 <cleanup_stdio+0x1e>
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fe31 	bl	80073c8 <_fflush_r>
 8006766:	68e1      	ldr	r1, [r4, #12]
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <cleanup_stdio+0x3c>)
 800676a:	4299      	cmp	r1, r3
 800676c:	d004      	beq.n	8006778 <cleanup_stdio+0x30>
 800676e:	4620      	mov	r0, r4
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006774:	f000 be28 	b.w	80073c8 <_fflush_r>
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	2002604c 	.word	0x2002604c
 8006780:	200260b4 	.word	0x200260b4
 8006784:	2002611c 	.word	0x2002611c

08006788 <global_stdio_init.part.0>:
 8006788:	b510      	push	{r4, lr}
 800678a:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <global_stdio_init.part.0+0x30>)
 800678c:	4c0b      	ldr	r4, [pc, #44]	@ (80067bc <global_stdio_init.part.0+0x34>)
 800678e:	4a0c      	ldr	r2, [pc, #48]	@ (80067c0 <global_stdio_init.part.0+0x38>)
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	4620      	mov	r0, r4
 8006794:	2200      	movs	r2, #0
 8006796:	2104      	movs	r1, #4
 8006798:	f7ff ff94 	bl	80066c4 <std>
 800679c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067a0:	2201      	movs	r2, #1
 80067a2:	2109      	movs	r1, #9
 80067a4:	f7ff ff8e 	bl	80066c4 <std>
 80067a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067ac:	2202      	movs	r2, #2
 80067ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b2:	2112      	movs	r1, #18
 80067b4:	f7ff bf86 	b.w	80066c4 <std>
 80067b8:	20026184 	.word	0x20026184
 80067bc:	2002604c 	.word	0x2002604c
 80067c0:	08006731 	.word	0x08006731

080067c4 <__sfp_lock_acquire>:
 80067c4:	4801      	ldr	r0, [pc, #4]	@ (80067cc <__sfp_lock_acquire+0x8>)
 80067c6:	f000 b9a2 	b.w	8006b0e <__retarget_lock_acquire_recursive>
 80067ca:	bf00      	nop
 80067cc:	2002618d 	.word	0x2002618d

080067d0 <__sfp_lock_release>:
 80067d0:	4801      	ldr	r0, [pc, #4]	@ (80067d8 <__sfp_lock_release+0x8>)
 80067d2:	f000 b99d 	b.w	8006b10 <__retarget_lock_release_recursive>
 80067d6:	bf00      	nop
 80067d8:	2002618d 	.word	0x2002618d

080067dc <__sinit>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	4604      	mov	r4, r0
 80067e0:	f7ff fff0 	bl	80067c4 <__sfp_lock_acquire>
 80067e4:	6a23      	ldr	r3, [r4, #32]
 80067e6:	b11b      	cbz	r3, 80067f0 <__sinit+0x14>
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	f7ff bff0 	b.w	80067d0 <__sfp_lock_release>
 80067f0:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <__sinit+0x28>)
 80067f2:	6223      	str	r3, [r4, #32]
 80067f4:	4b04      	ldr	r3, [pc, #16]	@ (8006808 <__sinit+0x2c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f5      	bne.n	80067e8 <__sinit+0xc>
 80067fc:	f7ff ffc4 	bl	8006788 <global_stdio_init.part.0>
 8006800:	e7f2      	b.n	80067e8 <__sinit+0xc>
 8006802:	bf00      	nop
 8006804:	08006749 	.word	0x08006749
 8006808:	20026184 	.word	0x20026184

0800680c <_fwalk_sglue>:
 800680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006810:	4607      	mov	r7, r0
 8006812:	4688      	mov	r8, r1
 8006814:	4614      	mov	r4, r2
 8006816:	2600      	movs	r6, #0
 8006818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800681c:	f1b9 0901 	subs.w	r9, r9, #1
 8006820:	d505      	bpl.n	800682e <_fwalk_sglue+0x22>
 8006822:	6824      	ldr	r4, [r4, #0]
 8006824:	2c00      	cmp	r4, #0
 8006826:	d1f7      	bne.n	8006818 <_fwalk_sglue+0xc>
 8006828:	4630      	mov	r0, r6
 800682a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d907      	bls.n	8006844 <_fwalk_sglue+0x38>
 8006834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006838:	3301      	adds	r3, #1
 800683a:	d003      	beq.n	8006844 <_fwalk_sglue+0x38>
 800683c:	4629      	mov	r1, r5
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	4306      	orrs	r6, r0
 8006844:	3568      	adds	r5, #104	@ 0x68
 8006846:	e7e9      	b.n	800681c <_fwalk_sglue+0x10>

08006848 <iprintf>:
 8006848:	b40f      	push	{r0, r1, r2, r3}
 800684a:	b507      	push	{r0, r1, r2, lr}
 800684c:	4906      	ldr	r1, [pc, #24]	@ (8006868 <iprintf+0x20>)
 800684e:	ab04      	add	r3, sp, #16
 8006850:	6808      	ldr	r0, [r1, #0]
 8006852:	f853 2b04 	ldr.w	r2, [r3], #4
 8006856:	6881      	ldr	r1, [r0, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	f000 fa8b 	bl	8006d74 <_vfiprintf_r>
 800685e:	b003      	add	sp, #12
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b004      	add	sp, #16
 8006866:	4770      	bx	lr
 8006868:	20000214 	.word	0x20000214

0800686c <__sread>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	f000 f8fc 	bl	8006a70 <_read_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	bfab      	itete	ge
 800687c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800687e:	89a3      	ldrhlt	r3, [r4, #12]
 8006880:	181b      	addge	r3, r3, r0
 8006882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006886:	bfac      	ite	ge
 8006888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800688a:	81a3      	strhlt	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__swrite>:
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	461f      	mov	r7, r3
 8006894:	898b      	ldrh	r3, [r1, #12]
 8006896:	05db      	lsls	r3, r3, #23
 8006898:	4605      	mov	r5, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4616      	mov	r6, r2
 800689e:	d505      	bpl.n	80068ac <__swrite+0x1e>
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f000 f8d0 	bl	8006a4c <_lseek_r>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	f000 b8e7 	b.w	8006a94 <_write_r>

080068c6 <__sseek>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 f8bd 	bl	8006a4c <_lseek_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	bf15      	itete	ne
 80068d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068e2:	81a3      	strheq	r3, [r4, #12]
 80068e4:	bf18      	it	ne
 80068e6:	81a3      	strhne	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__sclose>:
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 b89d 	b.w	8006a2c <_close_r>

080068f2 <__swbuf_r>:
 80068f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f4:	460e      	mov	r6, r1
 80068f6:	4614      	mov	r4, r2
 80068f8:	4605      	mov	r5, r0
 80068fa:	b118      	cbz	r0, 8006904 <__swbuf_r+0x12>
 80068fc:	6a03      	ldr	r3, [r0, #32]
 80068fe:	b90b      	cbnz	r3, 8006904 <__swbuf_r+0x12>
 8006900:	f7ff ff6c 	bl	80067dc <__sinit>
 8006904:	69a3      	ldr	r3, [r4, #24]
 8006906:	60a3      	str	r3, [r4, #8]
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	071a      	lsls	r2, r3, #28
 800690c:	d501      	bpl.n	8006912 <__swbuf_r+0x20>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	b943      	cbnz	r3, 8006924 <__swbuf_r+0x32>
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f82b 	bl	8006970 <__swsetup_r>
 800691a:	b118      	cbz	r0, 8006924 <__swbuf_r+0x32>
 800691c:	f04f 37ff 	mov.w	r7, #4294967295
 8006920:	4638      	mov	r0, r7
 8006922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	6922      	ldr	r2, [r4, #16]
 8006928:	1a98      	subs	r0, r3, r2
 800692a:	6963      	ldr	r3, [r4, #20]
 800692c:	b2f6      	uxtb	r6, r6
 800692e:	4283      	cmp	r3, r0
 8006930:	4637      	mov	r7, r6
 8006932:	dc05      	bgt.n	8006940 <__swbuf_r+0x4e>
 8006934:	4621      	mov	r1, r4
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fd46 	bl	80073c8 <_fflush_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	d1ed      	bne.n	800691c <__swbuf_r+0x2a>
 8006940:	68a3      	ldr	r3, [r4, #8]
 8006942:	3b01      	subs	r3, #1
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	701e      	strb	r6, [r3, #0]
 800694e:	6962      	ldr	r2, [r4, #20]
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	429a      	cmp	r2, r3
 8006954:	d004      	beq.n	8006960 <__swbuf_r+0x6e>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	07db      	lsls	r3, r3, #31
 800695a:	d5e1      	bpl.n	8006920 <__swbuf_r+0x2e>
 800695c:	2e0a      	cmp	r6, #10
 800695e:	d1df      	bne.n	8006920 <__swbuf_r+0x2e>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fd30 	bl	80073c8 <_fflush_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0d9      	beq.n	8006920 <__swbuf_r+0x2e>
 800696c:	e7d6      	b.n	800691c <__swbuf_r+0x2a>
	...

08006970 <__swsetup_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4b29      	ldr	r3, [pc, #164]	@ (8006a18 <__swsetup_r+0xa8>)
 8006974:	4605      	mov	r5, r0
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	460c      	mov	r4, r1
 800697a:	b118      	cbz	r0, 8006984 <__swsetup_r+0x14>
 800697c:	6a03      	ldr	r3, [r0, #32]
 800697e:	b90b      	cbnz	r3, 8006984 <__swsetup_r+0x14>
 8006980:	f7ff ff2c 	bl	80067dc <__sinit>
 8006984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006988:	0719      	lsls	r1, r3, #28
 800698a:	d422      	bmi.n	80069d2 <__swsetup_r+0x62>
 800698c:	06da      	lsls	r2, r3, #27
 800698e:	d407      	bmi.n	80069a0 <__swsetup_r+0x30>
 8006990:	2209      	movs	r2, #9
 8006992:	602a      	str	r2, [r5, #0]
 8006994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	f04f 30ff 	mov.w	r0, #4294967295
 800699e:	e033      	b.n	8006a08 <__swsetup_r+0x98>
 80069a0:	0758      	lsls	r0, r3, #29
 80069a2:	d512      	bpl.n	80069ca <__swsetup_r+0x5a>
 80069a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069a6:	b141      	cbz	r1, 80069ba <__swsetup_r+0x4a>
 80069a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d002      	beq.n	80069b6 <__swsetup_r+0x46>
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f8bd 	bl	8006b30 <_free_r>
 80069b6:	2300      	movs	r3, #0
 80069b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	b94b      	cbnz	r3, 80069ea <__swsetup_r+0x7a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e0:	d003      	beq.n	80069ea <__swsetup_r+0x7a>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	f000 fd3d 	bl	8007464 <__smakebuf_r>
 80069ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ee:	f013 0201 	ands.w	r2, r3, #1
 80069f2:	d00a      	beq.n	8006a0a <__swsetup_r+0x9a>
 80069f4:	2200      	movs	r2, #0
 80069f6:	60a2      	str	r2, [r4, #8]
 80069f8:	6962      	ldr	r2, [r4, #20]
 80069fa:	4252      	negs	r2, r2
 80069fc:	61a2      	str	r2, [r4, #24]
 80069fe:	6922      	ldr	r2, [r4, #16]
 8006a00:	b942      	cbnz	r2, 8006a14 <__swsetup_r+0xa4>
 8006a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a06:	d1c5      	bne.n	8006994 <__swsetup_r+0x24>
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	0799      	lsls	r1, r3, #30
 8006a0c:	bf58      	it	pl
 8006a0e:	6962      	ldrpl	r2, [r4, #20]
 8006a10:	60a2      	str	r2, [r4, #8]
 8006a12:	e7f4      	b.n	80069fe <__swsetup_r+0x8e>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7f7      	b.n	8006a08 <__swsetup_r+0x98>
 8006a18:	20000214 	.word	0x20000214

08006a1c <memset>:
 8006a1c:	4402      	add	r2, r0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <_close_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d06      	ldr	r5, [pc, #24]	@ (8006a48 <_close_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fc fb60 	bl	80030fc <_close>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_close_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_close_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20026188 	.word	0x20026188

08006a4c <_lseek_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	@ (8006a6c <_lseek_r+0x20>)
 8006a50:	4604      	mov	r4, r0
 8006a52:	4608      	mov	r0, r1
 8006a54:	4611      	mov	r1, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fc fb75 	bl	800314a <_lseek>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_lseek_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_lseek_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20026188 	.word	0x20026188

08006a70 <_read_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	@ (8006a90 <_read_r+0x20>)
 8006a74:	4604      	mov	r4, r0
 8006a76:	4608      	mov	r0, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	602a      	str	r2, [r5, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f7fc fb03 	bl	800308a <_read>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_read_r+0x1e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_read_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20026188 	.word	0x20026188

08006a94 <_write_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	@ (8006ab4 <_write_r+0x20>)
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f7fc fb0e 	bl	80030c4 <_write>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_write_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_write_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20026188 	.word	0x20026188

08006ab8 <__errno>:
 8006ab8:	4b01      	ldr	r3, [pc, #4]	@ (8006ac0 <__errno+0x8>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000214 	.word	0x20000214

08006ac4 <__libc_init_array>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8006afc <__libc_init_array+0x38>)
 8006ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8006b00 <__libc_init_array+0x3c>)
 8006aca:	1b64      	subs	r4, r4, r5
 8006acc:	10a4      	asrs	r4, r4, #2
 8006ace:	2600      	movs	r6, #0
 8006ad0:	42a6      	cmp	r6, r4
 8006ad2:	d109      	bne.n	8006ae8 <__libc_init_array+0x24>
 8006ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8006b04 <__libc_init_array+0x40>)
 8006ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8006b08 <__libc_init_array+0x44>)
 8006ad8:	f000 fd32 	bl	8007540 <_init>
 8006adc:	1b64      	subs	r4, r4, r5
 8006ade:	10a4      	asrs	r4, r4, #2
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	42a6      	cmp	r6, r4
 8006ae4:	d105      	bne.n	8006af2 <__libc_init_array+0x2e>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aec:	4798      	blx	r3
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7ee      	b.n	8006ad0 <__libc_init_array+0xc>
 8006af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af6:	4798      	blx	r3
 8006af8:	3601      	adds	r6, #1
 8006afa:	e7f2      	b.n	8006ae2 <__libc_init_array+0x1e>
 8006afc:	080087dc 	.word	0x080087dc
 8006b00:	080087dc 	.word	0x080087dc
 8006b04:	080087dc 	.word	0x080087dc
 8006b08:	080087e0 	.word	0x080087e0

08006b0c <__retarget_lock_init_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <__retarget_lock_acquire_recursive>:
 8006b0e:	4770      	bx	lr

08006b10 <__retarget_lock_release_recursive>:
 8006b10:	4770      	bx	lr

08006b12 <memcpy>:
 8006b12:	440a      	add	r2, r1
 8006b14:	4291      	cmp	r1, r2
 8006b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b1a:	d100      	bne.n	8006b1e <memcpy+0xc>
 8006b1c:	4770      	bx	lr
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b28:	4291      	cmp	r1, r2
 8006b2a:	d1f9      	bne.n	8006b20 <memcpy+0xe>
 8006b2c:	bd10      	pop	{r4, pc}
	...

08006b30 <_free_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4605      	mov	r5, r0
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d041      	beq.n	8006bbc <_free_r+0x8c>
 8006b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3c:	1f0c      	subs	r4, r1, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfb8      	it	lt
 8006b42:	18e4      	addlt	r4, r4, r3
 8006b44:	f000 f8e0 	bl	8006d08 <__malloc_lock>
 8006b48:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <_free_r+0x90>)
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	b933      	cbnz	r3, 8006b5c <_free_r+0x2c>
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	4628      	mov	r0, r5
 8006b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b58:	f000 b8dc 	b.w	8006d14 <__malloc_unlock>
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d908      	bls.n	8006b72 <_free_r+0x42>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	1821      	adds	r1, r4, r0
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf01      	itttt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	1809      	addeq	r1, r1, r0
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	e7ed      	b.n	8006b4e <_free_r+0x1e>
 8006b72:	461a      	mov	r2, r3
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	b10b      	cbz	r3, 8006b7c <_free_r+0x4c>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d9fa      	bls.n	8006b72 <_free_r+0x42>
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	1850      	adds	r0, r2, r1
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	d10b      	bne.n	8006b9c <_free_r+0x6c>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	4401      	add	r1, r0
 8006b88:	1850      	adds	r0, r2, r1
 8006b8a:	4283      	cmp	r3, r0
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	d1e0      	bne.n	8006b52 <_free_r+0x22>
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	4408      	add	r0, r1
 8006b98:	6010      	str	r0, [r2, #0]
 8006b9a:	e7da      	b.n	8006b52 <_free_r+0x22>
 8006b9c:	d902      	bls.n	8006ba4 <_free_r+0x74>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	e7d6      	b.n	8006b52 <_free_r+0x22>
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	1821      	adds	r1, r4, r0
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	bf04      	itt	eq
 8006bac:	6819      	ldreq	r1, [r3, #0]
 8006bae:	685b      	ldreq	r3, [r3, #4]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	bf04      	itt	eq
 8006bb4:	1809      	addeq	r1, r1, r0
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	6054      	str	r4, [r2, #4]
 8006bba:	e7ca      	b.n	8006b52 <_free_r+0x22>
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20026194 	.word	0x20026194

08006bc4 <sbrk_aligned>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8006c04 <sbrk_aligned+0x40>)
 8006bc8:	460c      	mov	r4, r1
 8006bca:	6831      	ldr	r1, [r6, #0]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	b911      	cbnz	r1, 8006bd6 <sbrk_aligned+0x12>
 8006bd0:	f000 fca6 	bl	8007520 <_sbrk_r>
 8006bd4:	6030      	str	r0, [r6, #0]
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 fca1 	bl	8007520 <_sbrk_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d103      	bne.n	8006bea <sbrk_aligned+0x26>
 8006be2:	f04f 34ff 	mov.w	r4, #4294967295
 8006be6:	4620      	mov	r0, r4
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	1cc4      	adds	r4, r0, #3
 8006bec:	f024 0403 	bic.w	r4, r4, #3
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d0f8      	beq.n	8006be6 <sbrk_aligned+0x22>
 8006bf4:	1a21      	subs	r1, r4, r0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fc92 	bl	8007520 <_sbrk_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d1f2      	bne.n	8006be6 <sbrk_aligned+0x22>
 8006c00:	e7ef      	b.n	8006be2 <sbrk_aligned+0x1e>
 8006c02:	bf00      	nop
 8006c04:	20026190 	.word	0x20026190

08006c08 <_malloc_r>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	1ccd      	adds	r5, r1, #3
 8006c0e:	f025 0503 	bic.w	r5, r5, #3
 8006c12:	3508      	adds	r5, #8
 8006c14:	2d0c      	cmp	r5, #12
 8006c16:	bf38      	it	cc
 8006c18:	250c      	movcc	r5, #12
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	db01      	blt.n	8006c24 <_malloc_r+0x1c>
 8006c20:	42a9      	cmp	r1, r5
 8006c22:	d904      	bls.n	8006c2e <_malloc_r+0x26>
 8006c24:	230c      	movs	r3, #12
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d04 <_malloc_r+0xfc>
 8006c32:	f000 f869 	bl	8006d08 <__malloc_lock>
 8006c36:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	bb44      	cbnz	r4, 8006c90 <_malloc_r+0x88>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ffbf 	bl	8006bc4 <sbrk_aligned>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	4604      	mov	r4, r0
 8006c4a:	d158      	bne.n	8006cfe <_malloc_r+0xf6>
 8006c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c50:	4627      	mov	r7, r4
 8006c52:	2f00      	cmp	r7, #0
 8006c54:	d143      	bne.n	8006cde <_malloc_r+0xd6>
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d04b      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4630      	mov	r0, r6
 8006c60:	eb04 0903 	add.w	r9, r4, r3
 8006c64:	f000 fc5c 	bl	8007520 <_sbrk_r>
 8006c68:	4581      	cmp	r9, r0
 8006c6a:	d142      	bne.n	8006cf2 <_malloc_r+0xea>
 8006c6c:	6821      	ldr	r1, [r4, #0]
 8006c6e:	1a6d      	subs	r5, r5, r1
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ffa6 	bl	8006bc4 <sbrk_aligned>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d03a      	beq.n	8006cf2 <_malloc_r+0xea>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	442b      	add	r3, r5
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f8d8 3000 	ldr.w	r3, [r8]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	bb62      	cbnz	r2, 8006ce4 <_malloc_r+0xdc>
 8006c8a:	f8c8 7000 	str.w	r7, [r8]
 8006c8e:	e00f      	b.n	8006cb0 <_malloc_r+0xa8>
 8006c90:	6822      	ldr	r2, [r4, #0]
 8006c92:	1b52      	subs	r2, r2, r5
 8006c94:	d420      	bmi.n	8006cd8 <_malloc_r+0xd0>
 8006c96:	2a0b      	cmp	r2, #11
 8006c98:	d917      	bls.n	8006cca <_malloc_r+0xc2>
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	6025      	str	r5, [r4, #0]
 8006ca0:	bf18      	it	ne
 8006ca2:	6059      	strne	r1, [r3, #4]
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	bf08      	it	eq
 8006ca8:	f8c8 1000 	streq.w	r1, [r8]
 8006cac:	5162      	str	r2, [r4, r5]
 8006cae:	604b      	str	r3, [r1, #4]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f82f 	bl	8006d14 <__malloc_unlock>
 8006cb6:	f104 000b 	add.w	r0, r4, #11
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	f020 0007 	bic.w	r0, r0, #7
 8006cc0:	1ac2      	subs	r2, r0, r3
 8006cc2:	bf1c      	itt	ne
 8006cc4:	1a1b      	subne	r3, r3, r0
 8006cc6:	50a3      	strne	r3, [r4, r2]
 8006cc8:	e7af      	b.n	8006c2a <_malloc_r+0x22>
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	bf0c      	ite	eq
 8006cd0:	f8c8 2000 	streq.w	r2, [r8]
 8006cd4:	605a      	strne	r2, [r3, #4]
 8006cd6:	e7eb      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cd8:	4623      	mov	r3, r4
 8006cda:	6864      	ldr	r4, [r4, #4]
 8006cdc:	e7ae      	b.n	8006c3c <_malloc_r+0x34>
 8006cde:	463c      	mov	r4, r7
 8006ce0:	687f      	ldr	r7, [r7, #4]
 8006ce2:	e7b6      	b.n	8006c52 <_malloc_r+0x4a>
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d1fb      	bne.n	8006ce4 <_malloc_r+0xdc>
 8006cec:	2300      	movs	r3, #0
 8006cee:	6053      	str	r3, [r2, #4]
 8006cf0:	e7de      	b.n	8006cb0 <_malloc_r+0xa8>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f000 f80c 	bl	8006d14 <__malloc_unlock>
 8006cfc:	e794      	b.n	8006c28 <_malloc_r+0x20>
 8006cfe:	6005      	str	r5, [r0, #0]
 8006d00:	e7d6      	b.n	8006cb0 <_malloc_r+0xa8>
 8006d02:	bf00      	nop
 8006d04:	20026194 	.word	0x20026194

08006d08 <__malloc_lock>:
 8006d08:	4801      	ldr	r0, [pc, #4]	@ (8006d10 <__malloc_lock+0x8>)
 8006d0a:	f7ff bf00 	b.w	8006b0e <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	2002618c 	.word	0x2002618c

08006d14 <__malloc_unlock>:
 8006d14:	4801      	ldr	r0, [pc, #4]	@ (8006d1c <__malloc_unlock+0x8>)
 8006d16:	f7ff befb 	b.w	8006b10 <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	2002618c 	.word	0x2002618c

08006d20 <__sfputc_r>:
 8006d20:	6893      	ldr	r3, [r2, #8]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	b410      	push	{r4}
 8006d28:	6093      	str	r3, [r2, #8]
 8006d2a:	da08      	bge.n	8006d3e <__sfputc_r+0x1e>
 8006d2c:	6994      	ldr	r4, [r2, #24]
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	db01      	blt.n	8006d36 <__sfputc_r+0x16>
 8006d32:	290a      	cmp	r1, #10
 8006d34:	d103      	bne.n	8006d3e <__sfputc_r+0x1e>
 8006d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d3a:	f7ff bdda 	b.w	80068f2 <__swbuf_r>
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	1c58      	adds	r0, r3, #1
 8006d42:	6010      	str	r0, [r2, #0]
 8006d44:	7019      	strb	r1, [r3, #0]
 8006d46:	4608      	mov	r0, r1
 8006d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <__sfputs_r>:
 8006d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d50:	4606      	mov	r6, r0
 8006d52:	460f      	mov	r7, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	18d5      	adds	r5, r2, r3
 8006d58:	42ac      	cmp	r4, r5
 8006d5a:	d101      	bne.n	8006d60 <__sfputs_r+0x12>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e007      	b.n	8006d70 <__sfputs_r+0x22>
 8006d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d64:	463a      	mov	r2, r7
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffda 	bl	8006d20 <__sfputc_r>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d1f3      	bne.n	8006d58 <__sfputs_r+0xa>
 8006d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d74 <_vfiprintf_r>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	460d      	mov	r5, r1
 8006d7a:	b09d      	sub	sp, #116	@ 0x74
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	4698      	mov	r8, r3
 8006d80:	4606      	mov	r6, r0
 8006d82:	b118      	cbz	r0, 8006d8c <_vfiprintf_r+0x18>
 8006d84:	6a03      	ldr	r3, [r0, #32]
 8006d86:	b90b      	cbnz	r3, 8006d8c <_vfiprintf_r+0x18>
 8006d88:	f7ff fd28 	bl	80067dc <__sinit>
 8006d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d8e:	07d9      	lsls	r1, r3, #31
 8006d90:	d405      	bmi.n	8006d9e <_vfiprintf_r+0x2a>
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	059a      	lsls	r2, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_vfiprintf_r+0x2a>
 8006d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d9a:	f7ff feb8 	bl	8006b0e <__retarget_lock_acquire_recursive>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	071b      	lsls	r3, r3, #28
 8006da2:	d501      	bpl.n	8006da8 <_vfiprintf_r+0x34>
 8006da4:	692b      	ldr	r3, [r5, #16]
 8006da6:	b99b      	cbnz	r3, 8006dd0 <_vfiprintf_r+0x5c>
 8006da8:	4629      	mov	r1, r5
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7ff fde0 	bl	8006970 <__swsetup_r>
 8006db0:	b170      	cbz	r0, 8006dd0 <_vfiprintf_r+0x5c>
 8006db2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006db4:	07dc      	lsls	r4, r3, #31
 8006db6:	d504      	bpl.n	8006dc2 <_vfiprintf_r+0x4e>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	b01d      	add	sp, #116	@ 0x74
 8006dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	0598      	lsls	r0, r3, #22
 8006dc6:	d4f7      	bmi.n	8006db8 <_vfiprintf_r+0x44>
 8006dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dca:	f7ff fea1 	bl	8006b10 <__retarget_lock_release_recursive>
 8006dce:	e7f3      	b.n	8006db8 <_vfiprintf_r+0x44>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dde:	2330      	movs	r3, #48	@ 0x30
 8006de0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f90 <_vfiprintf_r+0x21c>
 8006de4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006de8:	f04f 0901 	mov.w	r9, #1
 8006dec:	4623      	mov	r3, r4
 8006dee:	469a      	mov	sl, r3
 8006df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df4:	b10a      	cbz	r2, 8006dfa <_vfiprintf_r+0x86>
 8006df6:	2a25      	cmp	r2, #37	@ 0x25
 8006df8:	d1f9      	bne.n	8006dee <_vfiprintf_r+0x7a>
 8006dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8006dfe:	d00b      	beq.n	8006e18 <_vfiprintf_r+0xa4>
 8006e00:	465b      	mov	r3, fp
 8006e02:	4622      	mov	r2, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff ffa1 	bl	8006d4e <__sfputs_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f000 80a7 	beq.w	8006f60 <_vfiprintf_r+0x1ec>
 8006e12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e14:	445a      	add	r2, fp
 8006e16:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e18:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 809f 	beq.w	8006f60 <_vfiprintf_r+0x1ec>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2c:	f10a 0a01 	add.w	sl, sl, #1
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e38:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e3a:	4654      	mov	r4, sl
 8006e3c:	2205      	movs	r2, #5
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	4853      	ldr	r0, [pc, #332]	@ (8006f90 <_vfiprintf_r+0x21c>)
 8006e44:	f7f9 f9d4 	bl	80001f0 <memchr>
 8006e48:	9a04      	ldr	r2, [sp, #16]
 8006e4a:	b9d8      	cbnz	r0, 8006e84 <_vfiprintf_r+0x110>
 8006e4c:	06d1      	lsls	r1, r2, #27
 8006e4e:	bf44      	itt	mi
 8006e50:	2320      	movmi	r3, #32
 8006e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e56:	0713      	lsls	r3, r2, #28
 8006e58:	bf44      	itt	mi
 8006e5a:	232b      	movmi	r3, #43	@ 0x2b
 8006e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e60:	f89a 3000 	ldrb.w	r3, [sl]
 8006e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e66:	d015      	beq.n	8006e94 <_vfiprintf_r+0x120>
 8006e68:	9a07      	ldr	r2, [sp, #28]
 8006e6a:	4654      	mov	r4, sl
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f04f 0c0a 	mov.w	ip, #10
 8006e72:	4621      	mov	r1, r4
 8006e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e78:	3b30      	subs	r3, #48	@ 0x30
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	d94b      	bls.n	8006f16 <_vfiprintf_r+0x1a2>
 8006e7e:	b1b0      	cbz	r0, 8006eae <_vfiprintf_r+0x13a>
 8006e80:	9207      	str	r2, [sp, #28]
 8006e82:	e014      	b.n	8006eae <_vfiprintf_r+0x13a>
 8006e84:	eba0 0308 	sub.w	r3, r0, r8
 8006e88:	fa09 f303 	lsl.w	r3, r9, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	46a2      	mov	sl, r4
 8006e92:	e7d2      	b.n	8006e3a <_vfiprintf_r+0xc6>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1d19      	adds	r1, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9103      	str	r1, [sp, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfbb      	ittet	lt
 8006ea0:	425b      	neglt	r3, r3
 8006ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea6:	9307      	strge	r3, [sp, #28]
 8006ea8:	9307      	strlt	r3, [sp, #28]
 8006eaa:	bfb8      	it	lt
 8006eac:	9204      	strlt	r2, [sp, #16]
 8006eae:	7823      	ldrb	r3, [r4, #0]
 8006eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eb2:	d10a      	bne.n	8006eca <_vfiprintf_r+0x156>
 8006eb4:	7863      	ldrb	r3, [r4, #1]
 8006eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eb8:	d132      	bne.n	8006f20 <_vfiprintf_r+0x1ac>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	9203      	str	r2, [sp, #12]
 8006ec2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ec6:	3402      	adds	r4, #2
 8006ec8:	9305      	str	r3, [sp, #20]
 8006eca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fa0 <_vfiprintf_r+0x22c>
 8006ece:	7821      	ldrb	r1, [r4, #0]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	f7f9 f98c 	bl	80001f0 <memchr>
 8006ed8:	b138      	cbz	r0, 8006eea <_vfiprintf_r+0x176>
 8006eda:	9b04      	ldr	r3, [sp, #16]
 8006edc:	eba0 000a 	sub.w	r0, r0, sl
 8006ee0:	2240      	movs	r2, #64	@ 0x40
 8006ee2:	4082      	lsls	r2, r0
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	3401      	adds	r4, #1
 8006ee8:	9304      	str	r3, [sp, #16]
 8006eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eee:	4829      	ldr	r0, [pc, #164]	@ (8006f94 <_vfiprintf_r+0x220>)
 8006ef0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	f7f9 f97b 	bl	80001f0 <memchr>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d03f      	beq.n	8006f7e <_vfiprintf_r+0x20a>
 8006efe:	4b26      	ldr	r3, [pc, #152]	@ (8006f98 <_vfiprintf_r+0x224>)
 8006f00:	bb1b      	cbnz	r3, 8006f4a <_vfiprintf_r+0x1d6>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	3307      	adds	r3, #7
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f10:	443b      	add	r3, r7
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f14:	e76a      	b.n	8006dec <_vfiprintf_r+0x78>
 8006f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7a8      	b.n	8006e72 <_vfiprintf_r+0xfe>
 8006f20:	2300      	movs	r3, #0
 8006f22:	3401      	adds	r4, #1
 8006f24:	9305      	str	r3, [sp, #20]
 8006f26:	4619      	mov	r1, r3
 8006f28:	f04f 0c0a 	mov.w	ip, #10
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f32:	3a30      	subs	r2, #48	@ 0x30
 8006f34:	2a09      	cmp	r2, #9
 8006f36:	d903      	bls.n	8006f40 <_vfiprintf_r+0x1cc>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0c6      	beq.n	8006eca <_vfiprintf_r+0x156>
 8006f3c:	9105      	str	r1, [sp, #20]
 8006f3e:	e7c4      	b.n	8006eca <_vfiprintf_r+0x156>
 8006f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f44:	4604      	mov	r4, r0
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7f0      	b.n	8006f2c <_vfiprintf_r+0x1b8>
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <_vfiprintf_r+0x228>)
 8006f52:	a904      	add	r1, sp, #16
 8006f54:	4630      	mov	r0, r6
 8006f56:	f3af 8000 	nop.w
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	1c78      	adds	r0, r7, #1
 8006f5e:	d1d6      	bne.n	8006f0e <_vfiprintf_r+0x19a>
 8006f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f62:	07d9      	lsls	r1, r3, #31
 8006f64:	d405      	bmi.n	8006f72 <_vfiprintf_r+0x1fe>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	059a      	lsls	r2, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_vfiprintf_r+0x1fe>
 8006f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f6e:	f7ff fdcf 	bl	8006b10 <__retarget_lock_release_recursive>
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	065b      	lsls	r3, r3, #25
 8006f76:	f53f af1f 	bmi.w	8006db8 <_vfiprintf_r+0x44>
 8006f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f7c:	e71e      	b.n	8006dbc <_vfiprintf_r+0x48>
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	462a      	mov	r2, r5
 8006f84:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <_vfiprintf_r+0x228>)
 8006f86:	a904      	add	r1, sp, #16
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f000 f879 	bl	8007080 <_printf_i>
 8006f8e:	e7e4      	b.n	8006f5a <_vfiprintf_r+0x1e6>
 8006f90:	080087a0 	.word	0x080087a0
 8006f94:	080087aa 	.word	0x080087aa
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	08006d4f 	.word	0x08006d4f
 8006fa0:	080087a6 	.word	0x080087a6

08006fa4 <_printf_common>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	4616      	mov	r6, r2
 8006faa:	4698      	mov	r8, r3
 8006fac:	688a      	ldr	r2, [r1, #8]
 8006fae:	690b      	ldr	r3, [r1, #16]
 8006fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bfb8      	it	lt
 8006fb8:	4613      	movlt	r3, r2
 8006fba:	6033      	str	r3, [r6, #0]
 8006fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b10a      	cbz	r2, 8006fca <_printf_common+0x26>
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	6033      	str	r3, [r6, #0]
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	0699      	lsls	r1, r3, #26
 8006fce:	bf42      	ittt	mi
 8006fd0:	6833      	ldrmi	r3, [r6, #0]
 8006fd2:	3302      	addmi	r3, #2
 8006fd4:	6033      	strmi	r3, [r6, #0]
 8006fd6:	6825      	ldr	r5, [r4, #0]
 8006fd8:	f015 0506 	ands.w	r5, r5, #6
 8006fdc:	d106      	bne.n	8006fec <_printf_common+0x48>
 8006fde:	f104 0a19 	add.w	sl, r4, #25
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	6832      	ldr	r2, [r6, #0]
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dc26      	bgt.n	800703a <_printf_common+0x96>
 8006fec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ff0:	6822      	ldr	r2, [r4, #0]
 8006ff2:	3b00      	subs	r3, #0
 8006ff4:	bf18      	it	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	0692      	lsls	r2, r2, #26
 8006ffa:	d42b      	bmi.n	8007054 <_printf_common+0xb0>
 8006ffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007000:	4641      	mov	r1, r8
 8007002:	4638      	mov	r0, r7
 8007004:	47c8      	blx	r9
 8007006:	3001      	adds	r0, #1
 8007008:	d01e      	beq.n	8007048 <_printf_common+0xa4>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	6922      	ldr	r2, [r4, #16]
 800700e:	f003 0306 	and.w	r3, r3, #6
 8007012:	2b04      	cmp	r3, #4
 8007014:	bf02      	ittt	eq
 8007016:	68e5      	ldreq	r5, [r4, #12]
 8007018:	6833      	ldreq	r3, [r6, #0]
 800701a:	1aed      	subeq	r5, r5, r3
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	bf0c      	ite	eq
 8007020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007024:	2500      	movne	r5, #0
 8007026:	4293      	cmp	r3, r2
 8007028:	bfc4      	itt	gt
 800702a:	1a9b      	subgt	r3, r3, r2
 800702c:	18ed      	addgt	r5, r5, r3
 800702e:	2600      	movs	r6, #0
 8007030:	341a      	adds	r4, #26
 8007032:	42b5      	cmp	r5, r6
 8007034:	d11a      	bne.n	800706c <_printf_common+0xc8>
 8007036:	2000      	movs	r0, #0
 8007038:	e008      	b.n	800704c <_printf_common+0xa8>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4641      	mov	r1, r8
 8007040:	4638      	mov	r0, r7
 8007042:	47c8      	blx	r9
 8007044:	3001      	adds	r0, #1
 8007046:	d103      	bne.n	8007050 <_printf_common+0xac>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007050:	3501      	adds	r5, #1
 8007052:	e7c6      	b.n	8006fe2 <_printf_common+0x3e>
 8007054:	18e1      	adds	r1, r4, r3
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	2030      	movs	r0, #48	@ 0x30
 800705a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800705e:	4422      	add	r2, r4
 8007060:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007064:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007068:	3302      	adds	r3, #2
 800706a:	e7c7      	b.n	8006ffc <_printf_common+0x58>
 800706c:	2301      	movs	r3, #1
 800706e:	4622      	mov	r2, r4
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d0e6      	beq.n	8007048 <_printf_common+0xa4>
 800707a:	3601      	adds	r6, #1
 800707c:	e7d9      	b.n	8007032 <_printf_common+0x8e>
	...

08007080 <_printf_i>:
 8007080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	7e0f      	ldrb	r7, [r1, #24]
 8007086:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007088:	2f78      	cmp	r7, #120	@ 0x78
 800708a:	4691      	mov	r9, r2
 800708c:	4680      	mov	r8, r0
 800708e:	460c      	mov	r4, r1
 8007090:	469a      	mov	sl, r3
 8007092:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007096:	d807      	bhi.n	80070a8 <_printf_i+0x28>
 8007098:	2f62      	cmp	r7, #98	@ 0x62
 800709a:	d80a      	bhi.n	80070b2 <_printf_i+0x32>
 800709c:	2f00      	cmp	r7, #0
 800709e:	f000 80d2 	beq.w	8007246 <_printf_i+0x1c6>
 80070a2:	2f58      	cmp	r7, #88	@ 0x58
 80070a4:	f000 80b9 	beq.w	800721a <_printf_i+0x19a>
 80070a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070b0:	e03a      	b.n	8007128 <_printf_i+0xa8>
 80070b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070b6:	2b15      	cmp	r3, #21
 80070b8:	d8f6      	bhi.n	80070a8 <_printf_i+0x28>
 80070ba:	a101      	add	r1, pc, #4	@ (adr r1, 80070c0 <_printf_i+0x40>)
 80070bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c0:	08007119 	.word	0x08007119
 80070c4:	0800712d 	.word	0x0800712d
 80070c8:	080070a9 	.word	0x080070a9
 80070cc:	080070a9 	.word	0x080070a9
 80070d0:	080070a9 	.word	0x080070a9
 80070d4:	080070a9 	.word	0x080070a9
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	080070a9 	.word	0x080070a9
 80070e0:	080070a9 	.word	0x080070a9
 80070e4:	080070a9 	.word	0x080070a9
 80070e8:	080070a9 	.word	0x080070a9
 80070ec:	0800722d 	.word	0x0800722d
 80070f0:	08007157 	.word	0x08007157
 80070f4:	080071e7 	.word	0x080071e7
 80070f8:	080070a9 	.word	0x080070a9
 80070fc:	080070a9 	.word	0x080070a9
 8007100:	0800724f 	.word	0x0800724f
 8007104:	080070a9 	.word	0x080070a9
 8007108:	08007157 	.word	0x08007157
 800710c:	080070a9 	.word	0x080070a9
 8007110:	080070a9 	.word	0x080070a9
 8007114:	080071ef 	.word	0x080071ef
 8007118:	6833      	ldr	r3, [r6, #0]
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6032      	str	r2, [r6, #0]
 8007120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007124:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007128:	2301      	movs	r3, #1
 800712a:	e09d      	b.n	8007268 <_printf_i+0x1e8>
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	6820      	ldr	r0, [r4, #0]
 8007130:	1d19      	adds	r1, r3, #4
 8007132:	6031      	str	r1, [r6, #0]
 8007134:	0606      	lsls	r6, r0, #24
 8007136:	d501      	bpl.n	800713c <_printf_i+0xbc>
 8007138:	681d      	ldr	r5, [r3, #0]
 800713a:	e003      	b.n	8007144 <_printf_i+0xc4>
 800713c:	0645      	lsls	r5, r0, #25
 800713e:	d5fb      	bpl.n	8007138 <_printf_i+0xb8>
 8007140:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007144:	2d00      	cmp	r5, #0
 8007146:	da03      	bge.n	8007150 <_printf_i+0xd0>
 8007148:	232d      	movs	r3, #45	@ 0x2d
 800714a:	426d      	negs	r5, r5
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007150:	4859      	ldr	r0, [pc, #356]	@ (80072b8 <_printf_i+0x238>)
 8007152:	230a      	movs	r3, #10
 8007154:	e011      	b.n	800717a <_printf_i+0xfa>
 8007156:	6821      	ldr	r1, [r4, #0]
 8007158:	6833      	ldr	r3, [r6, #0]
 800715a:	0608      	lsls	r0, r1, #24
 800715c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007160:	d402      	bmi.n	8007168 <_printf_i+0xe8>
 8007162:	0649      	lsls	r1, r1, #25
 8007164:	bf48      	it	mi
 8007166:	b2ad      	uxthmi	r5, r5
 8007168:	2f6f      	cmp	r7, #111	@ 0x6f
 800716a:	4853      	ldr	r0, [pc, #332]	@ (80072b8 <_printf_i+0x238>)
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	bf14      	ite	ne
 8007170:	230a      	movne	r3, #10
 8007172:	2308      	moveq	r3, #8
 8007174:	2100      	movs	r1, #0
 8007176:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800717a:	6866      	ldr	r6, [r4, #4]
 800717c:	60a6      	str	r6, [r4, #8]
 800717e:	2e00      	cmp	r6, #0
 8007180:	bfa2      	ittt	ge
 8007182:	6821      	ldrge	r1, [r4, #0]
 8007184:	f021 0104 	bicge.w	r1, r1, #4
 8007188:	6021      	strge	r1, [r4, #0]
 800718a:	b90d      	cbnz	r5, 8007190 <_printf_i+0x110>
 800718c:	2e00      	cmp	r6, #0
 800718e:	d04b      	beq.n	8007228 <_printf_i+0x1a8>
 8007190:	4616      	mov	r6, r2
 8007192:	fbb5 f1f3 	udiv	r1, r5, r3
 8007196:	fb03 5711 	mls	r7, r3, r1, r5
 800719a:	5dc7      	ldrb	r7, [r0, r7]
 800719c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a0:	462f      	mov	r7, r5
 80071a2:	42bb      	cmp	r3, r7
 80071a4:	460d      	mov	r5, r1
 80071a6:	d9f4      	bls.n	8007192 <_printf_i+0x112>
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d10b      	bne.n	80071c4 <_printf_i+0x144>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	07df      	lsls	r7, r3, #31
 80071b0:	d508      	bpl.n	80071c4 <_printf_i+0x144>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	6861      	ldr	r1, [r4, #4]
 80071b6:	4299      	cmp	r1, r3
 80071b8:	bfde      	ittt	le
 80071ba:	2330      	movle	r3, #48	@ 0x30
 80071bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071c4:	1b92      	subs	r2, r2, r6
 80071c6:	6122      	str	r2, [r4, #16]
 80071c8:	f8cd a000 	str.w	sl, [sp]
 80071cc:	464b      	mov	r3, r9
 80071ce:	aa03      	add	r2, sp, #12
 80071d0:	4621      	mov	r1, r4
 80071d2:	4640      	mov	r0, r8
 80071d4:	f7ff fee6 	bl	8006fa4 <_printf_common>
 80071d8:	3001      	adds	r0, #1
 80071da:	d14a      	bne.n	8007272 <_printf_i+0x1f2>
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	b004      	add	sp, #16
 80071e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	4833      	ldr	r0, [pc, #204]	@ (80072bc <_printf_i+0x23c>)
 80071f0:	2778      	movs	r7, #120	@ 0x78
 80071f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	6831      	ldr	r1, [r6, #0]
 80071fa:	061f      	lsls	r7, r3, #24
 80071fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007200:	d402      	bmi.n	8007208 <_printf_i+0x188>
 8007202:	065f      	lsls	r7, r3, #25
 8007204:	bf48      	it	mi
 8007206:	b2ad      	uxthmi	r5, r5
 8007208:	6031      	str	r1, [r6, #0]
 800720a:	07d9      	lsls	r1, r3, #31
 800720c:	bf44      	itt	mi
 800720e:	f043 0320 	orrmi.w	r3, r3, #32
 8007212:	6023      	strmi	r3, [r4, #0]
 8007214:	b11d      	cbz	r5, 800721e <_printf_i+0x19e>
 8007216:	2310      	movs	r3, #16
 8007218:	e7ac      	b.n	8007174 <_printf_i+0xf4>
 800721a:	4827      	ldr	r0, [pc, #156]	@ (80072b8 <_printf_i+0x238>)
 800721c:	e7e9      	b.n	80071f2 <_printf_i+0x172>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f023 0320 	bic.w	r3, r3, #32
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	e7f6      	b.n	8007216 <_printf_i+0x196>
 8007228:	4616      	mov	r6, r2
 800722a:	e7bd      	b.n	80071a8 <_printf_i+0x128>
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	6961      	ldr	r1, [r4, #20]
 8007232:	1d18      	adds	r0, r3, #4
 8007234:	6030      	str	r0, [r6, #0]
 8007236:	062e      	lsls	r6, r5, #24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	d501      	bpl.n	8007240 <_printf_i+0x1c0>
 800723c:	6019      	str	r1, [r3, #0]
 800723e:	e002      	b.n	8007246 <_printf_i+0x1c6>
 8007240:	0668      	lsls	r0, r5, #25
 8007242:	d5fb      	bpl.n	800723c <_printf_i+0x1bc>
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	2300      	movs	r3, #0
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	4616      	mov	r6, r2
 800724c:	e7bc      	b.n	80071c8 <_printf_i+0x148>
 800724e:	6833      	ldr	r3, [r6, #0]
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	6032      	str	r2, [r6, #0]
 8007254:	681e      	ldr	r6, [r3, #0]
 8007256:	6862      	ldr	r2, [r4, #4]
 8007258:	2100      	movs	r1, #0
 800725a:	4630      	mov	r0, r6
 800725c:	f7f8 ffc8 	bl	80001f0 <memchr>
 8007260:	b108      	cbz	r0, 8007266 <_printf_i+0x1e6>
 8007262:	1b80      	subs	r0, r0, r6
 8007264:	6060      	str	r0, [r4, #4]
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	2300      	movs	r3, #0
 800726c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007270:	e7aa      	b.n	80071c8 <_printf_i+0x148>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	4632      	mov	r2, r6
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d0ad      	beq.n	80071dc <_printf_i+0x15c>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	079b      	lsls	r3, r3, #30
 8007284:	d413      	bmi.n	80072ae <_printf_i+0x22e>
 8007286:	68e0      	ldr	r0, [r4, #12]
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	4298      	cmp	r0, r3
 800728c:	bfb8      	it	lt
 800728e:	4618      	movlt	r0, r3
 8007290:	e7a6      	b.n	80071e0 <_printf_i+0x160>
 8007292:	2301      	movs	r3, #1
 8007294:	4632      	mov	r2, r6
 8007296:	4649      	mov	r1, r9
 8007298:	4640      	mov	r0, r8
 800729a:	47d0      	blx	sl
 800729c:	3001      	adds	r0, #1
 800729e:	d09d      	beq.n	80071dc <_printf_i+0x15c>
 80072a0:	3501      	adds	r5, #1
 80072a2:	68e3      	ldr	r3, [r4, #12]
 80072a4:	9903      	ldr	r1, [sp, #12]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	42ab      	cmp	r3, r5
 80072aa:	dcf2      	bgt.n	8007292 <_printf_i+0x212>
 80072ac:	e7eb      	b.n	8007286 <_printf_i+0x206>
 80072ae:	2500      	movs	r5, #0
 80072b0:	f104 0619 	add.w	r6, r4, #25
 80072b4:	e7f5      	b.n	80072a2 <_printf_i+0x222>
 80072b6:	bf00      	nop
 80072b8:	080087b1 	.word	0x080087b1
 80072bc:	080087c2 	.word	0x080087c2

080072c0 <__sflush_r>:
 80072c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	0716      	lsls	r6, r2, #28
 80072ca:	4605      	mov	r5, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	d454      	bmi.n	800737a <__sflush_r+0xba>
 80072d0:	684b      	ldr	r3, [r1, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dc02      	bgt.n	80072dc <__sflush_r+0x1c>
 80072d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd48      	ble.n	800736e <__sflush_r+0xae>
 80072dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d045      	beq.n	800736e <__sflush_r+0xae>
 80072e2:	2300      	movs	r3, #0
 80072e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072e8:	682f      	ldr	r7, [r5, #0]
 80072ea:	6a21      	ldr	r1, [r4, #32]
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	d030      	beq.n	8007352 <__sflush_r+0x92>
 80072f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	0759      	lsls	r1, r3, #29
 80072f6:	d505      	bpl.n	8007304 <__sflush_r+0x44>
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072fe:	b10b      	cbz	r3, 8007304 <__sflush_r+0x44>
 8007300:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007308:	6a21      	ldr	r1, [r4, #32]
 800730a:	4628      	mov	r0, r5
 800730c:	47b0      	blx	r6
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	d106      	bne.n	8007322 <__sflush_r+0x62>
 8007314:	6829      	ldr	r1, [r5, #0]
 8007316:	291d      	cmp	r1, #29
 8007318:	d82b      	bhi.n	8007372 <__sflush_r+0xb2>
 800731a:	4a2a      	ldr	r2, [pc, #168]	@ (80073c4 <__sflush_r+0x104>)
 800731c:	410a      	asrs	r2, r1
 800731e:	07d6      	lsls	r6, r2, #31
 8007320:	d427      	bmi.n	8007372 <__sflush_r+0xb2>
 8007322:	2200      	movs	r2, #0
 8007324:	6062      	str	r2, [r4, #4]
 8007326:	04d9      	lsls	r1, r3, #19
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	6022      	str	r2, [r4, #0]
 800732c:	d504      	bpl.n	8007338 <__sflush_r+0x78>
 800732e:	1c42      	adds	r2, r0, #1
 8007330:	d101      	bne.n	8007336 <__sflush_r+0x76>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b903      	cbnz	r3, 8007338 <__sflush_r+0x78>
 8007336:	6560      	str	r0, [r4, #84]	@ 0x54
 8007338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733a:	602f      	str	r7, [r5, #0]
 800733c:	b1b9      	cbz	r1, 800736e <__sflush_r+0xae>
 800733e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007342:	4299      	cmp	r1, r3
 8007344:	d002      	beq.n	800734c <__sflush_r+0x8c>
 8007346:	4628      	mov	r0, r5
 8007348:	f7ff fbf2 	bl	8006b30 <_free_r>
 800734c:	2300      	movs	r3, #0
 800734e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007350:	e00d      	b.n	800736e <__sflush_r+0xae>
 8007352:	2301      	movs	r3, #1
 8007354:	4628      	mov	r0, r5
 8007356:	47b0      	blx	r6
 8007358:	4602      	mov	r2, r0
 800735a:	1c50      	adds	r0, r2, #1
 800735c:	d1c9      	bne.n	80072f2 <__sflush_r+0x32>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0c6      	beq.n	80072f2 <__sflush_r+0x32>
 8007364:	2b1d      	cmp	r3, #29
 8007366:	d001      	beq.n	800736c <__sflush_r+0xac>
 8007368:	2b16      	cmp	r3, #22
 800736a:	d11e      	bne.n	80073aa <__sflush_r+0xea>
 800736c:	602f      	str	r7, [r5, #0]
 800736e:	2000      	movs	r0, #0
 8007370:	e022      	b.n	80073b8 <__sflush_r+0xf8>
 8007372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007376:	b21b      	sxth	r3, r3
 8007378:	e01b      	b.n	80073b2 <__sflush_r+0xf2>
 800737a:	690f      	ldr	r7, [r1, #16]
 800737c:	2f00      	cmp	r7, #0
 800737e:	d0f6      	beq.n	800736e <__sflush_r+0xae>
 8007380:	0793      	lsls	r3, r2, #30
 8007382:	680e      	ldr	r6, [r1, #0]
 8007384:	bf08      	it	eq
 8007386:	694b      	ldreq	r3, [r1, #20]
 8007388:	600f      	str	r7, [r1, #0]
 800738a:	bf18      	it	ne
 800738c:	2300      	movne	r3, #0
 800738e:	eba6 0807 	sub.w	r8, r6, r7
 8007392:	608b      	str	r3, [r1, #8]
 8007394:	f1b8 0f00 	cmp.w	r8, #0
 8007398:	dde9      	ble.n	800736e <__sflush_r+0xae>
 800739a:	6a21      	ldr	r1, [r4, #32]
 800739c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800739e:	4643      	mov	r3, r8
 80073a0:	463a      	mov	r2, r7
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b0      	blx	r6
 80073a6:	2800      	cmp	r0, #0
 80073a8:	dc08      	bgt.n	80073bc <__sflush_r+0xfc>
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073bc:	4407      	add	r7, r0
 80073be:	eba8 0800 	sub.w	r8, r8, r0
 80073c2:	e7e7      	b.n	8007394 <__sflush_r+0xd4>
 80073c4:	dfbffffe 	.word	0xdfbffffe

080073c8 <_fflush_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b913      	cbnz	r3, 80073d8 <_fflush_r+0x10>
 80073d2:	2500      	movs	r5, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	b118      	cbz	r0, 80073e2 <_fflush_r+0x1a>
 80073da:	6a03      	ldr	r3, [r0, #32]
 80073dc:	b90b      	cbnz	r3, 80073e2 <_fflush_r+0x1a>
 80073de:	f7ff f9fd 	bl	80067dc <__sinit>
 80073e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f3      	beq.n	80073d2 <_fflush_r+0xa>
 80073ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073ec:	07d0      	lsls	r0, r2, #31
 80073ee:	d404      	bmi.n	80073fa <_fflush_r+0x32>
 80073f0:	0599      	lsls	r1, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_fflush_r+0x32>
 80073f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073f6:	f7ff fb8a 	bl	8006b0e <__retarget_lock_acquire_recursive>
 80073fa:	4628      	mov	r0, r5
 80073fc:	4621      	mov	r1, r4
 80073fe:	f7ff ff5f 	bl	80072c0 <__sflush_r>
 8007402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007404:	07da      	lsls	r2, r3, #31
 8007406:	4605      	mov	r5, r0
 8007408:	d4e4      	bmi.n	80073d4 <_fflush_r+0xc>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	059b      	lsls	r3, r3, #22
 800740e:	d4e1      	bmi.n	80073d4 <_fflush_r+0xc>
 8007410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007412:	f7ff fb7d 	bl	8006b10 <__retarget_lock_release_recursive>
 8007416:	e7dd      	b.n	80073d4 <_fflush_r+0xc>

08007418 <__swhatbuf_r>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	460c      	mov	r4, r1
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	2900      	cmp	r1, #0
 8007422:	b096      	sub	sp, #88	@ 0x58
 8007424:	4615      	mov	r5, r2
 8007426:	461e      	mov	r6, r3
 8007428:	da0d      	bge.n	8007446 <__swhatbuf_r+0x2e>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	bf14      	ite	ne
 8007436:	2340      	movne	r3, #64	@ 0x40
 8007438:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800743c:	2000      	movs	r0, #0
 800743e:	6031      	str	r1, [r6, #0]
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	b016      	add	sp, #88	@ 0x58
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	466a      	mov	r2, sp
 8007448:	f000 f848 	bl	80074dc <_fstat_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	dbec      	blt.n	800742a <__swhatbuf_r+0x12>
 8007450:	9901      	ldr	r1, [sp, #4]
 8007452:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007456:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800745a:	4259      	negs	r1, r3
 800745c:	4159      	adcs	r1, r3
 800745e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007462:	e7eb      	b.n	800743c <__swhatbuf_r+0x24>

08007464 <__smakebuf_r>:
 8007464:	898b      	ldrh	r3, [r1, #12]
 8007466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007468:	079d      	lsls	r5, r3, #30
 800746a:	4606      	mov	r6, r0
 800746c:	460c      	mov	r4, r1
 800746e:	d507      	bpl.n	8007480 <__smakebuf_r+0x1c>
 8007470:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	2301      	movs	r3, #1
 800747a:	6163      	str	r3, [r4, #20]
 800747c:	b003      	add	sp, #12
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	ab01      	add	r3, sp, #4
 8007482:	466a      	mov	r2, sp
 8007484:	f7ff ffc8 	bl	8007418 <__swhatbuf_r>
 8007488:	9f00      	ldr	r7, [sp, #0]
 800748a:	4605      	mov	r5, r0
 800748c:	4639      	mov	r1, r7
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff fbba 	bl	8006c08 <_malloc_r>
 8007494:	b948      	cbnz	r0, 80074aa <__smakebuf_r+0x46>
 8007496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749a:	059a      	lsls	r2, r3, #22
 800749c:	d4ee      	bmi.n	800747c <__smakebuf_r+0x18>
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	f043 0302 	orr.w	r3, r3, #2
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	e7e2      	b.n	8007470 <__smakebuf_r+0xc>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	6020      	str	r0, [r4, #0]
 80074ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074ba:	b15b      	cbz	r3, 80074d4 <__smakebuf_r+0x70>
 80074bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f81d 	bl	8007500 <_isatty_r>
 80074c6:	b128      	cbz	r0, 80074d4 <__smakebuf_r+0x70>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	431d      	orrs	r5, r3
 80074d8:	81a5      	strh	r5, [r4, #12]
 80074da:	e7cf      	b.n	800747c <__smakebuf_r+0x18>

080074dc <_fstat_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	@ (80074fc <_fstat_r+0x20>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	f7fb fe13 	bl	8003114 <_fstat>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d102      	bne.n	80074f8 <_fstat_r+0x1c>
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	b103      	cbz	r3, 80074f8 <_fstat_r+0x1c>
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	bf00      	nop
 80074fc:	20026188 	.word	0x20026188

08007500 <_isatty_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d06      	ldr	r5, [pc, #24]	@ (800751c <_isatty_r+0x1c>)
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	f7fb fe12 	bl	8003134 <_isatty>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_isatty_r+0x1a>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b103      	cbz	r3, 800751a <_isatty_r+0x1a>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20026188 	.word	0x20026188

08007520 <_sbrk_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d06      	ldr	r5, [pc, #24]	@ (800753c <_sbrk_r+0x1c>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	f7fb fe1a 	bl	8003164 <_sbrk>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_sbrk_r+0x1a>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_sbrk_r+0x1a>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	20026188 	.word	0x20026188

08007540 <_init>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	bf00      	nop
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr

0800754c <_fini>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr
